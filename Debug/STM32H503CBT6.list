
STM32H503CBT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcb4  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  0800bf10  0800bf10  0000cf10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c380  0800c380  0000e1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c380  0800c380  0000d380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c388  0800c388  0000e1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c388  0800c388  0000d388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c38c  0800c38c  0000d38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800c390  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  200001ec  0800c57c  0000e1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  0800c57c  0000e670  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d29  00000000  00000000  0000e222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002608  00000000  00000000  00022f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  00025558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c9d  00000000  00000000  000265a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003895  00000000  00000000  00027245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c2a  00000000  00000000  0002aada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3ce9  00000000  00000000  00040704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001243ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ad0  00000000  00000000  00124430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00129f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	200001ec 	.word	0x200001ec
 8000274:	00000000 	.word	0x00000000
 8000278:	0800bef4 	.word	0x0800bef4

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	200001f0 	.word	0x200001f0
 8000294:	0800bef4 	.word	0x0800bef4

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_drsub>:
 80002a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	e002      	b.n	80002b4 <__adddf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_dsub>:
 80002b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b4 <__adddf3>:
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002be:	ea94 0f05 	teq	r4, r5
 80002c2:	bf08      	it	eq
 80002c4:	ea90 0f02 	teqeq	r0, r2
 80002c8:	bf1f      	itttt	ne
 80002ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002da:	f000 80e2 	beq.w	80004a2 <__adddf3+0x1ee>
 80002de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e6:	bfb8      	it	lt
 80002e8:	426d      	neglt	r5, r5
 80002ea:	dd0c      	ble.n	8000306 <__adddf3+0x52>
 80002ec:	442c      	add	r4, r5
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	ea82 0000 	eor.w	r0, r2, r0
 80002fa:	ea83 0101 	eor.w	r1, r3, r1
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	2d36      	cmp	r5, #54	@ 0x36
 8000308:	bf88      	it	hi
 800030a:	bd30      	pophi	{r4, r5, pc}
 800030c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000310:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000314:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x70>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800032c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x84>
 8000332:	4252      	negs	r2, r2
 8000334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000338:	ea94 0f05 	teq	r4, r5
 800033c:	f000 80a7 	beq.w	800048e <__adddf3+0x1da>
 8000340:	f1a4 0401 	sub.w	r4, r4, #1
 8000344:	f1d5 0e20 	rsbs	lr, r5, #32
 8000348:	db0d      	blt.n	8000366 <__adddf3+0xb2>
 800034a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034e:	fa22 f205 	lsr.w	r2, r2, r5
 8000352:	1880      	adds	r0, r0, r2
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	fa03 f20e 	lsl.w	r2, r3, lr
 800035c:	1880      	adds	r0, r0, r2
 800035e:	fa43 f305 	asr.w	r3, r3, r5
 8000362:	4159      	adcs	r1, r3
 8000364:	e00e      	b.n	8000384 <__adddf3+0xd0>
 8000366:	f1a5 0520 	sub.w	r5, r5, #32
 800036a:	f10e 0e20 	add.w	lr, lr, #32
 800036e:	2a01      	cmp	r2, #1
 8000370:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000374:	bf28      	it	cs
 8000376:	f04c 0c02 	orrcs.w	ip, ip, #2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	18c0      	adds	r0, r0, r3
 8000380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000384:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000388:	d507      	bpl.n	800039a <__adddf3+0xe6>
 800038a:	f04f 0e00 	mov.w	lr, #0
 800038e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000392:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000396:	eb6e 0101 	sbc.w	r1, lr, r1
 800039a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039e:	d31b      	bcc.n	80003d8 <__adddf3+0x124>
 80003a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a4:	d30c      	bcc.n	80003c0 <__adddf3+0x10c>
 80003a6:	0849      	lsrs	r1, r1, #1
 80003a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b0:	f104 0401 	add.w	r4, r4, #1
 80003b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003bc:	f080 809a 	bcs.w	80004f4 <__adddf3+0x240>
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c4:	bf08      	it	eq
 80003c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ca:	f150 0000 	adcs.w	r0, r0, #0
 80003ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003d2:	ea41 0105 	orr.w	r1, r1, r5
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003dc:	4140      	adcs	r0, r0
 80003de:	eb41 0101 	adc.w	r1, r1, r1
 80003e2:	3c01      	subs	r4, #1
 80003e4:	bf28      	it	cs
 80003e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ea:	d2e9      	bcs.n	80003c0 <__adddf3+0x10c>
 80003ec:	f091 0f00 	teq	r1, #0
 80003f0:	bf04      	itt	eq
 80003f2:	4601      	moveq	r1, r0
 80003f4:	2000      	moveq	r0, #0
 80003f6:	fab1 f381 	clz	r3, r1
 80003fa:	bf08      	it	eq
 80003fc:	3320      	addeq	r3, #32
 80003fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000402:	f1b3 0220 	subs.w	r2, r3, #32
 8000406:	da0c      	bge.n	8000422 <__adddf3+0x16e>
 8000408:	320c      	adds	r2, #12
 800040a:	dd08      	ble.n	800041e <__adddf3+0x16a>
 800040c:	f102 0c14 	add.w	ip, r2, #20
 8000410:	f1c2 020c 	rsb	r2, r2, #12
 8000414:	fa01 f00c 	lsl.w	r0, r1, ip
 8000418:	fa21 f102 	lsr.w	r1, r1, r2
 800041c:	e00c      	b.n	8000438 <__adddf3+0x184>
 800041e:	f102 0214 	add.w	r2, r2, #20
 8000422:	bfd8      	it	le
 8000424:	f1c2 0c20 	rsble	ip, r2, #32
 8000428:	fa01 f102 	lsl.w	r1, r1, r2
 800042c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000430:	bfdc      	itt	le
 8000432:	ea41 010c 	orrle.w	r1, r1, ip
 8000436:	4090      	lslle	r0, r2
 8000438:	1ae4      	subs	r4, r4, r3
 800043a:	bfa2      	ittt	ge
 800043c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000440:	4329      	orrge	r1, r5
 8000442:	bd30      	popge	{r4, r5, pc}
 8000444:	ea6f 0404 	mvn.w	r4, r4
 8000448:	3c1f      	subs	r4, #31
 800044a:	da1c      	bge.n	8000486 <__adddf3+0x1d2>
 800044c:	340c      	adds	r4, #12
 800044e:	dc0e      	bgt.n	800046e <__adddf3+0x1ba>
 8000450:	f104 0414 	add.w	r4, r4, #20
 8000454:	f1c4 0220 	rsb	r2, r4, #32
 8000458:	fa20 f004 	lsr.w	r0, r0, r4
 800045c:	fa01 f302 	lsl.w	r3, r1, r2
 8000460:	ea40 0003 	orr.w	r0, r0, r3
 8000464:	fa21 f304 	lsr.w	r3, r1, r4
 8000468:	ea45 0103 	orr.w	r1, r5, r3
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f1c4 040c 	rsb	r4, r4, #12
 8000472:	f1c4 0220 	rsb	r2, r4, #32
 8000476:	fa20 f002 	lsr.w	r0, r0, r2
 800047a:	fa01 f304 	lsl.w	r3, r1, r4
 800047e:	ea40 0003 	orr.w	r0, r0, r3
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	fa21 f004 	lsr.w	r0, r1, r4
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f094 0f00 	teq	r4, #0
 8000492:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000496:	bf06      	itte	eq
 8000498:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800049c:	3401      	addeq	r4, #1
 800049e:	3d01      	subne	r5, #1
 80004a0:	e74e      	b.n	8000340 <__adddf3+0x8c>
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf18      	it	ne
 80004a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ac:	d029      	beq.n	8000502 <__adddf3+0x24e>
 80004ae:	ea94 0f05 	teq	r4, r5
 80004b2:	bf08      	it	eq
 80004b4:	ea90 0f02 	teqeq	r0, r2
 80004b8:	d005      	beq.n	80004c6 <__adddf3+0x212>
 80004ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80004be:	bf04      	itt	eq
 80004c0:	4619      	moveq	r1, r3
 80004c2:	4610      	moveq	r0, r2
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	ea91 0f03 	teq	r1, r3
 80004ca:	bf1e      	ittt	ne
 80004cc:	2100      	movne	r1, #0
 80004ce:	2000      	movne	r0, #0
 80004d0:	bd30      	popne	{r4, r5, pc}
 80004d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d6:	d105      	bne.n	80004e4 <__adddf3+0x230>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	4149      	adcs	r1, r1
 80004dc:	bf28      	it	cs
 80004de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e8:	bf3c      	itt	cc
 80004ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ee:	bd30      	popcc	{r4, r5, pc}
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004fc:	f04f 0000 	mov.w	r0, #0
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf1a      	itte	ne
 8000508:	4619      	movne	r1, r3
 800050a:	4610      	movne	r0, r2
 800050c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000510:	bf1c      	itt	ne
 8000512:	460b      	movne	r3, r1
 8000514:	4602      	movne	r2, r0
 8000516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800051a:	bf06      	itte	eq
 800051c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000520:	ea91 0f03 	teqeq	r1, r3
 8000524:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	bf00      	nop

0800052c <__aeabi_ui2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f04f 0500 	mov.w	r5, #0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e750      	b.n	80003ec <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_i2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000564:	bf48      	it	mi
 8000566:	4240      	negmi	r0, r0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e73e      	b.n	80003ec <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_f2d>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000576:	ea4f 0131 	mov.w	r1, r1, rrx
 800057a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057e:	bf1f      	itttt	ne
 8000580:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000584:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000588:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800058c:	4770      	bxne	lr
 800058e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000592:	bf08      	it	eq
 8000594:	4770      	bxeq	lr
 8000596:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800059a:	bf04      	itt	eq
 800059c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b0:	e71c      	b.n	80003ec <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aed8 	beq.w	800039a <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6bd      	b.n	800039a <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__gedf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__ledf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpdf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6e:	d01b      	beq.n	8000aa8 <__cmpdf2+0x54>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a76:	bf0c      	ite	eq
 8000a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a7c:	ea91 0f03 	teqne	r1, r3
 8000a80:	bf02      	ittt	eq
 8000a82:	ea90 0f02 	teqeq	r0, r2
 8000a86:	2000      	moveq	r0, #0
 8000a88:	4770      	bxeq	lr
 8000a8a:	f110 0f00 	cmn.w	r0, #0
 8000a8e:	ea91 0f03 	teq	r1, r3
 8000a92:	bf58      	it	pl
 8000a94:	4299      	cmppl	r1, r3
 8000a96:	bf08      	it	eq
 8000a98:	4290      	cmpeq	r0, r2
 8000a9a:	bf2c      	ite	cs
 8000a9c:	17d8      	asrcs	r0, r3, #31
 8000a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aa2:	f040 0001 	orr.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__cmpdf2+0x64>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d107      	bne.n	8000ac8 <__cmpdf2+0x74>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d1d6      	bne.n	8000a70 <__cmpdf2+0x1c>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d0d3      	beq.n	8000a70 <__cmpdf2+0x1c>
 8000ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4663      	mov	r3, ip
 8000adc:	e000      	b.n	8000ae0 <__aeabi_cdcmpeq>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdcmpeq>:
 8000ae0:	b501      	push	{r0, lr}
 8000ae2:	f7ff ffb7 	bl	8000a54 <__cmpdf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	bf48      	it	mi
 8000aea:	f110 0f00 	cmnmi.w	r0, #0
 8000aee:	bd01      	pop	{r0, pc}

08000af0 <__aeabi_dcmpeq>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff fff4 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000af8:	bf0c      	ite	eq
 8000afa:	2001      	moveq	r0, #1
 8000afc:	2000      	movne	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmplt>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffea 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b0c:	bf34      	ite	cc
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	2000      	movcs	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmple>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffe0 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpge>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffce 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpgt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffc4 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpun>:
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x10>
 8000b5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b62:	d10a      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x20>
 8000b6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0001 	mov.w	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2uiz>:
 8000bd0:	004a      	lsls	r2, r1, #1
 8000bd2:	d211      	bcs.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd8:	d211      	bcs.n	8000bfe <__aeabi_d2uiz+0x2e>
 8000bda:	d50d      	bpl.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d40e      	bmi.n	8000c04 <__aeabi_d2uiz+0x34>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_d2uiz+0x3a>
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2f>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c18:	bf24      	itt	cs
 8000c1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c22:	d90d      	bls.n	8000c40 <__aeabi_d2f+0x30>
 8000c24:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c30:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c38:	bf08      	it	eq
 8000c3a:	f020 0001 	biceq.w	r0, r0, #1
 8000c3e:	4770      	bx	lr
 8000c40:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c44:	d121      	bne.n	8000c8a <__aeabi_d2f+0x7a>
 8000c46:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c4a:	bfbc      	itt	lt
 8000c4c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	4770      	bxlt	lr
 8000c52:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c5a:	f1c2 0218 	rsb	r2, r2, #24
 8000c5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c66:	fa20 f002 	lsr.w	r0, r0, r2
 8000c6a:	bf18      	it	ne
 8000c6c:	f040 0001 	orrne.w	r0, r0, #1
 8000c70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c7c:	ea40 000c 	orr.w	r0, r0, ip
 8000c80:	fa23 f302 	lsr.w	r3, r3, r2
 8000c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c88:	e7cc      	b.n	8000c24 <__aeabi_d2f+0x14>
 8000c8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8e:	d107      	bne.n	8000ca0 <__aeabi_d2f+0x90>
 8000c90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c94:	bf1e      	ittt	ne
 8000c96:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c9a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c9e:	4770      	bxne	lr
 8000ca0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b9b4 	b.w	8001030 <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f83c 	bl	8000d4c <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_d2lz>:
 8000ce0:	b538      	push	{r3, r4, r5, lr}
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	460d      	mov	r5, r1
 8000cea:	f7ff ff0b 	bl	8000b04 <__aeabi_dcmplt>
 8000cee:	b928      	cbnz	r0, 8000cfc <__aeabi_d2lz+0x1c>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf8:	f000 b80a 	b.w	8000d10 <__aeabi_d2ulz>
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d02:	f000 f805 	bl	8000d10 <__aeabi_d2ulz>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	bd38      	pop	{r3, r4, r5, pc}
 8000d0e:	bf00      	nop

08000d10 <__aeabi_d2ulz>:
 8000d10:	b5d0      	push	{r4, r6, r7, lr}
 8000d12:	2200      	movs	r2, #0
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <__aeabi_d2ulz+0x34>)
 8000d16:	4606      	mov	r6, r0
 8000d18:	460f      	mov	r7, r1
 8000d1a:	f7ff fc81 	bl	8000620 <__aeabi_dmul>
 8000d1e:	f7ff ff57 	bl	8000bd0 <__aeabi_d2uiz>
 8000d22:	4604      	mov	r4, r0
 8000d24:	f7ff fc02 	bl	800052c <__aeabi_ui2d>
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <__aeabi_d2ulz+0x38>)
 8000d2c:	f7ff fc78 	bl	8000620 <__aeabi_dmul>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	4630      	mov	r0, r6
 8000d36:	4639      	mov	r1, r7
 8000d38:	f7ff faba 	bl	80002b0 <__aeabi_dsub>
 8000d3c:	f7ff ff48 	bl	8000bd0 <__aeabi_d2uiz>
 8000d40:	4621      	mov	r1, r4
 8000d42:	bdd0      	pop	{r4, r6, r7, pc}
 8000d44:	3df00000 	.word	0x3df00000
 8000d48:	41f00000 	.word	0x41f00000

08000d4c <__udivmoddi4>:
 8000d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d50:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d52:	460c      	mov	r4, r1
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d14d      	bne.n	8000df4 <__udivmoddi4+0xa8>
 8000d58:	428a      	cmp	r2, r1
 8000d5a:	460f      	mov	r7, r1
 8000d5c:	4684      	mov	ip, r0
 8000d5e:	4696      	mov	lr, r2
 8000d60:	fab2 f382 	clz	r3, r2
 8000d64:	d960      	bls.n	8000e28 <__udivmoddi4+0xdc>
 8000d66:	b14b      	cbz	r3, 8000d7c <__udivmoddi4+0x30>
 8000d68:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d6c:	f1c3 0220 	rsb	r2, r3, #32
 8000d70:	409f      	lsls	r7, r3
 8000d72:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d76:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7a:	4317      	orrs	r7, r2
 8000d7c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d80:	fa1f f48e 	uxth.w	r4, lr
 8000d84:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d88:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d8c:	fb06 7711 	mls	r7, r6, r1, r7
 8000d90:	fb01 f004 	mul.w	r0, r1, r4
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x62>
 8000d9c:	eb1e 0202 	adds.w	r2, lr, r2
 8000da0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x60>
 8000da6:	4290      	cmp	r0, r2
 8000da8:	f200 812d 	bhi.w	8001006 <__udivmoddi4+0x2ba>
 8000dac:	4639      	mov	r1, r7
 8000dae:	1a12      	subs	r2, r2, r0
 8000db0:	fa1f fc8c 	uxth.w	ip, ip
 8000db4:	fbb2 f0f6 	udiv	r0, r2, r6
 8000db8:	fb06 2210 	mls	r2, r6, r0, r2
 8000dbc:	fb00 f404 	mul.w	r4, r0, r4
 8000dc0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dc4:	4564      	cmp	r4, ip
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x8e>
 8000dc8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd0:	d202      	bcs.n	8000dd8 <__udivmoddi4+0x8c>
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	f200 811a 	bhi.w	800100c <__udivmoddi4+0x2c0>
 8000dd8:	4610      	mov	r0, r2
 8000dda:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dde:	ebac 0c04 	sub.w	ip, ip, r4
 8000de2:	2100      	movs	r1, #0
 8000de4:	b125      	cbz	r5, 8000df0 <__udivmoddi4+0xa4>
 8000de6:	fa2c f303 	lsr.w	r3, ip, r3
 8000dea:	2200      	movs	r2, #0
 8000dec:	e9c5 3200 	strd	r3, r2, [r5]
 8000df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d905      	bls.n	8000e04 <__udivmoddi4+0xb8>
 8000df8:	b10d      	cbz	r5, 8000dfe <__udivmoddi4+0xb2>
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4608      	mov	r0, r1
 8000e02:	e7f5      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e04:	fab3 f183 	clz	r1, r3
 8000e08:	2900      	cmp	r1, #0
 8000e0a:	d14d      	bne.n	8000ea8 <__udivmoddi4+0x15c>
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	f0c0 80f2 	bcc.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e12:	4290      	cmp	r0, r2
 8000e14:	f080 80ef 	bcs.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	d0e6      	beq.n	8000df0 <__udivmoddi4+0xa4>
 8000e22:	e9c5 6300 	strd	r6, r3, [r5]
 8000e26:	e7e3      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f040 80a2 	bne.w	8000f72 <__udivmoddi4+0x226>
 8000e2e:	1a8a      	subs	r2, r1, r2
 8000e30:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e34:	fa1f f68e 	uxth.w	r6, lr
 8000e38:	2101      	movs	r1, #1
 8000e3a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e3e:	fb07 2014 	mls	r0, r7, r4, r2
 8000e42:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e46:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4a:	fb06 f004 	mul.w	r0, r6, r4
 8000e4e:	4290      	cmp	r0, r2
 8000e50:	d90f      	bls.n	8000e72 <__udivmoddi4+0x126>
 8000e52:	eb1e 0202 	adds.w	r2, lr, r2
 8000e56:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e5a:	bf2c      	ite	cs
 8000e5c:	f04f 0901 	movcs.w	r9, #1
 8000e60:	f04f 0900 	movcc.w	r9, #0
 8000e64:	4290      	cmp	r0, r2
 8000e66:	d903      	bls.n	8000e70 <__udivmoddi4+0x124>
 8000e68:	f1b9 0f00 	cmp.w	r9, #0
 8000e6c:	f000 80c8 	beq.w	8001000 <__udivmoddi4+0x2b4>
 8000e70:	4644      	mov	r4, r8
 8000e72:	1a12      	subs	r2, r2, r0
 8000e74:	fa1f fc8c 	uxth.w	ip, ip
 8000e78:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e7c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e80:	fb00 f606 	mul.w	r6, r0, r6
 8000e84:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e88:	4566      	cmp	r6, ip
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x152>
 8000e8c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e94:	d202      	bcs.n	8000e9c <__udivmoddi4+0x150>
 8000e96:	4566      	cmp	r6, ip
 8000e98:	f200 80bb 	bhi.w	8001012 <__udivmoddi4+0x2c6>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	ebac 0c06 	sub.w	ip, ip, r6
 8000ea2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ea6:	e79d      	b.n	8000de4 <__udivmoddi4+0x98>
 8000ea8:	f1c1 0620 	rsb	r6, r1, #32
 8000eac:	408b      	lsls	r3, r1
 8000eae:	fa04 fe01 	lsl.w	lr, r4, r1
 8000eb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000eb6:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eba:	40f4      	lsrs	r4, r6
 8000ebc:	408a      	lsls	r2, r1
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	ea4e 030c 	orr.w	r3, lr, ip
 8000ec4:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ec8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ecc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed0:	fa1f fc87 	uxth.w	ip, r7
 8000ed4:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ed8:	fb08 4410 	mls	r4, r8, r0, r4
 8000edc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee0:	fb00 f90c 	mul.w	r9, r0, ip
 8000ee4:	45a1      	cmp	r9, r4
 8000ee6:	d90e      	bls.n	8000f06 <__udivmoddi4+0x1ba>
 8000ee8:	193c      	adds	r4, r7, r4
 8000eea:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eee:	bf2c      	ite	cs
 8000ef0:	f04f 0b01 	movcs.w	fp, #1
 8000ef4:	f04f 0b00 	movcc.w	fp, #0
 8000ef8:	45a1      	cmp	r9, r4
 8000efa:	d903      	bls.n	8000f04 <__udivmoddi4+0x1b8>
 8000efc:	f1bb 0f00 	cmp.w	fp, #0
 8000f00:	f000 8093 	beq.w	800102a <__udivmoddi4+0x2de>
 8000f04:	4650      	mov	r0, sl
 8000f06:	eba4 0409 	sub.w	r4, r4, r9
 8000f0a:	fa1f f983 	uxth.w	r9, r3
 8000f0e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000f12:	fb08 4413 	mls	r4, r8, r3, r4
 8000f16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d906      	bls.n	8000f30 <__udivmoddi4+0x1e4>
 8000f22:	193c      	adds	r4, r7, r4
 8000f24:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x1e2>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d87a      	bhi.n	8001024 <__udivmoddi4+0x2d8>
 8000f2e:	4643      	mov	r3, r8
 8000f30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f34:	eba4 040c 	sub.w	r4, r4, ip
 8000f38:	fba0 9802 	umull	r9, r8, r0, r2
 8000f3c:	4544      	cmp	r4, r8
 8000f3e:	46cc      	mov	ip, r9
 8000f40:	4643      	mov	r3, r8
 8000f42:	d302      	bcc.n	8000f4a <__udivmoddi4+0x1fe>
 8000f44:	d106      	bne.n	8000f54 <__udivmoddi4+0x208>
 8000f46:	45ce      	cmp	lr, r9
 8000f48:	d204      	bcs.n	8000f54 <__udivmoddi4+0x208>
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f50:	eb68 0307 	sbc.w	r3, r8, r7
 8000f54:	b15d      	cbz	r5, 8000f6e <__udivmoddi4+0x222>
 8000f56:	ebbe 020c 	subs.w	r2, lr, ip
 8000f5a:	eb64 0403 	sbc.w	r4, r4, r3
 8000f5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000f62:	fa22 f301 	lsr.w	r3, r2, r1
 8000f66:	40cc      	lsrs	r4, r1
 8000f68:	431e      	orrs	r6, r3
 8000f6a:	e9c5 6400 	strd	r6, r4, [r5]
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e73e      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000f72:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f76:	f1c3 0120 	rsb	r1, r3, #32
 8000f7a:	fa04 f203 	lsl.w	r2, r4, r3
 8000f7e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f82:	40cc      	lsrs	r4, r1
 8000f84:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f88:	fa20 f101 	lsr.w	r1, r0, r1
 8000f8c:	fa1f f68e 	uxth.w	r6, lr
 8000f90:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f94:	430a      	orrs	r2, r1
 8000f96:	fb07 4410 	mls	r4, r7, r0, r4
 8000f9a:	0c11      	lsrs	r1, r2, #16
 8000f9c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000fa0:	fb00 f406 	mul.w	r4, r0, r6
 8000fa4:	428c      	cmp	r4, r1
 8000fa6:	d90e      	bls.n	8000fc6 <__udivmoddi4+0x27a>
 8000fa8:	eb1e 0101 	adds.w	r1, lr, r1
 8000fac:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb0:	bf2c      	ite	cs
 8000fb2:	f04f 0901 	movcs.w	r9, #1
 8000fb6:	f04f 0900 	movcc.w	r9, #0
 8000fba:	428c      	cmp	r4, r1
 8000fbc:	d902      	bls.n	8000fc4 <__udivmoddi4+0x278>
 8000fbe:	f1b9 0f00 	cmp.w	r9, #0
 8000fc2:	d02c      	beq.n	800101e <__udivmoddi4+0x2d2>
 8000fc4:	4640      	mov	r0, r8
 8000fc6:	1b09      	subs	r1, r1, r4
 8000fc8:	b292      	uxth	r2, r2
 8000fca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fce:	fb07 1114 	mls	r1, r7, r4, r1
 8000fd2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd6:	fb04 f106 	mul.w	r1, r4, r6
 8000fda:	4291      	cmp	r1, r2
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x2a2>
 8000fde:	eb1e 0202 	adds.w	r2, lr, r2
 8000fe2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fe6:	d201      	bcs.n	8000fec <__udivmoddi4+0x2a0>
 8000fe8:	4291      	cmp	r1, r2
 8000fea:	d815      	bhi.n	8001018 <__udivmoddi4+0x2cc>
 8000fec:	4644      	mov	r4, r8
 8000fee:	1a52      	subs	r2, r2, r1
 8000ff0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000ff4:	e721      	b.n	8000e3a <__udivmoddi4+0xee>
 8000ff6:	1a86      	subs	r6, r0, r2
 8000ff8:	eb64 0303 	sbc.w	r3, r4, r3
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	e70e      	b.n	8000e1e <__udivmoddi4+0xd2>
 8001000:	3c02      	subs	r4, #2
 8001002:	4472      	add	r2, lr
 8001004:	e735      	b.n	8000e72 <__udivmoddi4+0x126>
 8001006:	3902      	subs	r1, #2
 8001008:	4472      	add	r2, lr
 800100a:	e6d0      	b.n	8000dae <__udivmoddi4+0x62>
 800100c:	44f4      	add	ip, lr
 800100e:	3802      	subs	r0, #2
 8001010:	e6e3      	b.n	8000dda <__udivmoddi4+0x8e>
 8001012:	44f4      	add	ip, lr
 8001014:	3802      	subs	r0, #2
 8001016:	e742      	b.n	8000e9e <__udivmoddi4+0x152>
 8001018:	3c02      	subs	r4, #2
 800101a:	4472      	add	r2, lr
 800101c:	e7e7      	b.n	8000fee <__udivmoddi4+0x2a2>
 800101e:	3802      	subs	r0, #2
 8001020:	4471      	add	r1, lr
 8001022:	e7d0      	b.n	8000fc6 <__udivmoddi4+0x27a>
 8001024:	3b02      	subs	r3, #2
 8001026:	443c      	add	r4, r7
 8001028:	e782      	b.n	8000f30 <__udivmoddi4+0x1e4>
 800102a:	3802      	subs	r0, #2
 800102c:	443c      	add	r4, r7
 800102e:	e76a      	b.n	8000f06 <__udivmoddi4+0x1ba>

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__io_putchar>:

uint16_t readValue;
uint32_t sumADC = 0;
LIS2DW12_Data_t accel_data;

void __io_putchar(char ch) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800103e:	1df9      	adds	r1, r7, #7
 8001040:	f04f 33ff 	mov.w	r3, #4294967295
 8001044:	2201      	movs	r2, #1
 8001046:	4803      	ldr	r0, [pc, #12]	@ (8001054 <__io_putchar+0x20>)
 8001048:	f005 fdbd 	bl	8006bc6 <HAL_UART_Transmit>
	//return ch;
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200003f0 	.word	0x200003f0

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105c:	f000 ff1e 	bl	8001e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001060:	f000 f812 	bl	8001088 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001064:	f000 fa5a 	bl	800151c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8001068:	f000 f8e8 	bl	800123c <MX_GPDMA1_Init>
  MX_USART2_UART_Init();
 800106c:	f000 f9ae 	bl	80013cc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001070:	f000 f9f8 	bl	8001464 <MX_USART3_UART_Init>
  MX_SBS_Init();
 8001074:	f000 f94c 	bl	8001310 <MX_SBS_Init>
  MX_ADC1_Init();
 8001078:	f000 f87c 	bl	8001174 <MX_ADC1_Init>
  MX_SPI1_Init();
 800107c:	f000 f950 	bl	8001320 <MX_SPI1_Init>
  while (1)
  {
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  USART3_ReceiveAndProcess();
 8001080:	f000 fac6 	bl	8001610 <USART3_ReceiveAndProcess>
 8001084:	e7fc      	b.n	8001080 <main+0x28>
	...

08001088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b09c      	sub	sp, #112	@ 0x70
 800108c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108e:	f107 0320 	add.w	r3, r7, #32
 8001092:	2250      	movs	r2, #80	@ 0x50
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f007 fb3b 	bl	8008712 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800109c:	f107 0308 	add.w	r3, r7, #8
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
 80010ac:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010ae:	4b2f      	ldr	r3, [pc, #188]	@ (800116c <SystemClock_Config+0xe4>)
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	4a2e      	ldr	r2, [pc, #184]	@ (800116c <SystemClock_Config+0xe4>)
 80010b4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80010b8:	6113      	str	r3, [r2, #16]
 80010ba:	4b2c      	ldr	r3, [pc, #176]	@ (800116c <SystemClock_Config+0xe4>)
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010c6:	bf00      	nop
 80010c8:	4b28      	ldr	r3, [pc, #160]	@ (800116c <SystemClock_Config+0xe4>)
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	2b08      	cmp	r3, #8
 80010d2:	d1f9      	bne.n	80010c8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_CSI;
 80010d4:	2312      	movs	r3, #18
 80010d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d8:	2301      	movs	r3, #1
 80010da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 80010dc:	2308      	movs	r3, #8
 80010de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e0:	2340      	movs	r3, #64	@ 0x40
 80010e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80010e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80010ea:	2320      	movs	r3, #32
 80010ec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ee:	2302      	movs	r3, #2
 80010f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 80010f2:	2302      	movs	r3, #2
 80010f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 4;
 80010fa:	2304      	movs	r3, #4
 80010fc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010fe:	2302      	movs	r3, #2
 8001100:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001102:	2302      	movs	r3, #2
 8001104:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001106:	2302      	movs	r3, #2
 8001108:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 800110a:	2308      	movs	r3, #8
 800110c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800110e:	2300      	movs	r3, #0
 8001110:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001116:	f107 0320 	add.w	r3, r7, #32
 800111a:	4618      	mov	r0, r3
 800111c:	f002 fba4 	bl	8003868 <HAL_RCC_OscConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001126:	f000 fb5f 	bl	80017e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112a:	231f      	movs	r3, #31
 800112c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	2101      	movs	r1, #1
 8001148:	4618      	mov	r0, r3
 800114a:	f002 ffc5 	bl	80040d8 <HAL_RCC_ClockConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001154:	f000 fb48 	bl	80017e8 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 8001158:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <SystemClock_Config+0xe8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a04      	ldr	r2, [pc, #16]	@ (8001170 <SystemClock_Config+0xe8>)
 800115e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	3770      	adds	r7, #112	@ 0x70
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	44020800 	.word	0x44020800
 8001170:	40022000 	.word	0x40022000

08001174 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800117a:	463b      	mov	r3, r7
 800117c:	2220      	movs	r2, #32
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f007 fac6 	bl	8008712 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001186:	4b2a      	ldr	r3, [pc, #168]	@ (8001230 <MX_ADC1_Init+0xbc>)
 8001188:	4a2a      	ldr	r2, [pc, #168]	@ (8001234 <MX_ADC1_Init+0xc0>)
 800118a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800118c:	4b28      	ldr	r3, [pc, #160]	@ (8001230 <MX_ADC1_Init+0xbc>)
 800118e:	2200      	movs	r2, #0
 8001190:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001192:	4b27      	ldr	r3, [pc, #156]	@ (8001230 <MX_ADC1_Init+0xbc>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001198:	4b25      	ldr	r3, [pc, #148]	@ (8001230 <MX_ADC1_Init+0xbc>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800119e:	4b24      	ldr	r3, [pc, #144]	@ (8001230 <MX_ADC1_Init+0xbc>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011a4:	4b22      	ldr	r3, [pc, #136]	@ (8001230 <MX_ADC1_Init+0xbc>)
 80011a6:	2204      	movs	r2, #4
 80011a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011aa:	4b21      	ldr	r3, [pc, #132]	@ (8001230 <MX_ADC1_Init+0xbc>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001230 <MX_ADC1_Init+0xbc>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80011b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001230 <MX_ADC1_Init+0xbc>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001230 <MX_ADC1_Init+0xbc>)
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <MX_ADC1_Init+0xbc>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ca:	4b19      	ldr	r3, [pc, #100]	@ (8001230 <MX_ADC1_Init+0xbc>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011d0:	4b17      	ldr	r3, [pc, #92]	@ (8001230 <MX_ADC1_Init+0xbc>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80011d8:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <MX_ADC1_Init+0xbc>)
 80011da:	2200      	movs	r2, #0
 80011dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011de:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <MX_ADC1_Init+0xbc>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <MX_ADC1_Init+0xbc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ec:	4810      	ldr	r0, [pc, #64]	@ (8001230 <MX_ADC1_Init+0xbc>)
 80011ee:	f001 f933 	bl	8002458 <HAL_ADC_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80011f8:	f000 faf6 	bl	80017e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <MX_ADC1_Init+0xc4>)
 80011fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001200:	2306      	movs	r3, #6
 8001202:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001208:	237f      	movs	r3, #127	@ 0x7f
 800120a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800120c:	2304      	movs	r3, #4
 800120e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	4619      	mov	r1, r3
 8001218:	4805      	ldr	r0, [pc, #20]	@ (8001230 <MX_ADC1_Init+0xbc>)
 800121a:	f001 fa6b 	bl	80026f4 <HAL_ADC_ConfigChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001224:	f000 fae0 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	3720      	adds	r7, #32
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000208 	.word	0x20000208
 8001234:	42028000 	.word	0x42028000
 8001238:	04300002 	.word	0x04300002

0800123c <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001242:	4b2e      	ldr	r3, [pc, #184]	@ (80012fc <MX_GPDMA1_Init+0xc0>)
 8001244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001248:	4a2c      	ldr	r2, [pc, #176]	@ (80012fc <MX_GPDMA1_Init+0xc0>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001252:	4b2a      	ldr	r3, [pc, #168]	@ (80012fc <MX_GPDMA1_Init+0xc0>)
 8001254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  handle_GPDMA1_Channel7.Instance = GPDMA1_Channel7;
 8001260:	4b27      	ldr	r3, [pc, #156]	@ (8001300 <MX_GPDMA1_Init+0xc4>)
 8001262:	4a28      	ldr	r2, [pc, #160]	@ (8001304 <MX_GPDMA1_Init+0xc8>)
 8001264:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel7.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001266:	4b26      	ldr	r3, [pc, #152]	@ (8001300 <MX_GPDMA1_Init+0xc4>)
 8001268:	2200      	movs	r2, #0
 800126a:	639a      	str	r2, [r3, #56]	@ 0x38
  handle_GPDMA1_Channel7.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800126c:	4b24      	ldr	r3, [pc, #144]	@ (8001300 <MX_GPDMA1_Init+0xc4>)
 800126e:	2200      	movs	r2, #0
 8001270:	63da      	str	r2, [r3, #60]	@ 0x3c
  handle_GPDMA1_Channel7.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001272:	4b23      	ldr	r3, [pc, #140]	@ (8001300 <MX_GPDMA1_Init+0xc4>)
 8001274:	2200      	movs	r2, #0
 8001276:	641a      	str	r2, [r3, #64]	@ 0x40
  handle_GPDMA1_Channel7.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8001278:	4b21      	ldr	r3, [pc, #132]	@ (8001300 <MX_GPDMA1_Init+0xc4>)
 800127a:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 800127e:	645a      	str	r2, [r3, #68]	@ 0x44
  handle_GPDMA1_Channel7.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_NORMAL;
 8001280:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <MX_GPDMA1_Init+0xc4>)
 8001282:	2280      	movs	r2, #128	@ 0x80
 8001284:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel7) != HAL_OK)
 8001286:	481e      	ldr	r0, [pc, #120]	@ (8001300 <MX_GPDMA1_Init+0xc4>)
 8001288:	f002 f800 	bl	800328c <HAL_DMAEx_List_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_GPDMA1_Init+0x5a>
  {
    Error_Handler();
 8001292:	f000 faa9 	bl	80017e8 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel7, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001296:	2110      	movs	r1, #16
 8001298:	4819      	ldr	r0, [pc, #100]	@ (8001300 <MX_GPDMA1_Init+0xc4>)
 800129a:	f001 ffbb 	bl	8003214 <HAL_DMA_ConfigChannelAttributes>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_GPDMA1_Init+0x6c>
  {
    Error_Handler();
 80012a4:	f000 faa0 	bl	80017e8 <Error_Handler>
  }
  handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80012a8:	4b17      	ldr	r3, [pc, #92]	@ (8001308 <MX_GPDMA1_Init+0xcc>)
 80012aa:	4a18      	ldr	r2, [pc, #96]	@ (800130c <MX_GPDMA1_Init+0xd0>)
 80012ac:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80012ae:	4b16      	ldr	r3, [pc, #88]	@ (8001308 <MX_GPDMA1_Init+0xcc>)
 80012b0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80012b4:	639a      	str	r2, [r3, #56]	@ 0x38
  handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_1LINK_EXECUTION;
 80012b6:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <MX_GPDMA1_Init+0xcc>)
 80012b8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80012be:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <MX_GPDMA1_Init+0xcc>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	641a      	str	r2, [r3, #64]	@ 0x40
  handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 80012c4:	4b10      	ldr	r3, [pc, #64]	@ (8001308 <MX_GPDMA1_Init+0xcc>)
 80012c6:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 80012ca:	645a      	str	r2, [r3, #68]	@ 0x44
  handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80012cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001308 <MX_GPDMA1_Init+0xcc>)
 80012ce:	2281      	movs	r2, #129	@ 0x81
 80012d0:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 80012d2:	480d      	ldr	r0, [pc, #52]	@ (8001308 <MX_GPDMA1_Init+0xcc>)
 80012d4:	f001 ffda 	bl	800328c <HAL_DMAEx_List_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_GPDMA1_Init+0xa6>
  {
    Error_Handler();
 80012de:	f000 fa83 	bl	80017e8 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80012e2:	2110      	movs	r1, #16
 80012e4:	4808      	ldr	r0, [pc, #32]	@ (8001308 <MX_GPDMA1_Init+0xcc>)
 80012e6:	f001 ff95 	bl	8003214 <HAL_DMA_ConfigChannelAttributes>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_GPDMA1_Init+0xb8>
  {
    Error_Handler();
 80012f0:	f000 fa7a 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	44020c00 	.word	0x44020c00
 8001300:	20000270 	.word	0x20000270
 8001304:	400203d0 	.word	0x400203d0
 8001308:	200002e8 	.word	0x200002e8
 800130c:	400200d0 	.word	0x400200d0

08001310 <MX_SBS_Init>:
  * @brief SBS Initialization Function
  * @param None
  * @retval None
  */
static void MX_SBS_Init(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END SBS_Init 1 */
  /* USER CODE BEGIN SBS_Init 2 */

  /* USER CODE END SBS_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001324:	4b27      	ldr	r3, [pc, #156]	@ (80013c4 <MX_SPI1_Init+0xa4>)
 8001326:	4a28      	ldr	r2, [pc, #160]	@ (80013c8 <MX_SPI1_Init+0xa8>)
 8001328:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800132a:	4b26      	ldr	r3, [pc, #152]	@ (80013c4 <MX_SPI1_Init+0xa4>)
 800132c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001330:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001332:	4b24      	ldr	r3, [pc, #144]	@ (80013c4 <MX_SPI1_Init+0xa4>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001338:	4b22      	ldr	r3, [pc, #136]	@ (80013c4 <MX_SPI1_Init+0xa4>)
 800133a:	2203      	movs	r2, #3
 800133c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800133e:	4b21      	ldr	r3, [pc, #132]	@ (80013c4 <MX_SPI1_Init+0xa4>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001344:	4b1f      	ldr	r3, [pc, #124]	@ (80013c4 <MX_SPI1_Init+0xa4>)
 8001346:	2200      	movs	r2, #0
 8001348:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800134a:	4b1e      	ldr	r3, [pc, #120]	@ (80013c4 <MX_SPI1_Init+0xa4>)
 800134c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001350:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001352:	4b1c      	ldr	r3, [pc, #112]	@ (80013c4 <MX_SPI1_Init+0xa4>)
 8001354:	2200      	movs	r2, #0
 8001356:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001358:	4b1a      	ldr	r3, [pc, #104]	@ (80013c4 <MX_SPI1_Init+0xa4>)
 800135a:	2200      	movs	r2, #0
 800135c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800135e:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <MX_SPI1_Init+0xa4>)
 8001360:	2200      	movs	r2, #0
 8001362:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001364:	4b17      	ldr	r3, [pc, #92]	@ (80013c4 <MX_SPI1_Init+0xa4>)
 8001366:	2200      	movs	r2, #0
 8001368:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800136a:	4b16      	ldr	r3, [pc, #88]	@ (80013c4 <MX_SPI1_Init+0xa4>)
 800136c:	2207      	movs	r2, #7
 800136e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001370:	4b14      	ldr	r3, [pc, #80]	@ (80013c4 <MX_SPI1_Init+0xa4>)
 8001372:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001376:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001378:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <MX_SPI1_Init+0xa4>)
 800137a:	2200      	movs	r2, #0
 800137c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800137e:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <MX_SPI1_Init+0xa4>)
 8001380:	2200      	movs	r2, #0
 8001382:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001384:	4b0f      	ldr	r3, [pc, #60]	@ (80013c4 <MX_SPI1_Init+0xa4>)
 8001386:	2200      	movs	r2, #0
 8001388:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800138a:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <MX_SPI1_Init+0xa4>)
 800138c:	2200      	movs	r2, #0
 800138e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001390:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <MX_SPI1_Init+0xa4>)
 8001392:	2200      	movs	r2, #0
 8001394:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001396:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <MX_SPI1_Init+0xa4>)
 8001398:	2200      	movs	r2, #0
 800139a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800139c:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <MX_SPI1_Init+0xa4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80013a2:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <MX_SPI1_Init+0xa4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <MX_SPI1_Init+0xa4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	@ (80013c4 <MX_SPI1_Init+0xa4>)
 80013b0:	f005 faa2 	bl	80068f8 <HAL_SPI_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80013ba:	f000 fa15 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000360 	.word	0x20000360
 80013c8:	40013000 	.word	0x40013000

080013cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013d0:	4b22      	ldr	r3, [pc, #136]	@ (800145c <MX_USART2_UART_Init+0x90>)
 80013d2:	4a23      	ldr	r2, [pc, #140]	@ (8001460 <MX_USART2_UART_Init+0x94>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013d6:	4b21      	ldr	r3, [pc, #132]	@ (800145c <MX_USART2_UART_Init+0x90>)
 80013d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b1f      	ldr	r3, [pc, #124]	@ (800145c <MX_USART2_UART_Init+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b1d      	ldr	r3, [pc, #116]	@ (800145c <MX_USART2_UART_Init+0x90>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b1c      	ldr	r3, [pc, #112]	@ (800145c <MX_USART2_UART_Init+0x90>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013f0:	4b1a      	ldr	r3, [pc, #104]	@ (800145c <MX_USART2_UART_Init+0x90>)
 80013f2:	220c      	movs	r2, #12
 80013f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b19      	ldr	r3, [pc, #100]	@ (800145c <MX_USART2_UART_Init+0x90>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b17      	ldr	r3, [pc, #92]	@ (800145c <MX_USART2_UART_Init+0x90>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001402:	4b16      	ldr	r3, [pc, #88]	@ (800145c <MX_USART2_UART_Init+0x90>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001408:	4b14      	ldr	r3, [pc, #80]	@ (800145c <MX_USART2_UART_Init+0x90>)
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800140e:	4b13      	ldr	r3, [pc, #76]	@ (800145c <MX_USART2_UART_Init+0x90>)
 8001410:	2200      	movs	r2, #0
 8001412:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001414:	4811      	ldr	r0, [pc, #68]	@ (800145c <MX_USART2_UART_Init+0x90>)
 8001416:	f005 fb86 	bl	8006b26 <HAL_UART_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001420:	f000 f9e2 	bl	80017e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001424:	2100      	movs	r1, #0
 8001426:	480d      	ldr	r0, [pc, #52]	@ (800145c <MX_USART2_UART_Init+0x90>)
 8001428:	f006 f918 	bl	800765c <HAL_UARTEx_SetTxFifoThreshold>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001432:	f000 f9d9 	bl	80017e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001436:	2100      	movs	r1, #0
 8001438:	4808      	ldr	r0, [pc, #32]	@ (800145c <MX_USART2_UART_Init+0x90>)
 800143a:	f006 f94d 	bl	80076d8 <HAL_UARTEx_SetRxFifoThreshold>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001444:	f000 f9d0 	bl	80017e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001448:	4804      	ldr	r0, [pc, #16]	@ (800145c <MX_USART2_UART_Init+0x90>)
 800144a:	f006 f8ce 	bl	80075ea <HAL_UARTEx_DisableFifoMode>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001454:	f000 f9c8 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}
 800145c:	200003f0 	.word	0x200003f0
 8001460:	40004400 	.word	0x40004400

08001464 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001468:	4b2a      	ldr	r3, [pc, #168]	@ (8001514 <MX_USART3_UART_Init+0xb0>)
 800146a:	4a2b      	ldr	r2, [pc, #172]	@ (8001518 <MX_USART3_UART_Init+0xb4>)
 800146c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800146e:	4b29      	ldr	r3, [pc, #164]	@ (8001514 <MX_USART3_UART_Init+0xb0>)
 8001470:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001474:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001476:	4b27      	ldr	r3, [pc, #156]	@ (8001514 <MX_USART3_UART_Init+0xb0>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800147c:	4b25      	ldr	r3, [pc, #148]	@ (8001514 <MX_USART3_UART_Init+0xb0>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001482:	4b24      	ldr	r3, [pc, #144]	@ (8001514 <MX_USART3_UART_Init+0xb0>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001488:	4b22      	ldr	r3, [pc, #136]	@ (8001514 <MX_USART3_UART_Init+0xb0>)
 800148a:	220c      	movs	r2, #12
 800148c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148e:	4b21      	ldr	r3, [pc, #132]	@ (8001514 <MX_USART3_UART_Init+0xb0>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001494:	4b1f      	ldr	r3, [pc, #124]	@ (8001514 <MX_USART3_UART_Init+0xb0>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800149a:	4b1e      	ldr	r3, [pc, #120]	@ (8001514 <MX_USART3_UART_Init+0xb0>)
 800149c:	2200      	movs	r2, #0
 800149e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001514 <MX_USART3_UART_Init+0xb0>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <MX_USART3_UART_Init+0xb0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014ac:	4819      	ldr	r0, [pc, #100]	@ (8001514 <MX_USART3_UART_Init+0xb0>)
 80014ae:	f005 fb3a 	bl	8006b26 <HAL_UART_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014b8:	f000 f996 	bl	80017e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014bc:	2100      	movs	r1, #0
 80014be:	4815      	ldr	r0, [pc, #84]	@ (8001514 <MX_USART3_UART_Init+0xb0>)
 80014c0:	f006 f8cc 	bl	800765c <HAL_UARTEx_SetTxFifoThreshold>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014ca:	f000 f98d 	bl	80017e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ce:	2100      	movs	r1, #0
 80014d0:	4810      	ldr	r0, [pc, #64]	@ (8001514 <MX_USART3_UART_Init+0xb0>)
 80014d2:	f006 f901 	bl	80076d8 <HAL_UARTEx_SetRxFifoThreshold>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014dc:	f000 f984 	bl	80017e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014e0:	480c      	ldr	r0, [pc, #48]	@ (8001514 <MX_USART3_UART_Init+0xb0>)
 80014e2:	f006 f882 	bl	80075ea <HAL_UARTEx_DisableFifoMode>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014ec:	f000 f97c 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

	HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2100      	movs	r1, #0
 80014f4:	203c      	movs	r0, #60	@ 0x3c
 80014f6:	f001 fdb5 	bl	8003064 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014fa:	203c      	movs	r0, #60	@ 0x3c
 80014fc:	f001 fdcc 	bl	8003098 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001500:	2200      	movs	r2, #0
 8001502:	2100      	movs	r1, #0
 8001504:	203c      	movs	r0, #60	@ 0x3c
 8001506:	f001 fdad 	bl	8003064 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 800150a:	203c      	movs	r0, #60	@ 0x3c
 800150c:	f001 fdc4 	bl	8003098 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_Init 2 */

}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000484 	.word	0x20000484
 8001518:	40004800 	.word	0x40004800

0800151c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	4b34      	ldr	r3, [pc, #208]	@ (8001604 <MX_GPIO_Init+0xe8>)
 8001534:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001538:	4a32      	ldr	r2, [pc, #200]	@ (8001604 <MX_GPIO_Init+0xe8>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001542:	4b30      	ldr	r3, [pc, #192]	@ (8001604 <MX_GPIO_Init+0xe8>)
 8001544:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001550:	4b2c      	ldr	r3, [pc, #176]	@ (8001604 <MX_GPIO_Init+0xe8>)
 8001552:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001556:	4a2b      	ldr	r2, [pc, #172]	@ (8001604 <MX_GPIO_Init+0xe8>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001560:	4b28      	ldr	r3, [pc, #160]	@ (8001604 <MX_GPIO_Init+0xe8>)
 8001562:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	2120      	movs	r1, #32
 8001572:	4825      	ldr	r0, [pc, #148]	@ (8001608 <MX_GPIO_Init+0xec>)
 8001574:	f002 f960 	bl	8003838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001578:	2200      	movs	r2, #0
 800157a:	2120      	movs	r1, #32
 800157c:	4823      	ldr	r0, [pc, #140]	@ (800160c <MX_GPIO_Init+0xf0>)
 800157e:	f002 f95b 	bl	8003838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001582:	2320      	movs	r3, #32
 8001584:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001586:	2301      	movs	r3, #1
 8001588:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	4619      	mov	r1, r3
 8001598:	481b      	ldr	r0, [pc, #108]	@ (8001608 <MX_GPIO_Init+0xec>)
 800159a:	f001 fffb 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800159e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a4:	2312      	movs	r3, #18
 80015a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015b0:	2304      	movs	r3, #4
 80015b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	4619      	mov	r1, r3
 80015ba:	4814      	ldr	r0, [pc, #80]	@ (800160c <MX_GPIO_Init+0xf0>)
 80015bc:	f001 ffea 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015c0:	2308      	movs	r3, #8
 80015c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c4:	2312      	movs	r3, #18
 80015c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF8_I2C2;
 80015d0:	2308      	movs	r3, #8
 80015d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	4619      	mov	r1, r3
 80015da:	480c      	ldr	r0, [pc, #48]	@ (800160c <MX_GPIO_Init+0xf0>)
 80015dc:	f001 ffda 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015e0:	2320      	movs	r3, #32
 80015e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	4619      	mov	r1, r3
 80015f6:	4805      	ldr	r0, [pc, #20]	@ (800160c <MX_GPIO_Init+0xf0>)
 80015f8:	f001 ffcc 	bl	8003594 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015fc:	bf00      	nop
 80015fe:	3720      	adds	r7, #32
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	44020c00 	.word	0x44020c00
 8001608:	42020000 	.word	0x42020000
 800160c:	42020400 	.word	0x42020400

08001610 <USART3_ReceiveAndProcess>:

/* USER CODE BEGIN 4 */

void USART3_ReceiveAndProcess(void) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
	static char previous_char = 0;
	char received_char = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	71fb      	strb	r3, [r7, #7]

	// Mengatasi Overrun Error
	if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_ORE)) {
 800161a:	4b26      	ldr	r3, [pc, #152]	@ (80016b4 <USART3_ReceiveAndProcess+0xa4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	2b08      	cmp	r3, #8
 8001626:	d103      	bne.n	8001630 <USART3_ReceiveAndProcess+0x20>
		__HAL_UART_CLEAR_OREFLAG(&huart3);
 8001628:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <USART3_ReceiveAndProcess+0xa4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2208      	movs	r2, #8
 800162e:	621a      	str	r2, [r3, #32]
	}

	if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE)) {
 8001630:	4b20      	ldr	r3, [pc, #128]	@ (80016b4 <USART3_ReceiveAndProcess+0xa4>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f003 0320 	and.w	r3, r3, #32
 800163a:	2b20      	cmp	r3, #32
 800163c:	d12b      	bne.n	8001696 <USART3_ReceiveAndProcess+0x86>
		HAL_UART_Receive(&huart3, (uint8_t*)&received_char, 1, HAL_MAX_DELAY);
 800163e:	1df9      	adds	r1, r7, #7
 8001640:	f04f 33ff 	mov.w	r3, #4294967295
 8001644:	2201      	movs	r2, #1
 8001646:	481b      	ldr	r0, [pc, #108]	@ (80016b4 <USART3_ReceiveAndProcess+0xa4>)
 8001648:	f005 fb5b 	bl	8006d02 <HAL_UART_Receive>
		countertick++;
 800164c:	4b1a      	ldr	r3, [pc, #104]	@ (80016b8 <USART3_ReceiveAndProcess+0xa8>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	3301      	adds	r3, #1
 8001652:	b2da      	uxtb	r2, r3
 8001654:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <USART3_ReceiveAndProcess+0xa8>)
 8001656:	701a      	strb	r2, [r3, #0]

		if (previous_char == 0x95 && received_char == 0x10) { 	// Jika kombinasi 0x95 diikuti oleh 0x10 diterima
 8001658:	4b18      	ldr	r3, [pc, #96]	@ (80016bc <USART3_ReceiveAndProcess+0xac>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b95      	cmp	r3, #149	@ 0x95
 800165e:	d10b      	bne.n	8001678 <USART3_ReceiveAndProcess+0x68>
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	2b10      	cmp	r3, #16
 8001664:	d108      	bne.n	8001678 <USART3_ReceiveAndProcess+0x68>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);			// Toggle LED for debugging
 8001666:	2201      	movs	r2, #1
 8001668:	2120      	movs	r1, #32
 800166a:	4815      	ldr	r0, [pc, #84]	@ (80016c0 <USART3_ReceiveAndProcess+0xb0>)
 800166c:	f002 f8e4 	bl	8003838 <HAL_GPIO_WritePin>
			countertick = 0;
 8001670:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <USART3_ReceiveAndProcess+0xa8>)
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
 8001676:	e004      	b.n	8001682 <USART3_ReceiveAndProcess+0x72>
		}
		else{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001678:	2200      	movs	r2, #0
 800167a:	2120      	movs	r1, #32
 800167c:	4810      	ldr	r0, [pc, #64]	@ (80016c0 <USART3_ReceiveAndProcess+0xb0>)
 800167e:	f002 f8db 	bl	8003838 <HAL_GPIO_WritePin>
		}

		if(countertick == 16){
 8001682:	4b0d      	ldr	r3, [pc, #52]	@ (80016b8 <USART3_ReceiveAndProcess+0xa8>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b10      	cmp	r3, #16
 8001688:	d102      	bne.n	8001690 <USART3_ReceiveAndProcess+0x80>
			run_motor_task(m1dn);
 800168a:	480e      	ldr	r0, [pc, #56]	@ (80016c4 <USART3_ReceiveAndProcess+0xb4>)
 800168c:	f000 f86a 	bl	8001764 <run_motor_task>
			//run_motor_task(wSetZero);
		}

		previous_char = received_char;
 8001690:	79fa      	ldrb	r2, [r7, #7]
 8001692:	4b0a      	ldr	r3, [pc, #40]	@ (80016bc <USART3_ReceiveAndProcess+0xac>)
 8001694:	701a      	strb	r2, [r3, #0]
		//printf("Received: 0x%02X |", received_char);
		//printf("countertick : %d\n", countertick);
	}
	// Mengatasi Overrun Error Kembali
	if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_ORE)) {
 8001696:	4b07      	ldr	r3, [pc, #28]	@ (80016b4 <USART3_ReceiveAndProcess+0xa4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	d103      	bne.n	80016ac <USART3_ReceiveAndProcess+0x9c>
		__HAL_UART_CLEAR_OREFLAG(&huart3);
 80016a4:	4b03      	ldr	r3, [pc, #12]	@ (80016b4 <USART3_ReceiveAndProcess+0xa4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2208      	movs	r2, #8
 80016aa:	621a      	str	r2, [r3, #32]
	}
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000484 	.word	0x20000484
 80016b8:	20000518 	.word	0x20000518
 80016bc:	20000519 	.word	0x20000519
 80016c0:	42020000 	.word	0x42020000
 80016c4:	20000000 	.word	0x20000000

080016c8 <hex_char_to_byte>:

uint8_t hex_char_to_byte(char hex_char){
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
    if (hex_char >= '0' && hex_char <= '9'){
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80016d6:	d906      	bls.n	80016e6 <hex_char_to_byte+0x1e>
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	2b39      	cmp	r3, #57	@ 0x39
 80016dc:	d803      	bhi.n	80016e6 <hex_char_to_byte+0x1e>
        return hex_char - '0';
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	3b30      	subs	r3, #48	@ 0x30
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	e014      	b.n	8001710 <hex_char_to_byte+0x48>
    }
    else if (hex_char >= 'A' && hex_char <= 'F'){
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	2b40      	cmp	r3, #64	@ 0x40
 80016ea:	d906      	bls.n	80016fa <hex_char_to_byte+0x32>
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	2b46      	cmp	r3, #70	@ 0x46
 80016f0:	d803      	bhi.n	80016fa <hex_char_to_byte+0x32>
        return hex_char - 'A' + 10;
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	3b37      	subs	r3, #55	@ 0x37
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	e00a      	b.n	8001710 <hex_char_to_byte+0x48>
    }
    else if (hex_char >= 'a' && hex_char <= 'f'){
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	2b60      	cmp	r3, #96	@ 0x60
 80016fe:	d906      	bls.n	800170e <hex_char_to_byte+0x46>
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	2b66      	cmp	r3, #102	@ 0x66
 8001704:	d803      	bhi.n	800170e <hex_char_to_byte+0x46>
        return hex_char - 'a' + 10;
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	3b57      	subs	r3, #87	@ 0x57
 800170a:	b2db      	uxtb	r3, r3
 800170c:	e000      	b.n	8001710 <hex_char_to_byte+0x48>
    }
    return 0;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <USART3_SendByte>:

void USART3_SendByte(uint8_t byte) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
    while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TXE) == RESET); 	// Tunggu hingga TX buffer kosong
 8001726:	bf00      	nop
 8001728:	4b0d      	ldr	r3, [pc, #52]	@ (8001760 <USART3_SendByte+0x44>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001732:	2b80      	cmp	r3, #128	@ 0x80
 8001734:	d1f8      	bne.n	8001728 <USART3_SendByte+0xc>
    HAL_UART_Transmit(&huart3, &byte, 1, HAL_MAX_DELAY);			// Kirim byte
 8001736:	1df9      	adds	r1, r7, #7
 8001738:	f04f 33ff 	mov.w	r3, #4294967295
 800173c:	2201      	movs	r2, #1
 800173e:	4808      	ldr	r0, [pc, #32]	@ (8001760 <USART3_SendByte+0x44>)
 8001740:	f005 fa41 	bl	8006bc6 <HAL_UART_Transmit>
    while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET); 	// Tunggu hingga transmisi selesai
 8001744:	bf00      	nop
 8001746:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <USART3_SendByte+0x44>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001750:	2b40      	cmp	r3, #64	@ 0x40
 8001752:	d1f8      	bne.n	8001746 <USART3_SendByte+0x2a>
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000484 	.word	0x20000484

08001764 <run_motor_task>:

void run_motor_task(char *hex_string) {
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b087      	sub	sp, #28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
    size_t length = strlen(hex_string); // Asumsikan bahwa hex_string adalah string hex dengan panjang genap
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7fe fd93 	bl	8000298 <strlen>
 8001772:	6138      	str	r0, [r7, #16]
    if (length % 2 != 0) {
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d12d      	bne.n	80017da <run_motor_task+0x76>
        return; // Jika panjang tidak genap, return karena hex harus dipasangkan
    }

    for (size_t i = 0; i < length; i += 2) {
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	e01d      	b.n	80017c0 <run_motor_task+0x5c>
        uint8_t byte = (hex_char_to_byte(hex_string[i]) << 4) | hex_char_to_byte(hex_string[i + 1]); // Ambil 2 karakter hex dan konversi menjadi byte
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff9b 	bl	80016c8 <hex_char_to_byte>
 8001792:	4603      	mov	r3, r0
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	b25c      	sxtb	r4, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	3301      	adds	r3, #1
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	4413      	add	r3, r2
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff ff90 	bl	80016c8 <hex_char_to_byte>
 80017a8:	4603      	mov	r3, r0
 80017aa:	b25b      	sxtb	r3, r3
 80017ac:	4323      	orrs	r3, r4
 80017ae:	b25b      	sxtb	r3, r3
 80017b0:	73fb      	strb	r3, [r7, #15]

        USART3_SendByte(byte);
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ffb1 	bl	800171c <USART3_SendByte>
    for (size_t i = 0; i < length; i += 2) {
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3302      	adds	r3, #2
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d3dd      	bcc.n	8001784 <run_motor_task+0x20>
    }

    // Tunggu sampai transmisi selesai menggunakan HAL
    while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET);
 80017c8:	bf00      	nop
 80017ca:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <run_motor_task+0x80>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	69db      	ldr	r3, [r3, #28]
 80017d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017d4:	2b40      	cmp	r3, #64	@ 0x40
 80017d6:	d1f8      	bne.n	80017ca <run_motor_task+0x66>
 80017d8:	e000      	b.n	80017dc <run_motor_task+0x78>
        return; // Jika panjang tidak genap, return karena hex harus dipasangkan
 80017da:	bf00      	nop
}
 80017dc:	371c      	adds	r7, #28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd90      	pop	{r4, r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000484 	.word	0x20000484

080017e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ec:	b672      	cpsid	i
}
 80017ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <Error_Handler+0x8>

080017f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/

  HAL_SBS_EnableVddIO2CompensationCell();
 80017f8:	f000 fc20 	bl	800203c <HAL_SBS_EnableVddIO2CompensationCell>
  HAL_SBS_EnableVddIO1CompensationCell();
 80017fc:	f000 fc0c 	bl	8002018 <HAL_SBS_EnableVddIO1CompensationCell>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b0ac      	sub	sp, #176	@ 0xb0
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800181c:	f107 0310 	add.w	r3, r7, #16
 8001820:	2288      	movs	r2, #136	@ 0x88
 8001822:	2100      	movs	r1, #0
 8001824:	4618      	mov	r0, r3
 8001826:	f006 ff74 	bl	8008712 <memset>
  if(hadc->Instance==ADC1)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a23      	ldr	r2, [pc, #140]	@ (80018bc <HAL_ADC_MspInit+0xb8>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d13e      	bne.n	80018b2 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001834:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001838:	f04f 0300 	mov.w	r3, #0
 800183c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 8001840:	2300      	movs	r3, #0
 8001842:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001844:	f107 0310 	add.w	r3, r7, #16
 8001848:	4618      	mov	r0, r3
 800184a:	f002 ff87 	bl	800475c <HAL_RCCEx_PeriphCLKConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 8001854:	f7ff ffc8 	bl	80017e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001858:	4b19      	ldr	r3, [pc, #100]	@ (80018c0 <HAL_ADC_MspInit+0xbc>)
 800185a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800185e:	4a18      	ldr	r2, [pc, #96]	@ (80018c0 <HAL_ADC_MspInit+0xbc>)
 8001860:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001864:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001868:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <HAL_ADC_MspInit+0xbc>)
 800186a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800186e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	4b12      	ldr	r3, [pc, #72]	@ (80018c0 <HAL_ADC_MspInit+0xbc>)
 8001878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800187c:	4a10      	ldr	r2, [pc, #64]	@ (80018c0 <HAL_ADC_MspInit+0xbc>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001886:	4b0e      	ldr	r3, [pc, #56]	@ (80018c0 <HAL_ADC_MspInit+0xbc>)
 8001888:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001894:	2302      	movs	r3, #2
 8001896:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800189a:	2303      	movs	r3, #3
 800189c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018aa:	4619      	mov	r1, r3
 80018ac:	4805      	ldr	r0, [pc, #20]	@ (80018c4 <HAL_ADC_MspInit+0xc0>)
 80018ae:	f001 fe71 	bl	8003594 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80018b2:	bf00      	nop
 80018b4:	37b0      	adds	r7, #176	@ 0xb0
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	42028000 	.word	0x42028000
 80018c0:	44020c00 	.word	0x44020c00
 80018c4:	42020000 	.word	0x42020000

080018c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b0ac      	sub	sp, #176	@ 0xb0
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	2288      	movs	r2, #136	@ 0x88
 80018e6:	2100      	movs	r1, #0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f006 ff12 	bl	8008712 <memset>
  if(hspi->Instance==SPI1)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a31      	ldr	r2, [pc, #196]	@ (80019b8 <HAL_SPI_MspInit+0xf0>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d15a      	bne.n	80019ae <HAL_SPI_MspInit+0xe6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80018f8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8001904:	2300      	movs	r3, #0
 8001906:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001908:	f107 0310 	add.w	r3, r7, #16
 800190c:	4618      	mov	r0, r3
 800190e:	f002 ff25 	bl	800475c <HAL_RCCEx_PeriphCLKConfig>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001918:	f7ff ff66 	bl	80017e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800191c:	4b27      	ldr	r3, [pc, #156]	@ (80019bc <HAL_SPI_MspInit+0xf4>)
 800191e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001922:	4a26      	ldr	r2, [pc, #152]	@ (80019bc <HAL_SPI_MspInit+0xf4>)
 8001924:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001928:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800192c:	4b23      	ldr	r3, [pc, #140]	@ (80019bc <HAL_SPI_MspInit+0xf4>)
 800192e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001932:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193a:	4b20      	ldr	r3, [pc, #128]	@ (80019bc <HAL_SPI_MspInit+0xf4>)
 800193c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001940:	4a1e      	ldr	r2, [pc, #120]	@ (80019bc <HAL_SPI_MspInit+0xf4>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800194a:	4b1c      	ldr	r3, [pc, #112]	@ (80019bc <HAL_SPI_MspInit+0xf4>)
 800194c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA0     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA8     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 8001958:	f240 1301 	movw	r3, #257	@ 0x101
 800195c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SPI1;
 8001972:	230c      	movs	r3, #12
 8001974:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001978:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800197c:	4619      	mov	r1, r3
 800197e:	4810      	ldr	r0, [pc, #64]	@ (80019c0 <HAL_SPI_MspInit+0xf8>)
 8001980:	f001 fe08 	bl	8003594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001984:	2380      	movs	r3, #128	@ 0x80
 8001986:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800199c:	2305      	movs	r3, #5
 800199e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80019a6:	4619      	mov	r1, r3
 80019a8:	4805      	ldr	r0, [pc, #20]	@ (80019c0 <HAL_SPI_MspInit+0xf8>)
 80019aa:	f001 fdf3 	bl	8003594 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80019ae:	bf00      	nop
 80019b0:	37b0      	adds	r7, #176	@ 0xb0
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40013000 	.word	0x40013000
 80019bc:	44020c00 	.word	0x44020c00
 80019c0:	42020000 	.word	0x42020000

080019c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b0b0      	sub	sp, #192	@ 0xc0
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019dc:	f107 0320 	add.w	r3, r7, #32
 80019e0:	2288      	movs	r2, #136	@ 0x88
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f006 fe94 	bl	8008712 <memset>
  if(huart->Instance==USART2)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a5d      	ldr	r2, [pc, #372]	@ (8001b64 <HAL_UART_MspInit+0x1a0>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d169      	bne.n	8001ac8 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019f4:	f04f 0202 	mov.w	r2, #2
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a00:	2300      	movs	r3, #0
 8001a02:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a04:	f107 0320 	add.w	r3, r7, #32
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f002 fea7 	bl	800475c <HAL_RCCEx_PeriphCLKConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001a14:	f7ff fee8 	bl	80017e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a18:	4b53      	ldr	r3, [pc, #332]	@ (8001b68 <HAL_UART_MspInit+0x1a4>)
 8001a1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a1e:	4a52      	ldr	r2, [pc, #328]	@ (8001b68 <HAL_UART_MspInit+0x1a4>)
 8001a20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a24:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001a28:	4b4f      	ldr	r3, [pc, #316]	@ (8001b68 <HAL_UART_MspInit+0x1a4>)
 8001a2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a32:	61fb      	str	r3, [r7, #28]
 8001a34:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	4b4c      	ldr	r3, [pc, #304]	@ (8001b68 <HAL_UART_MspInit+0x1a4>)
 8001a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a3c:	4a4a      	ldr	r2, [pc, #296]	@ (8001b68 <HAL_UART_MspInit+0x1a4>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a46:	4b48      	ldr	r3, [pc, #288]	@ (8001b68 <HAL_UART_MspInit+0x1a4>)
 8001a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	61bb      	str	r3, [r7, #24]
 8001a52:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a54:	4b44      	ldr	r3, [pc, #272]	@ (8001b68 <HAL_UART_MspInit+0x1a4>)
 8001a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a5a:	4a43      	ldr	r2, [pc, #268]	@ (8001b68 <HAL_UART_MspInit+0x1a4>)
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a64:	4b40      	ldr	r3, [pc, #256]	@ (8001b68 <HAL_UART_MspInit+0x1a4>)
 8001a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PB1     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a72:	2304      	movs	r3, #4
 8001a74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a8a:	2307      	movs	r3, #7
 8001a8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a94:	4619      	mov	r1, r3
 8001a96:	4835      	ldr	r0, [pc, #212]	@ (8001b6c <HAL_UART_MspInit+0x1a8>)
 8001a98:	f001 fd7c 	bl	8003594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_USART2;
 8001ab4:	2309      	movs	r3, #9
 8001ab6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aba:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001abe:	4619      	mov	r1, r3
 8001ac0:	482b      	ldr	r0, [pc, #172]	@ (8001b70 <HAL_UART_MspInit+0x1ac>)
 8001ac2:	f001 fd67 	bl	8003594 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ac6:	e049      	b.n	8001b5c <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART3)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a29      	ldr	r2, [pc, #164]	@ (8001b74 <HAL_UART_MspInit+0x1b0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d144      	bne.n	8001b5c <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ad2:	f04f 0204 	mov.w	r2, #4
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ae2:	f107 0320 	add.w	r3, r7, #32
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f002 fe38 	bl	800475c <HAL_RCCEx_PeriphCLKConfig>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_UART_MspInit+0x132>
      Error_Handler();
 8001af2:	f7ff fe79 	bl	80017e8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001af6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b68 <HAL_UART_MspInit+0x1a4>)
 8001af8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001afc:	4a1a      	ldr	r2, [pc, #104]	@ (8001b68 <HAL_UART_MspInit+0x1a4>)
 8001afe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b02:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001b06:	4b18      	ldr	r3, [pc, #96]	@ (8001b68 <HAL_UART_MspInit+0x1a4>)
 8001b08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b14:	4b14      	ldr	r3, [pc, #80]	@ (8001b68 <HAL_UART_MspInit+0x1a4>)
 8001b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b1a:	4a13      	ldr	r2, [pc, #76]	@ (8001b68 <HAL_UART_MspInit+0x1a4>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b24:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <HAL_UART_MspInit+0x1a4>)
 8001b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001b32:	2318      	movs	r3, #24
 8001b34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 8001b4a:	230d      	movs	r3, #13
 8001b4c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b50:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b54:	4619      	mov	r1, r3
 8001b56:	4805      	ldr	r0, [pc, #20]	@ (8001b6c <HAL_UART_MspInit+0x1a8>)
 8001b58:	f001 fd1c 	bl	8003594 <HAL_GPIO_Init>
}
 8001b5c:	bf00      	nop
 8001b5e:	37c0      	adds	r7, #192	@ 0xc0
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40004400 	.word	0x40004400
 8001b68:	44020c00 	.word	0x44020c00
 8001b6c:	42020000 	.word	0x42020000
 8001b70:	42020400 	.word	0x42020400
 8001b74:	40004800 	.word	0x40004800

08001b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <NMI_Handler+0x4>

08001b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <HardFault_Handler+0x4>

08001b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b8c:	bf00      	nop
 8001b8e:	e7fd      	b.n	8001b8c <MemManage_Handler+0x4>

08001b90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <BusFault_Handler+0x4>

08001b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <UsageFault_Handler+0x4>

08001ba0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bce:	f000 fa03 	bl	8001fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  return 1;
 8001bda:	2301      	movs	r3, #1
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <_kill>:

int _kill(int pid, int sig)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bf0:	f006 fde2 	bl	80087b8 <__errno>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2216      	movs	r2, #22
 8001bf8:	601a      	str	r2, [r3, #0]
  return -1;
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_exit>:

void _exit (int status)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c0e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ffe7 	bl	8001be6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c18:	bf00      	nop
 8001c1a:	e7fd      	b.n	8001c18 <_exit+0x12>

08001c1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	e00a      	b.n	8001c44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c2e:	f3af 8000 	nop.w
 8001c32:	4601      	mov	r1, r0
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	60ba      	str	r2, [r7, #8]
 8001c3a:	b2ca      	uxtb	r2, r1
 8001c3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	3301      	adds	r3, #1
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	dbf0      	blt.n	8001c2e <_read+0x12>
  }

  return len;
 8001c4c:	687b      	ldr	r3, [r7, #4]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	e009      	b.n	8001c7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	60ba      	str	r2, [r7, #8]
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff f9df 	bl	8001034 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	dbf1      	blt.n	8001c68 <_write+0x12>
  }
  return len;
 8001c84:	687b      	ldr	r3, [r7, #4]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <_close>:

int _close(int file)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cb6:	605a      	str	r2, [r3, #4]
  return 0;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <_isatty>:

int _isatty(int file)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cce:	2301      	movs	r3, #1
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d00:	4a14      	ldr	r2, [pc, #80]	@ (8001d54 <_sbrk+0x5c>)
 8001d02:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <_sbrk+0x60>)
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d0c:	4b13      	ldr	r3, [pc, #76]	@ (8001d5c <_sbrk+0x64>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d14:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <_sbrk+0x64>)
 8001d16:	4a12      	ldr	r2, [pc, #72]	@ (8001d60 <_sbrk+0x68>)
 8001d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d1a:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d207      	bcs.n	8001d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d28:	f006 fd46 	bl	80087b8 <__errno>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	220c      	movs	r2, #12
 8001d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295
 8001d36:	e009      	b.n	8001d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d38:	4b08      	ldr	r3, [pc, #32]	@ (8001d5c <_sbrk+0x64>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d3e:	4b07      	ldr	r3, [pc, #28]	@ (8001d5c <_sbrk+0x64>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	4a05      	ldr	r2, [pc, #20]	@ (8001d5c <_sbrk+0x64>)
 8001d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20008000 	.word	0x20008000
 8001d58:	00000400 	.word	0x00000400
 8001d5c:	2000051c 	.word	0x2000051c
 8001d60:	20000670 	.word	0x20000670

08001d64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d6a:	4b30      	ldr	r3, [pc, #192]	@ (8001e2c <SystemInit+0xc8>)
 8001d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d70:	4a2e      	ldr	r2, [pc, #184]	@ (8001e2c <SystemInit+0xc8>)
 8001d72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d76:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001d7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e30 <SystemInit+0xcc>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001d80:	4b2b      	ldr	r3, [pc, #172]	@ (8001e30 <SystemInit+0xcc>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001d86:	4b2a      	ldr	r3, [pc, #168]	@ (8001e30 <SystemInit+0xcc>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001d8c:	4b28      	ldr	r3, [pc, #160]	@ (8001e30 <SystemInit+0xcc>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4927      	ldr	r1, [pc, #156]	@ (8001e30 <SystemInit+0xcc>)
 8001d92:	4b28      	ldr	r3, [pc, #160]	@ (8001e34 <SystemInit+0xd0>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001d98:	4b25      	ldr	r3, [pc, #148]	@ (8001e30 <SystemInit+0xcc>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001d9e:	4b24      	ldr	r3, [pc, #144]	@ (8001e30 <SystemInit+0xcc>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001da4:	4b22      	ldr	r3, [pc, #136]	@ (8001e30 <SystemInit+0xcc>)
 8001da6:	4a24      	ldr	r2, [pc, #144]	@ (8001e38 <SystemInit+0xd4>)
 8001da8:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001daa:	4b21      	ldr	r3, [pc, #132]	@ (8001e30 <SystemInit+0xcc>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001db0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e30 <SystemInit+0xcc>)
 8001db2:	4a21      	ldr	r2, [pc, #132]	@ (8001e38 <SystemInit+0xd4>)
 8001db4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001db6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e30 <SystemInit+0xcc>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001e30 <SystemInit+0xcc>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e30 <SystemInit+0xcc>)
 8001dc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dc6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001dc8:	4b19      	ldr	r3, [pc, #100]	@ (8001e30 <SystemInit+0xcc>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dce:	4b17      	ldr	r3, [pc, #92]	@ (8001e2c <SystemInit+0xc8>)
 8001dd0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001dd4:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001dd6:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <SystemInit+0xd8>)
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001dde:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001de6:	d003      	beq.n	8001df0 <SystemInit+0x8c>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001dee:	d117      	bne.n	8001e20 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001df0:	4b12      	ldr	r3, [pc, #72]	@ (8001e3c <SystemInit+0xd8>)
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e3c <SystemInit+0xd8>)
 8001dfe:	4a10      	ldr	r2, [pc, #64]	@ (8001e40 <SystemInit+0xdc>)
 8001e00:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001e02:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <SystemInit+0xd8>)
 8001e04:	4a0f      	ldr	r2, [pc, #60]	@ (8001e44 <SystemInit+0xe0>)
 8001e06:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001e08:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <SystemInit+0xd8>)
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e3c <SystemInit+0xd8>)
 8001e0e:	f043 0302 	orr.w	r3, r3, #2
 8001e12:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001e14:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <SystemInit+0xd8>)
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	4a08      	ldr	r2, [pc, #32]	@ (8001e3c <SystemInit+0xd8>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	61d3      	str	r3, [r2, #28]
  }
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00
 8001e30:	44020c00 	.word	0x44020c00
 8001e34:	fae2eae3 	.word	0xfae2eae3
 8001e38:	01010280 	.word	0x01010280
 8001e3c:	40022000 	.word	0x40022000
 8001e40:	08192a3b 	.word	0x08192a3b
 8001e44:	4c5d6e7f 	.word	0x4c5d6e7f

08001e48 <Reset_Handler>:
 8001e48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e80 <LoopForever+0x2>
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	e003      	b.n	8001e58 <LoopCopyDataInit>

08001e50 <CopyDataInit>:
 8001e50:	4b0c      	ldr	r3, [pc, #48]	@ (8001e84 <LoopForever+0x6>)
 8001e52:	585b      	ldr	r3, [r3, r1]
 8001e54:	5043      	str	r3, [r0, r1]
 8001e56:	3104      	adds	r1, #4

08001e58 <LoopCopyDataInit>:
 8001e58:	480b      	ldr	r0, [pc, #44]	@ (8001e88 <LoopForever+0xa>)
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <LoopForever+0xe>)
 8001e5c:	1842      	adds	r2, r0, r1
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d3f6      	bcc.n	8001e50 <CopyDataInit>
 8001e62:	4a0b      	ldr	r2, [pc, #44]	@ (8001e90 <LoopForever+0x12>)
 8001e64:	e002      	b.n	8001e6c <LoopFillZerobss>

08001e66 <FillZerobss>:
 8001e66:	2300      	movs	r3, #0
 8001e68:	f842 3b04 	str.w	r3, [r2], #4

08001e6c <LoopFillZerobss>:
 8001e6c:	4b09      	ldr	r3, [pc, #36]	@ (8001e94 <LoopForever+0x16>)
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d3f9      	bcc.n	8001e66 <FillZerobss>
 8001e72:	f7ff ff77 	bl	8001d64 <SystemInit>
 8001e76:	f006 fca5 	bl	80087c4 <__libc_init_array>
 8001e7a:	f7ff f8ed 	bl	8001058 <main>

08001e7e <LoopForever>:
 8001e7e:	e7fe      	b.n	8001e7e <LoopForever>
 8001e80:	20008000 	.word	0x20008000
 8001e84:	0800c390 	.word	0x0800c390
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	200001ec 	.word	0x200001ec
 8001e90:	200001ec 	.word	0x200001ec
 8001e94:	20000670 	.word	0x20000670

08001e98 <ADC1_IRQHandler>:
 8001e98:	e7fe      	b.n	8001e98 <ADC1_IRQHandler>
	...

08001e9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea0:	2003      	movs	r0, #3
 8001ea2:	f001 f8d4 	bl	800304e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001ea6:	f002 facf 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee0 <HAL_Init+0x44>)
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	f003 030f 	and.w	r3, r3, #15
 8001eb4:	490b      	ldr	r1, [pc, #44]	@ (8001ee4 <HAL_Init+0x48>)
 8001eb6:	5ccb      	ldrb	r3, [r1, r3]
 8001eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee8 <HAL_Init+0x4c>)
 8001ebe:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001ec0:	2004      	movs	r0, #4
 8001ec2:	f001 f919 	bl	80030f8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ec6:	200f      	movs	r0, #15
 8001ec8:	f000 f810 	bl	8001eec <HAL_InitTick>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e002      	b.n	8001edc <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed6:	f7ff fc8d 	bl	80017f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	44020c00 	.word	0x44020c00
 8001ee4:	0800bf10 	.word	0x0800bf10
 8001ee8:	20000018 	.word	0x20000018

08001eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001ef8:	4b33      	ldr	r3, [pc, #204]	@ (8001fc8 <HAL_InitTick+0xdc>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e05c      	b.n	8001fbe <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001f04:	4b31      	ldr	r3, [pc, #196]	@ (8001fcc <HAL_InitTick+0xe0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d10c      	bne.n	8001f2a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001f10:	4b2f      	ldr	r3, [pc, #188]	@ (8001fd0 <HAL_InitTick+0xe4>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b2c      	ldr	r3, [pc, #176]	@ (8001fc8 <HAL_InitTick+0xdc>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	e037      	b.n	8001f9a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001f2a:	f001 f93d 	bl	80031a8 <HAL_SYSTICK_GetCLKSourceConfig>
 8001f2e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d023      	beq.n	8001f7e <HAL_InitTick+0x92>
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d82d      	bhi.n	8001f98 <HAL_InitTick+0xac>
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_InitTick+0x5e>
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d00d      	beq.n	8001f64 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001f48:	e026      	b.n	8001f98 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001f4a:	4b21      	ldr	r3, [pc, #132]	@ (8001fd0 <HAL_InitTick+0xe4>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc8 <HAL_InitTick+0xdc>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	4619      	mov	r1, r3
 8001f54:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001f58:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f60:	60fb      	str	r3, [r7, #12]
        break;
 8001f62:	e01a      	b.n	8001f9a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001f64:	4b18      	ldr	r3, [pc, #96]	@ (8001fc8 <HAL_InitTick+0xdc>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f72:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7a:	60fb      	str	r3, [r7, #12]
        break;
 8001f7c:	e00d      	b.n	8001f9a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001f7e:	4b12      	ldr	r3, [pc, #72]	@ (8001fc8 <HAL_InitTick+0xdc>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f88:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f8c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f94:	60fb      	str	r3, [r7, #12]
        break;
 8001f96:	e000      	b.n	8001f9a <HAL_InitTick+0xae>
        break;
 8001f98:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f001 f88a 	bl	80030b4 <HAL_SYSTICK_Config>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e009      	b.n	8001fbe <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001faa:	2200      	movs	r2, #0
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb2:	f001 f857 	bl	8003064 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001fb6:	4a07      	ldr	r2, [pc, #28]	@ (8001fd4 <HAL_InitTick+0xe8>)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000020 	.word	0x20000020
 8001fcc:	e000e010 	.word	0xe000e010
 8001fd0:	20000018 	.word	0x20000018
 8001fd4:	2000001c 	.word	0x2000001c

08001fd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <HAL_IncTick+0x20>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <HAL_IncTick+0x24>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	4a04      	ldr	r2, [pc, #16]	@ (8001ffc <HAL_IncTick+0x24>)
 8001fea:	6013      	str	r3, [r2, #0]
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20000020 	.word	0x20000020
 8001ffc:	20000520 	.word	0x20000520

08002000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return uwTick;
 8002004:	4b03      	ldr	r3, [pc, #12]	@ (8002014 <HAL_GetTick+0x14>)
 8002006:	681b      	ldr	r3, [r3, #0]
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20000520 	.word	0x20000520

08002018 <HAL_SBS_EnableVddIO1CompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.
  * @retval None
  */
void HAL_SBS_EnableVddIO1CompensationCell(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  SET_BIT(SBS->CCCSR, SBS_CCCSR_EN1) ;
 800201c:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <HAL_SBS_EnableVddIO1CompensationCell+0x20>)
 800201e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002022:	4a05      	ldr	r2, [pc, #20]	@ (8002038 <HAL_SBS_EnableVddIO1CompensationCell+0x20>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	44000400 	.word	0x44000400

0800203c <HAL_SBS_EnableVddIO2CompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.
  * @retval None
  */
void HAL_SBS_EnableVddIO2CompensationCell(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  SET_BIT(SBS->CCCSR, SBS_CCCSR_EN2) ;
 8002040:	4b06      	ldr	r3, [pc, #24]	@ (800205c <HAL_SBS_EnableVddIO2CompensationCell+0x20>)
 8002042:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002046:	4a05      	ldr	r2, [pc, #20]	@ (800205c <HAL_SBS_EnableVddIO2CompensationCell+0x20>)
 8002048:	f043 0304 	orr.w	r3, r3, #4
 800204c:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	44000400 	.word	0x44000400

08002060 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	609a      	str	r2, [r3, #8]
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	609a      	str	r2, [r3, #8]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP1       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP1);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80020d6:	f043 0202 	orr.w	r2, r3, #2
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <LL_ADC_EnableChannel0_GPIO+0x24>)
 80020f6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80020fa:	4a05      	ldr	r2, [pc, #20]	@ (8002110 <LL_ADC_EnableChannel0_GPIO+0x24>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	42028000 	.word	0x42028000

08002114 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002114:	b480      	push	{r7}
 8002116:	b087      	sub	sp, #28
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	3360      	adds	r3, #96	@ 0x60
 8002126:	461a      	mov	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b08      	ldr	r3, [pc, #32]	@ (8002158 <LL_ADC_SetOffset+0x44>)
 8002136:	4013      	ands	r3, r2
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	4313      	orrs	r3, r2
 8002144:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800214c:	bf00      	nop
 800214e:	371c      	adds	r7, #28
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	03fff000 	.word	0x03fff000

0800215c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3360      	adds	r3, #96	@ 0x60
 800216a:	461a      	mov	r2, r3
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800217c:	4618      	mov	r0, r3
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002188:	b480      	push	{r7}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3360      	adds	r3, #96	@ 0x60
 8002198:	461a      	mov	r2, r3
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	431a      	orrs	r2, r3
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021b2:	bf00      	nop
 80021b4:	371c      	adds	r7, #28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80021be:	b480      	push	{r7}
 80021c0:	b087      	sub	sp, #28
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	3360      	adds	r3, #96	@ 0x60
 80021ce:	461a      	mov	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	431a      	orrs	r2, r3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80021e8:	bf00      	nop
 80021ea:	371c      	adds	r7, #28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	3360      	adds	r3, #96	@ 0x60
 8002204:	461a      	mov	r2, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	431a      	orrs	r2, r3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800221e:	bf00      	nop
 8002220:	371c      	adds	r7, #28
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	615a      	str	r2, [r3, #20]
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002250:	b480      	push	{r7}
 8002252:	b087      	sub	sp, #28
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	3330      	adds	r3, #48	@ 0x30
 8002260:	461a      	mov	r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	0a1b      	lsrs	r3, r3, #8
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	f003 030c 	and.w	r3, r3, #12
 800226c:	4413      	add	r3, r2
 800226e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	f003 031f 	and.w	r3, r3, #31
 800227a:	211f      	movs	r1, #31
 800227c:	fa01 f303 	lsl.w	r3, r1, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	401a      	ands	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	0e9b      	lsrs	r3, r3, #26
 8002288:	f003 011f 	and.w	r1, r3, #31
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f003 031f 	and.w	r3, r3, #31
 8002292:	fa01 f303 	lsl.w	r3, r1, r3
 8002296:	431a      	orrs	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800229c:	bf00      	nop
 800229e:	371c      	adds	r7, #28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b087      	sub	sp, #28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	3314      	adds	r3, #20
 80022b8:	461a      	mov	r2, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	0e5b      	lsrs	r3, r3, #25
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	4413      	add	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	0d1b      	lsrs	r3, r3, #20
 80022d0:	f003 031f 	and.w	r3, r3, #31
 80022d4:	2107      	movs	r1, #7
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	401a      	ands	r2, r3
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	0d1b      	lsrs	r3, r3, #20
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ec:	431a      	orrs	r2, r3
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80022f2:	bf00      	nop
 80022f4:	371c      	adds	r7, #28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002318:	43db      	mvns	r3, r3
 800231a:	401a      	ands	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f003 0318 	and.w	r3, r3, #24
 8002322:	4908      	ldr	r1, [pc, #32]	@ (8002344 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002324:	40d9      	lsrs	r1, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	400b      	ands	r3, r1
 800232a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800232e:	431a      	orrs	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002336:	bf00      	nop
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	000fffff 	.word	0x000fffff

08002348 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002358:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6093      	str	r3, [r2, #8]
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800237c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002380:	d101      	bne.n	8002386 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80023a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023a8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023d0:	d101      	bne.n	80023d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <LL_ADC_IsEnabled+0x18>
 80023f8:	2301      	movs	r3, #1
 80023fa:	e000      	b.n	80023fe <LL_ADC_IsEnabled+0x1a>
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b04      	cmp	r3, #4
 800241c:	d101      	bne.n	8002422 <LL_ADC_REG_IsConversionOngoing+0x18>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b08      	cmp	r3, #8
 8002442:	d101      	bne.n	8002448 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e131      	b.n	80026d6 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247c:	2b00      	cmp	r3, #0
 800247e:	d109      	bne.n	8002494 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff f9bf 	bl	8001804 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ff67 	bl	800236c <LL_ADC_IsDeepPowerDownEnabled>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d004      	beq.n	80024ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff4d 	bl	8002348 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff ff82 	bl	80023bc <LL_ADC_IsInternalRegulatorEnabled>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d115      	bne.n	80024ea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff ff66 	bl	8002394 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024c8:	4b85      	ldr	r3, [pc, #532]	@ (80026e0 <HAL_ADC_Init+0x288>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	099b      	lsrs	r3, r3, #6
 80024ce:	4a85      	ldr	r2, [pc, #532]	@ (80026e4 <HAL_ADC_Init+0x28c>)
 80024d0:	fba2 2303 	umull	r2, r3, r2, r3
 80024d4:	099b      	lsrs	r3, r3, #6
 80024d6:	3301      	adds	r3, #1
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024dc:	e002      	b.n	80024e4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f9      	bne.n	80024de <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff ff64 	bl	80023bc <LL_ADC_IsInternalRegulatorEnabled>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10d      	bne.n	8002516 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fe:	f043 0210 	orr.w	r2, r3, #16
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800250a:	f043 0201 	orr.w	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff ff75 	bl	800240a <LL_ADC_REG_IsConversionOngoing>
 8002520:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	2b00      	cmp	r3, #0
 800252c:	f040 80ca 	bne.w	80026c4 <HAL_ADC_Init+0x26c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2b00      	cmp	r3, #0
 8002534:	f040 80c6 	bne.w	80026c4 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002540:	f043 0202 	orr.w	r2, r3, #2
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff49 	bl	80023e4 <LL_ADC_IsEnabled>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10b      	bne.n	8002570 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002558:	4863      	ldr	r0, [pc, #396]	@ (80026e8 <HAL_ADC_Init+0x290>)
 800255a:	f7ff ff43 	bl	80023e4 <LL_ADC_IsEnabled>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d105      	bne.n	8002570 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4619      	mov	r1, r3
 800256a:	4860      	ldr	r0, [pc, #384]	@ (80026ec <HAL_ADC_Init+0x294>)
 800256c:	f7ff fd78 	bl	8002060 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	7e5b      	ldrb	r3, [r3, #25]
 8002574:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800257a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002580:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002586:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800258e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3020 	ldrb.w	r3, [r3, #32]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d106      	bne.n	80025ac <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a2:	3b01      	subs	r3, #1
 80025a4:	045b      	lsls	r3, r3, #17
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d009      	beq.n	80025c8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	4b48      	ldr	r3, [pc, #288]	@ (80026f0 <HAL_ADC_Init+0x298>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	69b9      	ldr	r1, [r7, #24]
 80025d8:	430b      	orrs	r3, r1
 80025da:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff ff1a 	bl	8002430 <LL_ADC_INJ_IsConversionOngoing>
 80025fc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d13d      	bne.n	8002680 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d13a      	bne.n	8002680 <HAL_ADC_Init+0x228>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	7e1b      	ldrb	r3, [r3, #24]
 800260e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002616:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002626:	f023 0302 	bic.w	r3, r3, #2
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	69b9      	ldr	r1, [r7, #24]
 8002630:	430b      	orrs	r3, r1
 8002632:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800263a:	2b01      	cmp	r3, #1
 800263c:	d118      	bne.n	8002670 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002648:	f023 0304 	bic.w	r3, r3, #4
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002654:	4311      	orrs	r1, r2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800265a:	4311      	orrs	r1, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002660:	430a      	orrs	r2, r1
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f042 0201 	orr.w	r2, r2, #1
 800266c:	611a      	str	r2, [r3, #16]
 800266e:	e007      	b.n	8002680 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691a      	ldr	r2, [r3, #16]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0201 	bic.w	r2, r2, #1
 800267e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d10c      	bne.n	80026a2 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	f023 010f 	bic.w	r1, r3, #15
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	1e5a      	subs	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	631a      	str	r2, [r3, #48]	@ 0x30
 80026a0:	e007      	b.n	80026b2 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 020f 	bic.w	r2, r2, #15
 80026b0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b6:	f023 0303 	bic.w	r3, r3, #3
 80026ba:	f043 0201 	orr.w	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	659a      	str	r2, [r3, #88]	@ 0x58
 80026c2:	e007      	b.n	80026d4 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c8:	f043 0210 	orr.w	r2, r3, #16
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3720      	adds	r7, #32
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000018 	.word	0x20000018
 80026e4:	053e2d63 	.word	0x053e2d63
 80026e8:	42028000 	.word	0x42028000
 80026ec:	42028300 	.word	0x42028300
 80026f0:	fff04007 	.word	0xfff04007

080026f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b0b6      	sub	sp, #216	@ 0xd8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x22>
 8002712:	2302      	movs	r3, #2
 8002714:	e3d8      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x7d4>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff fe71 	bl	800240a <LL_ADC_REG_IsConversionOngoing>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	f040 83bd 	bne.w	8002eaa <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d104      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fcd5 	bl	80020ec <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	6859      	ldr	r1, [r3, #4]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	f7ff fd7e 	bl	8002250 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fe56 	bl	800240a <LL_ADC_REG_IsConversionOngoing>
 800275e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fe62 	bl	8002430 <LL_ADC_INJ_IsConversionOngoing>
 800276c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002770:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002774:	2b00      	cmp	r3, #0
 8002776:	f040 81d9 	bne.w	8002b2c <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800277a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800277e:	2b00      	cmp	r3, #0
 8002780:	f040 81d4 	bne.w	8002b2c <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800278c:	d10f      	bne.n	80027ae <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2200      	movs	r2, #0
 8002798:	4619      	mov	r1, r3
 800279a:	f7ff fd85 	bl	80022a8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fd3f 	bl	800222a <LL_ADC_SetSamplingTimeCommonConfig>
 80027ac:	e00e      	b.n	80027cc <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	6819      	ldr	r1, [r3, #0]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	461a      	mov	r2, r3
 80027bc:	f7ff fd74 	bl	80022a8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff fd2f 	bl	800222a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	695a      	ldr	r2, [r3, #20]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	08db      	lsrs	r3, r3, #3
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d022      	beq.n	8002834 <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6818      	ldr	r0, [r3, #0]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6919      	ldr	r1, [r3, #16]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80027fe:	f7ff fc89 	bl	8002114 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6919      	ldr	r1, [r3, #16]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	461a      	mov	r2, r3
 8002810:	f7ff fcd5 	bl	80021be <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002820:	2b01      	cmp	r3, #1
 8002822:	d102      	bne.n	800282a <HAL_ADC_ConfigChannel+0x136>
 8002824:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002828:	e000      	b.n	800282c <HAL_ADC_ConfigChannel+0x138>
 800282a:	2300      	movs	r3, #0
 800282c:	461a      	mov	r2, r3
 800282e:	f7ff fce1 	bl	80021f4 <LL_ADC_SetOffsetSaturation>
 8002832:	e17b      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2100      	movs	r1, #0
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff fc8e 	bl	800215c <LL_ADC_GetOffsetChannel>
 8002840:	4603      	mov	r3, r0
 8002842:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10a      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x16c>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2100      	movs	r1, #0
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fc83 	bl	800215c <LL_ADC_GetOffsetChannel>
 8002856:	4603      	mov	r3, r0
 8002858:	0e9b      	lsrs	r3, r3, #26
 800285a:	f003 021f 	and.w	r2, r3, #31
 800285e:	e01e      	b.n	800289e <HAL_ADC_ConfigChannel+0x1aa>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2100      	movs	r1, #0
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fc78 	bl	800215c <LL_ADC_GetOffsetChannel>
 800286c:	4603      	mov	r3, r0
 800286e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002872:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002876:	fa93 f3a3 	rbit	r3, r3
 800287a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 800287e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002882:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 8002886:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 800288e:	2320      	movs	r3, #32
 8002890:	e004      	b.n	800289c <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 8002892:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002896:	fab3 f383 	clz	r3, r3
 800289a:	b2db      	uxtb	r3, r3
 800289c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d105      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x1c2>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	0e9b      	lsrs	r3, r3, #26
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	e018      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x1f4>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80028ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80028d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 80028da:	2320      	movs	r3, #32
 80028dc:	e004      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 80028de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80028e2:	fab3 f383 	clz	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d106      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2200      	movs	r2, #0
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff fc47 	bl	8002188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2101      	movs	r1, #1
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fc2b 	bl	800215c <LL_ADC_GetOffsetChannel>
 8002906:	4603      	mov	r3, r0
 8002908:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10a      	bne.n	8002926 <HAL_ADC_ConfigChannel+0x232>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2101      	movs	r1, #1
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff fc20 	bl	800215c <LL_ADC_GetOffsetChannel>
 800291c:	4603      	mov	r3, r0
 800291e:	0e9b      	lsrs	r3, r3, #26
 8002920:	f003 021f 	and.w	r2, r3, #31
 8002924:	e01e      	b.n	8002964 <HAL_ADC_ConfigChannel+0x270>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2101      	movs	r1, #1
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fc15 	bl	800215c <LL_ADC_GetOffsetChannel>
 8002932:	4603      	mov	r3, r0
 8002934:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800293c:	fa93 f3a3 	rbit	r3, r3
 8002940:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002944:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002948:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800294c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 8002954:	2320      	movs	r3, #32
 8002956:	e004      	b.n	8002962 <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 8002958:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800295c:	fab3 f383 	clz	r3, r3
 8002960:	b2db      	uxtb	r3, r3
 8002962:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800296c:	2b00      	cmp	r3, #0
 800296e:	d105      	bne.n	800297c <HAL_ADC_ConfigChannel+0x288>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	0e9b      	lsrs	r3, r3, #26
 8002976:	f003 031f 	and.w	r3, r3, #31
 800297a:	e018      	b.n	80029ae <HAL_ADC_ConfigChannel+0x2ba>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002990:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002994:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002998:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 80029a0:	2320      	movs	r3, #32
 80029a2:	e004      	b.n	80029ae <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 80029a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80029a8:	fab3 f383 	clz	r3, r3
 80029ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d106      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2200      	movs	r2, #0
 80029b8:	2101      	movs	r1, #1
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fbe4 	bl	8002188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2102      	movs	r1, #2
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fbc8 	bl	800215c <LL_ADC_GetOffsetChannel>
 80029cc:	4603      	mov	r3, r0
 80029ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10a      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x2f8>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2102      	movs	r1, #2
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff fbbd 	bl	800215c <LL_ADC_GetOffsetChannel>
 80029e2:	4603      	mov	r3, r0
 80029e4:	0e9b      	lsrs	r3, r3, #26
 80029e6:	f003 021f 	and.w	r2, r3, #31
 80029ea:	e01e      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x336>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2102      	movs	r1, #2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fbb2 	bl	800215c <LL_ADC_GetOffsetChannel>
 80029f8:	4603      	mov	r3, r0
 80029fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002a0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002a12:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 8002a1a:	2320      	movs	r3, #32
 8002a1c:	e004      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 8002a1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d105      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x34e>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	0e9b      	lsrs	r3, r3, #26
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	e016      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x37c>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a4e:	fa93 f3a3 	rbit	r3, r3
 8002a52:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002a54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002a5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 8002a62:	2320      	movs	r3, #32
 8002a64:	e004      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 8002a66:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d106      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2102      	movs	r1, #2
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff fb83 	bl	8002188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2103      	movs	r1, #3
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fb67 	bl	800215c <LL_ADC_GetOffsetChannel>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10a      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x3ba>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2103      	movs	r1, #3
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff fb5c 	bl	800215c <LL_ADC_GetOffsetChannel>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	0e9b      	lsrs	r3, r3, #26
 8002aa8:	f003 021f 	and.w	r2, r3, #31
 8002aac:	e017      	b.n	8002ade <HAL_ADC_ConfigChannel+0x3ea>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2103      	movs	r1, #3
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fb51 	bl	800215c <LL_ADC_GetOffsetChannel>
 8002aba:	4603      	mov	r3, r0
 8002abc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ac0:	fa93 f3a3 	rbit	r3, r3
 8002ac4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002ac6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ac8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002aca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 8002ad0:	2320      	movs	r3, #32
 8002ad2:	e003      	b.n	8002adc <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 8002ad4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ad6:	fab3 f383 	clz	r3, r3
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d105      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x402>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	0e9b      	lsrs	r3, r3, #26
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	e011      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x426>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002afe:	fa93 f3a3 	rbit	r3, r3
 8002b02:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002b04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b06:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002b08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 8002b0e:	2320      	movs	r3, #32
 8002b10:	e003      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 8002b12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b14:	fab3 f383 	clz	r3, r3
 8002b18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d106      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2200      	movs	r2, #0
 8002b24:	2103      	movs	r1, #3
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff fb2e 	bl	8002188 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff fc57 	bl	80023e4 <LL_ADC_IsEnabled>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f040 813f 	bne.w	8002dbc <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6819      	ldr	r1, [r3, #0]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f7ff fbd8 	bl	8002300 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4a8e      	ldr	r2, [pc, #568]	@ (8002d90 <HAL_ADC_ConfigChannel+0x69c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	f040 8130 	bne.w	8002dbc <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10b      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x490>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	0e9b      	lsrs	r3, r3, #26
 8002b72:	3301      	adds	r3, #1
 8002b74:	f003 031f 	and.w	r3, r3, #31
 8002b78:	2b09      	cmp	r3, #9
 8002b7a:	bf94      	ite	ls
 8002b7c:	2301      	movls	r3, #1
 8002b7e:	2300      	movhi	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	e019      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x4c4>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b8c:	fa93 f3a3 	rbit	r3, r3
 8002b90:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002b92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b94:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002b96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002b9c:	2320      	movs	r3, #32
 8002b9e:	e003      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002ba0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	3301      	adds	r3, #1
 8002baa:	f003 031f 	and.w	r3, r3, #31
 8002bae:	2b09      	cmp	r3, #9
 8002bb0:	bf94      	ite	ls
 8002bb2:	2301      	movls	r3, #1
 8002bb4:	2300      	movhi	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d079      	beq.n	8002cb0 <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d107      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x4e4>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	0e9b      	lsrs	r3, r3, #26
 8002bce:	3301      	adds	r3, #1
 8002bd0:	069b      	lsls	r3, r3, #26
 8002bd2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bd6:	e015      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x510>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002be6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002be8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 8002bf0:	2320      	movs	r3, #32
 8002bf2:	e003      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 8002bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf6:	fab3 f383 	clz	r3, r3
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	069b      	lsls	r3, r3, #26
 8002c00:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d109      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x530>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	0e9b      	lsrs	r3, r3, #26
 8002c16:	3301      	adds	r3, #1
 8002c18:	f003 031f 	and.w	r3, r3, #31
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c22:	e017      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x560>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c2c:	fa93 f3a3 	rbit	r3, r3
 8002c30:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002c32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c34:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002c36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 8002c3c:	2320      	movs	r3, #32
 8002c3e:	e003      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 8002c40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c42:	fab3 f383 	clz	r3, r3
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	3301      	adds	r3, #1
 8002c4a:	f003 031f 	and.w	r3, r3, #31
 8002c4e:	2101      	movs	r1, #1
 8002c50:	fa01 f303 	lsl.w	r3, r1, r3
 8002c54:	ea42 0103 	orr.w	r1, r2, r3
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10a      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x586>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	0e9b      	lsrs	r3, r3, #26
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	f003 021f 	and.w	r2, r3, #31
 8002c70:	4613      	mov	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4413      	add	r3, r2
 8002c76:	051b      	lsls	r3, r3, #20
 8002c78:	e018      	b.n	8002cac <HAL_ADC_ConfigChannel+0x5b8>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002c8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 8002c92:	2320      	movs	r3, #32
 8002c94:	e003      	b.n	8002c9e <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 8002c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c98:	fab3 f383 	clz	r3, r3
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	f003 021f 	and.w	r2, r3, #31
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	4413      	add	r3, r2
 8002caa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cac:	430b      	orrs	r3, r1
 8002cae:	e080      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d107      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x5d8>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	0e9b      	lsrs	r3, r3, #26
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	069b      	lsls	r3, r3, #26
 8002cc6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cca:	e015      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x604>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cd4:	fa93 f3a3 	rbit	r3, r3
 8002cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cdc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 8002ce4:	2320      	movs	r3, #32
 8002ce6:	e003      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 8002ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	069b      	lsls	r3, r3, #26
 8002cf4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d109      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x624>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	0e9b      	lsrs	r3, r3, #26
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	f003 031f 	and.w	r3, r3, #31
 8002d10:	2101      	movs	r1, #1
 8002d12:	fa01 f303 	lsl.w	r3, r1, r3
 8002d16:	e017      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x654>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	fa93 f3a3 	rbit	r3, r3
 8002d24:	61fb      	str	r3, [r7, #28]
  return result;
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 8002d30:	2320      	movs	r3, #32
 8002d32:	e003      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 8002d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d36:	fab3 f383 	clz	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	f003 031f 	and.w	r3, r3, #31
 8002d42:	2101      	movs	r1, #1
 8002d44:	fa01 f303 	lsl.w	r3, r1, r3
 8002d48:	ea42 0103 	orr.w	r1, r2, r3
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10d      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x680>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	0e9b      	lsrs	r3, r3, #26
 8002d5e:	3301      	adds	r3, #1
 8002d60:	f003 021f 	and.w	r2, r3, #31
 8002d64:	4613      	mov	r3, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	4413      	add	r3, r2
 8002d6a:	3b1e      	subs	r3, #30
 8002d6c:	051b      	lsls	r3, r3, #20
 8002d6e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d72:	e01d      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x6bc>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	fa93 f3a3 	rbit	r3, r3
 8002d80:	613b      	str	r3, [r7, #16]
  return result;
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d103      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8002d8c:	2320      	movs	r3, #32
 8002d8e:	e005      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x6a8>
 8002d90:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	f003 021f 	and.w	r2, r3, #31
 8002da2:	4613      	mov	r3, r2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	4413      	add	r3, r2
 8002da8:	3b1e      	subs	r3, #30
 8002daa:	051b      	lsls	r3, r3, #20
 8002dac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002db0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002db6:	4619      	mov	r1, r3
 8002db8:	f7ff fa76 	bl	80022a8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4b43      	ldr	r3, [pc, #268]	@ (8002ed0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d079      	beq.n	8002ebc <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dc8:	4842      	ldr	r0, [pc, #264]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x7e0>)
 8002dca:	f7ff f96f 	bl	80020ac <LL_ADC_GetCommonPathInternalCh>
 8002dce:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a40      	ldr	r2, [pc, #256]	@ (8002ed8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d124      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ddc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002de0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d11e      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a3b      	ldr	r2, [pc, #236]	@ (8002edc <HAL_ADC_ConfigChannel+0x7e8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d164      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002df2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002df6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4835      	ldr	r0, [pc, #212]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x7e0>)
 8002dfe:	f7ff f942 	bl	8002086 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e02:	4b37      	ldr	r3, [pc, #220]	@ (8002ee0 <HAL_ADC_ConfigChannel+0x7ec>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	099b      	lsrs	r3, r3, #6
 8002e08:	4a36      	ldr	r2, [pc, #216]	@ (8002ee4 <HAL_ADC_ConfigChannel+0x7f0>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	099b      	lsrs	r3, r3, #6
 8002e10:	3301      	adds	r3, #1
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e16:	e002      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1f9      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e24:	e04a      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a2f      	ldr	r2, [pc, #188]	@ (8002ee8 <HAL_ADC_ConfigChannel+0x7f4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d113      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10d      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a26      	ldr	r2, [pc, #152]	@ (8002edc <HAL_ADC_ConfigChannel+0x7e8>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d13a      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4820      	ldr	r0, [pc, #128]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x7e0>)
 8002e52:	f7ff f918 	bl	8002086 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e56:	e031      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a23      	ldr	r2, [pc, #140]	@ (8002eec <HAL_ADC_ConfigChannel+0x7f8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d113      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10d      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a1a      	ldr	r2, [pc, #104]	@ (8002edc <HAL_ADC_ConfigChannel+0x7e8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d121      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e7c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e80:	4619      	mov	r1, r3
 8002e82:	4814      	ldr	r0, [pc, #80]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x7e0>)
 8002e84:	f7ff f8ff 	bl	8002086 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e88:	e018      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a18      	ldr	r2, [pc, #96]	@ (8002ef0 <HAL_ADC_ConfigChannel+0x7fc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d113      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a10      	ldr	r2, [pc, #64]	@ (8002edc <HAL_ADC_ConfigChannel+0x7e8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00e      	beq.n	8002ebc <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff f910 	bl	80020c8 <LL_ADC_EnableChannelVDDcore>
 8002ea8:	e008      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eae:	f043 0220 	orr.w	r2, r3, #32
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002ec4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	37d8      	adds	r7, #216	@ 0xd8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	80080000 	.word	0x80080000
 8002ed4:	42028300 	.word	0x42028300
 8002ed8:	c3210000 	.word	0xc3210000
 8002edc:	42028000 	.word	0x42028000
 8002ee0:	20000018 	.word	0x20000018
 8002ee4:	053e2d63 	.word	0x053e2d63
 8002ee8:	88600004 	.word	0x88600004
 8002eec:	c7520000 	.word	0xc7520000
 8002ef0:	99200040 	.word	0x99200040

08002ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f04:	4b0c      	ldr	r3, [pc, #48]	@ (8002f38 <__NVIC_SetPriorityGrouping+0x44>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f10:	4013      	ands	r3, r2
 8002f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f26:	4a04      	ldr	r2, [pc, #16]	@ (8002f38 <__NVIC_SetPriorityGrouping+0x44>)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	60d3      	str	r3, [r2, #12]
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	e000ed00 	.word	0xe000ed00

08002f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f40:	4b04      	ldr	r3, [pc, #16]	@ (8002f54 <__NVIC_GetPriorityGrouping+0x18>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	0a1b      	lsrs	r3, r3, #8
 8002f46:	f003 0307 	and.w	r3, r3, #7
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	db0b      	blt.n	8002f82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	f003 021f 	and.w	r2, r3, #31
 8002f70:	4907      	ldr	r1, [pc, #28]	@ (8002f90 <__NVIC_EnableIRQ+0x38>)
 8002f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	2001      	movs	r0, #1
 8002f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	e000e100 	.word	0xe000e100

08002f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	6039      	str	r1, [r7, #0]
 8002f9e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	db0a      	blt.n	8002fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	490c      	ldr	r1, [pc, #48]	@ (8002fe0 <__NVIC_SetPriority+0x4c>)
 8002fae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fb2:	0112      	lsls	r2, r2, #4
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fbc:	e00a      	b.n	8002fd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	4908      	ldr	r1, [pc, #32]	@ (8002fe4 <__NVIC_SetPriority+0x50>)
 8002fc4:	88fb      	ldrh	r3, [r7, #6]
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	3b04      	subs	r3, #4
 8002fcc:	0112      	lsls	r2, r2, #4
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	761a      	strb	r2, [r3, #24]
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	e000e100 	.word	0xe000e100
 8002fe4:	e000ed00 	.word	0xe000ed00

08002fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b089      	sub	sp, #36	@ 0x24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f1c3 0307 	rsb	r3, r3, #7
 8003002:	2b04      	cmp	r3, #4
 8003004:	bf28      	it	cs
 8003006:	2304      	movcs	r3, #4
 8003008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3304      	adds	r3, #4
 800300e:	2b06      	cmp	r3, #6
 8003010:	d902      	bls.n	8003018 <NVIC_EncodePriority+0x30>
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3b03      	subs	r3, #3
 8003016:	e000      	b.n	800301a <NVIC_EncodePriority+0x32>
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800301c:	f04f 32ff 	mov.w	r2, #4294967295
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43da      	mvns	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	401a      	ands	r2, r3
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003030:	f04f 31ff 	mov.w	r1, #4294967295
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	fa01 f303 	lsl.w	r3, r1, r3
 800303a:	43d9      	mvns	r1, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003040:	4313      	orrs	r3, r2
         );
}
 8003042:	4618      	mov	r0, r3
 8003044:	3724      	adds	r7, #36	@ 0x24
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff ff4c 	bl	8002ef4 <__NVIC_SetPriorityGrouping>
}
 800305c:	bf00      	nop
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003072:	f7ff ff63 	bl	8002f3c <__NVIC_GetPriorityGrouping>
 8003076:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	68b9      	ldr	r1, [r7, #8]
 800307c:	6978      	ldr	r0, [r7, #20]
 800307e:	f7ff ffb3 	bl	8002fe8 <NVIC_EncodePriority>
 8003082:	4602      	mov	r2, r0
 8003084:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003088:	4611      	mov	r1, r2
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff ff82 	bl	8002f94 <__NVIC_SetPriority>
}
 8003090:	bf00      	nop
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff ff56 	bl	8002f58 <__NVIC_EnableIRQ>
}
 80030ac:	bf00      	nop
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3b01      	subs	r3, #1
 80030c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030c4:	d301      	bcc.n	80030ca <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80030c6:	2301      	movs	r3, #1
 80030c8:	e00d      	b.n	80030e6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80030ca:	4a0a      	ldr	r2, [pc, #40]	@ (80030f4 <HAL_SYSTICK_Config+0x40>)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80030d2:	4b08      	ldr	r3, [pc, #32]	@ (80030f4 <HAL_SYSTICK_Config+0x40>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80030d8:	4b06      	ldr	r3, [pc, #24]	@ (80030f4 <HAL_SYSTICK_Config+0x40>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a05      	ldr	r2, [pc, #20]	@ (80030f4 <HAL_SYSTICK_Config+0x40>)
 80030de:	f043 0303 	orr.w	r3, r3, #3
 80030e2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	e000e010 	.word	0xe000e010

080030f8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b04      	cmp	r3, #4
 8003104:	d844      	bhi.n	8003190 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8003106:	a201      	add	r2, pc, #4	@ (adr r2, 800310c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310c:	0800312f 	.word	0x0800312f
 8003110:	0800314d 	.word	0x0800314d
 8003114:	0800316f 	.word	0x0800316f
 8003118:	08003191 	.word	0x08003191
 800311c:	08003121 	.word	0x08003121
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003120:	4b1f      	ldr	r3, [pc, #124]	@ (80031a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a1e      	ldr	r2, [pc, #120]	@ (80031a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003126:	f043 0304 	orr.w	r3, r3, #4
 800312a:	6013      	str	r3, [r2, #0]
      break;
 800312c:	e031      	b.n	8003192 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800312e:	4b1c      	ldr	r3, [pc, #112]	@ (80031a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a1b      	ldr	r2, [pc, #108]	@ (80031a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003134:	f023 0304 	bic.w	r3, r3, #4
 8003138:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800313a:	4b1a      	ldr	r3, [pc, #104]	@ (80031a4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800313c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003140:	4a18      	ldr	r2, [pc, #96]	@ (80031a4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003142:	f023 030c 	bic.w	r3, r3, #12
 8003146:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800314a:	e022      	b.n	8003192 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800314c:	4b14      	ldr	r3, [pc, #80]	@ (80031a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a13      	ldr	r2, [pc, #76]	@ (80031a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003152:	f023 0304 	bic.w	r3, r3, #4
 8003156:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8003158:	4b12      	ldr	r3, [pc, #72]	@ (80031a4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800315a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800315e:	f023 030c 	bic.w	r3, r3, #12
 8003162:	4a10      	ldr	r2, [pc, #64]	@ (80031a4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003164:	f043 0304 	orr.w	r3, r3, #4
 8003168:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800316c:	e011      	b.n	8003192 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800316e:	4b0c      	ldr	r3, [pc, #48]	@ (80031a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a0b      	ldr	r2, [pc, #44]	@ (80031a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003174:	f023 0304 	bic.w	r3, r3, #4
 8003178:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800317a:	4b0a      	ldr	r3, [pc, #40]	@ (80031a4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800317c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003180:	f023 030c 	bic.w	r3, r3, #12
 8003184:	4a07      	ldr	r2, [pc, #28]	@ (80031a4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003186:	f043 0308 	orr.w	r3, r3, #8
 800318a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800318e:	e000      	b.n	8003192 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003190:	bf00      	nop
  }
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	e000e010 	.word	0xe000e010
 80031a4:	44020c00 	.word	0x44020c00

080031a8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80031ae:	4b17      	ldr	r3, [pc, #92]	@ (800320c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80031ba:	2304      	movs	r3, #4
 80031bc:	607b      	str	r3, [r7, #4]
 80031be:	e01e      	b.n	80031fe <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80031c0:	4b13      	ldr	r3, [pc, #76]	@ (8003210 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80031c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d00f      	beq.n	80031f2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d80f      	bhi.n	80031f8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d003      	beq.n	80031ec <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80031e4:	e008      	b.n	80031f8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80031e6:	2300      	movs	r3, #0
 80031e8:	607b      	str	r3, [r7, #4]
        break;
 80031ea:	e008      	b.n	80031fe <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80031ec:	2301      	movs	r3, #1
 80031ee:	607b      	str	r3, [r7, #4]
        break;
 80031f0:	e005      	b.n	80031fe <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80031f2:	2302      	movs	r3, #2
 80031f4:	607b      	str	r3, [r7, #4]
        break;
 80031f6:	e002      	b.n	80031fe <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80031f8:	2300      	movs	r3, #0
 80031fa:	607b      	str	r3, [r7, #4]
        break;
 80031fc:	bf00      	nop
    }
  }
  return systick_source;
 80031fe:	687b      	ldr	r3, [r7, #4]
}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	e000e010 	.word	0xe000e010
 8003210:	44020c00 	.word	0x44020c00

08003214 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e02b      	b.n	8003280 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003230:	f023 030f 	bic.w	r3, r3, #15
 8003234:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323e:	3b50      	subs	r3, #80	@ 0x50
 8003240:	09db      	lsrs	r3, r3, #7
 8003242:	f003 031f 	and.w	r3, r3, #31
 8003246:	2201      	movs	r2, #1
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	2b00      	cmp	r3, #0
 8003256:	d012      	beq.n	800327e <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	f003 0311 	and.w	r3, r3, #17
 800325e:	2b11      	cmp	r3, #17
 8003260:	d106      	bne.n	8003270 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	431a      	orrs	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	605a      	str	r2, [r3, #4]
 800326e:	e006      	b.n	800327e <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	43db      	mvns	r3, r3
 8003278:	401a      	ands	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003294:	f7fe feb4 	bl	8002000 <HAL_GetTick>
 8003298:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e085      	b.n	80033b0 <HAL_DMAEx_List_Init+0x124>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a43      	ldr	r2, [pc, #268]	@ (80033b8 <HAL_DMAEx_List_Init+0x12c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d049      	beq.n	8003342 <HAL_DMAEx_List_Init+0xb6>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a42      	ldr	r2, [pc, #264]	@ (80033bc <HAL_DMAEx_List_Init+0x130>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d044      	beq.n	8003342 <HAL_DMAEx_List_Init+0xb6>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a40      	ldr	r2, [pc, #256]	@ (80033c0 <HAL_DMAEx_List_Init+0x134>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d03f      	beq.n	8003342 <HAL_DMAEx_List_Init+0xb6>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a3f      	ldr	r2, [pc, #252]	@ (80033c4 <HAL_DMAEx_List_Init+0x138>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d03a      	beq.n	8003342 <HAL_DMAEx_List_Init+0xb6>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a3d      	ldr	r2, [pc, #244]	@ (80033c8 <HAL_DMAEx_List_Init+0x13c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d035      	beq.n	8003342 <HAL_DMAEx_List_Init+0xb6>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a3c      	ldr	r2, [pc, #240]	@ (80033cc <HAL_DMAEx_List_Init+0x140>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d030      	beq.n	8003342 <HAL_DMAEx_List_Init+0xb6>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a3a      	ldr	r2, [pc, #232]	@ (80033d0 <HAL_DMAEx_List_Init+0x144>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d02b      	beq.n	8003342 <HAL_DMAEx_List_Init+0xb6>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a39      	ldr	r2, [pc, #228]	@ (80033d4 <HAL_DMAEx_List_Init+0x148>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d026      	beq.n	8003342 <HAL_DMAEx_List_Init+0xb6>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a37      	ldr	r2, [pc, #220]	@ (80033d8 <HAL_DMAEx_List_Init+0x14c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d021      	beq.n	8003342 <HAL_DMAEx_List_Init+0xb6>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a36      	ldr	r2, [pc, #216]	@ (80033dc <HAL_DMAEx_List_Init+0x150>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d01c      	beq.n	8003342 <HAL_DMAEx_List_Init+0xb6>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a34      	ldr	r2, [pc, #208]	@ (80033e0 <HAL_DMAEx_List_Init+0x154>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d017      	beq.n	8003342 <HAL_DMAEx_List_Init+0xb6>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a33      	ldr	r2, [pc, #204]	@ (80033e4 <HAL_DMAEx_List_Init+0x158>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d012      	beq.n	8003342 <HAL_DMAEx_List_Init+0xb6>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a31      	ldr	r2, [pc, #196]	@ (80033e8 <HAL_DMAEx_List_Init+0x15c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d00d      	beq.n	8003342 <HAL_DMAEx_List_Init+0xb6>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a30      	ldr	r2, [pc, #192]	@ (80033ec <HAL_DMAEx_List_Init+0x160>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d008      	beq.n	8003342 <HAL_DMAEx_List_Init+0xb6>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a2e      	ldr	r2, [pc, #184]	@ (80033f0 <HAL_DMAEx_List_Init+0x164>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d003      	beq.n	8003342 <HAL_DMAEx_List_Init+0xb6>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a2d      	ldr	r2, [pc, #180]	@ (80033f4 <HAL_DMAEx_List_Init+0x168>)
 8003340:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2202      	movs	r2, #2
 800334e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695a      	ldr	r2, [r3, #20]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0206 	orr.w	r2, r2, #6
 8003360:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003362:	e00f      	b.n	8003384 <HAL_DMAEx_List_Init+0xf8>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003364:	f7fe fe4c 	bl	8002000 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b05      	cmp	r3, #5
 8003370:	d908      	bls.n	8003384 <HAL_DMAEx_List_Init+0xf8>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2210      	movs	r2, #16
 8003376:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2203      	movs	r2, #3
 800337c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e015      	b.n	80033b0 <HAL_DMAEx_List_Init+0x124>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1e8      	bne.n	8003364 <HAL_DMAEx_List_Init+0xd8>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f830 	bl	80033f8 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40020050 	.word	0x40020050
 80033bc:	400200d0 	.word	0x400200d0
 80033c0:	40020150 	.word	0x40020150
 80033c4:	400201d0 	.word	0x400201d0
 80033c8:	40020250 	.word	0x40020250
 80033cc:	400202d0 	.word	0x400202d0
 80033d0:	40020350 	.word	0x40020350
 80033d4:	400203d0 	.word	0x400203d0
 80033d8:	40021050 	.word	0x40021050
 80033dc:	400210d0 	.word	0x400210d0
 80033e0:	40021150 	.word	0x40021150
 80033e4:	400211d0 	.word	0x400211d0
 80033e8:	40021250 	.word	0x40021250
 80033ec:	400212d0 	.word	0x400212d0
 80033f0:	40021350 	.word	0x40021350
 80033f4:	400213d0 	.word	0x400213d0

080033f8 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a50      	ldr	r2, [pc, #320]	@ (8003554 <DMA_List_Init+0x15c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d04a      	beq.n	80034ac <DMA_List_Init+0xb4>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a4f      	ldr	r2, [pc, #316]	@ (8003558 <DMA_List_Init+0x160>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d045      	beq.n	80034ac <DMA_List_Init+0xb4>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a4d      	ldr	r2, [pc, #308]	@ (800355c <DMA_List_Init+0x164>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d040      	beq.n	80034ac <DMA_List_Init+0xb4>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a4c      	ldr	r2, [pc, #304]	@ (8003560 <DMA_List_Init+0x168>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d03b      	beq.n	80034ac <DMA_List_Init+0xb4>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a4a      	ldr	r2, [pc, #296]	@ (8003564 <DMA_List_Init+0x16c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d036      	beq.n	80034ac <DMA_List_Init+0xb4>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a49      	ldr	r2, [pc, #292]	@ (8003568 <DMA_List_Init+0x170>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d031      	beq.n	80034ac <DMA_List_Init+0xb4>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a47      	ldr	r2, [pc, #284]	@ (800356c <DMA_List_Init+0x174>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d02c      	beq.n	80034ac <DMA_List_Init+0xb4>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a46      	ldr	r2, [pc, #280]	@ (8003570 <DMA_List_Init+0x178>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d027      	beq.n	80034ac <DMA_List_Init+0xb4>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a44      	ldr	r2, [pc, #272]	@ (8003574 <DMA_List_Init+0x17c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d022      	beq.n	80034ac <DMA_List_Init+0xb4>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a43      	ldr	r2, [pc, #268]	@ (8003578 <DMA_List_Init+0x180>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d01d      	beq.n	80034ac <DMA_List_Init+0xb4>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a41      	ldr	r2, [pc, #260]	@ (800357c <DMA_List_Init+0x184>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d018      	beq.n	80034ac <DMA_List_Init+0xb4>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a40      	ldr	r2, [pc, #256]	@ (8003580 <DMA_List_Init+0x188>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d013      	beq.n	80034ac <DMA_List_Init+0xb4>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a3e      	ldr	r2, [pc, #248]	@ (8003584 <DMA_List_Init+0x18c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d00e      	beq.n	80034ac <DMA_List_Init+0xb4>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a3d      	ldr	r2, [pc, #244]	@ (8003588 <DMA_List_Init+0x190>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d009      	beq.n	80034ac <DMA_List_Init+0xb4>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a3b      	ldr	r2, [pc, #236]	@ (800358c <DMA_List_Init+0x194>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d004      	beq.n	80034ac <DMA_List_Init+0xb4>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a3a      	ldr	r2, [pc, #232]	@ (8003590 <DMA_List_Init+0x198>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d101      	bne.n	80034b0 <DMA_List_Init+0xb8>
 80034ac:	2301      	movs	r3, #1
 80034ae:	e000      	b.n	80034b2 <DMA_List_Init+0xba>
 80034b0:	2300      	movs	r3, #0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d004      	beq.n	80034c0 <DMA_List_Init+0xc8>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2200      	movs	r2, #0
 80034da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80034e4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2200      	movs	r2, #0
 80034ec:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2200      	movs	r2, #0
 80034f4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2200      	movs	r2, #0
 80034fc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a1a      	ldr	r2, [pc, #104]	@ (800356c <DMA_List_Init+0x174>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00e      	beq.n	8003526 <DMA_List_Init+0x12e>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a18      	ldr	r2, [pc, #96]	@ (8003570 <DMA_List_Init+0x178>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d009      	beq.n	8003526 <DMA_List_Init+0x12e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a1d      	ldr	r2, [pc, #116]	@ (800358c <DMA_List_Init+0x194>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d004      	beq.n	8003526 <DMA_List_Init+0x12e>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1b      	ldr	r2, [pc, #108]	@ (8003590 <DMA_List_Init+0x198>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d101      	bne.n	800352a <DMA_List_Init+0x132>
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <DMA_List_Init+0x134>
 800352a:	2300      	movs	r3, #0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d007      	beq.n	8003540 <DMA_List_Init+0x148>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2200      	movs	r2, #0
 8003536:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2200      	movs	r2, #0
 800353e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2200      	movs	r2, #0
 8003546:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003548:	bf00      	nop
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	40020050 	.word	0x40020050
 8003558:	400200d0 	.word	0x400200d0
 800355c:	40020150 	.word	0x40020150
 8003560:	400201d0 	.word	0x400201d0
 8003564:	40020250 	.word	0x40020250
 8003568:	400202d0 	.word	0x400202d0
 800356c:	40020350 	.word	0x40020350
 8003570:	400203d0 	.word	0x400203d0
 8003574:	40021050 	.word	0x40021050
 8003578:	400210d0 	.word	0x400210d0
 800357c:	40021150 	.word	0x40021150
 8003580:	400211d0 	.word	0x400211d0
 8003584:	40021250 	.word	0x40021250
 8003588:	400212d0 	.word	0x400212d0
 800358c:	40021350 	.word	0x40021350
 8003590:	400213d0 	.word	0x400213d0

08003594 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003594:	b480      	push	{r7}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80035a2:	e136      	b.n	8003812 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	2101      	movs	r1, #1
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	fa01 f303 	lsl.w	r3, r1, r3
 80035b0:	4013      	ands	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 8128 	beq.w	800380c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d003      	beq.n	80035cc <HAL_GPIO_Init+0x38>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b12      	cmp	r3, #18
 80035ca:	d125      	bne.n	8003618 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	08da      	lsrs	r2, r3, #3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3208      	adds	r2, #8
 80035d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035d8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	220f      	movs	r2, #15
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4013      	ands	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	f003 020f 	and.w	r2, r3, #15
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	4313      	orrs	r3, r2
 8003608:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	08da      	lsrs	r2, r3, #3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3208      	adds	r2, #8
 8003612:	6979      	ldr	r1, [r7, #20]
 8003614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	2203      	movs	r2, #3
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	43db      	mvns	r3, r3
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	4013      	ands	r3, r2
 800362e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 0203 	and.w	r2, r3, #3
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	4313      	orrs	r3, r2
 8003644:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d00b      	beq.n	800366c <HAL_GPIO_Init+0xd8>
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	2b02      	cmp	r3, #2
 800365a:	d007      	beq.n	800366c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003660:	2b11      	cmp	r3, #17
 8003662:	d003      	beq.n	800366c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2b12      	cmp	r3, #18
 800366a:	d130      	bne.n	80036ce <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	2203      	movs	r2, #3
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	4013      	ands	r3, r2
 8003682:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036a2:	2201      	movs	r2, #1
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	43db      	mvns	r3, r3
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	4013      	ands	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	091b      	lsrs	r3, r3, #4
 80036b8:	f003 0201 	and.w	r2, r3, #1
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b03      	cmp	r3, #3
 80036d4:	d017      	beq.n	8003706 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	2203      	movs	r2, #3
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43db      	mvns	r3, r3
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	4013      	ands	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d07c      	beq.n	800380c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003712:	4a47      	ldr	r2, [pc, #284]	@ (8003830 <HAL_GPIO_Init+0x29c>)
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	089b      	lsrs	r3, r3, #2
 8003718:	3318      	adds	r3, #24
 800371a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800371e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	220f      	movs	r2, #15
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	43db      	mvns	r3, r3
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	4013      	ands	r3, r2
 8003734:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	0a9a      	lsrs	r2, r3, #10
 800373a:	4b3e      	ldr	r3, [pc, #248]	@ (8003834 <HAL_GPIO_Init+0x2a0>)
 800373c:	4013      	ands	r3, r2
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	f002 0203 	and.w	r2, r2, #3
 8003744:	00d2      	lsls	r2, r2, #3
 8003746:	4093      	lsls	r3, r2
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	4313      	orrs	r3, r2
 800374c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800374e:	4938      	ldr	r1, [pc, #224]	@ (8003830 <HAL_GPIO_Init+0x29c>)
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	089b      	lsrs	r3, r3, #2
 8003754:	3318      	adds	r3, #24
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800375c:	4b34      	ldr	r3, [pc, #208]	@ (8003830 <HAL_GPIO_Init+0x29c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	43db      	mvns	r3, r3
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	4013      	ands	r3, r2
 800376a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003780:	4a2b      	ldr	r2, [pc, #172]	@ (8003830 <HAL_GPIO_Init+0x29c>)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003786:	4b2a      	ldr	r3, [pc, #168]	@ (8003830 <HAL_GPIO_Init+0x29c>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	43db      	mvns	r3, r3
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	4013      	ands	r3, r2
 8003794:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80037aa:	4a21      	ldr	r2, [pc, #132]	@ (8003830 <HAL_GPIO_Init+0x29c>)
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80037b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003830 <HAL_GPIO_Init+0x29c>)
 80037b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037b6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	43db      	mvns	r3, r3
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	4013      	ands	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80037d6:	4a16      	ldr	r2, [pc, #88]	@ (8003830 <HAL_GPIO_Init+0x29c>)
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80037de:	4b14      	ldr	r3, [pc, #80]	@ (8003830 <HAL_GPIO_Init+0x29c>)
 80037e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037e4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	43db      	mvns	r3, r3
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4013      	ands	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003804:	4a0a      	ldr	r2, [pc, #40]	@ (8003830 <HAL_GPIO_Init+0x29c>)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	3301      	adds	r3, #1
 8003810:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	fa22 f303 	lsr.w	r3, r2, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	f47f aec1 	bne.w	80035a4 <HAL_GPIO_Init+0x10>
  }
}
 8003822:	bf00      	nop
 8003824:	bf00      	nop
 8003826:	371c      	adds	r7, #28
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	44022000 	.word	0x44022000
 8003834:	002f7f7f 	.word	0x002f7f7f

08003838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	807b      	strh	r3, [r7, #2]
 8003844:	4613      	mov	r3, r2
 8003846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003848:	787b      	ldrb	r3, [r7, #1]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800384e:	887a      	ldrh	r2, [r7, #2]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003854:	e002      	b.n	800385c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003856:	887a      	ldrh	r2, [r7, #2]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d102      	bne.n	800387c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	f000 bc28 	b.w	80040cc <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800387c:	4b94      	ldr	r3, [pc, #592]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	f003 0318 	and.w	r3, r3, #24
 8003884:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003886:	4b92      	ldr	r3, [pc, #584]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 8003888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	2b00      	cmp	r3, #0
 800389a:	d05b      	beq.n	8003954 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d005      	beq.n	80038ae <HAL_RCC_OscConfig+0x46>
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	2b18      	cmp	r3, #24
 80038a6:	d114      	bne.n	80038d2 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d111      	bne.n	80038d2 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d102      	bne.n	80038bc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	f000 bc08 	b.w	80040cc <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80038bc:	4b84      	ldr	r3, [pc, #528]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	041b      	lsls	r3, r3, #16
 80038ca:	4981      	ldr	r1, [pc, #516]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80038d0:	e040      	b.n	8003954 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d023      	beq.n	8003922 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80038da:	4b7d      	ldr	r3, [pc, #500]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a7c      	ldr	r2, [pc, #496]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 80038e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e6:	f7fe fb8b 	bl	8002000 <HAL_GetTick>
 80038ea:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80038ee:	f7fe fb87 	bl	8002000 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e3e5      	b.n	80040cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003900:	4b73      	ldr	r3, [pc, #460]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0f0      	beq.n	80038ee <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800390c:	4b70      	ldr	r3, [pc, #448]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	041b      	lsls	r3, r3, #16
 800391a:	496d      	ldr	r1, [pc, #436]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 800391c:	4313      	orrs	r3, r2
 800391e:	618b      	str	r3, [r1, #24]
 8003920:	e018      	b.n	8003954 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003922:	4b6b      	ldr	r3, [pc, #428]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a6a      	ldr	r2, [pc, #424]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 8003928:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800392c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392e:	f7fe fb67 	bl	8002000 <HAL_GetTick>
 8003932:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003936:	f7fe fb63 	bl	8002000 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e3c1      	b.n	80040cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003948:	4b61      	ldr	r3, [pc, #388]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1f0      	bne.n	8003936 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 80a0 	beq.w	8003aa2 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	2b10      	cmp	r3, #16
 8003966:	d005      	beq.n	8003974 <HAL_RCC_OscConfig+0x10c>
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	2b18      	cmp	r3, #24
 800396c:	d109      	bne.n	8003982 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2b03      	cmp	r3, #3
 8003972:	d106      	bne.n	8003982 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	f040 8092 	bne.w	8003aa2 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e3a4      	b.n	80040cc <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800398a:	d106      	bne.n	800399a <HAL_RCC_OscConfig+0x132>
 800398c:	4b50      	ldr	r3, [pc, #320]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a4f      	ldr	r2, [pc, #316]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 8003992:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	e058      	b.n	8003a4c <HAL_RCC_OscConfig+0x1e4>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d112      	bne.n	80039c8 <HAL_RCC_OscConfig+0x160>
 80039a2:	4b4b      	ldr	r3, [pc, #300]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a4a      	ldr	r2, [pc, #296]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 80039a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	4b48      	ldr	r3, [pc, #288]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a47      	ldr	r2, [pc, #284]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 80039b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	4b45      	ldr	r3, [pc, #276]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a44      	ldr	r2, [pc, #272]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 80039c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e041      	b.n	8003a4c <HAL_RCC_OscConfig+0x1e4>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039d0:	d112      	bne.n	80039f8 <HAL_RCC_OscConfig+0x190>
 80039d2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a3e      	ldr	r2, [pc, #248]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 80039d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4b3c      	ldr	r3, [pc, #240]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a3b      	ldr	r2, [pc, #236]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 80039e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	4b39      	ldr	r3, [pc, #228]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a38      	ldr	r2, [pc, #224]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 80039f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	e029      	b.n	8003a4c <HAL_RCC_OscConfig+0x1e4>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003a00:	d112      	bne.n	8003a28 <HAL_RCC_OscConfig+0x1c0>
 8003a02:	4b33      	ldr	r3, [pc, #204]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a32      	ldr	r2, [pc, #200]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 8003a08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	4b30      	ldr	r3, [pc, #192]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a2f      	ldr	r2, [pc, #188]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 8003a14:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a2c      	ldr	r2, [pc, #176]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	e011      	b.n	8003a4c <HAL_RCC_OscConfig+0x1e4>
 8003a28:	4b29      	ldr	r3, [pc, #164]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a28      	ldr	r2, [pc, #160]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 8003a2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a32:	6013      	str	r3, [r2, #0]
 8003a34:	4b26      	ldr	r3, [pc, #152]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a25      	ldr	r2, [pc, #148]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 8003a3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	4b23      	ldr	r3, [pc, #140]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a22      	ldr	r2, [pc, #136]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 8003a46:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d013      	beq.n	8003a7c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7fe fad4 	bl	8002000 <HAL_GetTick>
 8003a58:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003a5c:	f7fe fad0 	bl	8002000 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	@ 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e32e      	b.n	80040cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a6e:	4b18      	ldr	r3, [pc, #96]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCC_OscConfig+0x1f4>
 8003a7a:	e012      	b.n	8003aa2 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7c:	f7fe fac0 	bl	8002000 <HAL_GetTick>
 8003a80:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003a84:	f7fe fabc 	bl	8002000 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b64      	cmp	r3, #100	@ 0x64
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e31a      	b.n	80040cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a96:	4b0e      	ldr	r3, [pc, #56]	@ (8003ad0 <HAL_RCC_OscConfig+0x268>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 809a 	beq.w	8003be4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x25a>
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	2b18      	cmp	r3, #24
 8003aba:	d149      	bne.n	8003b50 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d146      	bne.n	8003b50 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d104      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e2fe      	b.n	80040cc <HAL_RCC_OscConfig+0x864>
 8003ace:	bf00      	nop
 8003ad0:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d11c      	bne.n	8003b14 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003ada:	4b9a      	ldr	r3, [pc, #616]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0218 	and.w	r2, r3, #24
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d014      	beq.n	8003b14 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003aea:	4b96      	ldr	r3, [pc, #600]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f023 0218 	bic.w	r2, r3, #24
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	4993      	ldr	r1, [pc, #588]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003afc:	f000 fdd0 	bl	80046a0 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b00:	4b91      	ldr	r3, [pc, #580]	@ (8003d48 <HAL_RCC_OscConfig+0x4e0>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fe f9f1 	bl	8001eec <HAL_InitTick>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e2db      	b.n	80040cc <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b14:	f7fe fa74 	bl	8002000 <HAL_GetTick>
 8003b18:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003b1c:	f7fe fa70 	bl	8002000 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e2ce      	b.n	80040cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b2e:	4b85      	ldr	r3, [pc, #532]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0f0      	beq.n	8003b1c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003b3a:	4b82      	ldr	r3, [pc, #520]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	041b      	lsls	r3, r3, #16
 8003b48:	497e      	ldr	r1, [pc, #504]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003b4e:	e049      	b.n	8003be4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d02c      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003b58:	4b7a      	ldr	r3, [pc, #488]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f023 0218 	bic.w	r2, r3, #24
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	4977      	ldr	r1, [pc, #476]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003b6a:	4b76      	ldr	r3, [pc, #472]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a75      	ldr	r2, [pc, #468]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003b70:	f043 0301 	orr.w	r3, r3, #1
 8003b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b76:	f7fe fa43 	bl	8002000 <HAL_GetTick>
 8003b7a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003b7e:	f7fe fa3f 	bl	8002000 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e29d      	b.n	80040cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b90:	4b6c      	ldr	r3, [pc, #432]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003b9c:	4b69      	ldr	r3, [pc, #420]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	041b      	lsls	r3, r3, #16
 8003baa:	4966      	ldr	r1, [pc, #408]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	610b      	str	r3, [r1, #16]
 8003bb0:	e018      	b.n	8003be4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bb2:	4b64      	ldr	r3, [pc, #400]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a63      	ldr	r2, [pc, #396]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003bb8:	f023 0301 	bic.w	r3, r3, #1
 8003bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbe:	f7fe fa1f 	bl	8002000 <HAL_GetTick>
 8003bc2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003bc6:	f7fe fa1b 	bl	8002000 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e279      	b.n	80040cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bd8:	4b5a      	ldr	r3, [pc, #360]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1f0      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d03c      	beq.n	8003c6a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01c      	beq.n	8003c32 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bf8:	4b52      	ldr	r3, [pc, #328]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003bfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bfe:	4a51      	ldr	r2, [pc, #324]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003c00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c04:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c08:	f7fe f9fa 	bl	8002000 <HAL_GetTick>
 8003c0c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003c10:	f7fe f9f6 	bl	8002000 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e254      	b.n	80040cc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003c22:	4b48      	ldr	r3, [pc, #288]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003c24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0ef      	beq.n	8003c10 <HAL_RCC_OscConfig+0x3a8>
 8003c30:	e01b      	b.n	8003c6a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c32:	4b44      	ldr	r3, [pc, #272]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003c34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c38:	4a42      	ldr	r2, [pc, #264]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003c3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003c3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c42:	f7fe f9dd 	bl	8002000 <HAL_GetTick>
 8003c46:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003c4a:	f7fe f9d9 	bl	8002000 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e237      	b.n	80040cc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003c5c:	4b39      	ldr	r3, [pc, #228]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003c5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1ef      	bne.n	8003c4a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 80d2 	beq.w	8003e1c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003c78:	4b34      	ldr	r3, [pc, #208]	@ (8003d4c <HAL_RCC_OscConfig+0x4e4>)
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d118      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003c84:	4b31      	ldr	r3, [pc, #196]	@ (8003d4c <HAL_RCC_OscConfig+0x4e4>)
 8003c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c88:	4a30      	ldr	r2, [pc, #192]	@ (8003d4c <HAL_RCC_OscConfig+0x4e4>)
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c90:	f7fe f9b6 	bl	8002000 <HAL_GetTick>
 8003c94:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c98:	f7fe f9b2 	bl	8002000 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e210      	b.n	80040cc <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003caa:	4b28      	ldr	r3, [pc, #160]	@ (8003d4c <HAL_RCC_OscConfig+0x4e4>)
 8003cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d108      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x468>
 8003cbe:	4b21      	ldr	r3, [pc, #132]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003cc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cc4:	4a1f      	ldr	r2, [pc, #124]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003cce:	e074      	b.n	8003dba <HAL_RCC_OscConfig+0x552>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d118      	bne.n	8003d0a <HAL_RCC_OscConfig+0x4a2>
 8003cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003cda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cde:	4a19      	ldr	r2, [pc, #100]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003ce0:	f023 0301 	bic.w	r3, r3, #1
 8003ce4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ce8:	4b16      	ldr	r3, [pc, #88]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003cea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cee:	4a15      	ldr	r2, [pc, #84]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003cf0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cf4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003cf8:	4b12      	ldr	r3, [pc, #72]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003cfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cfe:	4a11      	ldr	r2, [pc, #68]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003d00:	f023 0304 	bic.w	r3, r3, #4
 8003d04:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003d08:	e057      	b.n	8003dba <HAL_RCC_OscConfig+0x552>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	2b05      	cmp	r3, #5
 8003d10:	d11e      	bne.n	8003d50 <HAL_RCC_OscConfig+0x4e8>
 8003d12:	4b0c      	ldr	r3, [pc, #48]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003d14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d18:	4a0a      	ldr	r2, [pc, #40]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003d1a:	f043 0304 	orr.w	r3, r3, #4
 8003d1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003d22:	4b08      	ldr	r3, [pc, #32]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003d24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d28:	4a06      	ldr	r2, [pc, #24]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003d2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003d32:	4b04      	ldr	r3, [pc, #16]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003d34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d38:	4a02      	ldr	r2, [pc, #8]	@ (8003d44 <HAL_RCC_OscConfig+0x4dc>)
 8003d3a:	f043 0301 	orr.w	r3, r3, #1
 8003d3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003d42:	e03a      	b.n	8003dba <HAL_RCC_OscConfig+0x552>
 8003d44:	44020c00 	.word	0x44020c00
 8003d48:	2000001c 	.word	0x2000001c
 8003d4c:	44020800 	.word	0x44020800
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	2b85      	cmp	r3, #133	@ 0x85
 8003d56:	d118      	bne.n	8003d8a <HAL_RCC_OscConfig+0x522>
 8003d58:	4ba2      	ldr	r3, [pc, #648]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003d5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d5e:	4aa1      	ldr	r2, [pc, #644]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003d60:	f043 0304 	orr.w	r3, r3, #4
 8003d64:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003d68:	4b9e      	ldr	r3, [pc, #632]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003d6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d6e:	4a9d      	ldr	r2, [pc, #628]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003d70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d74:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003d78:	4b9a      	ldr	r3, [pc, #616]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003d7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d7e:	4a99      	ldr	r2, [pc, #612]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003d88:	e017      	b.n	8003dba <HAL_RCC_OscConfig+0x552>
 8003d8a:	4b96      	ldr	r3, [pc, #600]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003d8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d90:	4a94      	ldr	r2, [pc, #592]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003d92:	f023 0301 	bic.w	r3, r3, #1
 8003d96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003d9a:	4b92      	ldr	r3, [pc, #584]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003d9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003da0:	4a90      	ldr	r2, [pc, #576]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003da2:	f023 0304 	bic.w	r3, r3, #4
 8003da6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003daa:	4b8e      	ldr	r3, [pc, #568]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003db0:	4a8c      	ldr	r2, [pc, #560]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003db2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003db6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d016      	beq.n	8003df0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc2:	f7fe f91d 	bl	8002000 <HAL_GetTick>
 8003dc6:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dc8:	e00a      	b.n	8003de0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dca:	f7fe f919 	bl	8002000 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e175      	b.n	80040cc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003de0:	4b80      	ldr	r3, [pc, #512]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003de2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0ed      	beq.n	8003dca <HAL_RCC_OscConfig+0x562>
 8003dee:	e015      	b.n	8003e1c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df0:	f7fe f906 	bl	8002000 <HAL_GetTick>
 8003df4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003df6:	e00a      	b.n	8003e0e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df8:	f7fe f902 	bl	8002000 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e15e      	b.n	80040cc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e0e:	4b75      	ldr	r3, [pc, #468]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003e10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1ed      	bne.n	8003df8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0320 	and.w	r3, r3, #32
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d036      	beq.n	8003e96 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d019      	beq.n	8003e64 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e30:	4b6c      	ldr	r3, [pc, #432]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a6b      	ldr	r2, [pc, #428]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003e36:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3c:	f7fe f8e0 	bl	8002000 <HAL_GetTick>
 8003e40:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003e44:	f7fe f8dc 	bl	8002000 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e13a      	b.n	80040cc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003e56:	4b63      	ldr	r3, [pc, #396]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCC_OscConfig+0x5dc>
 8003e62:	e018      	b.n	8003e96 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e64:	4b5f      	ldr	r3, [pc, #380]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a5e      	ldr	r2, [pc, #376]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003e6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e70:	f7fe f8c6 	bl	8002000 <HAL_GetTick>
 8003e74:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003e78:	f7fe f8c2 	bl	8002000 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e120      	b.n	80040cc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003e8a:	4b56      	ldr	r3, [pc, #344]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 8115 	beq.w	80040ca <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	2b18      	cmp	r3, #24
 8003ea4:	f000 80af 	beq.w	8004006 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	f040 8086 	bne.w	8003fbe <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003eb2:	4b4c      	ldr	r3, [pc, #304]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a4b      	ldr	r2, [pc, #300]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003eb8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebe:	f7fe f89f 	bl	8002000 <HAL_GetTick>
 8003ec2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003ec6:	f7fe f89b 	bl	8002000 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e0f9      	b.n	80040cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003ed8:	4b42      	ldr	r3, [pc, #264]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1f0      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003ee4:	4b3f      	ldr	r3, [pc, #252]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003eec:	f023 0303 	bic.w	r3, r3, #3
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003ef8:	0212      	lsls	r2, r2, #8
 8003efa:	430a      	orrs	r2, r1
 8003efc:	4939      	ldr	r1, [pc, #228]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f06:	3b01      	subs	r3, #1
 8003f08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f10:	3b01      	subs	r3, #1
 8003f12:	025b      	lsls	r3, r3, #9
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	041b      	lsls	r3, r3, #16
 8003f20:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	061b      	lsls	r3, r3, #24
 8003f2e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f32:	492c      	ldr	r1, [pc, #176]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003f38:	4b2a      	ldr	r3, [pc, #168]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3c:	4a29      	ldr	r2, [pc, #164]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003f3e:	f023 0310 	bic.w	r3, r3, #16
 8003f42:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f48:	4a26      	ldr	r2, [pc, #152]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003f4e:	4b25      	ldr	r3, [pc, #148]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f52:	4a24      	ldr	r2, [pc, #144]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003f54:	f043 0310 	orr.w	r3, r3, #16
 8003f58:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003f5a:	4b22      	ldr	r3, [pc, #136]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f5e:	f023 020c 	bic.w	r2, r3, #12
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f66:	491f      	ldr	r1, [pc, #124]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f70:	f023 0220 	bic.w	r2, r3, #32
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f78:	491a      	ldr	r1, [pc, #104]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f7e:	4b19      	ldr	r3, [pc, #100]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f82:	4a18      	ldr	r2, [pc, #96]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f88:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003f8a:	4b16      	ldr	r3, [pc, #88]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a15      	ldr	r2, [pc, #84]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003f90:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f96:	f7fe f833 	bl	8002000 <HAL_GetTick>
 8003f9a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003f9e:	f7fe f82f 	bl	8002000 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e08d      	b.n	80040cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0f0      	beq.n	8003f9e <HAL_RCC_OscConfig+0x736>
 8003fbc:	e085      	b.n	80040ca <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003fbe:	4b09      	ldr	r3, [pc, #36]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a08      	ldr	r2, [pc, #32]	@ (8003fe4 <HAL_RCC_OscConfig+0x77c>)
 8003fc4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fca:	f7fe f819 	bl	8002000 <HAL_GetTick>
 8003fce:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003fd0:	e00a      	b.n	8003fe8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003fd2:	f7fe f815 	bl	8002000 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d903      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e073      	b.n	80040cc <HAL_RCC_OscConfig+0x864>
 8003fe4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003fe8:	4b3a      	ldr	r3, [pc, #232]	@ (80040d4 <HAL_RCC_OscConfig+0x86c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1ee      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003ff4:	4b37      	ldr	r3, [pc, #220]	@ (80040d4 <HAL_RCC_OscConfig+0x86c>)
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff8:	4a36      	ldr	r2, [pc, #216]	@ (80040d4 <HAL_RCC_OscConfig+0x86c>)
 8003ffa:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003ffe:	f023 0303 	bic.w	r3, r3, #3
 8004002:	6293      	str	r3, [r2, #40]	@ 0x28
 8004004:	e061      	b.n	80040ca <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004006:	4b33      	ldr	r3, [pc, #204]	@ (80040d4 <HAL_RCC_OscConfig+0x86c>)
 8004008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800400a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800400c:	4b31      	ldr	r3, [pc, #196]	@ (80040d4 <HAL_RCC_OscConfig+0x86c>)
 800400e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004010:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004016:	2b01      	cmp	r3, #1
 8004018:	d031      	beq.n	800407e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f003 0203 	and.w	r2, r3, #3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004024:	429a      	cmp	r2, r3
 8004026:	d12a      	bne.n	800407e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	0a1b      	lsrs	r3, r3, #8
 800402c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004034:	429a      	cmp	r2, r3
 8004036:	d122      	bne.n	800407e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004042:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004044:	429a      	cmp	r2, r3
 8004046:	d11a      	bne.n	800407e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	0a5b      	lsrs	r3, r3, #9
 800404c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004054:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004056:	429a      	cmp	r2, r3
 8004058:	d111      	bne.n	800407e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	0c1b      	lsrs	r3, r3, #16
 800405e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004066:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004068:	429a      	cmp	r2, r3
 800406a:	d108      	bne.n	800407e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	0e1b      	lsrs	r3, r3, #24
 8004070:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004078:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800407a:	429a      	cmp	r2, r3
 800407c:	d001      	beq.n	8004082 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e024      	b.n	80040cc <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004082:	4b14      	ldr	r3, [pc, #80]	@ (80040d4 <HAL_RCC_OscConfig+0x86c>)
 8004084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004086:	08db      	lsrs	r3, r3, #3
 8004088:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004090:	429a      	cmp	r2, r3
 8004092:	d01a      	beq.n	80040ca <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004094:	4b0f      	ldr	r3, [pc, #60]	@ (80040d4 <HAL_RCC_OscConfig+0x86c>)
 8004096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004098:	4a0e      	ldr	r2, [pc, #56]	@ (80040d4 <HAL_RCC_OscConfig+0x86c>)
 800409a:	f023 0310 	bic.w	r3, r3, #16
 800409e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a0:	f7fd ffae 	bl	8002000 <HAL_GetTick>
 80040a4:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80040a6:	bf00      	nop
 80040a8:	f7fd ffaa 	bl	8002000 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d0f9      	beq.n	80040a8 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b8:	4a06      	ldr	r2, [pc, #24]	@ (80040d4 <HAL_RCC_OscConfig+0x86c>)
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80040be:	4b05      	ldr	r3, [pc, #20]	@ (80040d4 <HAL_RCC_OscConfig+0x86c>)
 80040c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c2:	4a04      	ldr	r2, [pc, #16]	@ (80040d4 <HAL_RCC_OscConfig+0x86c>)
 80040c4:	f043 0310 	orr.w	r3, r3, #16
 80040c8:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3720      	adds	r7, #32
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	44020c00 	.word	0x44020c00

080040d8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e19e      	b.n	800442a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040ec:	4b83      	ldr	r3, [pc, #524]	@ (80042fc <HAL_RCC_ClockConfig+0x224>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 030f 	and.w	r3, r3, #15
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d910      	bls.n	800411c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fa:	4b80      	ldr	r3, [pc, #512]	@ (80042fc <HAL_RCC_ClockConfig+0x224>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f023 020f 	bic.w	r2, r3, #15
 8004102:	497e      	ldr	r1, [pc, #504]	@ (80042fc <HAL_RCC_ClockConfig+0x224>)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	4313      	orrs	r3, r2
 8004108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800410a:	4b7c      	ldr	r3, [pc, #496]	@ (80042fc <HAL_RCC_ClockConfig+0x224>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d001      	beq.n	800411c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e186      	b.n	800442a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b00      	cmp	r3, #0
 8004126:	d012      	beq.n	800414e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	695a      	ldr	r2, [r3, #20]
 800412c:	4b74      	ldr	r3, [pc, #464]	@ (8004300 <HAL_RCC_ClockConfig+0x228>)
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	0a1b      	lsrs	r3, r3, #8
 8004132:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004136:	429a      	cmp	r2, r3
 8004138:	d909      	bls.n	800414e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800413a:	4b71      	ldr	r3, [pc, #452]	@ (8004300 <HAL_RCC_ClockConfig+0x228>)
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	021b      	lsls	r3, r3, #8
 8004148:	496d      	ldr	r1, [pc, #436]	@ (8004300 <HAL_RCC_ClockConfig+0x228>)
 800414a:	4313      	orrs	r3, r2
 800414c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d012      	beq.n	8004180 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691a      	ldr	r2, [r3, #16]
 800415e:	4b68      	ldr	r3, [pc, #416]	@ (8004300 <HAL_RCC_ClockConfig+0x228>)
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	091b      	lsrs	r3, r3, #4
 8004164:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004168:	429a      	cmp	r2, r3
 800416a:	d909      	bls.n	8004180 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800416c:	4b64      	ldr	r3, [pc, #400]	@ (8004300 <HAL_RCC_ClockConfig+0x228>)
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	4961      	ldr	r1, [pc, #388]	@ (8004300 <HAL_RCC_ClockConfig+0x228>)
 800417c:	4313      	orrs	r3, r2
 800417e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	d010      	beq.n	80041ae <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	4b5b      	ldr	r3, [pc, #364]	@ (8004300 <HAL_RCC_ClockConfig+0x228>)
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004198:	429a      	cmp	r2, r3
 800419a:	d908      	bls.n	80041ae <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800419c:	4b58      	ldr	r3, [pc, #352]	@ (8004300 <HAL_RCC_ClockConfig+0x228>)
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	4955      	ldr	r1, [pc, #340]	@ (8004300 <HAL_RCC_ClockConfig+0x228>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d010      	beq.n	80041dc <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	4b50      	ldr	r3, [pc, #320]	@ (8004300 <HAL_RCC_ClockConfig+0x228>)
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d908      	bls.n	80041dc <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80041ca:	4b4d      	ldr	r3, [pc, #308]	@ (8004300 <HAL_RCC_ClockConfig+0x228>)
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	f023 020f 	bic.w	r2, r3, #15
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	494a      	ldr	r1, [pc, #296]	@ (8004300 <HAL_RCC_ClockConfig+0x228>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 8093 	beq.w	8004310 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	d107      	bne.n	8004202 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80041f2:	4b43      	ldr	r3, [pc, #268]	@ (8004300 <HAL_RCC_ClockConfig+0x228>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d121      	bne.n	8004242 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e113      	b.n	800442a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b02      	cmp	r3, #2
 8004208:	d107      	bne.n	800421a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800420a:	4b3d      	ldr	r3, [pc, #244]	@ (8004300 <HAL_RCC_ClockConfig+0x228>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d115      	bne.n	8004242 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e107      	b.n	800442a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d107      	bne.n	8004232 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004222:	4b37      	ldr	r3, [pc, #220]	@ (8004300 <HAL_RCC_ClockConfig+0x228>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e0fb      	b.n	800442a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004232:	4b33      	ldr	r3, [pc, #204]	@ (8004300 <HAL_RCC_ClockConfig+0x228>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e0f3      	b.n	800442a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004242:	4b2f      	ldr	r3, [pc, #188]	@ (8004300 <HAL_RCC_ClockConfig+0x228>)
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	f023 0203 	bic.w	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	492c      	ldr	r1, [pc, #176]	@ (8004300 <HAL_RCC_ClockConfig+0x228>)
 8004250:	4313      	orrs	r3, r2
 8004252:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004254:	f7fd fed4 	bl	8002000 <HAL_GetTick>
 8004258:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b03      	cmp	r3, #3
 8004260:	d112      	bne.n	8004288 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004262:	e00a      	b.n	800427a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004264:	f7fd fecc 	bl	8002000 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004272:	4293      	cmp	r3, r2
 8004274:	d901      	bls.n	800427a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e0d7      	b.n	800442a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800427a:	4b21      	ldr	r3, [pc, #132]	@ (8004300 <HAL_RCC_ClockConfig+0x228>)
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f003 0318 	and.w	r3, r3, #24
 8004282:	2b18      	cmp	r3, #24
 8004284:	d1ee      	bne.n	8004264 <HAL_RCC_ClockConfig+0x18c>
 8004286:	e043      	b.n	8004310 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b02      	cmp	r3, #2
 800428e:	d112      	bne.n	80042b6 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004290:	e00a      	b.n	80042a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004292:	f7fd feb5 	bl	8002000 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e0c0      	b.n	800442a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80042a8:	4b15      	ldr	r3, [pc, #84]	@ (8004300 <HAL_RCC_ClockConfig+0x228>)
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	f003 0318 	and.w	r3, r3, #24
 80042b0:	2b10      	cmp	r3, #16
 80042b2:	d1ee      	bne.n	8004292 <HAL_RCC_ClockConfig+0x1ba>
 80042b4:	e02c      	b.n	8004310 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d122      	bne.n	8004304 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80042be:	e00a      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80042c0:	f7fd fe9e 	bl	8002000 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e0a9      	b.n	800442a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80042d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004300 <HAL_RCC_ClockConfig+0x228>)
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f003 0318 	and.w	r3, r3, #24
 80042de:	2b08      	cmp	r3, #8
 80042e0:	d1ee      	bne.n	80042c0 <HAL_RCC_ClockConfig+0x1e8>
 80042e2:	e015      	b.n	8004310 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80042e4:	f7fd fe8c 	bl	8002000 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d906      	bls.n	8004304 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e097      	b.n	800442a <HAL_RCC_ClockConfig+0x352>
 80042fa:	bf00      	nop
 80042fc:	40022000 	.word	0x40022000
 8004300:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004304:	4b4b      	ldr	r3, [pc, #300]	@ (8004434 <HAL_RCC_ClockConfig+0x35c>)
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	f003 0318 	and.w	r3, r3, #24
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1e9      	bne.n	80042e4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d010      	beq.n	800433e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	4b44      	ldr	r3, [pc, #272]	@ (8004434 <HAL_RCC_ClockConfig+0x35c>)
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	f003 030f 	and.w	r3, r3, #15
 8004328:	429a      	cmp	r2, r3
 800432a:	d208      	bcs.n	800433e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800432c:	4b41      	ldr	r3, [pc, #260]	@ (8004434 <HAL_RCC_ClockConfig+0x35c>)
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	f023 020f 	bic.w	r2, r3, #15
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	493e      	ldr	r1, [pc, #248]	@ (8004434 <HAL_RCC_ClockConfig+0x35c>)
 800433a:	4313      	orrs	r3, r2
 800433c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800433e:	4b3e      	ldr	r3, [pc, #248]	@ (8004438 <HAL_RCC_ClockConfig+0x360>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	429a      	cmp	r2, r3
 800434a:	d210      	bcs.n	800436e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434c:	4b3a      	ldr	r3, [pc, #232]	@ (8004438 <HAL_RCC_ClockConfig+0x360>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f023 020f 	bic.w	r2, r3, #15
 8004354:	4938      	ldr	r1, [pc, #224]	@ (8004438 <HAL_RCC_ClockConfig+0x360>)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	4313      	orrs	r3, r2
 800435a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800435c:	4b36      	ldr	r3, [pc, #216]	@ (8004438 <HAL_RCC_ClockConfig+0x360>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d001      	beq.n	800436e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e05d      	b.n	800442a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b00      	cmp	r3, #0
 8004378:	d010      	beq.n	800439c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	4b2d      	ldr	r3, [pc, #180]	@ (8004434 <HAL_RCC_ClockConfig+0x35c>)
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004386:	429a      	cmp	r2, r3
 8004388:	d208      	bcs.n	800439c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800438a:	4b2a      	ldr	r3, [pc, #168]	@ (8004434 <HAL_RCC_ClockConfig+0x35c>)
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	4927      	ldr	r1, [pc, #156]	@ (8004434 <HAL_RCC_ClockConfig+0x35c>)
 8004398:	4313      	orrs	r3, r2
 800439a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d012      	beq.n	80043ce <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	4b21      	ldr	r3, [pc, #132]	@ (8004434 <HAL_RCC_ClockConfig+0x35c>)
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	091b      	lsrs	r3, r3, #4
 80043b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d209      	bcs.n	80043ce <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80043ba:	4b1e      	ldr	r3, [pc, #120]	@ (8004434 <HAL_RCC_ClockConfig+0x35c>)
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	491a      	ldr	r1, [pc, #104]	@ (8004434 <HAL_RCC_ClockConfig+0x35c>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0310 	and.w	r3, r3, #16
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d012      	beq.n	8004400 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695a      	ldr	r2, [r3, #20]
 80043de:	4b15      	ldr	r3, [pc, #84]	@ (8004434 <HAL_RCC_ClockConfig+0x35c>)
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	0a1b      	lsrs	r3, r3, #8
 80043e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d209      	bcs.n	8004400 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80043ec:	4b11      	ldr	r3, [pc, #68]	@ (8004434 <HAL_RCC_ClockConfig+0x35c>)
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	021b      	lsls	r3, r3, #8
 80043fa:	490e      	ldr	r1, [pc, #56]	@ (8004434 <HAL_RCC_ClockConfig+0x35c>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004400:	f000 f822 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 8004404:	4602      	mov	r2, r0
 8004406:	4b0b      	ldr	r3, [pc, #44]	@ (8004434 <HAL_RCC_ClockConfig+0x35c>)
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	490b      	ldr	r1, [pc, #44]	@ (800443c <HAL_RCC_ClockConfig+0x364>)
 8004410:	5ccb      	ldrb	r3, [r1, r3]
 8004412:	fa22 f303 	lsr.w	r3, r2, r3
 8004416:	4a0a      	ldr	r2, [pc, #40]	@ (8004440 <HAL_RCC_ClockConfig+0x368>)
 8004418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800441a:	4b0a      	ldr	r3, [pc, #40]	@ (8004444 <HAL_RCC_ClockConfig+0x36c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f7fd fd64 	bl	8001eec <HAL_InitTick>
 8004424:	4603      	mov	r3, r0
 8004426:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004428:	7afb      	ldrb	r3, [r7, #11]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	44020c00 	.word	0x44020c00
 8004438:	40022000 	.word	0x40022000
 800443c:	0800bf10 	.word	0x0800bf10
 8004440:	20000018 	.word	0x20000018
 8004444:	2000001c 	.word	0x2000001c

08004448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004448:	b480      	push	{r7}
 800444a:	b089      	sub	sp, #36	@ 0x24
 800444c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800444e:	4b8c      	ldr	r3, [pc, #560]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x238>)
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f003 0318 	and.w	r3, r3, #24
 8004456:	2b08      	cmp	r3, #8
 8004458:	d102      	bne.n	8004460 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800445a:	4b8a      	ldr	r3, [pc, #552]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x23c>)
 800445c:	61fb      	str	r3, [r7, #28]
 800445e:	e107      	b.n	8004670 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004460:	4b87      	ldr	r3, [pc, #540]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x238>)
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	f003 0318 	and.w	r3, r3, #24
 8004468:	2b00      	cmp	r3, #0
 800446a:	d112      	bne.n	8004492 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800446c:	4b84      	ldr	r3, [pc, #528]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x238>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b00      	cmp	r3, #0
 8004476:	d009      	beq.n	800448c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004478:	4b81      	ldr	r3, [pc, #516]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x238>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	08db      	lsrs	r3, r3, #3
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	4a81      	ldr	r2, [pc, #516]	@ (8004688 <HAL_RCC_GetSysClockFreq+0x240>)
 8004484:	fa22 f303 	lsr.w	r3, r2, r3
 8004488:	61fb      	str	r3, [r7, #28]
 800448a:	e0f1      	b.n	8004670 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800448c:	4b7e      	ldr	r3, [pc, #504]	@ (8004688 <HAL_RCC_GetSysClockFreq+0x240>)
 800448e:	61fb      	str	r3, [r7, #28]
 8004490:	e0ee      	b.n	8004670 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004492:	4b7b      	ldr	r3, [pc, #492]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x238>)
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	f003 0318 	and.w	r3, r3, #24
 800449a:	2b10      	cmp	r3, #16
 800449c:	d102      	bne.n	80044a4 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800449e:	4b7b      	ldr	r3, [pc, #492]	@ (800468c <HAL_RCC_GetSysClockFreq+0x244>)
 80044a0:	61fb      	str	r3, [r7, #28]
 80044a2:	e0e5      	b.n	8004670 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044a4:	4b76      	ldr	r3, [pc, #472]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x238>)
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	f003 0318 	and.w	r3, r3, #24
 80044ac:	2b18      	cmp	r3, #24
 80044ae:	f040 80dd 	bne.w	800466c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80044b2:	4b73      	ldr	r3, [pc, #460]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x238>)
 80044b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80044bc:	4b70      	ldr	r3, [pc, #448]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x238>)
 80044be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c0:	0a1b      	lsrs	r3, r3, #8
 80044c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044c6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80044c8:	4b6d      	ldr	r3, [pc, #436]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x238>)
 80044ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044cc:	091b      	lsrs	r3, r3, #4
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80044d4:	4b6a      	ldr	r3, [pc, #424]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x238>)
 80044d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80044d8:	08db      	lsrs	r3, r3, #3
 80044da:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	fb02 f303 	mul.w	r3, r2, r3
 80044e4:	ee07 3a90 	vmov	s15, r3
 80044e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ec:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 80b7 	beq.w	8004666 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d003      	beq.n	8004506 <HAL_RCC_GetSysClockFreq+0xbe>
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b03      	cmp	r3, #3
 8004502:	d056      	beq.n	80045b2 <HAL_RCC_GetSysClockFreq+0x16a>
 8004504:	e077      	b.n	80045f6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004506:	4b5e      	ldr	r3, [pc, #376]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x238>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b00      	cmp	r3, #0
 8004510:	d02d      	beq.n	800456e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004512:	4b5b      	ldr	r3, [pc, #364]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x238>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	08db      	lsrs	r3, r3, #3
 8004518:	f003 0303 	and.w	r3, r3, #3
 800451c:	4a5a      	ldr	r2, [pc, #360]	@ (8004688 <HAL_RCC_GetSysClockFreq+0x240>)
 800451e:	fa22 f303 	lsr.w	r3, r2, r3
 8004522:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	ee07 3a90 	vmov	s15, r3
 800452a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	ee07 3a90 	vmov	s15, r3
 8004534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800453c:	4b50      	ldr	r3, [pc, #320]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x238>)
 800453e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004544:	ee07 3a90 	vmov	s15, r3
 8004548:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800454c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004550:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004690 <HAL_RCC_GetSysClockFreq+0x248>
 8004554:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004558:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800455c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004560:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004568:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800456c:	e065      	b.n	800463a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	ee07 3a90 	vmov	s15, r3
 8004574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004578:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004694 <HAL_RCC_GetSysClockFreq+0x24c>
 800457c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004580:	4b3f      	ldr	r3, [pc, #252]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x238>)
 8004582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004588:	ee07 3a90 	vmov	s15, r3
 800458c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004590:	ed97 6a02 	vldr	s12, [r7, #8]
 8004594:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004690 <HAL_RCC_GetSysClockFreq+0x248>
 8004598:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800459c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80045a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ac:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80045b0:	e043      	b.n	800463a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	ee07 3a90 	vmov	s15, r3
 80045b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045bc:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004698 <HAL_RCC_GetSysClockFreq+0x250>
 80045c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x238>)
 80045c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045cc:	ee07 3a90 	vmov	s15, r3
 80045d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80045d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80045d8:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004690 <HAL_RCC_GetSysClockFreq+0x248>
 80045dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80045e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80045f4:	e021      	b.n	800463a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	ee07 3a90 	vmov	s15, r3
 80045fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004600:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800469c <HAL_RCC_GetSysClockFreq+0x254>
 8004604:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004608:	4b1d      	ldr	r3, [pc, #116]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x238>)
 800460a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800460c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004610:	ee07 3a90 	vmov	s15, r3
 8004614:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004618:	ed97 6a02 	vldr	s12, [r7, #8]
 800461c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004690 <HAL_RCC_GetSysClockFreq+0x248>
 8004620:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004624:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004628:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800462c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004634:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004638:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800463a:	4b11      	ldr	r3, [pc, #68]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x238>)
 800463c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800463e:	0a5b      	lsrs	r3, r3, #9
 8004640:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004644:	3301      	adds	r3, #1
 8004646:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	ee07 3a90 	vmov	s15, r3
 800464e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004652:	edd7 6a06 	vldr	s13, [r7, #24]
 8004656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800465a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800465e:	ee17 3a90 	vmov	r3, s15
 8004662:	61fb      	str	r3, [r7, #28]
 8004664:	e004      	b.n	8004670 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004666:	2300      	movs	r3, #0
 8004668:	61fb      	str	r3, [r7, #28]
 800466a:	e001      	b.n	8004670 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800466c:	4b06      	ldr	r3, [pc, #24]	@ (8004688 <HAL_RCC_GetSysClockFreq+0x240>)
 800466e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004670:	69fb      	ldr	r3, [r7, #28]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3724      	adds	r7, #36	@ 0x24
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	44020c00 	.word	0x44020c00
 8004684:	003d0900 	.word	0x003d0900
 8004688:	03d09000 	.word	0x03d09000
 800468c:	017d7840 	.word	0x017d7840
 8004690:	46000000 	.word	0x46000000
 8004694:	4c742400 	.word	0x4c742400
 8004698:	4bbebc20 	.word	0x4bbebc20
 800469c:	4a742400 	.word	0x4a742400

080046a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80046a4:	f7ff fed0 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b08      	ldr	r3, [pc, #32]	@ (80046cc <HAL_RCC_GetHCLKFreq+0x2c>)
 80046ac:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80046ae:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80046b2:	4907      	ldr	r1, [pc, #28]	@ (80046d0 <HAL_RCC_GetHCLKFreq+0x30>)
 80046b4:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80046b6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80046ba:	fa22 f303 	lsr.w	r3, r2, r3
 80046be:	4a05      	ldr	r2, [pc, #20]	@ (80046d4 <HAL_RCC_GetHCLKFreq+0x34>)
 80046c0:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80046c2:	4b04      	ldr	r3, [pc, #16]	@ (80046d4 <HAL_RCC_GetHCLKFreq+0x34>)
 80046c4:	681b      	ldr	r3, [r3, #0]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	44020c00 	.word	0x44020c00
 80046d0:	0800bf10 	.word	0x0800bf10
 80046d4:	20000018 	.word	0x20000018

080046d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80046dc:	f7ff ffe0 	bl	80046a0 <HAL_RCC_GetHCLKFreq>
 80046e0:	4602      	mov	r2, r0
 80046e2:	4b06      	ldr	r3, [pc, #24]	@ (80046fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	091b      	lsrs	r3, r3, #4
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	4904      	ldr	r1, [pc, #16]	@ (8004700 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046ee:	5ccb      	ldrb	r3, [r1, r3]
 80046f0:	f003 031f 	and.w	r3, r3, #31
 80046f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	44020c00 	.word	0x44020c00
 8004700:	0800bf20 	.word	0x0800bf20

08004704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004708:	f7ff ffca 	bl	80046a0 <HAL_RCC_GetHCLKFreq>
 800470c:	4602      	mov	r2, r0
 800470e:	4b06      	ldr	r3, [pc, #24]	@ (8004728 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	0a1b      	lsrs	r3, r3, #8
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	4904      	ldr	r1, [pc, #16]	@ (800472c <HAL_RCC_GetPCLK2Freq+0x28>)
 800471a:	5ccb      	ldrb	r3, [r1, r3]
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004724:	4618      	mov	r0, r3
 8004726:	bd80      	pop	{r7, pc}
 8004728:	44020c00 	.word	0x44020c00
 800472c:	0800bf20 	.word	0x0800bf20

08004730 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004734:	f7ff ffb4 	bl	80046a0 <HAL_RCC_GetHCLKFreq>
 8004738:	4602      	mov	r2, r0
 800473a:	4b06      	ldr	r3, [pc, #24]	@ (8004754 <HAL_RCC_GetPCLK3Freq+0x24>)
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	0b1b      	lsrs	r3, r3, #12
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	4904      	ldr	r1, [pc, #16]	@ (8004758 <HAL_RCC_GetPCLK3Freq+0x28>)
 8004746:	5ccb      	ldrb	r3, [r1, r3]
 8004748:	f003 031f 	and.w	r3, r3, #31
 800474c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004750:	4618      	mov	r0, r3
 8004752:	bd80      	pop	{r7, pc}
 8004754:	44020c00 	.word	0x44020c00
 8004758:	0800bf20 	.word	0x0800bf20

0800475c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800475c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004760:	b0aa      	sub	sp, #168	@ 0xa8
 8004762:	af00      	add	r7, sp, #0
 8004764:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004768:	2300      	movs	r3, #0
 800476a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800476e:	2300      	movs	r3, #0
 8004770:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004774:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004780:	2500      	movs	r5, #0
 8004782:	ea54 0305 	orrs.w	r3, r4, r5
 8004786:	d00b      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004788:	4bb8      	ldr	r3, [pc, #736]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800478a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800478e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004792:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004798:	4ab4      	ldr	r2, [pc, #720]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800479a:	430b      	orrs	r3, r1
 800479c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80047a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a8:	f002 0801 	and.w	r8, r2, #1
 80047ac:	f04f 0900 	mov.w	r9, #0
 80047b0:	ea58 0309 	orrs.w	r3, r8, r9
 80047b4:	d038      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80047b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80047ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047bc:	2b05      	cmp	r3, #5
 80047be:	d819      	bhi.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80047c0:	a201      	add	r2, pc, #4	@ (adr r2, 80047c8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80047c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c6:	bf00      	nop
 80047c8:	080047fd 	.word	0x080047fd
 80047cc:	080047e1 	.word	0x080047e1
 80047d0:	080047f5 	.word	0x080047f5
 80047d4:	080047fd 	.word	0x080047fd
 80047d8:	080047fd 	.word	0x080047fd
 80047dc:	080047fd 	.word	0x080047fd
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80047e4:	3308      	adds	r3, #8
 80047e6:	4618      	mov	r0, r3
 80047e8:	f001 ffee 	bl	80067c8 <RCCEx_PLL2_Config>
 80047ec:	4603      	mov	r3, r0
 80047ee:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 80047f2:	e004      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80047fa:	e000      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 80047fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047fe:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10c      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004806:	4b99      	ldr	r3, [pc, #612]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004808:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800480c:	f023 0107 	bic.w	r1, r3, #7
 8004810:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004816:	4a95      	ldr	r2, [pc, #596]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004818:	430b      	orrs	r3, r1
 800481a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800481e:	e003      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004820:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004824:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004828:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800482c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004830:	f002 0a02 	and.w	sl, r2, #2
 8004834:	f04f 0b00 	mov.w	fp, #0
 8004838:	ea5a 030b 	orrs.w	r3, sl, fp
 800483c:	d03c      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800483e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004844:	2b28      	cmp	r3, #40	@ 0x28
 8004846:	d01b      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8004848:	2b28      	cmp	r3, #40	@ 0x28
 800484a:	d815      	bhi.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800484c:	2b20      	cmp	r3, #32
 800484e:	d019      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8004850:	2b20      	cmp	r3, #32
 8004852:	d811      	bhi.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004854:	2b18      	cmp	r3, #24
 8004856:	d017      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8004858:	2b18      	cmp	r3, #24
 800485a:	d80d      	bhi.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800485c:	2b00      	cmp	r3, #0
 800485e:	d015      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x130>
 8004860:	2b08      	cmp	r3, #8
 8004862:	d109      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004864:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004868:	3308      	adds	r3, #8
 800486a:	4618      	mov	r0, r3
 800486c:	f001 ffac 	bl	80067c8 <RCCEx_PLL2_Config>
 8004870:	4603      	mov	r3, r0
 8004872:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004876:	e00a      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800487e:	e006      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004880:	bf00      	nop
 8004882:	e004      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004884:	bf00      	nop
 8004886:	e002      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004888:	bf00      	nop
 800488a:	e000      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 800488c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800488e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10c      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004896:	4b75      	ldr	r3, [pc, #468]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004898:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800489c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80048a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80048a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a6:	4a71      	ldr	r2, [pc, #452]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80048a8:	430b      	orrs	r3, r1
 80048aa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80048ae:	e003      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80048b4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80048bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c0:	f002 0304 	and.w	r3, r2, #4
 80048c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048c8:	2300      	movs	r3, #0
 80048ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80048ce:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80048d2:	460b      	mov	r3, r1
 80048d4:	4313      	orrs	r3, r2
 80048d6:	d040      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80048d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80048dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048de:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80048e2:	d01e      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80048e4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80048e8:	d817      	bhi.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80048ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048ee:	d01a      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 80048f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048f4:	d811      	bhi.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80048f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80048f8:	d017      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80048fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80048fc:	d80d      	bhi.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d015      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8004902:	2b40      	cmp	r3, #64	@ 0x40
 8004904:	d109      	bne.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004906:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800490a:	3308      	adds	r3, #8
 800490c:	4618      	mov	r0, r3
 800490e:	f001 ff5b 	bl	80067c8 <RCCEx_PLL2_Config>
 8004912:	4603      	mov	r3, r0
 8004914:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004918:	e00a      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004920:	e006      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8004922:	bf00      	nop
 8004924:	e004      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8004926:	bf00      	nop
 8004928:	e002      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800492a:	bf00      	nop
 800492c:	e000      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800492e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004930:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10c      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004938:	4b4c      	ldr	r3, [pc, #304]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800493a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800493e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004942:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004948:	4a48      	ldr	r2, [pc, #288]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800494a:	430b      	orrs	r3, r1
 800494c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004950:	e003      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004952:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004956:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800495a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800495e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004962:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004966:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800496a:	2300      	movs	r3, #0
 800496c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004970:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004974:	460b      	mov	r3, r1
 8004976:	4313      	orrs	r3, r2
 8004978:	d043      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800497a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800497e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004980:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004984:	d021      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004986:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800498a:	d81a      	bhi.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800498c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004990:	d01d      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004992:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004996:	d814      	bhi.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8004998:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800499c:	d019      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800499e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80049a2:	d80e      	bhi.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d016      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 80049a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049ac:	d109      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049b2:	3308      	adds	r3, #8
 80049b4:	4618      	mov	r0, r3
 80049b6:	f001 ff07 	bl	80067c8 <RCCEx_PLL2_Config>
 80049ba:	4603      	mov	r3, r0
 80049bc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80049c0:	e00a      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80049c8:	e006      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80049ca:	bf00      	nop
 80049cc:	e004      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80049ce:	bf00      	nop
 80049d0:	e002      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80049d2:	bf00      	nop
 80049d4:	e000      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80049d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049d8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10c      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80049e0:	4b22      	ldr	r3, [pc, #136]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80049e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049e6:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80049ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f0:	4a1e      	ldr	r2, [pc, #120]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80049f2:	430b      	orrs	r3, r1
 80049f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80049f8:	e003      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049fa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80049fe:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a02:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004a0e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a10:	2300      	movs	r3, #0
 8004a12:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a14:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004a18:	460b      	mov	r3, r1
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	d03e      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004a1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a28:	d01b      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x306>
 8004a2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a2e:	d814      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8004a30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a34:	d017      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8004a36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a3a:	d80e      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d017      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a44:	d109      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a46:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a4a:	3308      	adds	r3, #8
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f001 febb 	bl	80067c8 <RCCEx_PLL2_Config>
 8004a52:	4603      	mov	r3, r0
 8004a54:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004a58:	e00b      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004a60:	e007      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8004a62:	bf00      	nop
 8004a64:	e005      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8004a66:	bf00      	nop
 8004a68:	e003      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x316>
 8004a6a:	bf00      	nop
 8004a6c:	44020c00 	.word	0x44020c00
        break;
 8004a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a72:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10c      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004a7a:	4ba5      	ldr	r3, [pc, #660]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004a7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a80:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004a84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a8a:	4aa1      	ldr	r2, [pc, #644]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004a92:	e003      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a94:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004a98:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004aa8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004aaa:	2300      	movs	r3, #0
 8004aac:	677b      	str	r3, [r7, #116]	@ 0x74
 8004aae:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	d03b      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004ab8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004abe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004ac2:	d01b      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8004ac4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004ac8:	d814      	bhi.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8004aca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004ace:	d017      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004ad0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004ad4:	d80e      	bhi.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d014      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8004ada:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ade:	d109      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ae0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f001 fe6e 	bl	80067c8 <RCCEx_PLL2_Config>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004af2:	e008      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004afa:	e004      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8004afc:	bf00      	nop
 8004afe:	e002      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8004b00:	bf00      	nop
 8004b02:	e000      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8004b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b06:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10c      	bne.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004b0e:	4b80      	ldr	r3, [pc, #512]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004b10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b14:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004b18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b1e:	4a7c      	ldr	r2, [pc, #496]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004b20:	430b      	orrs	r3, r1
 8004b22:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004b26:	e003      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b28:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004b2c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004b30:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b38:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004b3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b3e:	2300      	movs	r3, #0
 8004b40:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b42:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004b46:	460b      	mov	r3, r1
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	d033      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8004b4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b56:	d015      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004b58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b5c:	d80e      	bhi.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d012      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004b62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b66:	d109      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b6c:	3308      	adds	r3, #8
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f001 fe2a 	bl	80067c8 <RCCEx_PLL2_Config>
 8004b74:	4603      	mov	r3, r0
 8004b76:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004b7a:	e006      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004b82:	e002      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8004b84:	bf00      	nop
 8004b86:	e000      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8004b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b8a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10c      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004b92:	4b5f      	ldr	r3, [pc, #380]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004b94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b98:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8004b9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ba2:	4a5b      	ldr	r2, [pc, #364]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004baa:	e003      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bac:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004bb0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8004bb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	6639      	str	r1, [r7, #96]	@ 0x60
 8004bc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bc4:	667b      	str	r3, [r7, #100]	@ 0x64
 8004bc6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	d033      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8004bd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004bd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bda:	d015      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8004bdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004be0:	d80e      	bhi.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d012      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004be6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004bea:	d109      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004bf0:	3308      	adds	r3, #8
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f001 fde8 	bl	80067c8 <RCCEx_PLL2_Config>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8004bfe:	e006      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004c06:	e002      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8004c08:	bf00      	nop
 8004c0a:	e000      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8004c0c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004c0e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10c      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8004c16:	4b3e      	ldr	r3, [pc, #248]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004c18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c1c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004c20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c26:	4a3a      	ldr	r2, [pc, #232]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004c28:	430b      	orrs	r3, r1
 8004c2a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004c2e:	e003      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c30:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004c34:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c38:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c40:	2100      	movs	r1, #0
 8004c42:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c4a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4313      	orrs	r3, r2
 8004c52:	d00e      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004c54:	4b2e      	ldr	r3, [pc, #184]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	4a2d      	ldr	r2, [pc, #180]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004c5a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004c5e:	61d3      	str	r3, [r2, #28]
 8004c60:	4b2b      	ldr	r3, [pc, #172]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004c62:	69d9      	ldr	r1, [r3, #28]
 8004c64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c6c:	4a28      	ldr	r2, [pc, #160]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004c6e:	430b      	orrs	r3, r1
 8004c70:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004c7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c80:	2300      	movs	r3, #0
 8004c82:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c84:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	d046      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004c8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c94:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004c98:	d021      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004c9a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004c9e:	d81a      	bhi.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004ca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ca4:	d01d      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8004ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004caa:	d814      	bhi.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004cac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cb0:	d019      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8004cb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cb6:	d80e      	bhi.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d016      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8004cbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cc0:	d109      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004cc6:	3308      	adds	r3, #8
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f001 fd7d 	bl	80067c8 <RCCEx_PLL2_Config>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004cd4:	e00a      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004cdc:	e006      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8004cde:	bf00      	nop
 8004ce0:	e004      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8004ce2:	bf00      	nop
 8004ce4:	e002      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8004ce6:	bf00      	nop
 8004ce8:	e000      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8004cea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cec:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10f      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004cf4:	4b06      	ldr	r3, [pc, #24]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004cf6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004cfa:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004cfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d04:	4a02      	ldr	r2, [pc, #8]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004d06:	430b      	orrs	r3, r1
 8004d08:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004d0c:	e006      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004d0e:	bf00      	nop
 8004d10:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d14:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004d18:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004d1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004d28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d2e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004d32:	460b      	mov	r3, r1
 8004d34:	4313      	orrs	r3, r2
 8004d36:	d043      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004d38:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d3e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004d42:	d021      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8004d44:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004d48:	d81a      	bhi.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8004d4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d4e:	d01d      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x630>
 8004d50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d54:	d814      	bhi.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8004d56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d5a:	d019      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004d5c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d60:	d80e      	bhi.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d016      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8004d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d6a:	d109      	bne.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d70:	3308      	adds	r3, #8
 8004d72:	4618      	mov	r0, r3
 8004d74:	f001 fd28 	bl	80067c8 <RCCEx_PLL2_Config>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004d7e:	e00a      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004d86:	e006      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8004d88:	bf00      	nop
 8004d8a:	e004      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8004d8c:	bf00      	nop
 8004d8e:	e002      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8004d90:	bf00      	nop
 8004d92:	e000      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8004d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d96:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10c      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004d9e:	4bb6      	ldr	r3, [pc, #728]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004da0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004da4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004da8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dae:	4ab2      	ldr	r2, [pc, #712]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004db0:	430b      	orrs	r3, r1
 8004db2:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004db6:	e003      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004dbc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004dc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004dcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dce:	2300      	movs	r3, #0
 8004dd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dd2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	d030      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004ddc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004de0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004de2:	2b05      	cmp	r3, #5
 8004de4:	d80f      	bhi.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d211      	bcs.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d911      	bls.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d109      	bne.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004df2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004df6:	3308      	adds	r3, #8
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f001 fce5 	bl	80067c8 <RCCEx_PLL2_Config>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004e04:	e006      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004e0c:	e002      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8004e0e:	bf00      	nop
 8004e10:	e000      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8004e12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e14:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10c      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004e1c:	4b96      	ldr	r3, [pc, #600]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004e1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e22:	f023 0107 	bic.w	r1, r3, #7
 8004e26:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e2c:	4a92      	ldr	r2, [pc, #584]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004e2e:	430b      	orrs	r3, r1
 8004e30:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004e34:	e003      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e36:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004e3a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004e3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e46:	2100      	movs	r1, #0
 8004e48:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e50:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004e54:	460b      	mov	r3, r1
 8004e56:	4313      	orrs	r3, r2
 8004e58:	d022      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004e5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d005      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004e6e:	e002      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8004e70:	bf00      	nop
 8004e72:	e000      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8004e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e76:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10c      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004e7e:	4b7e      	ldr	r3, [pc, #504]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004e80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e84:	f023 0108 	bic.w	r1, r3, #8
 8004e88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e8e:	4a7a      	ldr	r2, [pc, #488]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004e90:	430b      	orrs	r3, r1
 8004e92:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004e96:	e003      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e98:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004e9c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ea0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004eac:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eae:	2300      	movs	r3, #0
 8004eb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eb2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f000 80b0 	beq.w	800501e <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004ebe:	4b6f      	ldr	r3, [pc, #444]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec2:	4a6e      	ldr	r2, [pc, #440]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8004ec4:	f043 0301 	orr.w	r3, r3, #1
 8004ec8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004eca:	f7fd f899 	bl	8002000 <HAL_GetTick>
 8004ece:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004ed2:	e00b      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ed4:	f7fd f894 	bl	8002000 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d903      	bls.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004eea:	e005      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004eec:	4b63      	ldr	r3, [pc, #396]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8004eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0ed      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8004ef8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f040 808a 	bne.w	8005016 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f02:	4b5d      	ldr	r3, [pc, #372]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004f04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004f10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d022      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x802>
 8004f18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f1e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d01b      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f26:	4b54      	ldr	r3, [pc, #336]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004f28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f34:	4b50      	ldr	r3, [pc, #320]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004f36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f3a:	4a4f      	ldr	r2, [pc, #316]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f40:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f44:	4b4c      	ldr	r3, [pc, #304]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004f46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f4a:	4a4b      	ldr	r2, [pc, #300]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004f4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f50:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f54:	4a48      	ldr	r2, [pc, #288]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004f56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004f5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d019      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6a:	f7fd f849 	bl	8002000 <HAL_GetTick>
 8004f6e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f72:	e00d      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f74:	f7fd f844 	bl	8002000 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d903      	bls.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8004f8e:	e006      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f90:	4b39      	ldr	r3, [pc, #228]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004f92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0ea      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8004f9e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d132      	bne.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004fa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004faa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fb4:	d10f      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8004fb6:	4b30      	ldr	r3, [pc, #192]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004fbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004fc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fc4:	091b      	lsrs	r3, r3, #4
 8004fc6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004fca:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004fce:	4a2a      	ldr	r2, [pc, #168]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	61d3      	str	r3, [r2, #28]
 8004fd4:	e005      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x886>
 8004fd6:	4b28      	ldr	r3, [pc, #160]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	4a27      	ldr	r2, [pc, #156]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004fdc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004fe0:	61d3      	str	r3, [r2, #28]
 8004fe2:	4b25      	ldr	r3, [pc, #148]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004fe4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fe8:	4a23      	ldr	r2, [pc, #140]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004fea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ff2:	4b21      	ldr	r3, [pc, #132]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004ff4:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8004ff8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ffc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005002:	4a1d      	ldr	r2, [pc, #116]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005004:	430b      	orrs	r3, r1
 8005006:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800500a:	e008      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800500c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005010:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8005014:	e003      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005016:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800501a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800501e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005026:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800502a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800502c:	2300      	movs	r3, #0
 800502e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005030:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005034:	460b      	mov	r3, r1
 8005036:	4313      	orrs	r3, r2
 8005038:	d038      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800503a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800503e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005040:	2b30      	cmp	r3, #48	@ 0x30
 8005042:	d014      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x912>
 8005044:	2b30      	cmp	r3, #48	@ 0x30
 8005046:	d80e      	bhi.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8005048:	2b20      	cmp	r3, #32
 800504a:	d012      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x916>
 800504c:	2b20      	cmp	r3, #32
 800504e:	d80a      	bhi.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8005050:	2b00      	cmp	r3, #0
 8005052:	d015      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005054:	2b10      	cmp	r3, #16
 8005056:	d106      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005058:	4b07      	ldr	r3, [pc, #28]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800505a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505c:	4a06      	ldr	r2, [pc, #24]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800505e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005062:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8005064:	e00d      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800506c:	e009      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 800506e:	bf00      	nop
 8005070:	e007      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8005072:	bf00      	nop
 8005074:	e005      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8005076:	bf00      	nop
 8005078:	44020c00 	.word	0x44020c00
 800507c:	44020800 	.word	0x44020800
        break;
 8005080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005082:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10c      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800508a:	4bb5      	ldr	r3, [pc, #724]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800508c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005090:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005094:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800509a:	49b1      	ldr	r1, [pc, #708]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800509c:	4313      	orrs	r3, r2
 800509e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80050a2:	e003      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80050a8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80050ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80050b8:	623b      	str	r3, [r7, #32]
 80050ba:	2300      	movs	r3, #0
 80050bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80050be:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80050c2:	460b      	mov	r3, r1
 80050c4:	4313      	orrs	r3, r2
 80050c6:	d03c      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80050c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d81d      	bhi.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 80050d2:	a201      	add	r2, pc, #4	@ (adr r2, 80050d8 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80050d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d8:	080050ed 	.word	0x080050ed
 80050dc:	080050fb 	.word	0x080050fb
 80050e0:	0800510f 	.word	0x0800510f
 80050e4:	08005117 	.word	0x08005117
 80050e8:	08005117 	.word	0x08005117
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050ec:	4b9c      	ldr	r3, [pc, #624]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80050ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f0:	4a9b      	ldr	r2, [pc, #620]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80050f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050f6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80050f8:	e00e      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050fe:	3308      	adds	r3, #8
 8005100:	4618      	mov	r0, r3
 8005102:	f001 fb61 	bl	80067c8 <RCCEx_PLL2_Config>
 8005106:	4603      	mov	r3, r0
 8005108:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800510c:	e004      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005114:	e000      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8005116:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005118:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10c      	bne.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005120:	4b8f      	ldr	r3, [pc, #572]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005126:	f023 0207 	bic.w	r2, r3, #7
 800512a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800512e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005130:	498b      	ldr	r1, [pc, #556]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005132:	4313      	orrs	r3, r2
 8005134:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005138:	e003      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800513a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800513e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005142:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800514e:	61bb      	str	r3, [r7, #24]
 8005150:	2300      	movs	r3, #0
 8005152:	61fb      	str	r3, [r7, #28]
 8005154:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005158:	460b      	mov	r3, r1
 800515a:	4313      	orrs	r3, r2
 800515c:	d03c      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800515e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005164:	2b20      	cmp	r3, #32
 8005166:	d01f      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005168:	2b20      	cmp	r3, #32
 800516a:	d819      	bhi.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 800516c:	2b18      	cmp	r3, #24
 800516e:	d01d      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8005170:	2b18      	cmp	r3, #24
 8005172:	d815      	bhi.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8005174:	2b00      	cmp	r3, #0
 8005176:	d002      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8005178:	2b08      	cmp	r3, #8
 800517a:	d007      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800517c:	e010      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800517e:	4b78      	ldr	r3, [pc, #480]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005182:	4a77      	ldr	r2, [pc, #476]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005184:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005188:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800518a:	e010      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800518c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005190:	3308      	adds	r3, #8
 8005192:	4618      	mov	r0, r3
 8005194:	f001 fb18 	bl	80067c8 <RCCEx_PLL2_Config>
 8005198:	4603      	mov	r3, r0
 800519a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800519e:	e006      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80051a6:	e002      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80051a8:	bf00      	nop
 80051aa:	e000      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80051ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051ae:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10c      	bne.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80051b6:	4b6a      	ldr	r3, [pc, #424]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80051b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051bc:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80051c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c6:	4966      	ldr	r1, [pc, #408]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80051ce:	e003      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80051d4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80051d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	2300      	movs	r3, #0
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80051ee:	460b      	mov	r3, r1
 80051f0:	4313      	orrs	r3, r2
 80051f2:	d03e      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80051f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051fe:	d020      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8005200:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005204:	d819      	bhi.n	800523a <HAL_RCCEx_PeriphCLKConfig+0xade>
 8005206:	2bc0      	cmp	r3, #192	@ 0xc0
 8005208:	d01d      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800520a:	2bc0      	cmp	r3, #192	@ 0xc0
 800520c:	d815      	bhi.n	800523a <HAL_RCCEx_PeriphCLKConfig+0xade>
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8005212:	2b40      	cmp	r3, #64	@ 0x40
 8005214:	d007      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8005216:	e010      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005218:	4b51      	ldr	r3, [pc, #324]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800521a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800521c:	4a50      	ldr	r2, [pc, #320]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800521e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005222:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005224:	e010      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005226:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800522a:	3308      	adds	r3, #8
 800522c:	4618      	mov	r0, r3
 800522e:	f001 facb 	bl	80067c8 <RCCEx_PLL2_Config>
 8005232:	4603      	mov	r3, r0
 8005234:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005238:	e006      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005240:	e002      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8005242:	bf00      	nop
 8005244:	e000      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8005246:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005248:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10c      	bne.n	800526a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005250:	4b43      	ldr	r3, [pc, #268]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005256:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 800525a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800525e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005260:	493f      	ldr	r1, [pc, #252]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005262:	4313      	orrs	r3, r2
 8005264:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005268:	e003      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800526a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800526e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005272:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527a:	2100      	movs	r1, #0
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	f003 0304 	and.w	r3, r3, #4
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005288:	460b      	mov	r3, r1
 800528a:	4313      	orrs	r3, r2
 800528c:	d038      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800528e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005294:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005298:	d00e      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 800529a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800529e:	d815      	bhi.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xb70>
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d017      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 80052a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052a8:	d110      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052aa:	4b2d      	ldr	r3, [pc, #180]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80052ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ae:	4a2c      	ldr	r2, [pc, #176]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80052b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052b4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80052b6:	e00e      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80052bc:	3308      	adds	r3, #8
 80052be:	4618      	mov	r0, r3
 80052c0:	f001 fa82 	bl	80067c8 <RCCEx_PLL2_Config>
 80052c4:	4603      	mov	r3, r0
 80052c6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80052ca:	e004      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80052d2:	e000      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 80052d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052d6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10c      	bne.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80052de:	4b20      	ldr	r3, [pc, #128]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80052e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80052e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80052ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ee:	491c      	ldr	r1, [pc, #112]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80052f6:	e003      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80052fc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005300:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	2100      	movs	r1, #0
 800530a:	6039      	str	r1, [r7, #0]
 800530c:	f003 0310 	and.w	r3, r3, #16
 8005310:	607b      	str	r3, [r7, #4]
 8005312:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005316:	460b      	mov	r3, r1
 8005318:	4313      	orrs	r3, r2
 800531a:	d039      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800531c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005320:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005322:	2b30      	cmp	r3, #48	@ 0x30
 8005324:	d01e      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005326:	2b30      	cmp	r3, #48	@ 0x30
 8005328:	d815      	bhi.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 800532a:	2b10      	cmp	r3, #16
 800532c:	d002      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 800532e:	2b20      	cmp	r3, #32
 8005330:	d007      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8005332:	e010      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005334:	4b0a      	ldr	r3, [pc, #40]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005338:	4a09      	ldr	r2, [pc, #36]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800533a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800533e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005340:	e011      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005342:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005346:	3308      	adds	r3, #8
 8005348:	4618      	mov	r0, r3
 800534a:	f001 fa3d 	bl	80067c8 <RCCEx_PLL2_Config>
 800534e:	4603      	mov	r3, r0
 8005350:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005354:	e007      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800535c:	e003      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 800535e:	bf00      	nop
 8005360:	44020c00 	.word	0x44020c00
        break;
 8005364:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005366:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10c      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800536e:	4b0c      	ldr	r3, [pc, #48]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005370:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005374:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005378:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800537c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800537e:	4908      	ldr	r1, [pc, #32]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005380:	4313      	orrs	r3, r2
 8005382:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005386:	e003      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005388:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800538c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8005390:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8005394:	4618      	mov	r0, r3
 8005396:	37a8      	adds	r7, #168	@ 0xa8
 8005398:	46bd      	mov	sp, r7
 800539a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800539e:	bf00      	nop
 80053a0:	44020c00 	.word	0x44020c00

080053a4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b08b      	sub	sp, #44	@ 0x2c
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80053ac:	4bad      	ldr	r3, [pc, #692]	@ (8005664 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80053ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b4:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80053b6:	4bab      	ldr	r3, [pc, #684]	@ (8005664 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80053b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80053c0:	4ba8      	ldr	r3, [pc, #672]	@ (8005664 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80053c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c4:	0a1b      	lsrs	r3, r3, #8
 80053c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053ca:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80053cc:	4ba5      	ldr	r3, [pc, #660]	@ (8005664 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80053ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d0:	f003 0310 	and.w	r3, r3, #16
 80053d4:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80053d6:	4ba3      	ldr	r3, [pc, #652]	@ (8005664 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80053d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053da:	08db      	lsrs	r3, r3, #3
 80053dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	fb02 f303 	mul.w	r3, r2, r3
 80053e6:	ee07 3a90 	vmov	s15, r3
 80053ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ee:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 8126 	beq.w	8005646 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	2b03      	cmp	r3, #3
 80053fe:	d053      	beq.n	80054a8 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	2b03      	cmp	r3, #3
 8005404:	d86f      	bhi.n	80054e6 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d003      	beq.n	8005414 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d02b      	beq.n	800546a <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8005412:	e068      	b.n	80054e6 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005414:	4b93      	ldr	r3, [pc, #588]	@ (8005664 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	08db      	lsrs	r3, r3, #3
 800541a:	f003 0303 	and.w	r3, r3, #3
 800541e:	4a92      	ldr	r2, [pc, #584]	@ (8005668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005420:	fa22 f303 	lsr.w	r3, r2, r3
 8005424:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	ee07 3a90 	vmov	s15, r3
 800542c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	ee07 3a90 	vmov	s15, r3
 8005436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800543a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	ee07 3a90 	vmov	s15, r3
 8005444:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005448:	ed97 6a04 	vldr	s12, [r7, #16]
 800544c:	eddf 5a87 	vldr	s11, [pc, #540]	@ 800566c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005450:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005454:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005458:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800545c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005464:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005468:	e068      	b.n	800553c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	ee07 3a90 	vmov	s15, r3
 8005470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005474:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005670 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005478:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	ee07 3a90 	vmov	s15, r3
 8005482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005486:	ed97 6a04 	vldr	s12, [r7, #16]
 800548a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800566c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800548e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800549a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800549e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054a2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80054a6:	e049      	b.n	800553c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	ee07 3a90 	vmov	s15, r3
 80054ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b2:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005674 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80054b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	ee07 3a90 	vmov	s15, r3
 80054c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054c4:	ed97 6a04 	vldr	s12, [r7, #16]
 80054c8:	eddf 5a68 	vldr	s11, [pc, #416]	@ 800566c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80054cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054e0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80054e4:	e02a      	b.n	800553c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80054e6:	4b5f      	ldr	r3, [pc, #380]	@ (8005664 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	08db      	lsrs	r3, r3, #3
 80054ec:	f003 0303 	and.w	r3, r3, #3
 80054f0:	4a5d      	ldr	r2, [pc, #372]	@ (8005668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80054f2:	fa22 f303 	lsr.w	r3, r2, r3
 80054f6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	ee07 3a90 	vmov	s15, r3
 80054fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	ee07 3a90 	vmov	s15, r3
 8005508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800550c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800551a:	ed97 6a04 	vldr	s12, [r7, #16]
 800551e:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800566c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800552a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800552e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005536:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800553a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800553c:	4b49      	ldr	r3, [pc, #292]	@ (8005664 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005544:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005548:	d121      	bne.n	800558e <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800554a:	4b46      	ldr	r3, [pc, #280]	@ (8005664 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800554c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d017      	beq.n	8005586 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005556:	4b43      	ldr	r3, [pc, #268]	@ (8005664 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800555a:	0a5b      	lsrs	r3, r3, #9
 800555c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005560:	ee07 3a90 	vmov	s15, r3
 8005564:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005568:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800556c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005570:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800557c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	e006      	b.n	8005594 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	e002      	b.n	8005594 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005594:	4b33      	ldr	r3, [pc, #204]	@ (8005664 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800559c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055a0:	d121      	bne.n	80055e6 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80055a2:	4b30      	ldr	r3, [pc, #192]	@ (8005664 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80055a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d017      	beq.n	80055de <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80055ae:	4b2d      	ldr	r3, [pc, #180]	@ (8005664 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80055b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055b2:	0c1b      	lsrs	r3, r3, #16
 80055b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055b8:	ee07 3a90 	vmov	s15, r3
 80055bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80055c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055c4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80055c8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80055cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055d4:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	605a      	str	r2, [r3, #4]
 80055dc:	e006      	b.n	80055ec <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	605a      	str	r2, [r3, #4]
 80055e4:	e002      	b.n	80055ec <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80055ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005664 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055f8:	d121      	bne.n	800563e <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80055fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005664 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80055fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d017      	beq.n	8005636 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005606:	4b17      	ldr	r3, [pc, #92]	@ (8005664 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800560a:	0e1b      	lsrs	r3, r3, #24
 800560c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005610:	ee07 3a90 	vmov	s15, r3
 8005614:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005618:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800561c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005620:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005624:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800562c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005634:	e010      	b.n	8005658 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	609a      	str	r2, [r3, #8]
}
 800563c:	e00c      	b.n	8005658 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	609a      	str	r2, [r3, #8]
}
 8005644:	e008      	b.n	8005658 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	609a      	str	r2, [r3, #8]
}
 8005658:	bf00      	nop
 800565a:	372c      	adds	r7, #44	@ 0x2c
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	44020c00 	.word	0x44020c00
 8005668:	03d09000 	.word	0x03d09000
 800566c:	46000000 	.word	0x46000000
 8005670:	4a742400 	.word	0x4a742400
 8005674:	4bbebc20 	.word	0x4bbebc20

08005678 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005678:	b480      	push	{r7}
 800567a:	b08b      	sub	sp, #44	@ 0x2c
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005680:	4bad      	ldr	r3, [pc, #692]	@ (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005688:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800568a:	4bab      	ldr	r3, [pc, #684]	@ (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800568c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005694:	4ba8      	ldr	r3, [pc, #672]	@ (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005698:	0a1b      	lsrs	r3, r3, #8
 800569a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800569e:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80056a0:	4ba5      	ldr	r3, [pc, #660]	@ (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80056a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a4:	f003 0310 	and.w	r3, r3, #16
 80056a8:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80056aa:	4ba3      	ldr	r3, [pc, #652]	@ (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80056ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ae:	08db      	lsrs	r3, r3, #3
 80056b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	fb02 f303 	mul.w	r3, r2, r3
 80056ba:	ee07 3a90 	vmov	s15, r3
 80056be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c2:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 8126 	beq.w	800591a <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	2b03      	cmp	r3, #3
 80056d2:	d053      	beq.n	800577c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	2b03      	cmp	r3, #3
 80056d8:	d86f      	bhi.n	80057ba <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d003      	beq.n	80056e8 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d02b      	beq.n	800573e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80056e6:	e068      	b.n	80057ba <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80056e8:	4b93      	ldr	r3, [pc, #588]	@ (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	08db      	lsrs	r3, r3, #3
 80056ee:	f003 0303 	and.w	r3, r3, #3
 80056f2:	4a92      	ldr	r2, [pc, #584]	@ (800593c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80056f4:	fa22 f303 	lsr.w	r3, r2, r3
 80056f8:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	ee07 3a90 	vmov	s15, r3
 8005700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	ee07 3a90 	vmov	s15, r3
 800570a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	ee07 3a90 	vmov	s15, r3
 8005718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800571c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005720:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005940 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005724:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005728:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800572c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005730:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005738:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800573c:	e068      	b.n	8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	ee07 3a90 	vmov	s15, r3
 8005744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005748:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005944 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800574c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	ee07 3a90 	vmov	s15, r3
 8005756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800575a:	ed97 6a04 	vldr	s12, [r7, #16]
 800575e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005940 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800576a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800576e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005776:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800577a:	e049      	b.n	8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	ee07 3a90 	vmov	s15, r3
 8005782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005786:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005948 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800578a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	ee07 3a90 	vmov	s15, r3
 8005794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005798:	ed97 6a04 	vldr	s12, [r7, #16]
 800579c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005940 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80057a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80057b8:	e02a      	b.n	8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80057ba:	4b5f      	ldr	r3, [pc, #380]	@ (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	08db      	lsrs	r3, r3, #3
 80057c0:	f003 0303 	and.w	r3, r3, #3
 80057c4:	4a5d      	ldr	r2, [pc, #372]	@ (800593c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80057c6:	fa22 f303 	lsr.w	r3, r2, r3
 80057ca:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	ee07 3a90 	vmov	s15, r3
 80057d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	ee07 3a90 	vmov	s15, r3
 80057dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	ee07 3a90 	vmov	s15, r3
 80057ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ee:	ed97 6a04 	vldr	s12, [r7, #16]
 80057f2:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005940 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80057f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800580a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800580e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005810:	4b49      	ldr	r3, [pc, #292]	@ (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005818:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800581c:	d121      	bne.n	8005862 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800581e:	4b46      	ldr	r3, [pc, #280]	@ (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005822:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d017      	beq.n	800585a <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800582a:	4b43      	ldr	r3, [pc, #268]	@ (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800582c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800582e:	0a5b      	lsrs	r3, r3, #9
 8005830:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005834:	ee07 3a90 	vmov	s15, r3
 8005838:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800583c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005840:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005844:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005848:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800584c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005850:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	e006      	b.n	8005868 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	e002      	b.n	8005868 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005868:	4b33      	ldr	r3, [pc, #204]	@ (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005870:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005874:	d121      	bne.n	80058ba <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005876:	4b30      	ldr	r3, [pc, #192]	@ (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d017      	beq.n	80058b2 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005882:	4b2d      	ldr	r3, [pc, #180]	@ (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005886:	0c1b      	lsrs	r3, r3, #16
 8005888:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800588c:	ee07 3a90 	vmov	s15, r3
 8005890:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005894:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005898:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800589c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80058a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058a8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	605a      	str	r2, [r3, #4]
 80058b0:	e006      	b.n	80058c0 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	605a      	str	r2, [r3, #4]
 80058b8:	e002      	b.n	80058c0 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058cc:	d121      	bne.n	8005912 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80058ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80058d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d017      	beq.n	800590a <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80058da:	4b17      	ldr	r3, [pc, #92]	@ (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80058dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058de:	0e1b      	lsrs	r3, r3, #24
 80058e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058e4:	ee07 3a90 	vmov	s15, r3
 80058e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80058ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058f0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80058f4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80058f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005900:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005908:	e010      	b.n	800592c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	609a      	str	r2, [r3, #8]
}
 8005910:	e00c      	b.n	800592c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	609a      	str	r2, [r3, #8]
}
 8005918:	e008      	b.n	800592c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	609a      	str	r2, [r3, #8]
}
 800592c:	bf00      	nop
 800592e:	372c      	adds	r7, #44	@ 0x2c
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	44020c00 	.word	0x44020c00
 800593c:	03d09000 	.word	0x03d09000
 8005940:	46000000 	.word	0x46000000
 8005944:	4a742400 	.word	0x4a742400
 8005948:	4bbebc20 	.word	0x4bbebc20

0800594c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b08c      	sub	sp, #48	@ 0x30
 8005950:	af00      	add	r7, sp, #0
 8005952:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005956:	e9d7 2300 	ldrd	r2, r3, [r7]
 800595a:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800595e:	430b      	orrs	r3, r1
 8005960:	d14b      	bne.n	80059fa <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005962:	4bc4      	ldr	r3, [pc, #784]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005968:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800596c:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800596e:	4bc1      	ldr	r3, [pc, #772]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b02      	cmp	r3, #2
 800597a:	d108      	bne.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800597c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800597e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005982:	d104      	bne.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005984:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005988:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800598a:	f000 bf14 	b.w	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800598e:	4bb9      	ldr	r3, [pc, #740]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005990:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005994:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005998:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800599c:	d108      	bne.n	80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800599e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059a4:	d104      	bne.n	80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80059a6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80059aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059ac:	f000 bf03 	b.w	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80059b0:	4bb0      	ldr	r3, [pc, #704]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059bc:	d119      	bne.n	80059f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80059be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059c4:	d115      	bne.n	80059f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80059c6:	4bab      	ldr	r3, [pc, #684]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80059ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059d2:	d30a      	bcc.n	80059ea <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80059d4:	4ba7      	ldr	r3, [pc, #668]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	0a1b      	lsrs	r3, r3, #8
 80059da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059de:	4aa6      	ldr	r2, [pc, #664]	@ (8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80059e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80059e6:	f000 bee6 	b.w	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 80059ea:	2300      	movs	r3, #0
 80059ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80059ee:	f000 bee2 	b.w	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059f6:	f000 bede 	b.w	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80059fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059fe:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 8005a02:	ea52 0301 	orrs.w	r3, r2, r1
 8005a06:	f000 838e 	beq.w	8006126 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8005a0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a0e:	2a01      	cmp	r2, #1
 8005a10:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 8005a14:	f080 86cc 	bcs.w	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a1c:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8005a20:	ea52 0301 	orrs.w	r3, r2, r1
 8005a24:	f000 82aa 	beq.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8005a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a2c:	2a01      	cmp	r2, #1
 8005a2e:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 8005a32:	f080 86bd 	bcs.w	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005a36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a3a:	f1a3 0110 	sub.w	r1, r3, #16
 8005a3e:	ea52 0301 	orrs.w	r3, r2, r1
 8005a42:	f000 8681 	beq.w	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8005a46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a4a:	2a01      	cmp	r2, #1
 8005a4c:	f173 0310 	sbcs.w	r3, r3, #16
 8005a50:	f080 86ae 	bcs.w	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005a54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a58:	1f19      	subs	r1, r3, #4
 8005a5a:	ea52 0301 	orrs.w	r3, r2, r1
 8005a5e:	f000 84b1 	beq.w	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8005a62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a66:	2a01      	cmp	r2, #1
 8005a68:	f173 0304 	sbcs.w	r3, r3, #4
 8005a6c:	f080 86a0 	bcs.w	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005a70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a74:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8005a78:	430b      	orrs	r3, r1
 8005a7a:	f000 85aa 	beq.w	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 8005a7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a82:	497e      	ldr	r1, [pc, #504]	@ (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005a84:	428a      	cmp	r2, r1
 8005a86:	f173 0300 	sbcs.w	r3, r3, #0
 8005a8a:	f080 8691 	bcs.w	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005a8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a92:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8005a96:	430b      	orrs	r3, r1
 8005a98:	f000 8532 	beq.w	8006500 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8005a9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005aa0:	4977      	ldr	r1, [pc, #476]	@ (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8005aa2:	428a      	cmp	r2, r1
 8005aa4:	f173 0300 	sbcs.w	r3, r3, #0
 8005aa8:	f080 8682 	bcs.w	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005aac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ab0:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8005ab4:	430b      	orrs	r3, r1
 8005ab6:	f000 84bc 	beq.w	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8005aba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005abe:	4971      	ldr	r1, [pc, #452]	@ (8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8005ac0:	428a      	cmp	r2, r1
 8005ac2:	f173 0300 	sbcs.w	r3, r3, #0
 8005ac6:	f080 8673 	bcs.w	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005aca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ace:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8005ad2:	430b      	orrs	r3, r1
 8005ad4:	f000 85f2 	beq.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8005ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005adc:	496a      	ldr	r1, [pc, #424]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8005ade:	428a      	cmp	r2, r1
 8005ae0:	f173 0300 	sbcs.w	r3, r3, #0
 8005ae4:	f080 8664 	bcs.w	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005aec:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8005af0:	430b      	orrs	r3, r1
 8005af2:	f000 81e5 	beq.w	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8005af6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005afa:	4964      	ldr	r1, [pc, #400]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8005afc:	428a      	cmp	r2, r1
 8005afe:	f173 0300 	sbcs.w	r3, r3, #0
 8005b02:	f080 8655 	bcs.w	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005b06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b0a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8005b0e:	430b      	orrs	r3, r1
 8005b10:	f000 83cc 	beq.w	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005b14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b18:	495d      	ldr	r1, [pc, #372]	@ (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8005b1a:	428a      	cmp	r2, r1
 8005b1c:	f173 0300 	sbcs.w	r3, r3, #0
 8005b20:	f080 8646 	bcs.w	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005b24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b28:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8005b2c:	430b      	orrs	r3, r1
 8005b2e:	f000 8331 	beq.w	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8005b32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b36:	4957      	ldr	r1, [pc, #348]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8005b38:	428a      	cmp	r2, r1
 8005b3a:	f173 0300 	sbcs.w	r3, r3, #0
 8005b3e:	f080 8637 	bcs.w	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005b42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b46:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005b4a:	430b      	orrs	r3, r1
 8005b4c:	f000 82bb 	beq.w	80060c6 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8005b50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b54:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8005b58:	f173 0300 	sbcs.w	r3, r3, #0
 8005b5c:	f080 8628 	bcs.w	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b64:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005b68:	430b      	orrs	r3, r1
 8005b6a:	f000 826d 	beq.w	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 8005b6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b72:	f244 0101 	movw	r1, #16385	@ 0x4001
 8005b76:	428a      	cmp	r2, r1
 8005b78:	f173 0300 	sbcs.w	r3, r3, #0
 8005b7c:	f080 8618 	bcs.w	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b84:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005b88:	430b      	orrs	r3, r1
 8005b8a:	f000 821e 	beq.w	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8005b8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b92:	f242 0101 	movw	r1, #8193	@ 0x2001
 8005b96:	428a      	cmp	r2, r1
 8005b98:	f173 0300 	sbcs.w	r3, r3, #0
 8005b9c:	f080 8608 	bcs.w	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ba4:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005ba8:	430b      	orrs	r3, r1
 8005baa:	f000 8137 	beq.w	8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8005bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bb2:	f241 0101 	movw	r1, #4097	@ 0x1001
 8005bb6:	428a      	cmp	r2, r1
 8005bb8:	f173 0300 	sbcs.w	r3, r3, #0
 8005bbc:	f080 85f8 	bcs.w	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005bc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bc4:	1f11      	subs	r1, r2, #4
 8005bc6:	430b      	orrs	r3, r1
 8005bc8:	f000 80d2 	beq.w	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8005bcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bd0:	2a05      	cmp	r2, #5
 8005bd2:	f173 0300 	sbcs.w	r3, r3, #0
 8005bd6:	f080 85eb 	bcs.w	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005bda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bde:	1e51      	subs	r1, r2, #1
 8005be0:	430b      	orrs	r3, r1
 8005be2:	d006      	beq.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8005be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005be8:	1e91      	subs	r1, r2, #2
 8005bea:	430b      	orrs	r3, r1
 8005bec:	d06c      	beq.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8005bee:	f000 bddf 	b.w	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005bf2:	4b20      	ldr	r3, [pc, #128]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005bf4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005bf8:	f003 0307 	and.w	r3, r3, #7
 8005bfc:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d104      	bne.n	8005c0e <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005c04:	f7fe fd7e 	bl	8004704 <HAL_RCC_GetPCLK2Freq>
 8005c08:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005c0a:	f000 bdd4 	b.w	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8005c0e:	4b19      	ldr	r3, [pc, #100]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c1a:	d10a      	bne.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8005c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d107      	bne.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c22:	f107 030c 	add.w	r3, r7, #12
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7ff fd26 	bl	8005678 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c30:	e048      	b.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005c32:	4b10      	ldr	r3, [pc, #64]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d10c      	bne.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8005c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d109      	bne.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005c44:	4b0b      	ldr	r3, [pc, #44]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	08db      	lsrs	r3, r3, #3
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	4a12      	ldr	r2, [pc, #72]	@ (8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005c50:	fa22 f303 	lsr.w	r3, r2, r3
 8005c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c56:	e035      	b.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8005c58:	4b06      	ldr	r3, [pc, #24]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c64:	d11c      	bne.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8005c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c68:	2b04      	cmp	r3, #4
 8005c6a:	d119      	bne.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8005c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8005c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c70:	e028      	b.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8005c72:	bf00      	nop
 8005c74:	44020c00 	.word	0x44020c00
 8005c78:	017d7840 	.word	0x017d7840
 8005c7c:	20000001 	.word	0x20000001
 8005c80:	10000001 	.word	0x10000001
 8005c84:	08000001 	.word	0x08000001
 8005c88:	04000001 	.word	0x04000001
 8005c8c:	00200001 	.word	0x00200001
 8005c90:	00040001 	.word	0x00040001
 8005c94:	00020001 	.word	0x00020001
 8005c98:	03d09000 	.word	0x03d09000
 8005c9c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005ca0:	4b9f      	ldr	r3, [pc, #636]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005ca2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d106      	bne.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8005cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb0:	2b05      	cmp	r3, #5
 8005cb2:	d103      	bne.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 8005cb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cba:	e003      	b.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005cc0:	f000 bd79 	b.w	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005cc4:	f000 bd77 	b.w	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005cc8:	4b95      	ldr	r3, [pc, #596]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005cca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005cce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cd2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d104      	bne.n	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005cda:	f7fe fcfd 	bl	80046d8 <HAL_RCC_GetPCLK1Freq>
 8005cde:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8005ce0:	f000 bd69 	b.w	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8005ce4:	4b8e      	ldr	r3, [pc, #568]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cf0:	d10a      	bne.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8005cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf4:	2b08      	cmp	r3, #8
 8005cf6:	d107      	bne.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cf8:	f107 030c 	add.w	r3, r7, #12
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff fcbb 	bl	8005678 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d06:	e031      	b.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005d08:	4b85      	ldr	r3, [pc, #532]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d10c      	bne.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d16:	2b18      	cmp	r3, #24
 8005d18:	d109      	bne.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d1a:	4b81      	ldr	r3, [pc, #516]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	08db      	lsrs	r3, r3, #3
 8005d20:	f003 0303 	and.w	r3, r3, #3
 8005d24:	4a7f      	ldr	r2, [pc, #508]	@ (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8005d26:	fa22 f303 	lsr.w	r3, r2, r3
 8005d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d2c:	e01e      	b.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8005d2e:	4b7c      	ldr	r3, [pc, #496]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d3a:	d105      	bne.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8005d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3e:	2b20      	cmp	r3, #32
 8005d40:	d102      	bne.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8005d42:	4b79      	ldr	r3, [pc, #484]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8005d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d46:	e011      	b.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005d48:	4b75      	ldr	r3, [pc, #468]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005d4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d106      	bne.n	8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8005d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d58:	2b28      	cmp	r3, #40	@ 0x28
 8005d5a:	d103      	bne.n	8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8005d5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d62:	e003      	b.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005d68:	f000 bd25 	b.w	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005d6c:	f000 bd23 	b.w	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005d70:	4b6b      	ldr	r3, [pc, #428]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005d72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005d76:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005d7a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d104      	bne.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d82:	f7fe fca9 	bl	80046d8 <HAL_RCC_GetPCLK1Freq>
 8005d86:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8005d88:	f000 bd15 	b.w	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8005d8c:	4b64      	ldr	r3, [pc, #400]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d98:	d10a      	bne.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8005d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d9c:	2b40      	cmp	r3, #64	@ 0x40
 8005d9e:	d107      	bne.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005da0:	f107 030c 	add.w	r3, r7, #12
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7ff fc67 	bl	8005678 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dae:	e033      	b.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005db0:	4b5b      	ldr	r3, [pc, #364]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d10c      	bne.n	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005dc0:	d109      	bne.n	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005dc2:	4b57      	ldr	r3, [pc, #348]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	08db      	lsrs	r3, r3, #3
 8005dc8:	f003 0303 	and.w	r3, r3, #3
 8005dcc:	4a55      	ldr	r2, [pc, #340]	@ (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8005dce:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dd4:	e020      	b.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8005dd6:	4b52      	ldr	r3, [pc, #328]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005dde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005de2:	d106      	bne.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8005de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dea:	d102      	bne.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8005dec:	4b4e      	ldr	r3, [pc, #312]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8005dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005df0:	e012      	b.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005df2:	4b4b      	ldr	r3, [pc, #300]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005df4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d107      	bne.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8005e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e02:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005e06:	d103      	bne.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8005e08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e0e:	e003      	b.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8005e10:	2300      	movs	r3, #0
 8005e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005e14:	f000 bccf 	b.w	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005e18:	f000 bccd 	b.w	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005e1c:	4b40      	ldr	r3, [pc, #256]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e22:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005e26:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d104      	bne.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005e2e:	f7fe fc7f 	bl	8004730 <HAL_RCC_GetPCLK3Freq>
 8005e32:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005e34:	f000 bcbf 	b.w	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8005e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e3e:	d108      	bne.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e40:	f107 030c 	add.w	r3, r7, #12
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7ff fc17 	bl	8005678 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005e4e:	f000 bcb2 	b.w	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005e52:	4b33      	ldr	r3, [pc, #204]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d10d      	bne.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8005e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e60:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e64:	d109      	bne.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e66:	4b2e      	ldr	r3, [pc, #184]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	08db      	lsrs	r3, r3, #3
 8005e6c:	f003 0303 	and.w	r3, r3, #3
 8005e70:	4a2c      	ldr	r2, [pc, #176]	@ (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8005e72:	fa22 f303 	lsr.w	r3, r2, r3
 8005e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e78:	e020      	b.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8005e7a:	4b29      	ldr	r3, [pc, #164]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e86:	d106      	bne.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8005e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e8a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e8e:	d102      	bne.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8005e90:	4b25      	ldr	r3, [pc, #148]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8005e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e94:	e012      	b.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005e96:	4b22      	ldr	r3, [pc, #136]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d107      	bne.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8005ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005eaa:	d103      	bne.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8005eac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005eb2:	e003      	b.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005eb8:	f000 bc7d 	b.w	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005ebc:	f000 bc7b 	b.w	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8005ec0:	4b17      	ldr	r3, [pc, #92]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005ec2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ec6:	f003 0307 	and.w	r3, r3, #7
 8005eca:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d104      	bne.n	8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8005ed2:	f7fe fbe5 	bl	80046a0 <HAL_RCC_GetHCLKFreq>
 8005ed6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8005ed8:	f000 bc6d 	b.w	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8005edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d104      	bne.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ee2:	f7fe fab1 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 8005ee6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8005ee8:	f000 bc65 	b.w	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8005eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d108      	bne.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ef2:	f107 030c 	add.w	r3, r7, #12
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff fbbe 	bl	8005678 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005f00:	f000 bc59 	b.w	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005f04:	4b06      	ldr	r3, [pc, #24]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f10:	d10e      	bne.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8005f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f14:	2b03      	cmp	r3, #3
 8005f16:	d10b      	bne.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8005f18:	4b04      	ldr	r3, [pc, #16]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8005f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f1c:	e02c      	b.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8005f1e:	bf00      	nop
 8005f20:	44020c00 	.word	0x44020c00
 8005f24:	03d09000 	.word	0x03d09000
 8005f28:	003d0900 	.word	0x003d0900
 8005f2c:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005f30:	4b95      	ldr	r3, [pc, #596]	@ (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d10c      	bne.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8005f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d109      	bne.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f42:	4b91      	ldr	r3, [pc, #580]	@ (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	08db      	lsrs	r3, r3, #3
 8005f48:	f003 0303 	and.w	r3, r3, #3
 8005f4c:	4a8f      	ldr	r2, [pc, #572]	@ (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f54:	e010      	b.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8005f56:	4b8c      	ldr	r3, [pc, #560]	@ (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f62:	d105      	bne.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8005f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f66:	2b05      	cmp	r3, #5
 8005f68:	d102      	bne.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8005f6a:	4b89      	ldr	r3, [pc, #548]	@ (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f6e:	e003      	b.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005f74:	f000 bc1f 	b.w	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005f78:	f000 bc1d 	b.w	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8005f7c:	4b82      	ldr	r3, [pc, #520]	@ (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005f7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8005f88:	4b7f      	ldr	r3, [pc, #508]	@ (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005f8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d106      	bne.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8005f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d103      	bne.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8005f9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fa2:	e011      	b.n	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8005fa4:	4b78      	ldr	r3, [pc, #480]	@ (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005fa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005faa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fb2:	d106      	bne.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8005fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb6:	2b08      	cmp	r3, #8
 8005fb8:	d103      	bne.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8005fba:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fc0:	e002      	b.n	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8005fc6:	e3f6      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005fc8:	e3f5      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005fca:	4b6f      	ldr	r3, [pc, #444]	@ (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005fcc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005fd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005fd4:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d103      	bne.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005fdc:	f7fe fb7c 	bl	80046d8 <HAL_RCC_GetPCLK1Freq>
 8005fe0:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005fe2:	e3e8      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8005fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fea:	d107      	bne.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fec:	f107 030c 	add.w	r3, r7, #12
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7ff fb41 	bl	8005678 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005ffa:	e3dc      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005ffc:	4b62      	ldr	r3, [pc, #392]	@ (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b02      	cmp	r3, #2
 8006006:	d10d      	bne.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8006008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800600e:	d109      	bne.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006010:	4b5d      	ldr	r3, [pc, #372]	@ (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	08db      	lsrs	r3, r3, #3
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	4a5c      	ldr	r2, [pc, #368]	@ (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800601c:	fa22 f303 	lsr.w	r3, r2, r3
 8006020:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006022:	e010      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006024:	4b58      	ldr	r3, [pc, #352]	@ (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800602c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006030:	d106      	bne.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8006032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006034:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006038:	d102      	bne.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 800603a:	4b55      	ldr	r3, [pc, #340]	@ (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800603c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800603e:	e002      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8006040:	2300      	movs	r3, #0
 8006042:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006044:	e3b7      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006046:	e3b6      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006048:	4b4f      	ldr	r3, [pc, #316]	@ (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800604a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800604e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006052:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006056:	2b00      	cmp	r3, #0
 8006058:	d103      	bne.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800605a:	f7fe fb3d 	bl	80046d8 <HAL_RCC_GetPCLK1Freq>
 800605e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006060:	e3a9      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8006062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006064:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006068:	d107      	bne.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800606a:	f107 030c 	add.w	r3, r7, #12
 800606e:	4618      	mov	r0, r3
 8006070:	f7ff fb02 	bl	8005678 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006078:	e39d      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800607a:	4b43      	ldr	r3, [pc, #268]	@ (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b02      	cmp	r3, #2
 8006084:	d10d      	bne.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8006086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006088:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800608c:	d109      	bne.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800608e:	4b3e      	ldr	r3, [pc, #248]	@ (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	08db      	lsrs	r3, r3, #3
 8006094:	f003 0303 	and.w	r3, r3, #3
 8006098:	4a3c      	ldr	r2, [pc, #240]	@ (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800609a:	fa22 f303 	lsr.w	r3, r2, r3
 800609e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060a0:	e010      	b.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80060a2:	4b39      	ldr	r3, [pc, #228]	@ (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060ae:	d106      	bne.n	80060be <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80060b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80060b6:	d102      	bne.n	80060be <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 80060b8:	4b35      	ldr	r3, [pc, #212]	@ (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80060ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060bc:	e002      	b.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 80060be:	2300      	movs	r3, #0
 80060c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80060c2:	e378      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80060c4:	e377      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80060c6:	4b30      	ldr	r3, [pc, #192]	@ (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80060c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80060cc:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80060d0:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80060d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d103      	bne.n	80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80060d8:	f7fe fafe 	bl	80046d8 <HAL_RCC_GetPCLK1Freq>
 80060dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80060de:	e36a      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 80060e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060e6:	d107      	bne.n	80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060e8:	f107 030c 	add.w	r3, r7, #12
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7ff fac3 	bl	8005678 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80060f6:	e35e      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80060f8:	4b23      	ldr	r3, [pc, #140]	@ (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b02      	cmp	r3, #2
 8006102:	d10d      	bne.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8006104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006106:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800610a:	d109      	bne.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800610c:	4b1e      	ldr	r3, [pc, #120]	@ (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	08db      	lsrs	r3, r3, #3
 8006112:	f003 0303 	and.w	r3, r3, #3
 8006116:	4a1d      	ldr	r2, [pc, #116]	@ (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006118:	fa22 f303 	lsr.w	r3, r2, r3
 800611c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800611e:	e34a      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006124:	e347      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8006126:	4b18      	ldr	r3, [pc, #96]	@ (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006128:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800612c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006130:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8006132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006134:	2b00      	cmp	r3, #0
 8006136:	d103      	bne.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006138:	f7fe fafa 	bl	8004730 <HAL_RCC_GetPCLK3Freq>
 800613c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800613e:	e33a      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8006140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006142:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006146:	d107      	bne.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006148:	f107 030c 	add.w	r3, r7, #12
 800614c:	4618      	mov	r0, r3
 800614e:	f7ff fa93 	bl	8005678 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006156:	e32e      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8006158:	4b0b      	ldr	r3, [pc, #44]	@ (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	2b02      	cmp	r3, #2
 8006162:	d10d      	bne.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8006164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006166:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800616a:	d109      	bne.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800616c:	4b06      	ldr	r3, [pc, #24]	@ (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	08db      	lsrs	r3, r3, #3
 8006172:	f003 0303 	and.w	r3, r3, #3
 8006176:	4a05      	ldr	r2, [pc, #20]	@ (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006178:	fa22 f303 	lsr.w	r3, r2, r3
 800617c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800617e:	e31a      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8006180:	2300      	movs	r3, #0
 8006182:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006184:	e317      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006186:	bf00      	nop
 8006188:	44020c00 	.word	0x44020c00
 800618c:	03d09000 	.word	0x03d09000
 8006190:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006194:	4b9b      	ldr	r3, [pc, #620]	@ (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006196:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800619a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800619e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80061a6:	d044      	beq.n	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80061a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061aa:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80061ae:	d879      	bhi.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80061b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061b6:	d02d      	beq.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80061b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061be:	d871      	bhi.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80061c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061c6:	d017      	beq.n	80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 80061c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061ce:	d869      	bhi.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80061d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d004      	beq.n	80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80061d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061dc:	d004      	beq.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 80061de:	e061      	b.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80061e0:	f7fe faa6 	bl	8004730 <HAL_RCC_GetPCLK3Freq>
 80061e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 80061e6:	e060      	b.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061e8:	f107 030c 	add.w	r3, r7, #12
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7ff fa43 	bl	8005678 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80061f6:	e058      	b.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80061f8:	4b82      	ldr	r3, [pc, #520]	@ (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80061fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b02      	cmp	r3, #2
 8006204:	d103      	bne.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8006206:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800620a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800620c:	e04d      	b.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 800620e:	2300      	movs	r3, #0
 8006210:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006212:	e04a      	b.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006214:	4b7b      	ldr	r3, [pc, #492]	@ (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006216:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800621a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800621e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006222:	d103      	bne.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8006224:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006228:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800622a:	e03e      	b.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 800622c:	2300      	movs	r3, #0
 800622e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006230:	e03b      	b.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006232:	4b74      	ldr	r3, [pc, #464]	@ (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006234:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006238:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800623c:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800623e:	4b71      	ldr	r3, [pc, #452]	@ (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b02      	cmp	r3, #2
 8006248:	d10c      	bne.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800624a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624c:	2b00      	cmp	r3, #0
 800624e:	d109      	bne.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006250:	4b6c      	ldr	r3, [pc, #432]	@ (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	08db      	lsrs	r3, r3, #3
 8006256:	f003 0303 	and.w	r3, r3, #3
 800625a:	4a6b      	ldr	r2, [pc, #428]	@ (8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 800625c:	fa22 f303 	lsr.w	r3, r2, r3
 8006260:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006262:	e01e      	b.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006264:	4b67      	ldr	r3, [pc, #412]	@ (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800626c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006270:	d106      	bne.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8006272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006278:	d102      	bne.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800627a:	4b64      	ldr	r3, [pc, #400]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 800627c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800627e:	e010      	b.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006280:	4b60      	ldr	r3, [pc, #384]	@ (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006288:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800628c:	d106      	bne.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 800628e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006290:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006294:	d102      	bne.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006296:	4b5e      	ldr	r3, [pc, #376]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8006298:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800629a:	e002      	b.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800629c:	2300      	movs	r3, #0
 800629e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80062a0:	e003      	b.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 80062a2:	e002      	b.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80062a8:	bf00      	nop
          }
        }
        break;
 80062aa:	e284      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80062ac:	4b55      	ldr	r3, [pc, #340]	@ (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80062ae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80062b2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80062b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ba:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80062be:	d044      	beq.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80062c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80062c6:	d879      	bhi.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80062c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062ce:	d02d      	beq.n	800632c <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 80062d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062d6:	d871      	bhi.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80062d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80062de:	d017      	beq.n	8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 80062e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80062e6:	d869      	bhi.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80062e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d004      	beq.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 80062ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062f4:	d004      	beq.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80062f6:	e061      	b.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80062f8:	f7fe f9ee 	bl	80046d8 <HAL_RCC_GetPCLK1Freq>
 80062fc:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 80062fe:	e060      	b.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006300:	f107 030c 	add.w	r3, r7, #12
 8006304:	4618      	mov	r0, r3
 8006306:	f7ff f9b7 	bl	8005678 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800630e:	e058      	b.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006310:	4b3c      	ldr	r3, [pc, #240]	@ (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006312:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b02      	cmp	r3, #2
 800631c:	d103      	bne.n	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 800631e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006322:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8006324:	e04d      	b.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8006326:	2300      	movs	r3, #0
 8006328:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800632a:	e04a      	b.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800632c:	4b35      	ldr	r3, [pc, #212]	@ (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800632e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006332:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006336:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800633a:	d103      	bne.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 800633c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006340:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8006342:	e03e      	b.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8006344:	2300      	movs	r3, #0
 8006346:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006348:	e03b      	b.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800634a:	4b2e      	ldr	r3, [pc, #184]	@ (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800634c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006350:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006354:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006356:	4b2b      	ldr	r3, [pc, #172]	@ (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b02      	cmp	r3, #2
 8006360:	d10c      	bne.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8006362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006364:	2b00      	cmp	r3, #0
 8006366:	d109      	bne.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006368:	4b26      	ldr	r3, [pc, #152]	@ (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	08db      	lsrs	r3, r3, #3
 800636e:	f003 0303 	and.w	r3, r3, #3
 8006372:	4a25      	ldr	r2, [pc, #148]	@ (8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8006374:	fa22 f303 	lsr.w	r3, r2, r3
 8006378:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800637a:	e01e      	b.n	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800637c:	4b21      	ldr	r3, [pc, #132]	@ (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006388:	d106      	bne.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800638a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006390:	d102      	bne.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006392:	4b1e      	ldr	r3, [pc, #120]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8006394:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006396:	e010      	b.n	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006398:	4b1a      	ldr	r3, [pc, #104]	@ (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063a4:	d106      	bne.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 80063a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063ac:	d102      	bne.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80063ae:	4b18      	ldr	r3, [pc, #96]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80063b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063b2:	e002      	b.n	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80063b4:	2300      	movs	r3, #0
 80063b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80063b8:	e003      	b.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80063ba:	e002      	b.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80063c0:	bf00      	nop
          }
        }
        break;
 80063c2:	e1f8      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80063c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80063c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80063ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063ce:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80063d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063dc:	d105      	bne.n	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 80063de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d102      	bne.n	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 80063e4:	4b0a      	ldr	r3, [pc, #40]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80063e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80063e8:	e1e5      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80063ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063f0:	d110      	bne.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063f2:	f107 0318 	add.w	r3, r7, #24
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fe ffd4 	bl	80053a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006400:	e1d9      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006402:	bf00      	nop
 8006404:	44020c00 	.word	0x44020c00
 8006408:	03d09000 	.word	0x03d09000
 800640c:	003d0900 	.word	0x003d0900
 8006410:	017d7840 	.word	0x017d7840
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8006414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006416:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800641a:	d107      	bne.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800641c:	f107 030c 	add.w	r3, r7, #12
 8006420:	4618      	mov	r0, r3
 8006422:	f7ff f929 	bl	8005678 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800642a:	e1c4      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006430:	e1c1      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006432:	4b9d      	ldr	r3, [pc, #628]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006438:	f003 0307 	and.w	r3, r3, #7
 800643c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800643e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006440:	2b04      	cmp	r3, #4
 8006442:	d859      	bhi.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8006444:	a201      	add	r2, pc, #4	@ (adr r2, 800644c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644a:	bf00      	nop
 800644c:	08006461 	.word	0x08006461
 8006450:	08006471 	.word	0x08006471
 8006454:	080064f9 	.word	0x080064f9
 8006458:	08006481 	.word	0x08006481
 800645c:	08006487 	.word	0x08006487
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006460:	f107 0318 	add.w	r3, r7, #24
 8006464:	4618      	mov	r0, r3
 8006466:	f7fe ff9d 	bl	80053a4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800646e:	e046      	b.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006470:	f107 030c 	add.w	r3, r7, #12
 8006474:	4618      	mov	r0, r3
 8006476:	f7ff f8ff 	bl	8005678 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800647e:	e03e      	b.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006480:	4b8a      	ldr	r3, [pc, #552]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006482:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006484:	e03b      	b.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006486:	4b88      	ldr	r3, [pc, #544]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006488:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800648c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006490:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006492:	4b85      	ldr	r3, [pc, #532]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b02      	cmp	r3, #2
 800649c:	d10c      	bne.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800649e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d109      	bne.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064a4:	4b80      	ldr	r3, [pc, #512]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	08db      	lsrs	r3, r3, #3
 80064aa:	f003 0303 	and.w	r3, r3, #3
 80064ae:	4a80      	ldr	r2, [pc, #512]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80064b0:	fa22 f303 	lsr.w	r3, r2, r3
 80064b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064b6:	e01e      	b.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80064b8:	4b7b      	ldr	r3, [pc, #492]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064c4:	d106      	bne.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 80064c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064cc:	d102      	bne.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80064ce:	4b79      	ldr	r3, [pc, #484]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80064d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064d2:	e010      	b.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80064d4:	4b74      	ldr	r3, [pc, #464]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064e0:	d106      	bne.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 80064e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064e8:	d102      	bne.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80064ea:	4b73      	ldr	r3, [pc, #460]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80064ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064ee:	e002      	b.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80064f0:	2300      	movs	r3, #0
 80064f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80064f4:	e003      	b.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 80064f6:	e002      	b.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 80064f8:	2300      	movs	r3, #0
 80064fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80064fc:	bf00      	nop
          }
        }
        break;
 80064fe:	e15a      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006500:	4b69      	ldr	r3, [pc, #420]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006506:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800650a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800650c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650e:	2b20      	cmp	r3, #32
 8006510:	d022      	beq.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8006512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006514:	2b20      	cmp	r3, #32
 8006516:	d858      	bhi.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8006518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651a:	2b18      	cmp	r3, #24
 800651c:	d019      	beq.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 800651e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006520:	2b18      	cmp	r3, #24
 8006522:	d852      	bhi.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8006524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 800652a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652c:	2b08      	cmp	r3, #8
 800652e:	d008      	beq.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8006530:	e04b      	b.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006532:	f107 0318 	add.w	r3, r7, #24
 8006536:	4618      	mov	r0, r3
 8006538:	f7fe ff34 	bl	80053a4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006540:	e046      	b.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006542:	f107 030c 	add.w	r3, r7, #12
 8006546:	4618      	mov	r0, r3
 8006548:	f7ff f896 	bl	8005678 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006550:	e03e      	b.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006552:	4b56      	ldr	r3, [pc, #344]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006554:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006556:	e03b      	b.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006558:	4b53      	ldr	r3, [pc, #332]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800655a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800655e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006562:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006564:	4b50      	ldr	r3, [pc, #320]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b02      	cmp	r3, #2
 800656e:	d10c      	bne.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8006570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006572:	2b00      	cmp	r3, #0
 8006574:	d109      	bne.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006576:	4b4c      	ldr	r3, [pc, #304]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	08db      	lsrs	r3, r3, #3
 800657c:	f003 0303 	and.w	r3, r3, #3
 8006580:	4a4b      	ldr	r2, [pc, #300]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006582:	fa22 f303 	lsr.w	r3, r2, r3
 8006586:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006588:	e01e      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800658a:	4b47      	ldr	r3, [pc, #284]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006592:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006596:	d106      	bne.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8006598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800659e:	d102      	bne.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80065a0:	4b44      	ldr	r3, [pc, #272]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80065a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065a4:	e010      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065a6:	4b40      	ldr	r3, [pc, #256]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065b2:	d106      	bne.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 80065b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065ba:	d102      	bne.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80065bc:	4b3e      	ldr	r3, [pc, #248]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80065be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065c0:	e002      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80065c2:	2300      	movs	r3, #0
 80065c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80065c6:	e003      	b.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80065c8:	e002      	b.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 80065ca:	2300      	movs	r3, #0
 80065cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80065ce:	bf00      	nop
          }
        }
        break;
 80065d0:	e0f1      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80065d2:	4b35      	ldr	r3, [pc, #212]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80065d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065d8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80065dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065e4:	d023      	beq.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 80065e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065ec:	d858      	bhi.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 80065ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f0:	2bc0      	cmp	r3, #192	@ 0xc0
 80065f2:	d019      	beq.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 80065f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80065f8:	d852      	bhi.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 80065fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d003      	beq.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8006600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006602:	2b40      	cmp	r3, #64	@ 0x40
 8006604:	d008      	beq.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8006606:	e04b      	b.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006608:	f107 0318 	add.w	r3, r7, #24
 800660c:	4618      	mov	r0, r3
 800660e:	f7fe fec9 	bl	80053a4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006616:	e046      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006618:	f107 030c 	add.w	r3, r7, #12
 800661c:	4618      	mov	r0, r3
 800661e:	f7ff f82b 	bl	8005678 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006626:	e03e      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006628:	4b20      	ldr	r3, [pc, #128]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800662a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800662c:	e03b      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800662e:	4b1e      	ldr	r3, [pc, #120]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006630:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006634:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006638:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800663a:	4b1b      	ldr	r3, [pc, #108]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	2b02      	cmp	r3, #2
 8006644:	d10c      	bne.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8006646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006648:	2b00      	cmp	r3, #0
 800664a:	d109      	bne.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800664c:	4b16      	ldr	r3, [pc, #88]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	08db      	lsrs	r3, r3, #3
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	4a16      	ldr	r2, [pc, #88]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006658:	fa22 f303 	lsr.w	r3, r2, r3
 800665c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800665e:	e01e      	b.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006660:	4b11      	ldr	r3, [pc, #68]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800666c:	d106      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 800666e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006670:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006674:	d102      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006676:	4b0f      	ldr	r3, [pc, #60]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8006678:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800667a:	e010      	b.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800667c:	4b0a      	ldr	r3, [pc, #40]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006684:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006688:	d106      	bne.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 800668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006690:	d102      	bne.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006692:	4b09      	ldr	r3, [pc, #36]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8006694:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006696:	e002      	b.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006698:	2300      	movs	r3, #0
 800669a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 800669c:	e003      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 800669e:	e002      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 80066a0:	2300      	movs	r3, #0
 80066a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80066a4:	bf00      	nop
          }
        }
        break;
 80066a6:	e086      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80066a8:	44020c00 	.word	0x44020c00
 80066ac:	00bb8000 	.word	0x00bb8000
 80066b0:	03d09000 	.word	0x03d09000
 80066b4:	003d0900 	.word	0x003d0900
 80066b8:	017d7840 	.word	0x017d7840
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80066bc:	4b40      	ldr	r3, [pc, #256]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80066be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80066c2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80066c6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80066c8:	4b3d      	ldr	r3, [pc, #244]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066d4:	d105      	bne.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 80066d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d102      	bne.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 80066dc:	4b39      	ldr	r3, [pc, #228]	@ (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 80066de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066e0:	e031      	b.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80066e2:	4b37      	ldr	r3, [pc, #220]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80066ee:	d10a      	bne.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 80066f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f2:	2b10      	cmp	r3, #16
 80066f4:	d107      	bne.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066f6:	f107 0318 	add.w	r3, r7, #24
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fe fe52 	bl	80053a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006704:	e01f      	b.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8006706:	4b2e      	ldr	r3, [pc, #184]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006708:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800670c:	f003 0302 	and.w	r3, r3, #2
 8006710:	2b02      	cmp	r3, #2
 8006712:	d106      	bne.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8006714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006716:	2b20      	cmp	r3, #32
 8006718:	d103      	bne.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 800671a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800671e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006720:	e011      	b.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8006722:	4b27      	ldr	r3, [pc, #156]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006724:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006728:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800672c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006730:	d106      	bne.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8006732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006734:	2b30      	cmp	r3, #48	@ 0x30
 8006736:	d103      	bne.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8006738:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800673c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800673e:	e002      	b.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8006740:	2300      	movs	r3, #0
 8006742:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8006744:	e037      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006746:	e036      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8006748:	4b1d      	ldr	r3, [pc, #116]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800674a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800674e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006752:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8006754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006756:	2b10      	cmp	r3, #16
 8006758:	d107      	bne.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800675a:	f107 0318 	add.w	r3, r7, #24
 800675e:	4618      	mov	r0, r3
 8006760:	f7fe fe20 	bl	80053a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8006768:	e025      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 800676a:	4b15      	ldr	r3, [pc, #84]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006772:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006776:	d10a      	bne.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8006778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677a:	2b20      	cmp	r3, #32
 800677c:	d107      	bne.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800677e:	f107 030c 	add.w	r3, r7, #12
 8006782:	4618      	mov	r0, r3
 8006784:	f7fe ff78 	bl	8005678 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800678c:	e00f      	b.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800678e:	4b0c      	ldr	r3, [pc, #48]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006796:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800679a:	d105      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 800679c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800679e:	2b30      	cmp	r3, #48	@ 0x30
 80067a0:	d102      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 80067a2:	4b08      	ldr	r3, [pc, #32]	@ (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 80067a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067a6:	e002      	b.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 80067ac:	e003      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80067ae:	e002      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80067b4:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 80067b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3730      	adds	r7, #48	@ 0x30
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	44020c00 	.word	0x44020c00
 80067c4:	02dc6c00 	.word	0x02dc6c00

080067c8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80067d0:	4b48      	ldr	r3, [pc, #288]	@ (80068f4 <RCCEx_PLL2_Config+0x12c>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a47      	ldr	r2, [pc, #284]	@ (80068f4 <RCCEx_PLL2_Config+0x12c>)
 80067d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80067da:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80067dc:	f7fb fc10 	bl	8002000 <HAL_GetTick>
 80067e0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067e2:	e008      	b.n	80067f6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80067e4:	f7fb fc0c 	bl	8002000 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d901      	bls.n	80067f6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e07a      	b.n	80068ec <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067f6:	4b3f      	ldr	r3, [pc, #252]	@ (80068f4 <RCCEx_PLL2_Config+0x12c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1f0      	bne.n	80067e4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8006802:	4b3c      	ldr	r3, [pc, #240]	@ (80068f4 <RCCEx_PLL2_Config+0x12c>)
 8006804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006806:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800680a:	f023 0303 	bic.w	r3, r3, #3
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	6811      	ldr	r1, [r2, #0]
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	6852      	ldr	r2, [r2, #4]
 8006816:	0212      	lsls	r2, r2, #8
 8006818:	430a      	orrs	r2, r1
 800681a:	4936      	ldr	r1, [pc, #216]	@ (80068f4 <RCCEx_PLL2_Config+0x12c>)
 800681c:	4313      	orrs	r3, r2
 800681e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	3b01      	subs	r3, #1
 8006826:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	3b01      	subs	r3, #1
 8006830:	025b      	lsls	r3, r3, #9
 8006832:	b29b      	uxth	r3, r3
 8006834:	431a      	orrs	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	3b01      	subs	r3, #1
 800683c:	041b      	lsls	r3, r3, #16
 800683e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006842:	431a      	orrs	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	3b01      	subs	r3, #1
 800684a:	061b      	lsls	r3, r3, #24
 800684c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006850:	4928      	ldr	r1, [pc, #160]	@ (80068f4 <RCCEx_PLL2_Config+0x12c>)
 8006852:	4313      	orrs	r3, r2
 8006854:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006856:	4b27      	ldr	r3, [pc, #156]	@ (80068f4 <RCCEx_PLL2_Config+0x12c>)
 8006858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685a:	f023 020c 	bic.w	r2, r3, #12
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	4924      	ldr	r1, [pc, #144]	@ (80068f4 <RCCEx_PLL2_Config+0x12c>)
 8006864:	4313      	orrs	r3, r2
 8006866:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8006868:	4b22      	ldr	r3, [pc, #136]	@ (80068f4 <RCCEx_PLL2_Config+0x12c>)
 800686a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686c:	f023 0220 	bic.w	r2, r3, #32
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	491f      	ldr	r1, [pc, #124]	@ (80068f4 <RCCEx_PLL2_Config+0x12c>)
 8006876:	4313      	orrs	r3, r2
 8006878:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800687a:	4b1e      	ldr	r3, [pc, #120]	@ (80068f4 <RCCEx_PLL2_Config+0x12c>)
 800687c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006882:	491c      	ldr	r1, [pc, #112]	@ (80068f4 <RCCEx_PLL2_Config+0x12c>)
 8006884:	4313      	orrs	r3, r2
 8006886:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8006888:	4b1a      	ldr	r3, [pc, #104]	@ (80068f4 <RCCEx_PLL2_Config+0x12c>)
 800688a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800688c:	4a19      	ldr	r2, [pc, #100]	@ (80068f4 <RCCEx_PLL2_Config+0x12c>)
 800688e:	f023 0310 	bic.w	r3, r3, #16
 8006892:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8006894:	4b17      	ldr	r3, [pc, #92]	@ (80068f4 <RCCEx_PLL2_Config+0x12c>)
 8006896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006898:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800689c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	6a12      	ldr	r2, [r2, #32]
 80068a4:	00d2      	lsls	r2, r2, #3
 80068a6:	4913      	ldr	r1, [pc, #76]	@ (80068f4 <RCCEx_PLL2_Config+0x12c>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80068ac:	4b11      	ldr	r3, [pc, #68]	@ (80068f4 <RCCEx_PLL2_Config+0x12c>)
 80068ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b0:	4a10      	ldr	r2, [pc, #64]	@ (80068f4 <RCCEx_PLL2_Config+0x12c>)
 80068b2:	f043 0310 	orr.w	r3, r3, #16
 80068b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80068b8:	4b0e      	ldr	r3, [pc, #56]	@ (80068f4 <RCCEx_PLL2_Config+0x12c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a0d      	ldr	r2, [pc, #52]	@ (80068f4 <RCCEx_PLL2_Config+0x12c>)
 80068be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80068c2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80068c4:	f7fb fb9c 	bl	8002000 <HAL_GetTick>
 80068c8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068ca:	e008      	b.n	80068de <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80068cc:	f7fb fb98 	bl	8002000 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d901      	bls.n	80068de <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e006      	b.n	80068ec <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068de:	4b05      	ldr	r3, [pc, #20]	@ (80068f4 <RCCEx_PLL2_Config+0x12c>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d0f0      	beq.n	80068cc <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80068ea:	2300      	movs	r3, #0

}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	44020c00 	.word	0x44020c00

080068f8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e0e7      	b.n	8006ada <HAL_SPI_Init+0x1e2>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d105      	bne.n	8006924 <HAL_SPI_Init+0x2c>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	2b0f      	cmp	r3, #15
 800691e:	d901      	bls.n	8006924 <HAL_SPI_Init+0x2c>
  {
    return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e0da      	b.n	8006ada <HAL_SPI_Init+0x1e2>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f8e3 	bl	8006af0 <SPI_GetPacketSize>
 800692a:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d102      	bne.n	800693a <HAL_SPI_Init+0x42>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2b08      	cmp	r3, #8
 8006938:	d811      	bhi.n	800695e <HAL_SPI_Init+0x66>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800693e:	4a69      	ldr	r2, [pc, #420]	@ (8006ae4 <HAL_SPI_Init+0x1ec>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d009      	beq.n	8006958 <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a67      	ldr	r2, [pc, #412]	@ (8006ae8 <HAL_SPI_Init+0x1f0>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d004      	beq.n	8006958 <HAL_SPI_Init+0x60>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a66      	ldr	r2, [pc, #408]	@ (8006aec <HAL_SPI_Init+0x1f4>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d104      	bne.n	8006962 <HAL_SPI_Init+0x6a>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2b10      	cmp	r3, #16
 800695c:	d901      	bls.n	8006962 <HAL_SPI_Init+0x6a>
  {
    return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e0bb      	b.n	8006ada <HAL_SPI_Init+0x1e2>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d106      	bne.n	800697c <HAL_SPI_Init+0x84>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7fa ffa6 	bl	80018c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2202      	movs	r2, #2
 8006980:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0201 	bic.w	r2, r2, #1
 8006992:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800699e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80069a8:	d119      	bne.n	80069de <HAL_SPI_Init+0xe6>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069b2:	d103      	bne.n	80069bc <HAL_SPI_Init+0xc4>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d008      	beq.n	80069ce <HAL_SPI_Init+0xd6>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10c      	bne.n	80069de <HAL_SPI_Init+0xe6>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80069c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069cc:	d107      	bne.n	80069de <HAL_SPI_Init+0xe6>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80069dc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00f      	beq.n	8006a0a <HAL_SPI_Init+0x112>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	2b06      	cmp	r3, #6
 80069f0:	d90b      	bls.n	8006a0a <HAL_SPI_Init+0x112>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	601a      	str	r2, [r3, #0]
 8006a08:	e007      	b.n	8006a1a <HAL_SPI_Init+0x122>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a18:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	69da      	ldr	r2, [r3, #28]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a22:	431a      	orrs	r2, r3
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	431a      	orrs	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a2c:	ea42 0103 	orr.w	r1, r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68da      	ldr	r2, [r3, #12]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a44:	431a      	orrs	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	431a      	orrs	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	431a      	orrs	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	431a      	orrs	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a80:	431a      	orrs	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a86:	ea42 0103 	orr.w	r1, r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f022 0201 	bic.w	r2, r2, #1
 8006aa4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00a      	beq.n	8006ac8 <HAL_SPI_Init+0x1d0>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	40013000 	.word	0x40013000
 8006ae8:	40003800 	.word	0x40003800
 8006aec:	40003c00 	.word	0x40003c00

08006af0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006afc:	095b      	lsrs	r3, r3, #5
 8006afe:	3301      	adds	r3, #1
 8006b00:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	3301      	adds	r3, #1
 8006b08:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	3307      	adds	r3, #7
 8006b0e:	08db      	lsrs	r3, r3, #3
 8006b10:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	fb02 f303 	mul.w	r3, r2, r3
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b082      	sub	sp, #8
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d101      	bne.n	8006b38 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e042      	b.n	8006bbe <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d106      	bne.n	8006b50 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7fa ff3a 	bl	80019c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2224      	movs	r2, #36	@ 0x24
 8006b54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f022 0201 	bic.w	r2, r2, #1
 8006b66:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fb1b 	bl	80071ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f99a 	bl	8006eb0 <UART_SetConfig>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d101      	bne.n	8006b86 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e01b      	b.n	8006bbe <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b94:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ba4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f042 0201 	orr.w	r2, r2, #1
 8006bb4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fb9a 	bl	80072f0 <UART_CheckIdleState>
 8006bbc:	4603      	mov	r3, r0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b08a      	sub	sp, #40	@ 0x28
 8006bca:	af02      	add	r7, sp, #8
 8006bcc:	60f8      	str	r0, [r7, #12]
 8006bce:	60b9      	str	r1, [r7, #8]
 8006bd0:	603b      	str	r3, [r7, #0]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bdc:	2b20      	cmp	r3, #32
 8006bde:	f040 808b 	bne.w	8006cf8 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d002      	beq.n	8006bee <HAL_UART_Transmit+0x28>
 8006be8:	88fb      	ldrh	r3, [r7, #6]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e083      	b.n	8006cfa <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bfc:	2b80      	cmp	r3, #128	@ 0x80
 8006bfe:	d107      	bne.n	8006c10 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	689a      	ldr	r2, [r3, #8]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c0e:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2221      	movs	r2, #33	@ 0x21
 8006c1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c20:	f7fb f9ee 	bl	8002000 <HAL_GetTick>
 8006c24:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	88fa      	ldrh	r2, [r7, #6]
 8006c2a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	88fa      	ldrh	r2, [r7, #6]
 8006c32:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c3e:	d108      	bne.n	8006c52 <HAL_UART_Transmit+0x8c>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d104      	bne.n	8006c52 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	61bb      	str	r3, [r7, #24]
 8006c50:	e003      	b.n	8006c5a <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c56:	2300      	movs	r3, #0
 8006c58:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c5a:	e030      	b.n	8006cbe <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	2200      	movs	r2, #0
 8006c64:	2180      	movs	r1, #128	@ 0x80
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f000 fbec 	bl	8007444 <UART_WaitOnFlagUntilTimeout>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d005      	beq.n	8006c7e <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2220      	movs	r2, #32
 8006c76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e03d      	b.n	8006cfa <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10b      	bne.n	8006c9c <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	881b      	ldrh	r3, [r3, #0]
 8006c88:	461a      	mov	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c92:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	3302      	adds	r3, #2
 8006c98:	61bb      	str	r3, [r7, #24]
 8006c9a:	e007      	b.n	8006cac <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	781a      	ldrb	r2, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1c8      	bne.n	8006c5c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	2140      	movs	r1, #64	@ 0x40
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f000 fbb5 	bl	8007444 <UART_WaitOnFlagUntilTimeout>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d005      	beq.n	8006cec <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e006      	b.n	8006cfa <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	e000      	b.n	8006cfa <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8006cf8:	2302      	movs	r3, #2
  }
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3720      	adds	r7, #32
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b08a      	sub	sp, #40	@ 0x28
 8006d06:	af02      	add	r7, sp, #8
 8006d08:	60f8      	str	r0, [r7, #12]
 8006d0a:	60b9      	str	r1, [r7, #8]
 8006d0c:	603b      	str	r3, [r7, #0]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d18:	2b20      	cmp	r3, #32
 8006d1a:	f040 80c4 	bne.w	8006ea6 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d002      	beq.n	8006d2a <HAL_UART_Receive+0x28>
 8006d24:	88fb      	ldrh	r3, [r7, #6]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e0bc      	b.n	8006ea8 <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d38:	2b40      	cmp	r3, #64	@ 0x40
 8006d3a:	d107      	bne.n	8006d4c <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689a      	ldr	r2, [r3, #8]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d4a:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2222      	movs	r2, #34	@ 0x22
 8006d58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d62:	f7fb f94d 	bl	8002000 <HAL_GetTick>
 8006d66:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	88fa      	ldrh	r2, [r7, #6]
 8006d6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	88fa      	ldrh	r2, [r7, #6]
 8006d74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d80:	d10e      	bne.n	8006da0 <HAL_UART_Receive+0x9e>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d105      	bne.n	8006d96 <HAL_UART_Receive+0x94>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006d90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006d94:	e02d      	b.n	8006df2 <HAL_UART_Receive+0xf0>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	22ff      	movs	r2, #255	@ 0xff
 8006d9a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006d9e:	e028      	b.n	8006df2 <HAL_UART_Receive+0xf0>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10d      	bne.n	8006dc4 <HAL_UART_Receive+0xc2>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d104      	bne.n	8006dba <HAL_UART_Receive+0xb8>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	22ff      	movs	r2, #255	@ 0xff
 8006db4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006db8:	e01b      	b.n	8006df2 <HAL_UART_Receive+0xf0>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	227f      	movs	r2, #127	@ 0x7f
 8006dbe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006dc2:	e016      	b.n	8006df2 <HAL_UART_Receive+0xf0>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dcc:	d10d      	bne.n	8006dea <HAL_UART_Receive+0xe8>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d104      	bne.n	8006de0 <HAL_UART_Receive+0xde>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	227f      	movs	r2, #127	@ 0x7f
 8006dda:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006dde:	e008      	b.n	8006df2 <HAL_UART_Receive+0xf0>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	223f      	movs	r2, #63	@ 0x3f
 8006de4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006de8:	e003      	b.n	8006df2 <HAL_UART_Receive+0xf0>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006df8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e02:	d108      	bne.n	8006e16 <HAL_UART_Receive+0x114>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d104      	bne.n	8006e16 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	61bb      	str	r3, [r7, #24]
 8006e14:	e003      	b.n	8006e1e <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006e1e:	e036      	b.n	8006e8e <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	9300      	str	r3, [sp, #0]
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	2200      	movs	r2, #0
 8006e28:	2120      	movs	r1, #32
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f000 fb0a 	bl	8007444 <UART_WaitOnFlagUntilTimeout>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d005      	beq.n	8006e42 <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2220      	movs	r2, #32
 8006e3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e032      	b.n	8006ea8 <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10c      	bne.n	8006e62 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	8a7b      	ldrh	r3, [r7, #18]
 8006e52:	4013      	ands	r3, r2
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	3302      	adds	r3, #2
 8006e5e:	61bb      	str	r3, [r7, #24]
 8006e60:	e00c      	b.n	8006e7c <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	8a7b      	ldrh	r3, [r7, #18]
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	4013      	ands	r3, r2
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	3b01      	subs	r3, #1
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1c2      	bne.n	8006e20 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	e000      	b.n	8006ea8 <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 8006ea6:	2302      	movs	r3, #2
  }
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3720      	adds	r7, #32
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006eb4:	b094      	sub	sp, #80	@ 0x50
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec2:	689a      	ldr	r2, [r3, #8]
 8006ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	431a      	orrs	r2, r3
 8006eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ed2:	69db      	ldr	r3, [r3, #28]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	498a      	ldr	r1, [pc, #552]	@ (8007108 <UART_SetConfig+0x258>)
 8006ee0:	4019      	ands	r1, r3
 8006ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ee8:	430b      	orrs	r3, r1
 8006eea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ef8:	68d9      	ldr	r1, [r3, #12]
 8006efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	ea40 0301 	orr.w	r3, r0, r1
 8006f02:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	4b7f      	ldr	r3, [pc, #508]	@ (800710c <UART_SetConfig+0x25c>)
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d004      	beq.n	8006f1e <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f16:	6a1a      	ldr	r2, [r3, #32]
 8006f18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8006f28:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8006f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f32:	430b      	orrs	r3, r1
 8006f34:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3c:	f023 000f 	bic.w	r0, r3, #15
 8006f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f42:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	ea40 0301 	orr.w	r3, r0, r1
 8006f4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	4b6f      	ldr	r3, [pc, #444]	@ (8007110 <UART_SetConfig+0x260>)
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d102      	bne.n	8006f5e <UART_SetConfig+0xae>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f5c:	e01a      	b.n	8006f94 <UART_SetConfig+0xe4>
 8006f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	4b6c      	ldr	r3, [pc, #432]	@ (8007114 <UART_SetConfig+0x264>)
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d102      	bne.n	8006f6e <UART_SetConfig+0xbe>
 8006f68:	2302      	movs	r3, #2
 8006f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f6c:	e012      	b.n	8006f94 <UART_SetConfig+0xe4>
 8006f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	4b69      	ldr	r3, [pc, #420]	@ (8007118 <UART_SetConfig+0x268>)
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d102      	bne.n	8006f7e <UART_SetConfig+0xce>
 8006f78:	2304      	movs	r3, #4
 8006f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f7c:	e00a      	b.n	8006f94 <UART_SetConfig+0xe4>
 8006f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	4b62      	ldr	r3, [pc, #392]	@ (800710c <UART_SetConfig+0x25c>)
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d103      	bne.n	8006f90 <UART_SetConfig+0xe0>
 8006f88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f8e:	e001      	b.n	8006f94 <UART_SetConfig+0xe4>
 8006f90:	2300      	movs	r3, #0
 8006f92:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	4b5c      	ldr	r3, [pc, #368]	@ (800710c <UART_SetConfig+0x25c>)
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d171      	bne.n	8007082 <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006f9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	623b      	str	r3, [r7, #32]
 8006fa4:	627a      	str	r2, [r7, #36]	@ 0x24
 8006fa6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006faa:	f7fe fccf 	bl	800594c <HAL_RCCEx_GetPeriphCLKFreq>
 8006fae:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006fb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f000 80e2 	beq.w	800717c <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fbc:	4a57      	ldr	r2, [pc, #348]	@ (800711c <UART_SetConfig+0x26c>)
 8006fbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fca:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	005b      	lsls	r3, r3, #1
 8006fd4:	4413      	add	r3, r2
 8006fd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d305      	bcc.n	8006fe8 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fe2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d903      	bls.n	8006ff0 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006fee:	e0c5      	b.n	800717c <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ff0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	61bb      	str	r3, [r7, #24]
 8006ff6:	61fa      	str	r2, [r7, #28]
 8006ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ffc:	4a47      	ldr	r2, [pc, #284]	@ (800711c <UART_SetConfig+0x26c>)
 8006ffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007002:	b29b      	uxth	r3, r3
 8007004:	2200      	movs	r2, #0
 8007006:	613b      	str	r3, [r7, #16]
 8007008:	617a      	str	r2, [r7, #20]
 800700a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800700e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007012:	f7f9 fe4d 	bl	8000cb0 <__aeabi_uldivmod>
 8007016:	4602      	mov	r2, r0
 8007018:	460b      	mov	r3, r1
 800701a:	4610      	mov	r0, r2
 800701c:	4619      	mov	r1, r3
 800701e:	f04f 0200 	mov.w	r2, #0
 8007022:	f04f 0300 	mov.w	r3, #0
 8007026:	020b      	lsls	r3, r1, #8
 8007028:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800702c:	0202      	lsls	r2, r0, #8
 800702e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007030:	6849      	ldr	r1, [r1, #4]
 8007032:	0849      	lsrs	r1, r1, #1
 8007034:	2000      	movs	r0, #0
 8007036:	460c      	mov	r4, r1
 8007038:	4605      	mov	r5, r0
 800703a:	eb12 0804 	adds.w	r8, r2, r4
 800703e:	eb43 0905 	adc.w	r9, r3, r5
 8007042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	60bb      	str	r3, [r7, #8]
 800704a:	60fa      	str	r2, [r7, #12]
 800704c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007050:	4640      	mov	r0, r8
 8007052:	4649      	mov	r1, r9
 8007054:	f7f9 fe2c 	bl	8000cb0 <__aeabi_uldivmod>
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	4613      	mov	r3, r2
 800705e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007062:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007066:	d308      	bcc.n	800707a <UART_SetConfig+0x1ca>
 8007068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800706a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800706e:	d204      	bcs.n	800707a <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8007070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007076:	60da      	str	r2, [r3, #12]
 8007078:	e080      	b.n	800717c <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007080:	e07c      	b.n	800717c <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800708a:	d149      	bne.n	8007120 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800708c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800708e:	2200      	movs	r2, #0
 8007090:	603b      	str	r3, [r7, #0]
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007098:	f7fe fc58 	bl	800594c <HAL_RCCEx_GetPeriphCLKFreq>
 800709c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800709e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d06b      	beq.n	800717c <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a8:	4a1c      	ldr	r2, [pc, #112]	@ (800711c <UART_SetConfig+0x26c>)
 80070aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070ae:	461a      	mov	r2, r3
 80070b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80070b6:	005a      	lsls	r2, r3, #1
 80070b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	085b      	lsrs	r3, r3, #1
 80070be:	441a      	add	r2, r3
 80070c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070cc:	2b0f      	cmp	r3, #15
 80070ce:	d916      	bls.n	80070fe <UART_SetConfig+0x24e>
 80070d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070d6:	d212      	bcs.n	80070fe <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070da:	b29b      	uxth	r3, r3
 80070dc:	f023 030f 	bic.w	r3, r3, #15
 80070e0:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070e4:	085b      	lsrs	r3, r3, #1
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	f003 0307 	and.w	r3, r3, #7
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80070f0:	4313      	orrs	r3, r2
 80070f2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80070f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80070fa:	60da      	str	r2, [r3, #12]
 80070fc:	e03e      	b.n	800717c <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007104:	e03a      	b.n	800717c <UART_SetConfig+0x2cc>
 8007106:	bf00      	nop
 8007108:	cfff69f3 	.word	0xcfff69f3
 800710c:	44002400 	.word	0x44002400
 8007110:	40013800 	.word	0x40013800
 8007114:	40004400 	.word	0x40004400
 8007118:	40004800 	.word	0x40004800
 800711c:	0800bf28 	.word	0x0800bf28
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007120:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007122:	2200      	movs	r2, #0
 8007124:	469a      	mov	sl, r3
 8007126:	4693      	mov	fp, r2
 8007128:	4650      	mov	r0, sl
 800712a:	4659      	mov	r1, fp
 800712c:	f7fe fc0e 	bl	800594c <HAL_RCCEx_GetPeriphCLKFreq>
 8007130:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8007132:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007134:	2b00      	cmp	r3, #0
 8007136:	d021      	beq.n	800717c <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800713a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800713c:	4a1a      	ldr	r2, [pc, #104]	@ (80071a8 <UART_SetConfig+0x2f8>)
 800713e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007142:	461a      	mov	r2, r3
 8007144:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007146:	fbb3 f2f2 	udiv	r2, r3, r2
 800714a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	085b      	lsrs	r3, r3, #1
 8007150:	441a      	add	r2, r3
 8007152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	fbb2 f3f3 	udiv	r3, r2, r3
 800715a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800715c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800715e:	2b0f      	cmp	r3, #15
 8007160:	d909      	bls.n	8007176 <UART_SetConfig+0x2c6>
 8007162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007168:	d205      	bcs.n	8007176 <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800716a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800716c:	b29a      	uxth	r2, r3
 800716e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	60da      	str	r2, [r3, #12]
 8007174:	e002      	b.n	800717c <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800717c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800717e:	2201      	movs	r2, #1
 8007180:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007186:	2201      	movs	r2, #1
 8007188:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800718c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800718e:	2200      	movs	r2, #0
 8007190:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007194:	2200      	movs	r2, #0
 8007196:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007198:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800719c:	4618      	mov	r0, r3
 800719e:	3750      	adds	r7, #80	@ 0x50
 80071a0:	46bd      	mov	sp, r7
 80071a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071a6:	bf00      	nop
 80071a8:	0800bf28 	.word	0x0800bf28

080071ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b8:	f003 0308 	and.w	r3, r3, #8
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00a      	beq.n	80071d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00a      	beq.n	80071f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071fc:	f003 0302 	and.w	r3, r3, #2
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00a      	beq.n	800721a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800721e:	f003 0304 	and.w	r3, r3, #4
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00a      	beq.n	800723c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007240:	f003 0310 	and.w	r3, r3, #16
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00a      	beq.n	800725e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007262:	f003 0320 	and.w	r3, r3, #32
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00a      	beq.n	8007280 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	430a      	orrs	r2, r1
 800727e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007288:	2b00      	cmp	r3, #0
 800728a:	d01a      	beq.n	80072c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	430a      	orrs	r2, r1
 80072a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072aa:	d10a      	bne.n	80072c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00a      	beq.n	80072e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	430a      	orrs	r2, r1
 80072e2:	605a      	str	r2, [r3, #4]
  }
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b098      	sub	sp, #96	@ 0x60
 80072f4:	af02      	add	r7, sp, #8
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007300:	f7fa fe7e 	bl	8002000 <HAL_GetTick>
 8007304:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0308 	and.w	r3, r3, #8
 8007310:	2b08      	cmp	r3, #8
 8007312:	d12f      	bne.n	8007374 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007314:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800731c:	2200      	movs	r2, #0
 800731e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f88e 	bl	8007444 <UART_WaitOnFlagUntilTimeout>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d022      	beq.n	8007374 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007336:	e853 3f00 	ldrex	r3, [r3]
 800733a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800733c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800733e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007342:	653b      	str	r3, [r7, #80]	@ 0x50
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	461a      	mov	r2, r3
 800734a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800734c:	647b      	str	r3, [r7, #68]	@ 0x44
 800734e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007350:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007352:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007354:	e841 2300 	strex	r3, r2, [r1]
 8007358:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800735a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1e6      	bne.n	800732e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2220      	movs	r2, #32
 8007364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e063      	b.n	800743c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 0304 	and.w	r3, r3, #4
 800737e:	2b04      	cmp	r3, #4
 8007380:	d149      	bne.n	8007416 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007382:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800738a:	2200      	movs	r2, #0
 800738c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f857 	bl	8007444 <UART_WaitOnFlagUntilTimeout>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d03c      	beq.n	8007416 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a4:	e853 3f00 	ldrex	r3, [r3]
 80073a8:	623b      	str	r3, [r7, #32]
   return(result);
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	461a      	mov	r2, r3
 80073b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80073bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073c2:	e841 2300 	strex	r3, r2, [r1]
 80073c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1e6      	bne.n	800739c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	3308      	adds	r3, #8
 80073d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	e853 3f00 	ldrex	r3, [r3]
 80073dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f023 0301 	bic.w	r3, r3, #1
 80073e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3308      	adds	r3, #8
 80073ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073ee:	61fa      	str	r2, [r7, #28]
 80073f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f2:	69b9      	ldr	r1, [r7, #24]
 80073f4:	69fa      	ldr	r2, [r7, #28]
 80073f6:	e841 2300 	strex	r3, r2, [r1]
 80073fa:	617b      	str	r3, [r7, #20]
   return(result);
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1e5      	bne.n	80073ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2220      	movs	r2, #32
 8007406:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e012      	b.n	800743c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2220      	movs	r2, #32
 800741a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2220      	movs	r2, #32
 8007422:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3758      	adds	r7, #88	@ 0x58
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	603b      	str	r3, [r7, #0]
 8007450:	4613      	mov	r3, r2
 8007452:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007454:	e04f      	b.n	80074f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745c:	d04b      	beq.n	80074f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800745e:	f7fa fdcf 	bl	8002000 <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	69ba      	ldr	r2, [r7, #24]
 800746a:	429a      	cmp	r2, r3
 800746c:	d302      	bcc.n	8007474 <UART_WaitOnFlagUntilTimeout+0x30>
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e04e      	b.n	8007516 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0304 	and.w	r3, r3, #4
 8007482:	2b00      	cmp	r3, #0
 8007484:	d037      	beq.n	80074f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2b80      	cmp	r3, #128	@ 0x80
 800748a:	d034      	beq.n	80074f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	2b40      	cmp	r3, #64	@ 0x40
 8007490:	d031      	beq.n	80074f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	69db      	ldr	r3, [r3, #28]
 8007498:	f003 0308 	and.w	r3, r3, #8
 800749c:	2b08      	cmp	r3, #8
 800749e:	d110      	bne.n	80074c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2208      	movs	r2, #8
 80074a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f000 f838 	bl	800751e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2208      	movs	r2, #8
 80074b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e029      	b.n	8007516 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	69db      	ldr	r3, [r3, #28]
 80074c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074d0:	d111      	bne.n	80074f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80074da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 f81e 	bl	800751e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2220      	movs	r2, #32
 80074e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e00f      	b.n	8007516 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	69da      	ldr	r2, [r3, #28]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	4013      	ands	r3, r2
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	429a      	cmp	r2, r3
 8007504:	bf0c      	ite	eq
 8007506:	2301      	moveq	r3, #1
 8007508:	2300      	movne	r3, #0
 800750a:	b2db      	uxtb	r3, r3
 800750c:	461a      	mov	r2, r3
 800750e:	79fb      	ldrb	r3, [r7, #7]
 8007510:	429a      	cmp	r2, r3
 8007512:	d0a0      	beq.n	8007456 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800751e:	b480      	push	{r7}
 8007520:	b095      	sub	sp, #84	@ 0x54
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800752e:	e853 3f00 	ldrex	r3, [r3]
 8007532:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007536:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800753a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	461a      	mov	r2, r3
 8007542:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007544:	643b      	str	r3, [r7, #64]	@ 0x40
 8007546:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007548:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800754a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800754c:	e841 2300 	strex	r3, r2, [r1]
 8007550:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1e6      	bne.n	8007526 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3308      	adds	r3, #8
 800755e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007560:	6a3b      	ldr	r3, [r7, #32]
 8007562:	e853 3f00 	ldrex	r3, [r3]
 8007566:	61fb      	str	r3, [r7, #28]
   return(result);
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800756e:	f023 0301 	bic.w	r3, r3, #1
 8007572:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3308      	adds	r3, #8
 800757a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800757c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800757e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007580:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007582:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007584:	e841 2300 	strex	r3, r2, [r1]
 8007588:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800758a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1e3      	bne.n	8007558 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007594:	2b01      	cmp	r3, #1
 8007596:	d118      	bne.n	80075ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	e853 3f00 	ldrex	r3, [r3]
 80075a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	f023 0310 	bic.w	r3, r3, #16
 80075ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	461a      	mov	r2, r3
 80075b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075b6:	61bb      	str	r3, [r7, #24]
 80075b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ba:	6979      	ldr	r1, [r7, #20]
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	e841 2300 	strex	r3, r2, [r1]
 80075c2:	613b      	str	r3, [r7, #16]
   return(result);
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1e6      	bne.n	8007598 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2220      	movs	r2, #32
 80075ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80075de:	bf00      	nop
 80075e0:	3754      	adds	r7, #84	@ 0x54
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b085      	sub	sp, #20
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d101      	bne.n	8007600 <HAL_UARTEx_DisableFifoMode+0x16>
 80075fc:	2302      	movs	r3, #2
 80075fe:	e027      	b.n	8007650 <HAL_UARTEx_DisableFifoMode+0x66>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2224      	movs	r2, #36	@ 0x24
 800760c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f022 0201 	bic.w	r2, r2, #1
 8007626:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800762e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2220      	movs	r2, #32
 8007642:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800766c:	2b01      	cmp	r3, #1
 800766e:	d101      	bne.n	8007674 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007670:	2302      	movs	r3, #2
 8007672:	e02d      	b.n	80076d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2224      	movs	r2, #36	@ 0x24
 8007680:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f022 0201 	bic.w	r2, r2, #1
 800769a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f84f 	bl	8007754 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2220      	movs	r2, #32
 80076c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d101      	bne.n	80076f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80076ec:	2302      	movs	r3, #2
 80076ee:	e02d      	b.n	800774c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2224      	movs	r2, #36	@ 0x24
 80076fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f022 0201 	bic.w	r2, r2, #1
 8007716:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	430a      	orrs	r2, r1
 800772a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f811 	bl	8007754 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2220      	movs	r2, #32
 800773e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007760:	2b00      	cmp	r3, #0
 8007762:	d108      	bne.n	8007776 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007774:	e031      	b.n	80077da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007776:	2308      	movs	r3, #8
 8007778:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800777a:	2308      	movs	r3, #8
 800777c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	0e5b      	lsrs	r3, r3, #25
 8007786:	b2db      	uxtb	r3, r3
 8007788:	f003 0307 	and.w	r3, r3, #7
 800778c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	0f5b      	lsrs	r3, r3, #29
 8007796:	b2db      	uxtb	r3, r3
 8007798:	f003 0307 	and.w	r3, r3, #7
 800779c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800779e:	7bbb      	ldrb	r3, [r7, #14]
 80077a0:	7b3a      	ldrb	r2, [r7, #12]
 80077a2:	4911      	ldr	r1, [pc, #68]	@ (80077e8 <UARTEx_SetNbDataToProcess+0x94>)
 80077a4:	5c8a      	ldrb	r2, [r1, r2]
 80077a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80077aa:	7b3a      	ldrb	r2, [r7, #12]
 80077ac:	490f      	ldr	r1, [pc, #60]	@ (80077ec <UARTEx_SetNbDataToProcess+0x98>)
 80077ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
 80077be:	7b7a      	ldrb	r2, [r7, #13]
 80077c0:	4909      	ldr	r1, [pc, #36]	@ (80077e8 <UARTEx_SetNbDataToProcess+0x94>)
 80077c2:	5c8a      	ldrb	r2, [r1, r2]
 80077c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80077c8:	7b7a      	ldrb	r2, [r7, #13]
 80077ca:	4908      	ldr	r1, [pc, #32]	@ (80077ec <UARTEx_SetNbDataToProcess+0x98>)
 80077cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80077da:	bf00      	nop
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	0800bf40 	.word	0x0800bf40
 80077ec:	0800bf48 	.word	0x0800bf48

080077f0 <__cvt>:
 80077f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077f4:	ec57 6b10 	vmov	r6, r7, d0
 80077f8:	2f00      	cmp	r7, #0
 80077fa:	460c      	mov	r4, r1
 80077fc:	4619      	mov	r1, r3
 80077fe:	463b      	mov	r3, r7
 8007800:	bfb4      	ite	lt
 8007802:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007806:	2300      	movge	r3, #0
 8007808:	4691      	mov	r9, r2
 800780a:	bfbf      	itttt	lt
 800780c:	4632      	movlt	r2, r6
 800780e:	461f      	movlt	r7, r3
 8007810:	232d      	movlt	r3, #45	@ 0x2d
 8007812:	4616      	movlt	r6, r2
 8007814:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007818:	700b      	strb	r3, [r1, #0]
 800781a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800781c:	f023 0820 	bic.w	r8, r3, #32
 8007820:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007824:	d005      	beq.n	8007832 <__cvt+0x42>
 8007826:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800782a:	d100      	bne.n	800782e <__cvt+0x3e>
 800782c:	3401      	adds	r4, #1
 800782e:	2102      	movs	r1, #2
 8007830:	e000      	b.n	8007834 <__cvt+0x44>
 8007832:	2103      	movs	r1, #3
 8007834:	ab03      	add	r3, sp, #12
 8007836:	4622      	mov	r2, r4
 8007838:	9301      	str	r3, [sp, #4]
 800783a:	ab02      	add	r3, sp, #8
 800783c:	ec47 6b10 	vmov	d0, r6, r7
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	4653      	mov	r3, sl
 8007844:	f001 f888 	bl	8008958 <_dtoa_r>
 8007848:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800784c:	4605      	mov	r5, r0
 800784e:	d119      	bne.n	8007884 <__cvt+0x94>
 8007850:	f019 0f01 	tst.w	r9, #1
 8007854:	d00e      	beq.n	8007874 <__cvt+0x84>
 8007856:	eb00 0904 	add.w	r9, r0, r4
 800785a:	2200      	movs	r2, #0
 800785c:	2300      	movs	r3, #0
 800785e:	4630      	mov	r0, r6
 8007860:	4639      	mov	r1, r7
 8007862:	f7f9 f945 	bl	8000af0 <__aeabi_dcmpeq>
 8007866:	b108      	cbz	r0, 800786c <__cvt+0x7c>
 8007868:	f8cd 900c 	str.w	r9, [sp, #12]
 800786c:	2230      	movs	r2, #48	@ 0x30
 800786e:	9b03      	ldr	r3, [sp, #12]
 8007870:	454b      	cmp	r3, r9
 8007872:	d31e      	bcc.n	80078b2 <__cvt+0xc2>
 8007874:	9b03      	ldr	r3, [sp, #12]
 8007876:	4628      	mov	r0, r5
 8007878:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800787a:	1b5b      	subs	r3, r3, r5
 800787c:	6013      	str	r3, [r2, #0]
 800787e:	b004      	add	sp, #16
 8007880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007884:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007888:	eb00 0904 	add.w	r9, r0, r4
 800788c:	d1e5      	bne.n	800785a <__cvt+0x6a>
 800788e:	7803      	ldrb	r3, [r0, #0]
 8007890:	2b30      	cmp	r3, #48	@ 0x30
 8007892:	d10a      	bne.n	80078aa <__cvt+0xba>
 8007894:	2200      	movs	r2, #0
 8007896:	2300      	movs	r3, #0
 8007898:	4630      	mov	r0, r6
 800789a:	4639      	mov	r1, r7
 800789c:	f7f9 f928 	bl	8000af0 <__aeabi_dcmpeq>
 80078a0:	b918      	cbnz	r0, 80078aa <__cvt+0xba>
 80078a2:	f1c4 0401 	rsb	r4, r4, #1
 80078a6:	f8ca 4000 	str.w	r4, [sl]
 80078aa:	f8da 3000 	ldr.w	r3, [sl]
 80078ae:	4499      	add	r9, r3
 80078b0:	e7d3      	b.n	800785a <__cvt+0x6a>
 80078b2:	1c59      	adds	r1, r3, #1
 80078b4:	9103      	str	r1, [sp, #12]
 80078b6:	701a      	strb	r2, [r3, #0]
 80078b8:	e7d9      	b.n	800786e <__cvt+0x7e>

080078ba <__exponent>:
 80078ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078bc:	2900      	cmp	r1, #0
 80078be:	7002      	strb	r2, [r0, #0]
 80078c0:	bfba      	itte	lt
 80078c2:	4249      	neglt	r1, r1
 80078c4:	232d      	movlt	r3, #45	@ 0x2d
 80078c6:	232b      	movge	r3, #43	@ 0x2b
 80078c8:	2909      	cmp	r1, #9
 80078ca:	7043      	strb	r3, [r0, #1]
 80078cc:	dd28      	ble.n	8007920 <__exponent+0x66>
 80078ce:	f10d 0307 	add.w	r3, sp, #7
 80078d2:	270a      	movs	r7, #10
 80078d4:	461d      	mov	r5, r3
 80078d6:	461a      	mov	r2, r3
 80078d8:	3b01      	subs	r3, #1
 80078da:	fbb1 f6f7 	udiv	r6, r1, r7
 80078de:	fb07 1416 	mls	r4, r7, r6, r1
 80078e2:	3430      	adds	r4, #48	@ 0x30
 80078e4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80078e8:	460c      	mov	r4, r1
 80078ea:	4631      	mov	r1, r6
 80078ec:	2c63      	cmp	r4, #99	@ 0x63
 80078ee:	dcf2      	bgt.n	80078d6 <__exponent+0x1c>
 80078f0:	3130      	adds	r1, #48	@ 0x30
 80078f2:	1e94      	subs	r4, r2, #2
 80078f4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80078f8:	1c41      	adds	r1, r0, #1
 80078fa:	4623      	mov	r3, r4
 80078fc:	42ab      	cmp	r3, r5
 80078fe:	d30a      	bcc.n	8007916 <__exponent+0x5c>
 8007900:	f10d 0309 	add.w	r3, sp, #9
 8007904:	1a9b      	subs	r3, r3, r2
 8007906:	42ac      	cmp	r4, r5
 8007908:	bf88      	it	hi
 800790a:	2300      	movhi	r3, #0
 800790c:	3302      	adds	r3, #2
 800790e:	4403      	add	r3, r0
 8007910:	1a18      	subs	r0, r3, r0
 8007912:	b003      	add	sp, #12
 8007914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007916:	f813 6b01 	ldrb.w	r6, [r3], #1
 800791a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800791e:	e7ed      	b.n	80078fc <__exponent+0x42>
 8007920:	2330      	movs	r3, #48	@ 0x30
 8007922:	3130      	adds	r1, #48	@ 0x30
 8007924:	7083      	strb	r3, [r0, #2]
 8007926:	1d03      	adds	r3, r0, #4
 8007928:	70c1      	strb	r1, [r0, #3]
 800792a:	e7f1      	b.n	8007910 <__exponent+0x56>

0800792c <_printf_float>:
 800792c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007930:	b08d      	sub	sp, #52	@ 0x34
 8007932:	460c      	mov	r4, r1
 8007934:	4616      	mov	r6, r2
 8007936:	461f      	mov	r7, r3
 8007938:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800793c:	4605      	mov	r5, r0
 800793e:	f000 fef1 	bl	8008724 <_localeconv_r>
 8007942:	6803      	ldr	r3, [r0, #0]
 8007944:	4618      	mov	r0, r3
 8007946:	9304      	str	r3, [sp, #16]
 8007948:	f7f8 fca6 	bl	8000298 <strlen>
 800794c:	2300      	movs	r3, #0
 800794e:	9005      	str	r0, [sp, #20]
 8007950:	930a      	str	r3, [sp, #40]	@ 0x28
 8007952:	f8d8 3000 	ldr.w	r3, [r8]
 8007956:	f894 a018 	ldrb.w	sl, [r4, #24]
 800795a:	3307      	adds	r3, #7
 800795c:	f8d4 b000 	ldr.w	fp, [r4]
 8007960:	f023 0307 	bic.w	r3, r3, #7
 8007964:	f103 0208 	add.w	r2, r3, #8
 8007968:	f8c8 2000 	str.w	r2, [r8]
 800796c:	f04f 32ff 	mov.w	r2, #4294967295
 8007970:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007974:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007978:	f8cd 8018 	str.w	r8, [sp, #24]
 800797c:	9307      	str	r3, [sp, #28]
 800797e:	4b9d      	ldr	r3, [pc, #628]	@ (8007bf4 <_printf_float+0x2c8>)
 8007980:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007984:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007988:	f7f9 f8e4 	bl	8000b54 <__aeabi_dcmpun>
 800798c:	bb70      	cbnz	r0, 80079ec <_printf_float+0xc0>
 800798e:	f04f 32ff 	mov.w	r2, #4294967295
 8007992:	4b98      	ldr	r3, [pc, #608]	@ (8007bf4 <_printf_float+0x2c8>)
 8007994:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007998:	f7f9 f8be 	bl	8000b18 <__aeabi_dcmple>
 800799c:	bb30      	cbnz	r0, 80079ec <_printf_float+0xc0>
 800799e:	2200      	movs	r2, #0
 80079a0:	2300      	movs	r3, #0
 80079a2:	4640      	mov	r0, r8
 80079a4:	4649      	mov	r1, r9
 80079a6:	f7f9 f8ad 	bl	8000b04 <__aeabi_dcmplt>
 80079aa:	b110      	cbz	r0, 80079b2 <_printf_float+0x86>
 80079ac:	232d      	movs	r3, #45	@ 0x2d
 80079ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079b2:	4a91      	ldr	r2, [pc, #580]	@ (8007bf8 <_printf_float+0x2cc>)
 80079b4:	4b91      	ldr	r3, [pc, #580]	@ (8007bfc <_printf_float+0x2d0>)
 80079b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80079ba:	bf94      	ite	ls
 80079bc:	4690      	movls	r8, r2
 80079be:	4698      	movhi	r8, r3
 80079c0:	2303      	movs	r3, #3
 80079c2:	f04f 0900 	mov.w	r9, #0
 80079c6:	6123      	str	r3, [r4, #16]
 80079c8:	f02b 0304 	bic.w	r3, fp, #4
 80079cc:	6023      	str	r3, [r4, #0]
 80079ce:	4633      	mov	r3, r6
 80079d0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80079d2:	4621      	mov	r1, r4
 80079d4:	4628      	mov	r0, r5
 80079d6:	9700      	str	r7, [sp, #0]
 80079d8:	f000 f9d2 	bl	8007d80 <_printf_common>
 80079dc:	3001      	adds	r0, #1
 80079de:	f040 808d 	bne.w	8007afc <_printf_float+0x1d0>
 80079e2:	f04f 30ff 	mov.w	r0, #4294967295
 80079e6:	b00d      	add	sp, #52	@ 0x34
 80079e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ec:	4642      	mov	r2, r8
 80079ee:	464b      	mov	r3, r9
 80079f0:	4640      	mov	r0, r8
 80079f2:	4649      	mov	r1, r9
 80079f4:	f7f9 f8ae 	bl	8000b54 <__aeabi_dcmpun>
 80079f8:	b140      	cbz	r0, 8007a0c <_printf_float+0xe0>
 80079fa:	464b      	mov	r3, r9
 80079fc:	4a80      	ldr	r2, [pc, #512]	@ (8007c00 <_printf_float+0x2d4>)
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	bfbc      	itt	lt
 8007a02:	232d      	movlt	r3, #45	@ 0x2d
 8007a04:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007a08:	4b7e      	ldr	r3, [pc, #504]	@ (8007c04 <_printf_float+0x2d8>)
 8007a0a:	e7d4      	b.n	80079b6 <_printf_float+0x8a>
 8007a0c:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007a10:	6863      	ldr	r3, [r4, #4]
 8007a12:	9206      	str	r2, [sp, #24]
 8007a14:	1c5a      	adds	r2, r3, #1
 8007a16:	d13b      	bne.n	8007a90 <_printf_float+0x164>
 8007a18:	2306      	movs	r3, #6
 8007a1a:	6063      	str	r3, [r4, #4]
 8007a1c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007a20:	2300      	movs	r3, #0
 8007a22:	4628      	mov	r0, r5
 8007a24:	6022      	str	r2, [r4, #0]
 8007a26:	9303      	str	r3, [sp, #12]
 8007a28:	ab0a      	add	r3, sp, #40	@ 0x28
 8007a2a:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007a2e:	ab09      	add	r3, sp, #36	@ 0x24
 8007a30:	ec49 8b10 	vmov	d0, r8, r9
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007a3a:	6861      	ldr	r1, [r4, #4]
 8007a3c:	f7ff fed8 	bl	80077f0 <__cvt>
 8007a40:	9b06      	ldr	r3, [sp, #24]
 8007a42:	4680      	mov	r8, r0
 8007a44:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a46:	2b47      	cmp	r3, #71	@ 0x47
 8007a48:	d129      	bne.n	8007a9e <_printf_float+0x172>
 8007a4a:	1cc8      	adds	r0, r1, #3
 8007a4c:	db02      	blt.n	8007a54 <_printf_float+0x128>
 8007a4e:	6863      	ldr	r3, [r4, #4]
 8007a50:	4299      	cmp	r1, r3
 8007a52:	dd41      	ble.n	8007ad8 <_printf_float+0x1ac>
 8007a54:	f1aa 0a02 	sub.w	sl, sl, #2
 8007a58:	fa5f fa8a 	uxtb.w	sl, sl
 8007a5c:	3901      	subs	r1, #1
 8007a5e:	4652      	mov	r2, sl
 8007a60:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007a64:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a66:	f7ff ff28 	bl	80078ba <__exponent>
 8007a6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a6c:	4681      	mov	r9, r0
 8007a6e:	1813      	adds	r3, r2, r0
 8007a70:	2a01      	cmp	r2, #1
 8007a72:	6123      	str	r3, [r4, #16]
 8007a74:	dc02      	bgt.n	8007a7c <_printf_float+0x150>
 8007a76:	6822      	ldr	r2, [r4, #0]
 8007a78:	07d2      	lsls	r2, r2, #31
 8007a7a:	d501      	bpl.n	8007a80 <_printf_float+0x154>
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	6123      	str	r3, [r4, #16]
 8007a80:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d0a2      	beq.n	80079ce <_printf_float+0xa2>
 8007a88:	232d      	movs	r3, #45	@ 0x2d
 8007a8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a8e:	e79e      	b.n	80079ce <_printf_float+0xa2>
 8007a90:	9a06      	ldr	r2, [sp, #24]
 8007a92:	2a47      	cmp	r2, #71	@ 0x47
 8007a94:	d1c2      	bne.n	8007a1c <_printf_float+0xf0>
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1c0      	bne.n	8007a1c <_printf_float+0xf0>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e7bd      	b.n	8007a1a <_printf_float+0xee>
 8007a9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007aa2:	d9db      	bls.n	8007a5c <_printf_float+0x130>
 8007aa4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007aa8:	d118      	bne.n	8007adc <_printf_float+0x1b0>
 8007aaa:	2900      	cmp	r1, #0
 8007aac:	6863      	ldr	r3, [r4, #4]
 8007aae:	dd0b      	ble.n	8007ac8 <_printf_float+0x19c>
 8007ab0:	6121      	str	r1, [r4, #16]
 8007ab2:	b913      	cbnz	r3, 8007aba <_printf_float+0x18e>
 8007ab4:	6822      	ldr	r2, [r4, #0]
 8007ab6:	07d0      	lsls	r0, r2, #31
 8007ab8:	d502      	bpl.n	8007ac0 <_printf_float+0x194>
 8007aba:	3301      	adds	r3, #1
 8007abc:	440b      	add	r3, r1
 8007abe:	6123      	str	r3, [r4, #16]
 8007ac0:	f04f 0900 	mov.w	r9, #0
 8007ac4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007ac6:	e7db      	b.n	8007a80 <_printf_float+0x154>
 8007ac8:	b913      	cbnz	r3, 8007ad0 <_printf_float+0x1a4>
 8007aca:	6822      	ldr	r2, [r4, #0]
 8007acc:	07d2      	lsls	r2, r2, #31
 8007ace:	d501      	bpl.n	8007ad4 <_printf_float+0x1a8>
 8007ad0:	3302      	adds	r3, #2
 8007ad2:	e7f4      	b.n	8007abe <_printf_float+0x192>
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e7f2      	b.n	8007abe <_printf_float+0x192>
 8007ad8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007adc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ade:	4299      	cmp	r1, r3
 8007ae0:	db05      	blt.n	8007aee <_printf_float+0x1c2>
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	6121      	str	r1, [r4, #16]
 8007ae6:	07d8      	lsls	r0, r3, #31
 8007ae8:	d5ea      	bpl.n	8007ac0 <_printf_float+0x194>
 8007aea:	1c4b      	adds	r3, r1, #1
 8007aec:	e7e7      	b.n	8007abe <_printf_float+0x192>
 8007aee:	2900      	cmp	r1, #0
 8007af0:	bfd4      	ite	le
 8007af2:	f1c1 0202 	rsble	r2, r1, #2
 8007af6:	2201      	movgt	r2, #1
 8007af8:	4413      	add	r3, r2
 8007afa:	e7e0      	b.n	8007abe <_printf_float+0x192>
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	055a      	lsls	r2, r3, #21
 8007b00:	d407      	bmi.n	8007b12 <_printf_float+0x1e6>
 8007b02:	6923      	ldr	r3, [r4, #16]
 8007b04:	4642      	mov	r2, r8
 8007b06:	4631      	mov	r1, r6
 8007b08:	4628      	mov	r0, r5
 8007b0a:	47b8      	blx	r7
 8007b0c:	3001      	adds	r0, #1
 8007b0e:	d12b      	bne.n	8007b68 <_printf_float+0x23c>
 8007b10:	e767      	b.n	80079e2 <_printf_float+0xb6>
 8007b12:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b16:	f240 80dd 	bls.w	8007cd4 <_printf_float+0x3a8>
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b22:	f7f8 ffe5 	bl	8000af0 <__aeabi_dcmpeq>
 8007b26:	2800      	cmp	r0, #0
 8007b28:	d033      	beq.n	8007b92 <_printf_float+0x266>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	4a36      	ldr	r2, [pc, #216]	@ (8007c08 <_printf_float+0x2dc>)
 8007b2e:	4631      	mov	r1, r6
 8007b30:	4628      	mov	r0, r5
 8007b32:	47b8      	blx	r7
 8007b34:	3001      	adds	r0, #1
 8007b36:	f43f af54 	beq.w	80079e2 <_printf_float+0xb6>
 8007b3a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007b3e:	4543      	cmp	r3, r8
 8007b40:	db02      	blt.n	8007b48 <_printf_float+0x21c>
 8007b42:	6823      	ldr	r3, [r4, #0]
 8007b44:	07d8      	lsls	r0, r3, #31
 8007b46:	d50f      	bpl.n	8007b68 <_printf_float+0x23c>
 8007b48:	4631      	mov	r1, r6
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b50:	47b8      	blx	r7
 8007b52:	3001      	adds	r0, #1
 8007b54:	f43f af45 	beq.w	80079e2 <_printf_float+0xb6>
 8007b58:	f04f 0900 	mov.w	r9, #0
 8007b5c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b60:	f104 0a1a 	add.w	sl, r4, #26
 8007b64:	45c8      	cmp	r8, r9
 8007b66:	dc09      	bgt.n	8007b7c <_printf_float+0x250>
 8007b68:	6823      	ldr	r3, [r4, #0]
 8007b6a:	079b      	lsls	r3, r3, #30
 8007b6c:	f100 8103 	bmi.w	8007d76 <_printf_float+0x44a>
 8007b70:	68e0      	ldr	r0, [r4, #12]
 8007b72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b74:	4298      	cmp	r0, r3
 8007b76:	bfb8      	it	lt
 8007b78:	4618      	movlt	r0, r3
 8007b7a:	e734      	b.n	80079e6 <_printf_float+0xba>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	4652      	mov	r2, sl
 8007b80:	4631      	mov	r1, r6
 8007b82:	4628      	mov	r0, r5
 8007b84:	47b8      	blx	r7
 8007b86:	3001      	adds	r0, #1
 8007b88:	f43f af2b 	beq.w	80079e2 <_printf_float+0xb6>
 8007b8c:	f109 0901 	add.w	r9, r9, #1
 8007b90:	e7e8      	b.n	8007b64 <_printf_float+0x238>
 8007b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	dc39      	bgt.n	8007c0c <_printf_float+0x2e0>
 8007b98:	2301      	movs	r3, #1
 8007b9a:	4a1b      	ldr	r2, [pc, #108]	@ (8007c08 <_printf_float+0x2dc>)
 8007b9c:	4631      	mov	r1, r6
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	47b8      	blx	r7
 8007ba2:	3001      	adds	r0, #1
 8007ba4:	f43f af1d 	beq.w	80079e2 <_printf_float+0xb6>
 8007ba8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007bac:	ea59 0303 	orrs.w	r3, r9, r3
 8007bb0:	d102      	bne.n	8007bb8 <_printf_float+0x28c>
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	07d9      	lsls	r1, r3, #31
 8007bb6:	d5d7      	bpl.n	8007b68 <_printf_float+0x23c>
 8007bb8:	4631      	mov	r1, r6
 8007bba:	4628      	mov	r0, r5
 8007bbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bc0:	47b8      	blx	r7
 8007bc2:	3001      	adds	r0, #1
 8007bc4:	f43f af0d 	beq.w	80079e2 <_printf_float+0xb6>
 8007bc8:	f04f 0a00 	mov.w	sl, #0
 8007bcc:	f104 0b1a 	add.w	fp, r4, #26
 8007bd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bd2:	425b      	negs	r3, r3
 8007bd4:	4553      	cmp	r3, sl
 8007bd6:	dc01      	bgt.n	8007bdc <_printf_float+0x2b0>
 8007bd8:	464b      	mov	r3, r9
 8007bda:	e793      	b.n	8007b04 <_printf_float+0x1d8>
 8007bdc:	2301      	movs	r3, #1
 8007bde:	465a      	mov	r2, fp
 8007be0:	4631      	mov	r1, r6
 8007be2:	4628      	mov	r0, r5
 8007be4:	47b8      	blx	r7
 8007be6:	3001      	adds	r0, #1
 8007be8:	f43f aefb 	beq.w	80079e2 <_printf_float+0xb6>
 8007bec:	f10a 0a01 	add.w	sl, sl, #1
 8007bf0:	e7ee      	b.n	8007bd0 <_printf_float+0x2a4>
 8007bf2:	bf00      	nop
 8007bf4:	7fefffff 	.word	0x7fefffff
 8007bf8:	0800bf50 	.word	0x0800bf50
 8007bfc:	0800bf54 	.word	0x0800bf54
 8007c00:	0800bf58 	.word	0x0800bf58
 8007c04:	0800bf5c 	.word	0x0800bf5c
 8007c08:	0800bf60 	.word	0x0800bf60
 8007c0c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c0e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007c12:	4553      	cmp	r3, sl
 8007c14:	bfa8      	it	ge
 8007c16:	4653      	movge	r3, sl
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	4699      	mov	r9, r3
 8007c1c:	dc36      	bgt.n	8007c8c <_printf_float+0x360>
 8007c1e:	f04f 0b00 	mov.w	fp, #0
 8007c22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c26:	f104 021a 	add.w	r2, r4, #26
 8007c2a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c2c:	9306      	str	r3, [sp, #24]
 8007c2e:	eba3 0309 	sub.w	r3, r3, r9
 8007c32:	455b      	cmp	r3, fp
 8007c34:	dc31      	bgt.n	8007c9a <_printf_float+0x36e>
 8007c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c38:	459a      	cmp	sl, r3
 8007c3a:	dc3a      	bgt.n	8007cb2 <_printf_float+0x386>
 8007c3c:	6823      	ldr	r3, [r4, #0]
 8007c3e:	07da      	lsls	r2, r3, #31
 8007c40:	d437      	bmi.n	8007cb2 <_printf_float+0x386>
 8007c42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c44:	ebaa 0903 	sub.w	r9, sl, r3
 8007c48:	9b06      	ldr	r3, [sp, #24]
 8007c4a:	ebaa 0303 	sub.w	r3, sl, r3
 8007c4e:	4599      	cmp	r9, r3
 8007c50:	bfa8      	it	ge
 8007c52:	4699      	movge	r9, r3
 8007c54:	f1b9 0f00 	cmp.w	r9, #0
 8007c58:	dc33      	bgt.n	8007cc2 <_printf_float+0x396>
 8007c5a:	f04f 0800 	mov.w	r8, #0
 8007c5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c62:	f104 0b1a 	add.w	fp, r4, #26
 8007c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c68:	ebaa 0303 	sub.w	r3, sl, r3
 8007c6c:	eba3 0309 	sub.w	r3, r3, r9
 8007c70:	4543      	cmp	r3, r8
 8007c72:	f77f af79 	ble.w	8007b68 <_printf_float+0x23c>
 8007c76:	2301      	movs	r3, #1
 8007c78:	465a      	mov	r2, fp
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	47b8      	blx	r7
 8007c80:	3001      	adds	r0, #1
 8007c82:	f43f aeae 	beq.w	80079e2 <_printf_float+0xb6>
 8007c86:	f108 0801 	add.w	r8, r8, #1
 8007c8a:	e7ec      	b.n	8007c66 <_printf_float+0x33a>
 8007c8c:	4642      	mov	r2, r8
 8007c8e:	4631      	mov	r1, r6
 8007c90:	4628      	mov	r0, r5
 8007c92:	47b8      	blx	r7
 8007c94:	3001      	adds	r0, #1
 8007c96:	d1c2      	bne.n	8007c1e <_printf_float+0x2f2>
 8007c98:	e6a3      	b.n	80079e2 <_printf_float+0xb6>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	4631      	mov	r1, r6
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	9206      	str	r2, [sp, #24]
 8007ca2:	47b8      	blx	r7
 8007ca4:	3001      	adds	r0, #1
 8007ca6:	f43f ae9c 	beq.w	80079e2 <_printf_float+0xb6>
 8007caa:	f10b 0b01 	add.w	fp, fp, #1
 8007cae:	9a06      	ldr	r2, [sp, #24]
 8007cb0:	e7bb      	b.n	8007c2a <_printf_float+0x2fe>
 8007cb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cb6:	4631      	mov	r1, r6
 8007cb8:	4628      	mov	r0, r5
 8007cba:	47b8      	blx	r7
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	d1c0      	bne.n	8007c42 <_printf_float+0x316>
 8007cc0:	e68f      	b.n	80079e2 <_printf_float+0xb6>
 8007cc2:	9a06      	ldr	r2, [sp, #24]
 8007cc4:	464b      	mov	r3, r9
 8007cc6:	4631      	mov	r1, r6
 8007cc8:	4628      	mov	r0, r5
 8007cca:	4442      	add	r2, r8
 8007ccc:	47b8      	blx	r7
 8007cce:	3001      	adds	r0, #1
 8007cd0:	d1c3      	bne.n	8007c5a <_printf_float+0x32e>
 8007cd2:	e686      	b.n	80079e2 <_printf_float+0xb6>
 8007cd4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007cd8:	f1ba 0f01 	cmp.w	sl, #1
 8007cdc:	dc01      	bgt.n	8007ce2 <_printf_float+0x3b6>
 8007cde:	07db      	lsls	r3, r3, #31
 8007ce0:	d536      	bpl.n	8007d50 <_printf_float+0x424>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	4642      	mov	r2, r8
 8007ce6:	4631      	mov	r1, r6
 8007ce8:	4628      	mov	r0, r5
 8007cea:	47b8      	blx	r7
 8007cec:	3001      	adds	r0, #1
 8007cee:	f43f ae78 	beq.w	80079e2 <_printf_float+0xb6>
 8007cf2:	4631      	mov	r1, r6
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cfa:	47b8      	blx	r7
 8007cfc:	3001      	adds	r0, #1
 8007cfe:	f43f ae70 	beq.w	80079e2 <_printf_float+0xb6>
 8007d02:	2200      	movs	r2, #0
 8007d04:	2300      	movs	r3, #0
 8007d06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007d0e:	f7f8 feef 	bl	8000af0 <__aeabi_dcmpeq>
 8007d12:	b9c0      	cbnz	r0, 8007d46 <_printf_float+0x41a>
 8007d14:	4653      	mov	r3, sl
 8007d16:	f108 0201 	add.w	r2, r8, #1
 8007d1a:	4631      	mov	r1, r6
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	47b8      	blx	r7
 8007d20:	3001      	adds	r0, #1
 8007d22:	d10c      	bne.n	8007d3e <_printf_float+0x412>
 8007d24:	e65d      	b.n	80079e2 <_printf_float+0xb6>
 8007d26:	2301      	movs	r3, #1
 8007d28:	465a      	mov	r2, fp
 8007d2a:	4631      	mov	r1, r6
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	47b8      	blx	r7
 8007d30:	3001      	adds	r0, #1
 8007d32:	f43f ae56 	beq.w	80079e2 <_printf_float+0xb6>
 8007d36:	f108 0801 	add.w	r8, r8, #1
 8007d3a:	45d0      	cmp	r8, sl
 8007d3c:	dbf3      	blt.n	8007d26 <_printf_float+0x3fa>
 8007d3e:	464b      	mov	r3, r9
 8007d40:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007d44:	e6df      	b.n	8007b06 <_printf_float+0x1da>
 8007d46:	f04f 0800 	mov.w	r8, #0
 8007d4a:	f104 0b1a 	add.w	fp, r4, #26
 8007d4e:	e7f4      	b.n	8007d3a <_printf_float+0x40e>
 8007d50:	2301      	movs	r3, #1
 8007d52:	4642      	mov	r2, r8
 8007d54:	e7e1      	b.n	8007d1a <_printf_float+0x3ee>
 8007d56:	2301      	movs	r3, #1
 8007d58:	464a      	mov	r2, r9
 8007d5a:	4631      	mov	r1, r6
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	47b8      	blx	r7
 8007d60:	3001      	adds	r0, #1
 8007d62:	f43f ae3e 	beq.w	80079e2 <_printf_float+0xb6>
 8007d66:	f108 0801 	add.w	r8, r8, #1
 8007d6a:	68e3      	ldr	r3, [r4, #12]
 8007d6c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d6e:	1a5b      	subs	r3, r3, r1
 8007d70:	4543      	cmp	r3, r8
 8007d72:	dcf0      	bgt.n	8007d56 <_printf_float+0x42a>
 8007d74:	e6fc      	b.n	8007b70 <_printf_float+0x244>
 8007d76:	f04f 0800 	mov.w	r8, #0
 8007d7a:	f104 0919 	add.w	r9, r4, #25
 8007d7e:	e7f4      	b.n	8007d6a <_printf_float+0x43e>

08007d80 <_printf_common>:
 8007d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d84:	4616      	mov	r6, r2
 8007d86:	4698      	mov	r8, r3
 8007d88:	688a      	ldr	r2, [r1, #8]
 8007d8a:	4607      	mov	r7, r0
 8007d8c:	690b      	ldr	r3, [r1, #16]
 8007d8e:	460c      	mov	r4, r1
 8007d90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d94:	4293      	cmp	r3, r2
 8007d96:	bfb8      	it	lt
 8007d98:	4613      	movlt	r3, r2
 8007d9a:	6033      	str	r3, [r6, #0]
 8007d9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007da0:	b10a      	cbz	r2, 8007da6 <_printf_common+0x26>
 8007da2:	3301      	adds	r3, #1
 8007da4:	6033      	str	r3, [r6, #0]
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	0699      	lsls	r1, r3, #26
 8007daa:	bf42      	ittt	mi
 8007dac:	6833      	ldrmi	r3, [r6, #0]
 8007dae:	3302      	addmi	r3, #2
 8007db0:	6033      	strmi	r3, [r6, #0]
 8007db2:	6825      	ldr	r5, [r4, #0]
 8007db4:	f015 0506 	ands.w	r5, r5, #6
 8007db8:	d106      	bne.n	8007dc8 <_printf_common+0x48>
 8007dba:	f104 0a19 	add.w	sl, r4, #25
 8007dbe:	68e3      	ldr	r3, [r4, #12]
 8007dc0:	6832      	ldr	r2, [r6, #0]
 8007dc2:	1a9b      	subs	r3, r3, r2
 8007dc4:	42ab      	cmp	r3, r5
 8007dc6:	dc2b      	bgt.n	8007e20 <_printf_common+0xa0>
 8007dc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007dcc:	6822      	ldr	r2, [r4, #0]
 8007dce:	3b00      	subs	r3, #0
 8007dd0:	bf18      	it	ne
 8007dd2:	2301      	movne	r3, #1
 8007dd4:	0692      	lsls	r2, r2, #26
 8007dd6:	d430      	bmi.n	8007e3a <_printf_common+0xba>
 8007dd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ddc:	4641      	mov	r1, r8
 8007dde:	4638      	mov	r0, r7
 8007de0:	47c8      	blx	r9
 8007de2:	3001      	adds	r0, #1
 8007de4:	d023      	beq.n	8007e2e <_printf_common+0xae>
 8007de6:	6823      	ldr	r3, [r4, #0]
 8007de8:	341a      	adds	r4, #26
 8007dea:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8007dee:	f003 0306 	and.w	r3, r3, #6
 8007df2:	2b04      	cmp	r3, #4
 8007df4:	bf0a      	itet	eq
 8007df6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8007dfa:	2500      	movne	r5, #0
 8007dfc:	6833      	ldreq	r3, [r6, #0]
 8007dfe:	f04f 0600 	mov.w	r6, #0
 8007e02:	bf08      	it	eq
 8007e04:	1aed      	subeq	r5, r5, r3
 8007e06:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007e0a:	bf08      	it	eq
 8007e0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e10:	4293      	cmp	r3, r2
 8007e12:	bfc4      	itt	gt
 8007e14:	1a9b      	subgt	r3, r3, r2
 8007e16:	18ed      	addgt	r5, r5, r3
 8007e18:	42b5      	cmp	r5, r6
 8007e1a:	d11a      	bne.n	8007e52 <_printf_common+0xd2>
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	e008      	b.n	8007e32 <_printf_common+0xb2>
 8007e20:	2301      	movs	r3, #1
 8007e22:	4652      	mov	r2, sl
 8007e24:	4641      	mov	r1, r8
 8007e26:	4638      	mov	r0, r7
 8007e28:	47c8      	blx	r9
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	d103      	bne.n	8007e36 <_printf_common+0xb6>
 8007e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e36:	3501      	adds	r5, #1
 8007e38:	e7c1      	b.n	8007dbe <_printf_common+0x3e>
 8007e3a:	18e1      	adds	r1, r4, r3
 8007e3c:	1c5a      	adds	r2, r3, #1
 8007e3e:	2030      	movs	r0, #48	@ 0x30
 8007e40:	3302      	adds	r3, #2
 8007e42:	4422      	add	r2, r4
 8007e44:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e50:	e7c2      	b.n	8007dd8 <_printf_common+0x58>
 8007e52:	2301      	movs	r3, #1
 8007e54:	4622      	mov	r2, r4
 8007e56:	4641      	mov	r1, r8
 8007e58:	4638      	mov	r0, r7
 8007e5a:	47c8      	blx	r9
 8007e5c:	3001      	adds	r0, #1
 8007e5e:	d0e6      	beq.n	8007e2e <_printf_common+0xae>
 8007e60:	3601      	adds	r6, #1
 8007e62:	e7d9      	b.n	8007e18 <_printf_common+0x98>

08007e64 <_printf_i>:
 8007e64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e68:	7e0f      	ldrb	r7, [r1, #24]
 8007e6a:	4691      	mov	r9, r2
 8007e6c:	4680      	mov	r8, r0
 8007e6e:	460c      	mov	r4, r1
 8007e70:	2f78      	cmp	r7, #120	@ 0x78
 8007e72:	469a      	mov	sl, r3
 8007e74:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e7a:	d807      	bhi.n	8007e8c <_printf_i+0x28>
 8007e7c:	2f62      	cmp	r7, #98	@ 0x62
 8007e7e:	d80a      	bhi.n	8007e96 <_printf_i+0x32>
 8007e80:	2f00      	cmp	r7, #0
 8007e82:	f000 80d2 	beq.w	800802a <_printf_i+0x1c6>
 8007e86:	2f58      	cmp	r7, #88	@ 0x58
 8007e88:	f000 80b9 	beq.w	8007ffe <_printf_i+0x19a>
 8007e8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e94:	e03a      	b.n	8007f0c <_printf_i+0xa8>
 8007e96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e9a:	2b15      	cmp	r3, #21
 8007e9c:	d8f6      	bhi.n	8007e8c <_printf_i+0x28>
 8007e9e:	a101      	add	r1, pc, #4	@ (adr r1, 8007ea4 <_printf_i+0x40>)
 8007ea0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ea4:	08007efd 	.word	0x08007efd
 8007ea8:	08007f11 	.word	0x08007f11
 8007eac:	08007e8d 	.word	0x08007e8d
 8007eb0:	08007e8d 	.word	0x08007e8d
 8007eb4:	08007e8d 	.word	0x08007e8d
 8007eb8:	08007e8d 	.word	0x08007e8d
 8007ebc:	08007f11 	.word	0x08007f11
 8007ec0:	08007e8d 	.word	0x08007e8d
 8007ec4:	08007e8d 	.word	0x08007e8d
 8007ec8:	08007e8d 	.word	0x08007e8d
 8007ecc:	08007e8d 	.word	0x08007e8d
 8007ed0:	08008011 	.word	0x08008011
 8007ed4:	08007f3b 	.word	0x08007f3b
 8007ed8:	08007fcb 	.word	0x08007fcb
 8007edc:	08007e8d 	.word	0x08007e8d
 8007ee0:	08007e8d 	.word	0x08007e8d
 8007ee4:	08008033 	.word	0x08008033
 8007ee8:	08007e8d 	.word	0x08007e8d
 8007eec:	08007f3b 	.word	0x08007f3b
 8007ef0:	08007e8d 	.word	0x08007e8d
 8007ef4:	08007e8d 	.word	0x08007e8d
 8007ef8:	08007fd3 	.word	0x08007fd3
 8007efc:	6833      	ldr	r3, [r6, #0]
 8007efe:	1d1a      	adds	r2, r3, #4
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6032      	str	r2, [r6, #0]
 8007f04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e09d      	b.n	800804c <_printf_i+0x1e8>
 8007f10:	6833      	ldr	r3, [r6, #0]
 8007f12:	6820      	ldr	r0, [r4, #0]
 8007f14:	1d19      	adds	r1, r3, #4
 8007f16:	6031      	str	r1, [r6, #0]
 8007f18:	0606      	lsls	r6, r0, #24
 8007f1a:	d501      	bpl.n	8007f20 <_printf_i+0xbc>
 8007f1c:	681d      	ldr	r5, [r3, #0]
 8007f1e:	e003      	b.n	8007f28 <_printf_i+0xc4>
 8007f20:	0645      	lsls	r5, r0, #25
 8007f22:	d5fb      	bpl.n	8007f1c <_printf_i+0xb8>
 8007f24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f28:	2d00      	cmp	r5, #0
 8007f2a:	da03      	bge.n	8007f34 <_printf_i+0xd0>
 8007f2c:	232d      	movs	r3, #45	@ 0x2d
 8007f2e:	426d      	negs	r5, r5
 8007f30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f34:	4859      	ldr	r0, [pc, #356]	@ (800809c <_printf_i+0x238>)
 8007f36:	230a      	movs	r3, #10
 8007f38:	e011      	b.n	8007f5e <_printf_i+0xfa>
 8007f3a:	6821      	ldr	r1, [r4, #0]
 8007f3c:	6833      	ldr	r3, [r6, #0]
 8007f3e:	0608      	lsls	r0, r1, #24
 8007f40:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f44:	d402      	bmi.n	8007f4c <_printf_i+0xe8>
 8007f46:	0649      	lsls	r1, r1, #25
 8007f48:	bf48      	it	mi
 8007f4a:	b2ad      	uxthmi	r5, r5
 8007f4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f4e:	6033      	str	r3, [r6, #0]
 8007f50:	4852      	ldr	r0, [pc, #328]	@ (800809c <_printf_i+0x238>)
 8007f52:	bf14      	ite	ne
 8007f54:	230a      	movne	r3, #10
 8007f56:	2308      	moveq	r3, #8
 8007f58:	2100      	movs	r1, #0
 8007f5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f5e:	6866      	ldr	r6, [r4, #4]
 8007f60:	2e00      	cmp	r6, #0
 8007f62:	60a6      	str	r6, [r4, #8]
 8007f64:	bfa2      	ittt	ge
 8007f66:	6821      	ldrge	r1, [r4, #0]
 8007f68:	f021 0104 	bicge.w	r1, r1, #4
 8007f6c:	6021      	strge	r1, [r4, #0]
 8007f6e:	b90d      	cbnz	r5, 8007f74 <_printf_i+0x110>
 8007f70:	2e00      	cmp	r6, #0
 8007f72:	d04b      	beq.n	800800c <_printf_i+0x1a8>
 8007f74:	4616      	mov	r6, r2
 8007f76:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f7a:	fb03 5711 	mls	r7, r3, r1, r5
 8007f7e:	5dc7      	ldrb	r7, [r0, r7]
 8007f80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f84:	462f      	mov	r7, r5
 8007f86:	460d      	mov	r5, r1
 8007f88:	42bb      	cmp	r3, r7
 8007f8a:	d9f4      	bls.n	8007f76 <_printf_i+0x112>
 8007f8c:	2b08      	cmp	r3, #8
 8007f8e:	d10b      	bne.n	8007fa8 <_printf_i+0x144>
 8007f90:	6823      	ldr	r3, [r4, #0]
 8007f92:	07df      	lsls	r7, r3, #31
 8007f94:	d508      	bpl.n	8007fa8 <_printf_i+0x144>
 8007f96:	6923      	ldr	r3, [r4, #16]
 8007f98:	6861      	ldr	r1, [r4, #4]
 8007f9a:	4299      	cmp	r1, r3
 8007f9c:	bfde      	ittt	le
 8007f9e:	2330      	movle	r3, #48	@ 0x30
 8007fa0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007fa4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007fa8:	1b92      	subs	r2, r2, r6
 8007faa:	6122      	str	r2, [r4, #16]
 8007fac:	464b      	mov	r3, r9
 8007fae:	aa03      	add	r2, sp, #12
 8007fb0:	4621      	mov	r1, r4
 8007fb2:	4640      	mov	r0, r8
 8007fb4:	f8cd a000 	str.w	sl, [sp]
 8007fb8:	f7ff fee2 	bl	8007d80 <_printf_common>
 8007fbc:	3001      	adds	r0, #1
 8007fbe:	d14a      	bne.n	8008056 <_printf_i+0x1f2>
 8007fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc4:	b004      	add	sp, #16
 8007fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	f043 0320 	orr.w	r3, r3, #32
 8007fd0:	6023      	str	r3, [r4, #0]
 8007fd2:	2778      	movs	r7, #120	@ 0x78
 8007fd4:	4832      	ldr	r0, [pc, #200]	@ (80080a0 <_printf_i+0x23c>)
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007fdc:	061f      	lsls	r7, r3, #24
 8007fde:	6831      	ldr	r1, [r6, #0]
 8007fe0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007fe4:	d402      	bmi.n	8007fec <_printf_i+0x188>
 8007fe6:	065f      	lsls	r7, r3, #25
 8007fe8:	bf48      	it	mi
 8007fea:	b2ad      	uxthmi	r5, r5
 8007fec:	6031      	str	r1, [r6, #0]
 8007fee:	07d9      	lsls	r1, r3, #31
 8007ff0:	bf44      	itt	mi
 8007ff2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ff6:	6023      	strmi	r3, [r4, #0]
 8007ff8:	b11d      	cbz	r5, 8008002 <_printf_i+0x19e>
 8007ffa:	2310      	movs	r3, #16
 8007ffc:	e7ac      	b.n	8007f58 <_printf_i+0xf4>
 8007ffe:	4827      	ldr	r0, [pc, #156]	@ (800809c <_printf_i+0x238>)
 8008000:	e7e9      	b.n	8007fd6 <_printf_i+0x172>
 8008002:	6823      	ldr	r3, [r4, #0]
 8008004:	f023 0320 	bic.w	r3, r3, #32
 8008008:	6023      	str	r3, [r4, #0]
 800800a:	e7f6      	b.n	8007ffa <_printf_i+0x196>
 800800c:	4616      	mov	r6, r2
 800800e:	e7bd      	b.n	8007f8c <_printf_i+0x128>
 8008010:	6833      	ldr	r3, [r6, #0]
 8008012:	6825      	ldr	r5, [r4, #0]
 8008014:	1d18      	adds	r0, r3, #4
 8008016:	6961      	ldr	r1, [r4, #20]
 8008018:	6030      	str	r0, [r6, #0]
 800801a:	062e      	lsls	r6, r5, #24
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	d501      	bpl.n	8008024 <_printf_i+0x1c0>
 8008020:	6019      	str	r1, [r3, #0]
 8008022:	e002      	b.n	800802a <_printf_i+0x1c6>
 8008024:	0668      	lsls	r0, r5, #25
 8008026:	d5fb      	bpl.n	8008020 <_printf_i+0x1bc>
 8008028:	8019      	strh	r1, [r3, #0]
 800802a:	2300      	movs	r3, #0
 800802c:	4616      	mov	r6, r2
 800802e:	6123      	str	r3, [r4, #16]
 8008030:	e7bc      	b.n	8007fac <_printf_i+0x148>
 8008032:	6833      	ldr	r3, [r6, #0]
 8008034:	2100      	movs	r1, #0
 8008036:	1d1a      	adds	r2, r3, #4
 8008038:	6032      	str	r2, [r6, #0]
 800803a:	681e      	ldr	r6, [r3, #0]
 800803c:	6862      	ldr	r2, [r4, #4]
 800803e:	4630      	mov	r0, r6
 8008040:	f000 fbe7 	bl	8008812 <memchr>
 8008044:	b108      	cbz	r0, 800804a <_printf_i+0x1e6>
 8008046:	1b80      	subs	r0, r0, r6
 8008048:	6060      	str	r0, [r4, #4]
 800804a:	6863      	ldr	r3, [r4, #4]
 800804c:	6123      	str	r3, [r4, #16]
 800804e:	2300      	movs	r3, #0
 8008050:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008054:	e7aa      	b.n	8007fac <_printf_i+0x148>
 8008056:	6923      	ldr	r3, [r4, #16]
 8008058:	4632      	mov	r2, r6
 800805a:	4649      	mov	r1, r9
 800805c:	4640      	mov	r0, r8
 800805e:	47d0      	blx	sl
 8008060:	3001      	adds	r0, #1
 8008062:	d0ad      	beq.n	8007fc0 <_printf_i+0x15c>
 8008064:	6823      	ldr	r3, [r4, #0]
 8008066:	079b      	lsls	r3, r3, #30
 8008068:	d413      	bmi.n	8008092 <_printf_i+0x22e>
 800806a:	68e0      	ldr	r0, [r4, #12]
 800806c:	9b03      	ldr	r3, [sp, #12]
 800806e:	4298      	cmp	r0, r3
 8008070:	bfb8      	it	lt
 8008072:	4618      	movlt	r0, r3
 8008074:	e7a6      	b.n	8007fc4 <_printf_i+0x160>
 8008076:	2301      	movs	r3, #1
 8008078:	4632      	mov	r2, r6
 800807a:	4649      	mov	r1, r9
 800807c:	4640      	mov	r0, r8
 800807e:	47d0      	blx	sl
 8008080:	3001      	adds	r0, #1
 8008082:	d09d      	beq.n	8007fc0 <_printf_i+0x15c>
 8008084:	3501      	adds	r5, #1
 8008086:	68e3      	ldr	r3, [r4, #12]
 8008088:	9903      	ldr	r1, [sp, #12]
 800808a:	1a5b      	subs	r3, r3, r1
 800808c:	42ab      	cmp	r3, r5
 800808e:	dcf2      	bgt.n	8008076 <_printf_i+0x212>
 8008090:	e7eb      	b.n	800806a <_printf_i+0x206>
 8008092:	2500      	movs	r5, #0
 8008094:	f104 0619 	add.w	r6, r4, #25
 8008098:	e7f5      	b.n	8008086 <_printf_i+0x222>
 800809a:	bf00      	nop
 800809c:	0800bf62 	.word	0x0800bf62
 80080a0:	0800bf73 	.word	0x0800bf73

080080a4 <_scanf_float>:
 80080a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a8:	b087      	sub	sp, #28
 80080aa:	4617      	mov	r7, r2
 80080ac:	4680      	mov	r8, r0
 80080ae:	460c      	mov	r4, r1
 80080b0:	9303      	str	r3, [sp, #12]
 80080b2:	688b      	ldr	r3, [r1, #8]
 80080b4:	1e5a      	subs	r2, r3, #1
 80080b6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80080ba:	460a      	mov	r2, r1
 80080bc:	bf89      	itett	hi
 80080be:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80080c2:	f04f 0b00 	movls.w	fp, #0
 80080c6:	eb03 0b05 	addhi.w	fp, r3, r5
 80080ca:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80080ce:	f04f 0500 	mov.w	r5, #0
 80080d2:	bf88      	it	hi
 80080d4:	608b      	strhi	r3, [r1, #8]
 80080d6:	680b      	ldr	r3, [r1, #0]
 80080d8:	46aa      	mov	sl, r5
 80080da:	46a9      	mov	r9, r5
 80080dc:	9502      	str	r5, [sp, #8]
 80080de:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80080e2:	f842 3b1c 	str.w	r3, [r2], #28
 80080e6:	4616      	mov	r6, r2
 80080e8:	9201      	str	r2, [sp, #4]
 80080ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80080ee:	68a2      	ldr	r2, [r4, #8]
 80080f0:	b152      	cbz	r2, 8008108 <_scanf_float+0x64>
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	2b4e      	cmp	r3, #78	@ 0x4e
 80080f8:	d864      	bhi.n	80081c4 <_scanf_float+0x120>
 80080fa:	2b40      	cmp	r3, #64	@ 0x40
 80080fc:	d83c      	bhi.n	8008178 <_scanf_float+0xd4>
 80080fe:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008102:	b2c8      	uxtb	r0, r1
 8008104:	280e      	cmp	r0, #14
 8008106:	d93a      	bls.n	800817e <_scanf_float+0xda>
 8008108:	f1b9 0f00 	cmp.w	r9, #0
 800810c:	d003      	beq.n	8008116 <_scanf_float+0x72>
 800810e:	6823      	ldr	r3, [r4, #0]
 8008110:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008114:	6023      	str	r3, [r4, #0]
 8008116:	f10a 3aff 	add.w	sl, sl, #4294967295
 800811a:	f1ba 0f01 	cmp.w	sl, #1
 800811e:	f200 8117 	bhi.w	8008350 <_scanf_float+0x2ac>
 8008122:	9b01      	ldr	r3, [sp, #4]
 8008124:	429e      	cmp	r6, r3
 8008126:	f200 8108 	bhi.w	800833a <_scanf_float+0x296>
 800812a:	2001      	movs	r0, #1
 800812c:	b007      	add	sp, #28
 800812e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008132:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008136:	2a0d      	cmp	r2, #13
 8008138:	d8e6      	bhi.n	8008108 <_scanf_float+0x64>
 800813a:	a101      	add	r1, pc, #4	@ (adr r1, 8008140 <_scanf_float+0x9c>)
 800813c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008140:	08008287 	.word	0x08008287
 8008144:	08008109 	.word	0x08008109
 8008148:	08008109 	.word	0x08008109
 800814c:	08008109 	.word	0x08008109
 8008150:	080082e7 	.word	0x080082e7
 8008154:	080082bf 	.word	0x080082bf
 8008158:	08008109 	.word	0x08008109
 800815c:	08008109 	.word	0x08008109
 8008160:	08008295 	.word	0x08008295
 8008164:	08008109 	.word	0x08008109
 8008168:	08008109 	.word	0x08008109
 800816c:	08008109 	.word	0x08008109
 8008170:	08008109 	.word	0x08008109
 8008174:	0800824d 	.word	0x0800824d
 8008178:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800817c:	e7db      	b.n	8008136 <_scanf_float+0x92>
 800817e:	290e      	cmp	r1, #14
 8008180:	d8c2      	bhi.n	8008108 <_scanf_float+0x64>
 8008182:	a001      	add	r0, pc, #4	@ (adr r0, 8008188 <_scanf_float+0xe4>)
 8008184:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008188:	0800823d 	.word	0x0800823d
 800818c:	08008109 	.word	0x08008109
 8008190:	0800823d 	.word	0x0800823d
 8008194:	080082d3 	.word	0x080082d3
 8008198:	08008109 	.word	0x08008109
 800819c:	080081e5 	.word	0x080081e5
 80081a0:	08008223 	.word	0x08008223
 80081a4:	08008223 	.word	0x08008223
 80081a8:	08008223 	.word	0x08008223
 80081ac:	08008223 	.word	0x08008223
 80081b0:	08008223 	.word	0x08008223
 80081b4:	08008223 	.word	0x08008223
 80081b8:	08008223 	.word	0x08008223
 80081bc:	08008223 	.word	0x08008223
 80081c0:	08008223 	.word	0x08008223
 80081c4:	2b6e      	cmp	r3, #110	@ 0x6e
 80081c6:	d809      	bhi.n	80081dc <_scanf_float+0x138>
 80081c8:	2b60      	cmp	r3, #96	@ 0x60
 80081ca:	d8b2      	bhi.n	8008132 <_scanf_float+0x8e>
 80081cc:	2b54      	cmp	r3, #84	@ 0x54
 80081ce:	d07b      	beq.n	80082c8 <_scanf_float+0x224>
 80081d0:	2b59      	cmp	r3, #89	@ 0x59
 80081d2:	d199      	bne.n	8008108 <_scanf_float+0x64>
 80081d4:	2d07      	cmp	r5, #7
 80081d6:	d197      	bne.n	8008108 <_scanf_float+0x64>
 80081d8:	2508      	movs	r5, #8
 80081da:	e02c      	b.n	8008236 <_scanf_float+0x192>
 80081dc:	2b74      	cmp	r3, #116	@ 0x74
 80081de:	d073      	beq.n	80082c8 <_scanf_float+0x224>
 80081e0:	2b79      	cmp	r3, #121	@ 0x79
 80081e2:	e7f6      	b.n	80081d2 <_scanf_float+0x12e>
 80081e4:	6821      	ldr	r1, [r4, #0]
 80081e6:	05c8      	lsls	r0, r1, #23
 80081e8:	d51b      	bpl.n	8008222 <_scanf_float+0x17e>
 80081ea:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80081ee:	f109 0901 	add.w	r9, r9, #1
 80081f2:	6021      	str	r1, [r4, #0]
 80081f4:	f1bb 0f00 	cmp.w	fp, #0
 80081f8:	d003      	beq.n	8008202 <_scanf_float+0x15e>
 80081fa:	3201      	adds	r2, #1
 80081fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008200:	60a2      	str	r2, [r4, #8]
 8008202:	68a3      	ldr	r3, [r4, #8]
 8008204:	3b01      	subs	r3, #1
 8008206:	60a3      	str	r3, [r4, #8]
 8008208:	6923      	ldr	r3, [r4, #16]
 800820a:	3301      	adds	r3, #1
 800820c:	6123      	str	r3, [r4, #16]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	3b01      	subs	r3, #1
 8008212:	2b00      	cmp	r3, #0
 8008214:	607b      	str	r3, [r7, #4]
 8008216:	f340 8087 	ble.w	8008328 <_scanf_float+0x284>
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	3301      	adds	r3, #1
 800821e:	603b      	str	r3, [r7, #0]
 8008220:	e765      	b.n	80080ee <_scanf_float+0x4a>
 8008222:	eb1a 0105 	adds.w	r1, sl, r5
 8008226:	f47f af6f 	bne.w	8008108 <_scanf_float+0x64>
 800822a:	6822      	ldr	r2, [r4, #0]
 800822c:	460d      	mov	r5, r1
 800822e:	468a      	mov	sl, r1
 8008230:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008234:	6022      	str	r2, [r4, #0]
 8008236:	f806 3b01 	strb.w	r3, [r6], #1
 800823a:	e7e2      	b.n	8008202 <_scanf_float+0x15e>
 800823c:	6822      	ldr	r2, [r4, #0]
 800823e:	0610      	lsls	r0, r2, #24
 8008240:	f57f af62 	bpl.w	8008108 <_scanf_float+0x64>
 8008244:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008248:	6022      	str	r2, [r4, #0]
 800824a:	e7f4      	b.n	8008236 <_scanf_float+0x192>
 800824c:	f1ba 0f00 	cmp.w	sl, #0
 8008250:	d10e      	bne.n	8008270 <_scanf_float+0x1cc>
 8008252:	f1b9 0f00 	cmp.w	r9, #0
 8008256:	d10e      	bne.n	8008276 <_scanf_float+0x1d2>
 8008258:	6822      	ldr	r2, [r4, #0]
 800825a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800825e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008262:	d108      	bne.n	8008276 <_scanf_float+0x1d2>
 8008264:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008268:	f04f 0a01 	mov.w	sl, #1
 800826c:	6022      	str	r2, [r4, #0]
 800826e:	e7e2      	b.n	8008236 <_scanf_float+0x192>
 8008270:	f1ba 0f02 	cmp.w	sl, #2
 8008274:	d055      	beq.n	8008322 <_scanf_float+0x27e>
 8008276:	2d01      	cmp	r5, #1
 8008278:	d002      	beq.n	8008280 <_scanf_float+0x1dc>
 800827a:	2d04      	cmp	r5, #4
 800827c:	f47f af44 	bne.w	8008108 <_scanf_float+0x64>
 8008280:	3501      	adds	r5, #1
 8008282:	b2ed      	uxtb	r5, r5
 8008284:	e7d7      	b.n	8008236 <_scanf_float+0x192>
 8008286:	f1ba 0f01 	cmp.w	sl, #1
 800828a:	f47f af3d 	bne.w	8008108 <_scanf_float+0x64>
 800828e:	f04f 0a02 	mov.w	sl, #2
 8008292:	e7d0      	b.n	8008236 <_scanf_float+0x192>
 8008294:	b97d      	cbnz	r5, 80082b6 <_scanf_float+0x212>
 8008296:	f1b9 0f00 	cmp.w	r9, #0
 800829a:	f47f af38 	bne.w	800810e <_scanf_float+0x6a>
 800829e:	6822      	ldr	r2, [r4, #0]
 80082a0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80082a4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80082a8:	f040 8107 	bne.w	80084ba <_scanf_float+0x416>
 80082ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80082b0:	2501      	movs	r5, #1
 80082b2:	6022      	str	r2, [r4, #0]
 80082b4:	e7bf      	b.n	8008236 <_scanf_float+0x192>
 80082b6:	2d03      	cmp	r5, #3
 80082b8:	d0e2      	beq.n	8008280 <_scanf_float+0x1dc>
 80082ba:	2d05      	cmp	r5, #5
 80082bc:	e7de      	b.n	800827c <_scanf_float+0x1d8>
 80082be:	2d02      	cmp	r5, #2
 80082c0:	f47f af22 	bne.w	8008108 <_scanf_float+0x64>
 80082c4:	2503      	movs	r5, #3
 80082c6:	e7b6      	b.n	8008236 <_scanf_float+0x192>
 80082c8:	2d06      	cmp	r5, #6
 80082ca:	f47f af1d 	bne.w	8008108 <_scanf_float+0x64>
 80082ce:	2507      	movs	r5, #7
 80082d0:	e7b1      	b.n	8008236 <_scanf_float+0x192>
 80082d2:	6822      	ldr	r2, [r4, #0]
 80082d4:	0591      	lsls	r1, r2, #22
 80082d6:	f57f af17 	bpl.w	8008108 <_scanf_float+0x64>
 80082da:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80082de:	f8cd 9008 	str.w	r9, [sp, #8]
 80082e2:	6022      	str	r2, [r4, #0]
 80082e4:	e7a7      	b.n	8008236 <_scanf_float+0x192>
 80082e6:	6822      	ldr	r2, [r4, #0]
 80082e8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80082ec:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80082f0:	d006      	beq.n	8008300 <_scanf_float+0x25c>
 80082f2:	0550      	lsls	r0, r2, #21
 80082f4:	f57f af08 	bpl.w	8008108 <_scanf_float+0x64>
 80082f8:	f1b9 0f00 	cmp.w	r9, #0
 80082fc:	f000 80dd 	beq.w	80084ba <_scanf_float+0x416>
 8008300:	0591      	lsls	r1, r2, #22
 8008302:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008306:	bf58      	it	pl
 8008308:	9902      	ldrpl	r1, [sp, #8]
 800830a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800830e:	bf58      	it	pl
 8008310:	eba9 0101 	subpl.w	r1, r9, r1
 8008314:	6022      	str	r2, [r4, #0]
 8008316:	f04f 0900 	mov.w	r9, #0
 800831a:	bf58      	it	pl
 800831c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008320:	e789      	b.n	8008236 <_scanf_float+0x192>
 8008322:	f04f 0a03 	mov.w	sl, #3
 8008326:	e786      	b.n	8008236 <_scanf_float+0x192>
 8008328:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800832c:	4639      	mov	r1, r7
 800832e:	4640      	mov	r0, r8
 8008330:	4798      	blx	r3
 8008332:	2800      	cmp	r0, #0
 8008334:	f43f aedb 	beq.w	80080ee <_scanf_float+0x4a>
 8008338:	e6e6      	b.n	8008108 <_scanf_float+0x64>
 800833a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800833e:	463a      	mov	r2, r7
 8008340:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008344:	4640      	mov	r0, r8
 8008346:	4798      	blx	r3
 8008348:	6923      	ldr	r3, [r4, #16]
 800834a:	3b01      	subs	r3, #1
 800834c:	6123      	str	r3, [r4, #16]
 800834e:	e6e8      	b.n	8008122 <_scanf_float+0x7e>
 8008350:	1e6b      	subs	r3, r5, #1
 8008352:	2b06      	cmp	r3, #6
 8008354:	d824      	bhi.n	80083a0 <_scanf_float+0x2fc>
 8008356:	2d02      	cmp	r5, #2
 8008358:	d836      	bhi.n	80083c8 <_scanf_float+0x324>
 800835a:	9b01      	ldr	r3, [sp, #4]
 800835c:	429e      	cmp	r6, r3
 800835e:	f67f aee4 	bls.w	800812a <_scanf_float+0x86>
 8008362:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008366:	463a      	mov	r2, r7
 8008368:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800836c:	4640      	mov	r0, r8
 800836e:	4798      	blx	r3
 8008370:	6923      	ldr	r3, [r4, #16]
 8008372:	3b01      	subs	r3, #1
 8008374:	6123      	str	r3, [r4, #16]
 8008376:	e7f0      	b.n	800835a <_scanf_float+0x2b6>
 8008378:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800837c:	463a      	mov	r2, r7
 800837e:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008382:	4640      	mov	r0, r8
 8008384:	4798      	blx	r3
 8008386:	6923      	ldr	r3, [r4, #16]
 8008388:	3b01      	subs	r3, #1
 800838a:	6123      	str	r3, [r4, #16]
 800838c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008390:	fa5f fa8a 	uxtb.w	sl, sl
 8008394:	f1ba 0f02 	cmp.w	sl, #2
 8008398:	d1ee      	bne.n	8008378 <_scanf_float+0x2d4>
 800839a:	3d03      	subs	r5, #3
 800839c:	b2ed      	uxtb	r5, r5
 800839e:	1b76      	subs	r6, r6, r5
 80083a0:	6823      	ldr	r3, [r4, #0]
 80083a2:	05da      	lsls	r2, r3, #23
 80083a4:	d52f      	bpl.n	8008406 <_scanf_float+0x362>
 80083a6:	055b      	lsls	r3, r3, #21
 80083a8:	d511      	bpl.n	80083ce <_scanf_float+0x32a>
 80083aa:	9b01      	ldr	r3, [sp, #4]
 80083ac:	429e      	cmp	r6, r3
 80083ae:	f67f aebc 	bls.w	800812a <_scanf_float+0x86>
 80083b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80083b6:	463a      	mov	r2, r7
 80083b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80083bc:	4640      	mov	r0, r8
 80083be:	4798      	blx	r3
 80083c0:	6923      	ldr	r3, [r4, #16]
 80083c2:	3b01      	subs	r3, #1
 80083c4:	6123      	str	r3, [r4, #16]
 80083c6:	e7f0      	b.n	80083aa <_scanf_float+0x306>
 80083c8:	46aa      	mov	sl, r5
 80083ca:	46b3      	mov	fp, r6
 80083cc:	e7de      	b.n	800838c <_scanf_float+0x2e8>
 80083ce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80083d2:	1e75      	subs	r5, r6, #1
 80083d4:	6923      	ldr	r3, [r4, #16]
 80083d6:	2965      	cmp	r1, #101	@ 0x65
 80083d8:	f103 33ff 	add.w	r3, r3, #4294967295
 80083dc:	6123      	str	r3, [r4, #16]
 80083de:	d00c      	beq.n	80083fa <_scanf_float+0x356>
 80083e0:	2945      	cmp	r1, #69	@ 0x45
 80083e2:	d00a      	beq.n	80083fa <_scanf_float+0x356>
 80083e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80083e8:	463a      	mov	r2, r7
 80083ea:	4640      	mov	r0, r8
 80083ec:	1eb5      	subs	r5, r6, #2
 80083ee:	4798      	blx	r3
 80083f0:	6923      	ldr	r3, [r4, #16]
 80083f2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80083f6:	3b01      	subs	r3, #1
 80083f8:	6123      	str	r3, [r4, #16]
 80083fa:	462e      	mov	r6, r5
 80083fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008400:	463a      	mov	r2, r7
 8008402:	4640      	mov	r0, r8
 8008404:	4798      	blx	r3
 8008406:	6822      	ldr	r2, [r4, #0]
 8008408:	f012 0210 	ands.w	r2, r2, #16
 800840c:	d001      	beq.n	8008412 <_scanf_float+0x36e>
 800840e:	2000      	movs	r0, #0
 8008410:	e68c      	b.n	800812c <_scanf_float+0x88>
 8008412:	7032      	strb	r2, [r6, #0]
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800841a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800841e:	d11c      	bne.n	800845a <_scanf_float+0x3b6>
 8008420:	9b02      	ldr	r3, [sp, #8]
 8008422:	454b      	cmp	r3, r9
 8008424:	eba3 0209 	sub.w	r2, r3, r9
 8008428:	d123      	bne.n	8008472 <_scanf_float+0x3ce>
 800842a:	2200      	movs	r2, #0
 800842c:	9901      	ldr	r1, [sp, #4]
 800842e:	4640      	mov	r0, r8
 8008430:	f002 fc16 	bl	800ac60 <_strtod_r>
 8008434:	6821      	ldr	r1, [r4, #0]
 8008436:	9b03      	ldr	r3, [sp, #12]
 8008438:	f011 0f02 	tst.w	r1, #2
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	ec57 6b10 	vmov	r6, r7, d0
 8008442:	f103 0204 	add.w	r2, r3, #4
 8008446:	d01f      	beq.n	8008488 <_scanf_float+0x3e4>
 8008448:	9903      	ldr	r1, [sp, #12]
 800844a:	600a      	str	r2, [r1, #0]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	e9c3 6700 	strd	r6, r7, [r3]
 8008452:	68e3      	ldr	r3, [r4, #12]
 8008454:	3301      	adds	r3, #1
 8008456:	60e3      	str	r3, [r4, #12]
 8008458:	e7d9      	b.n	800840e <_scanf_float+0x36a>
 800845a:	9b04      	ldr	r3, [sp, #16]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d0e4      	beq.n	800842a <_scanf_float+0x386>
 8008460:	9905      	ldr	r1, [sp, #20]
 8008462:	230a      	movs	r3, #10
 8008464:	4640      	mov	r0, r8
 8008466:	3101      	adds	r1, #1
 8008468:	f002 fc7a 	bl	800ad60 <_strtol_r>
 800846c:	9b04      	ldr	r3, [sp, #16]
 800846e:	9e05      	ldr	r6, [sp, #20]
 8008470:	1ac2      	subs	r2, r0, r3
 8008472:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008476:	4912      	ldr	r1, [pc, #72]	@ (80084c0 <_scanf_float+0x41c>)
 8008478:	429e      	cmp	r6, r3
 800847a:	bf28      	it	cs
 800847c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008480:	4630      	mov	r0, r6
 8008482:	f000 f8e3 	bl	800864c <siprintf>
 8008486:	e7d0      	b.n	800842a <_scanf_float+0x386>
 8008488:	f011 0f04 	tst.w	r1, #4
 800848c:	9903      	ldr	r1, [sp, #12]
 800848e:	600a      	str	r2, [r1, #0]
 8008490:	d1dc      	bne.n	800844c <_scanf_float+0x3a8>
 8008492:	681d      	ldr	r5, [r3, #0]
 8008494:	4632      	mov	r2, r6
 8008496:	463b      	mov	r3, r7
 8008498:	4630      	mov	r0, r6
 800849a:	4639      	mov	r1, r7
 800849c:	f7f8 fb5a 	bl	8000b54 <__aeabi_dcmpun>
 80084a0:	b128      	cbz	r0, 80084ae <_scanf_float+0x40a>
 80084a2:	4808      	ldr	r0, [pc, #32]	@ (80084c4 <_scanf_float+0x420>)
 80084a4:	f000 f9c4 	bl	8008830 <nanf>
 80084a8:	ed85 0a00 	vstr	s0, [r5]
 80084ac:	e7d1      	b.n	8008452 <_scanf_float+0x3ae>
 80084ae:	4630      	mov	r0, r6
 80084b0:	4639      	mov	r1, r7
 80084b2:	f7f8 fbad 	bl	8000c10 <__aeabi_d2f>
 80084b6:	6028      	str	r0, [r5, #0]
 80084b8:	e7cb      	b.n	8008452 <_scanf_float+0x3ae>
 80084ba:	f04f 0900 	mov.w	r9, #0
 80084be:	e62a      	b.n	8008116 <_scanf_float+0x72>
 80084c0:	0800bf84 	.word	0x0800bf84
 80084c4:	0800c31d 	.word	0x0800c31d

080084c8 <std>:
 80084c8:	2300      	movs	r3, #0
 80084ca:	b510      	push	{r4, lr}
 80084cc:	4604      	mov	r4, r0
 80084ce:	6083      	str	r3, [r0, #8]
 80084d0:	8181      	strh	r1, [r0, #12]
 80084d2:	4619      	mov	r1, r3
 80084d4:	6643      	str	r3, [r0, #100]	@ 0x64
 80084d6:	81c2      	strh	r2, [r0, #14]
 80084d8:	2208      	movs	r2, #8
 80084da:	6183      	str	r3, [r0, #24]
 80084dc:	e9c0 3300 	strd	r3, r3, [r0]
 80084e0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084e4:	305c      	adds	r0, #92	@ 0x5c
 80084e6:	f000 f914 	bl	8008712 <memset>
 80084ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008520 <std+0x58>)
 80084ec:	6224      	str	r4, [r4, #32]
 80084ee:	6263      	str	r3, [r4, #36]	@ 0x24
 80084f0:	4b0c      	ldr	r3, [pc, #48]	@ (8008524 <std+0x5c>)
 80084f2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80084f4:	4b0c      	ldr	r3, [pc, #48]	@ (8008528 <std+0x60>)
 80084f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80084f8:	4b0c      	ldr	r3, [pc, #48]	@ (800852c <std+0x64>)
 80084fa:	6323      	str	r3, [r4, #48]	@ 0x30
 80084fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008530 <std+0x68>)
 80084fe:	429c      	cmp	r4, r3
 8008500:	d006      	beq.n	8008510 <std+0x48>
 8008502:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008506:	4294      	cmp	r4, r2
 8008508:	d002      	beq.n	8008510 <std+0x48>
 800850a:	33d0      	adds	r3, #208	@ 0xd0
 800850c:	429c      	cmp	r4, r3
 800850e:	d105      	bne.n	800851c <std+0x54>
 8008510:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008518:	f000 b978 	b.w	800880c <__retarget_lock_init_recursive>
 800851c:	bd10      	pop	{r4, pc}
 800851e:	bf00      	nop
 8008520:	0800868d 	.word	0x0800868d
 8008524:	080086af 	.word	0x080086af
 8008528:	080086e7 	.word	0x080086e7
 800852c:	0800870b 	.word	0x0800870b
 8008530:	20000524 	.word	0x20000524

08008534 <stdio_exit_handler>:
 8008534:	4a02      	ldr	r2, [pc, #8]	@ (8008540 <stdio_exit_handler+0xc>)
 8008536:	4903      	ldr	r1, [pc, #12]	@ (8008544 <stdio_exit_handler+0x10>)
 8008538:	4803      	ldr	r0, [pc, #12]	@ (8008548 <stdio_exit_handler+0x14>)
 800853a:	f000 b869 	b.w	8008610 <_fwalk_sglue>
 800853e:	bf00      	nop
 8008540:	20000024 	.word	0x20000024
 8008544:	0800b11d 	.word	0x0800b11d
 8008548:	20000034 	.word	0x20000034

0800854c <cleanup_stdio>:
 800854c:	6841      	ldr	r1, [r0, #4]
 800854e:	4b0c      	ldr	r3, [pc, #48]	@ (8008580 <cleanup_stdio+0x34>)
 8008550:	4299      	cmp	r1, r3
 8008552:	b510      	push	{r4, lr}
 8008554:	4604      	mov	r4, r0
 8008556:	d001      	beq.n	800855c <cleanup_stdio+0x10>
 8008558:	f002 fde0 	bl	800b11c <_fflush_r>
 800855c:	68a1      	ldr	r1, [r4, #8]
 800855e:	4b09      	ldr	r3, [pc, #36]	@ (8008584 <cleanup_stdio+0x38>)
 8008560:	4299      	cmp	r1, r3
 8008562:	d002      	beq.n	800856a <cleanup_stdio+0x1e>
 8008564:	4620      	mov	r0, r4
 8008566:	f002 fdd9 	bl	800b11c <_fflush_r>
 800856a:	68e1      	ldr	r1, [r4, #12]
 800856c:	4b06      	ldr	r3, [pc, #24]	@ (8008588 <cleanup_stdio+0x3c>)
 800856e:	4299      	cmp	r1, r3
 8008570:	d004      	beq.n	800857c <cleanup_stdio+0x30>
 8008572:	4620      	mov	r0, r4
 8008574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008578:	f002 bdd0 	b.w	800b11c <_fflush_r>
 800857c:	bd10      	pop	{r4, pc}
 800857e:	bf00      	nop
 8008580:	20000524 	.word	0x20000524
 8008584:	2000058c 	.word	0x2000058c
 8008588:	200005f4 	.word	0x200005f4

0800858c <global_stdio_init.part.0>:
 800858c:	b510      	push	{r4, lr}
 800858e:	4b0b      	ldr	r3, [pc, #44]	@ (80085bc <global_stdio_init.part.0+0x30>)
 8008590:	2104      	movs	r1, #4
 8008592:	4c0b      	ldr	r4, [pc, #44]	@ (80085c0 <global_stdio_init.part.0+0x34>)
 8008594:	4a0b      	ldr	r2, [pc, #44]	@ (80085c4 <global_stdio_init.part.0+0x38>)
 8008596:	4620      	mov	r0, r4
 8008598:	601a      	str	r2, [r3, #0]
 800859a:	2200      	movs	r2, #0
 800859c:	f7ff ff94 	bl	80084c8 <std>
 80085a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80085a4:	2201      	movs	r2, #1
 80085a6:	2109      	movs	r1, #9
 80085a8:	f7ff ff8e 	bl	80084c8 <std>
 80085ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80085b0:	2202      	movs	r2, #2
 80085b2:	2112      	movs	r1, #18
 80085b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085b8:	f7ff bf86 	b.w	80084c8 <std>
 80085bc:	2000065c 	.word	0x2000065c
 80085c0:	20000524 	.word	0x20000524
 80085c4:	08008535 	.word	0x08008535

080085c8 <__sfp_lock_acquire>:
 80085c8:	4801      	ldr	r0, [pc, #4]	@ (80085d0 <__sfp_lock_acquire+0x8>)
 80085ca:	f000 b920 	b.w	800880e <__retarget_lock_acquire_recursive>
 80085ce:	bf00      	nop
 80085d0:	20000665 	.word	0x20000665

080085d4 <__sfp_lock_release>:
 80085d4:	4801      	ldr	r0, [pc, #4]	@ (80085dc <__sfp_lock_release+0x8>)
 80085d6:	f000 b91b 	b.w	8008810 <__retarget_lock_release_recursive>
 80085da:	bf00      	nop
 80085dc:	20000665 	.word	0x20000665

080085e0 <__sinit>:
 80085e0:	b510      	push	{r4, lr}
 80085e2:	4604      	mov	r4, r0
 80085e4:	f7ff fff0 	bl	80085c8 <__sfp_lock_acquire>
 80085e8:	6a23      	ldr	r3, [r4, #32]
 80085ea:	b11b      	cbz	r3, 80085f4 <__sinit+0x14>
 80085ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085f0:	f7ff bff0 	b.w	80085d4 <__sfp_lock_release>
 80085f4:	4b04      	ldr	r3, [pc, #16]	@ (8008608 <__sinit+0x28>)
 80085f6:	6223      	str	r3, [r4, #32]
 80085f8:	4b04      	ldr	r3, [pc, #16]	@ (800860c <__sinit+0x2c>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1f5      	bne.n	80085ec <__sinit+0xc>
 8008600:	f7ff ffc4 	bl	800858c <global_stdio_init.part.0>
 8008604:	e7f2      	b.n	80085ec <__sinit+0xc>
 8008606:	bf00      	nop
 8008608:	0800854d 	.word	0x0800854d
 800860c:	2000065c 	.word	0x2000065c

08008610 <_fwalk_sglue>:
 8008610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008614:	4607      	mov	r7, r0
 8008616:	4688      	mov	r8, r1
 8008618:	4614      	mov	r4, r2
 800861a:	2600      	movs	r6, #0
 800861c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008620:	f1b9 0901 	subs.w	r9, r9, #1
 8008624:	d505      	bpl.n	8008632 <_fwalk_sglue+0x22>
 8008626:	6824      	ldr	r4, [r4, #0]
 8008628:	2c00      	cmp	r4, #0
 800862a:	d1f7      	bne.n	800861c <_fwalk_sglue+0xc>
 800862c:	4630      	mov	r0, r6
 800862e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008632:	89ab      	ldrh	r3, [r5, #12]
 8008634:	2b01      	cmp	r3, #1
 8008636:	d907      	bls.n	8008648 <_fwalk_sglue+0x38>
 8008638:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800863c:	3301      	adds	r3, #1
 800863e:	d003      	beq.n	8008648 <_fwalk_sglue+0x38>
 8008640:	4629      	mov	r1, r5
 8008642:	4638      	mov	r0, r7
 8008644:	47c0      	blx	r8
 8008646:	4306      	orrs	r6, r0
 8008648:	3568      	adds	r5, #104	@ 0x68
 800864a:	e7e9      	b.n	8008620 <_fwalk_sglue+0x10>

0800864c <siprintf>:
 800864c:	b40e      	push	{r1, r2, r3}
 800864e:	b500      	push	{lr}
 8008650:	b09c      	sub	sp, #112	@ 0x70
 8008652:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008656:	ab1d      	add	r3, sp, #116	@ 0x74
 8008658:	9002      	str	r0, [sp, #8]
 800865a:	9006      	str	r0, [sp, #24]
 800865c:	9107      	str	r1, [sp, #28]
 800865e:	9104      	str	r1, [sp, #16]
 8008660:	4808      	ldr	r0, [pc, #32]	@ (8008684 <siprintf+0x38>)
 8008662:	4909      	ldr	r1, [pc, #36]	@ (8008688 <siprintf+0x3c>)
 8008664:	f853 2b04 	ldr.w	r2, [r3], #4
 8008668:	9105      	str	r1, [sp, #20]
 800866a:	a902      	add	r1, sp, #8
 800866c:	6800      	ldr	r0, [r0, #0]
 800866e:	9301      	str	r3, [sp, #4]
 8008670:	f002 fbd4 	bl	800ae1c <_svfiprintf_r>
 8008674:	9b02      	ldr	r3, [sp, #8]
 8008676:	2200      	movs	r2, #0
 8008678:	701a      	strb	r2, [r3, #0]
 800867a:	b01c      	add	sp, #112	@ 0x70
 800867c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008680:	b003      	add	sp, #12
 8008682:	4770      	bx	lr
 8008684:	20000030 	.word	0x20000030
 8008688:	ffff0208 	.word	0xffff0208

0800868c <__sread>:
 800868c:	b510      	push	{r4, lr}
 800868e:	460c      	mov	r4, r1
 8008690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008694:	f000 f86c 	bl	8008770 <_read_r>
 8008698:	2800      	cmp	r0, #0
 800869a:	bfab      	itete	ge
 800869c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800869e:	89a3      	ldrhlt	r3, [r4, #12]
 80086a0:	181b      	addge	r3, r3, r0
 80086a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80086a6:	bfac      	ite	ge
 80086a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80086aa:	81a3      	strhlt	r3, [r4, #12]
 80086ac:	bd10      	pop	{r4, pc}

080086ae <__swrite>:
 80086ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086b2:	461f      	mov	r7, r3
 80086b4:	898b      	ldrh	r3, [r1, #12]
 80086b6:	4605      	mov	r5, r0
 80086b8:	460c      	mov	r4, r1
 80086ba:	05db      	lsls	r3, r3, #23
 80086bc:	4616      	mov	r6, r2
 80086be:	d505      	bpl.n	80086cc <__swrite+0x1e>
 80086c0:	2302      	movs	r3, #2
 80086c2:	2200      	movs	r2, #0
 80086c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086c8:	f000 f840 	bl	800874c <_lseek_r>
 80086cc:	89a3      	ldrh	r3, [r4, #12]
 80086ce:	4632      	mov	r2, r6
 80086d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086d4:	4628      	mov	r0, r5
 80086d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80086da:	81a3      	strh	r3, [r4, #12]
 80086dc:	463b      	mov	r3, r7
 80086de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086e2:	f000 b857 	b.w	8008794 <_write_r>

080086e6 <__sseek>:
 80086e6:	b510      	push	{r4, lr}
 80086e8:	460c      	mov	r4, r1
 80086ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086ee:	f000 f82d 	bl	800874c <_lseek_r>
 80086f2:	1c43      	adds	r3, r0, #1
 80086f4:	89a3      	ldrh	r3, [r4, #12]
 80086f6:	bf15      	itete	ne
 80086f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80086fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80086fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008702:	81a3      	strheq	r3, [r4, #12]
 8008704:	bf18      	it	ne
 8008706:	81a3      	strhne	r3, [r4, #12]
 8008708:	bd10      	pop	{r4, pc}

0800870a <__sclose>:
 800870a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800870e:	f000 b80d 	b.w	800872c <_close_r>

08008712 <memset>:
 8008712:	4402      	add	r2, r0
 8008714:	4603      	mov	r3, r0
 8008716:	4293      	cmp	r3, r2
 8008718:	d100      	bne.n	800871c <memset+0xa>
 800871a:	4770      	bx	lr
 800871c:	f803 1b01 	strb.w	r1, [r3], #1
 8008720:	e7f9      	b.n	8008716 <memset+0x4>
	...

08008724 <_localeconv_r>:
 8008724:	4800      	ldr	r0, [pc, #0]	@ (8008728 <_localeconv_r+0x4>)
 8008726:	4770      	bx	lr
 8008728:	20000170 	.word	0x20000170

0800872c <_close_r>:
 800872c:	b538      	push	{r3, r4, r5, lr}
 800872e:	2300      	movs	r3, #0
 8008730:	4d05      	ldr	r5, [pc, #20]	@ (8008748 <_close_r+0x1c>)
 8008732:	4604      	mov	r4, r0
 8008734:	4608      	mov	r0, r1
 8008736:	602b      	str	r3, [r5, #0]
 8008738:	f7f9 faa9 	bl	8001c8e <_close>
 800873c:	1c43      	adds	r3, r0, #1
 800873e:	d102      	bne.n	8008746 <_close_r+0x1a>
 8008740:	682b      	ldr	r3, [r5, #0]
 8008742:	b103      	cbz	r3, 8008746 <_close_r+0x1a>
 8008744:	6023      	str	r3, [r4, #0]
 8008746:	bd38      	pop	{r3, r4, r5, pc}
 8008748:	20000660 	.word	0x20000660

0800874c <_lseek_r>:
 800874c:	b538      	push	{r3, r4, r5, lr}
 800874e:	4604      	mov	r4, r0
 8008750:	4d06      	ldr	r5, [pc, #24]	@ (800876c <_lseek_r+0x20>)
 8008752:	4608      	mov	r0, r1
 8008754:	4611      	mov	r1, r2
 8008756:	2200      	movs	r2, #0
 8008758:	602a      	str	r2, [r5, #0]
 800875a:	461a      	mov	r2, r3
 800875c:	f7f9 fabe 	bl	8001cdc <_lseek>
 8008760:	1c43      	adds	r3, r0, #1
 8008762:	d102      	bne.n	800876a <_lseek_r+0x1e>
 8008764:	682b      	ldr	r3, [r5, #0]
 8008766:	b103      	cbz	r3, 800876a <_lseek_r+0x1e>
 8008768:	6023      	str	r3, [r4, #0]
 800876a:	bd38      	pop	{r3, r4, r5, pc}
 800876c:	20000660 	.word	0x20000660

08008770 <_read_r>:
 8008770:	b538      	push	{r3, r4, r5, lr}
 8008772:	4604      	mov	r4, r0
 8008774:	4d06      	ldr	r5, [pc, #24]	@ (8008790 <_read_r+0x20>)
 8008776:	4608      	mov	r0, r1
 8008778:	4611      	mov	r1, r2
 800877a:	2200      	movs	r2, #0
 800877c:	602a      	str	r2, [r5, #0]
 800877e:	461a      	mov	r2, r3
 8008780:	f7f9 fa4c 	bl	8001c1c <_read>
 8008784:	1c43      	adds	r3, r0, #1
 8008786:	d102      	bne.n	800878e <_read_r+0x1e>
 8008788:	682b      	ldr	r3, [r5, #0]
 800878a:	b103      	cbz	r3, 800878e <_read_r+0x1e>
 800878c:	6023      	str	r3, [r4, #0]
 800878e:	bd38      	pop	{r3, r4, r5, pc}
 8008790:	20000660 	.word	0x20000660

08008794 <_write_r>:
 8008794:	b538      	push	{r3, r4, r5, lr}
 8008796:	4604      	mov	r4, r0
 8008798:	4d06      	ldr	r5, [pc, #24]	@ (80087b4 <_write_r+0x20>)
 800879a:	4608      	mov	r0, r1
 800879c:	4611      	mov	r1, r2
 800879e:	2200      	movs	r2, #0
 80087a0:	602a      	str	r2, [r5, #0]
 80087a2:	461a      	mov	r2, r3
 80087a4:	f7f9 fa57 	bl	8001c56 <_write>
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	d102      	bne.n	80087b2 <_write_r+0x1e>
 80087ac:	682b      	ldr	r3, [r5, #0]
 80087ae:	b103      	cbz	r3, 80087b2 <_write_r+0x1e>
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	bd38      	pop	{r3, r4, r5, pc}
 80087b4:	20000660 	.word	0x20000660

080087b8 <__errno>:
 80087b8:	4b01      	ldr	r3, [pc, #4]	@ (80087c0 <__errno+0x8>)
 80087ba:	6818      	ldr	r0, [r3, #0]
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	20000030 	.word	0x20000030

080087c4 <__libc_init_array>:
 80087c4:	b570      	push	{r4, r5, r6, lr}
 80087c6:	4d0d      	ldr	r5, [pc, #52]	@ (80087fc <__libc_init_array+0x38>)
 80087c8:	2600      	movs	r6, #0
 80087ca:	4c0d      	ldr	r4, [pc, #52]	@ (8008800 <__libc_init_array+0x3c>)
 80087cc:	1b64      	subs	r4, r4, r5
 80087ce:	10a4      	asrs	r4, r4, #2
 80087d0:	42a6      	cmp	r6, r4
 80087d2:	d109      	bne.n	80087e8 <__libc_init_array+0x24>
 80087d4:	4d0b      	ldr	r5, [pc, #44]	@ (8008804 <__libc_init_array+0x40>)
 80087d6:	2600      	movs	r6, #0
 80087d8:	4c0b      	ldr	r4, [pc, #44]	@ (8008808 <__libc_init_array+0x44>)
 80087da:	f003 fb8b 	bl	800bef4 <_init>
 80087de:	1b64      	subs	r4, r4, r5
 80087e0:	10a4      	asrs	r4, r4, #2
 80087e2:	42a6      	cmp	r6, r4
 80087e4:	d105      	bne.n	80087f2 <__libc_init_array+0x2e>
 80087e6:	bd70      	pop	{r4, r5, r6, pc}
 80087e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ec:	3601      	adds	r6, #1
 80087ee:	4798      	blx	r3
 80087f0:	e7ee      	b.n	80087d0 <__libc_init_array+0xc>
 80087f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80087f6:	3601      	adds	r6, #1
 80087f8:	4798      	blx	r3
 80087fa:	e7f2      	b.n	80087e2 <__libc_init_array+0x1e>
 80087fc:	0800c388 	.word	0x0800c388
 8008800:	0800c388 	.word	0x0800c388
 8008804:	0800c388 	.word	0x0800c388
 8008808:	0800c38c 	.word	0x0800c38c

0800880c <__retarget_lock_init_recursive>:
 800880c:	4770      	bx	lr

0800880e <__retarget_lock_acquire_recursive>:
 800880e:	4770      	bx	lr

08008810 <__retarget_lock_release_recursive>:
 8008810:	4770      	bx	lr

08008812 <memchr>:
 8008812:	b2c9      	uxtb	r1, r1
 8008814:	4603      	mov	r3, r0
 8008816:	4402      	add	r2, r0
 8008818:	b510      	push	{r4, lr}
 800881a:	4293      	cmp	r3, r2
 800881c:	4618      	mov	r0, r3
 800881e:	d101      	bne.n	8008824 <memchr+0x12>
 8008820:	2000      	movs	r0, #0
 8008822:	e003      	b.n	800882c <memchr+0x1a>
 8008824:	7804      	ldrb	r4, [r0, #0]
 8008826:	3301      	adds	r3, #1
 8008828:	428c      	cmp	r4, r1
 800882a:	d1f6      	bne.n	800881a <memchr+0x8>
 800882c:	bd10      	pop	{r4, pc}
	...

08008830 <nanf>:
 8008830:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008838 <nanf+0x8>
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	7fc00000 	.word	0x7fc00000

0800883c <quorem>:
 800883c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008840:	6903      	ldr	r3, [r0, #16]
 8008842:	4607      	mov	r7, r0
 8008844:	690c      	ldr	r4, [r1, #16]
 8008846:	42a3      	cmp	r3, r4
 8008848:	f2c0 8083 	blt.w	8008952 <quorem+0x116>
 800884c:	3c01      	subs	r4, #1
 800884e:	f100 0514 	add.w	r5, r0, #20
 8008852:	f101 0814 	add.w	r8, r1, #20
 8008856:	00a3      	lsls	r3, r4, #2
 8008858:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800885c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008866:	9301      	str	r3, [sp, #4]
 8008868:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800886c:	3301      	adds	r3, #1
 800886e:	429a      	cmp	r2, r3
 8008870:	fbb2 f6f3 	udiv	r6, r2, r3
 8008874:	d331      	bcc.n	80088da <quorem+0x9e>
 8008876:	f04f 0a00 	mov.w	sl, #0
 800887a:	46c4      	mov	ip, r8
 800887c:	46ae      	mov	lr, r5
 800887e:	46d3      	mov	fp, sl
 8008880:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008884:	b298      	uxth	r0, r3
 8008886:	45e1      	cmp	r9, ip
 8008888:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800888c:	fb06 a000 	mla	r0, r6, r0, sl
 8008890:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8008894:	b280      	uxth	r0, r0
 8008896:	fb06 2303 	mla	r3, r6, r3, r2
 800889a:	f8de 2000 	ldr.w	r2, [lr]
 800889e:	b292      	uxth	r2, r2
 80088a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088a4:	eba2 0200 	sub.w	r2, r2, r0
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	f8de 0000 	ldr.w	r0, [lr]
 80088ae:	445a      	add	r2, fp
 80088b0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80088b4:	b292      	uxth	r2, r2
 80088b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80088ba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80088be:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80088c2:	f84e 2b04 	str.w	r2, [lr], #4
 80088c6:	d2db      	bcs.n	8008880 <quorem+0x44>
 80088c8:	9b00      	ldr	r3, [sp, #0]
 80088ca:	58eb      	ldr	r3, [r5, r3]
 80088cc:	b92b      	cbnz	r3, 80088da <quorem+0x9e>
 80088ce:	9b01      	ldr	r3, [sp, #4]
 80088d0:	3b04      	subs	r3, #4
 80088d2:	429d      	cmp	r5, r3
 80088d4:	461a      	mov	r2, r3
 80088d6:	d330      	bcc.n	800893a <quorem+0xfe>
 80088d8:	613c      	str	r4, [r7, #16]
 80088da:	4638      	mov	r0, r7
 80088dc:	f001 f9c6 	bl	8009c6c <__mcmp>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	db26      	blt.n	8008932 <quorem+0xf6>
 80088e4:	4629      	mov	r1, r5
 80088e6:	2000      	movs	r0, #0
 80088e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80088ec:	f8d1 c000 	ldr.w	ip, [r1]
 80088f0:	fa1f fe82 	uxth.w	lr, r2
 80088f4:	45c1      	cmp	r9, r8
 80088f6:	fa1f f38c 	uxth.w	r3, ip
 80088fa:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80088fe:	eba3 030e 	sub.w	r3, r3, lr
 8008902:	4403      	add	r3, r0
 8008904:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008908:	b29b      	uxth	r3, r3
 800890a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800890e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008912:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008916:	f841 3b04 	str.w	r3, [r1], #4
 800891a:	d2e5      	bcs.n	80088e8 <quorem+0xac>
 800891c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008920:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008924:	b922      	cbnz	r2, 8008930 <quorem+0xf4>
 8008926:	3b04      	subs	r3, #4
 8008928:	429d      	cmp	r5, r3
 800892a:	461a      	mov	r2, r3
 800892c:	d30b      	bcc.n	8008946 <quorem+0x10a>
 800892e:	613c      	str	r4, [r7, #16]
 8008930:	3601      	adds	r6, #1
 8008932:	4630      	mov	r0, r6
 8008934:	b003      	add	sp, #12
 8008936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800893a:	6812      	ldr	r2, [r2, #0]
 800893c:	3b04      	subs	r3, #4
 800893e:	2a00      	cmp	r2, #0
 8008940:	d1ca      	bne.n	80088d8 <quorem+0x9c>
 8008942:	3c01      	subs	r4, #1
 8008944:	e7c5      	b.n	80088d2 <quorem+0x96>
 8008946:	6812      	ldr	r2, [r2, #0]
 8008948:	3b04      	subs	r3, #4
 800894a:	2a00      	cmp	r2, #0
 800894c:	d1ef      	bne.n	800892e <quorem+0xf2>
 800894e:	3c01      	subs	r4, #1
 8008950:	e7ea      	b.n	8008928 <quorem+0xec>
 8008952:	2000      	movs	r0, #0
 8008954:	e7ee      	b.n	8008934 <quorem+0xf8>
	...

08008958 <_dtoa_r>:
 8008958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800895c:	69c7      	ldr	r7, [r0, #28]
 800895e:	b099      	sub	sp, #100	@ 0x64
 8008960:	4683      	mov	fp, r0
 8008962:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008964:	9109      	str	r1, [sp, #36]	@ 0x24
 8008966:	920e      	str	r2, [sp, #56]	@ 0x38
 8008968:	9313      	str	r3, [sp, #76]	@ 0x4c
 800896a:	ec55 4b10 	vmov	r4, r5, d0
 800896e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008972:	b97f      	cbnz	r7, 8008994 <_dtoa_r+0x3c>
 8008974:	2010      	movs	r0, #16
 8008976:	f000 fdfd 	bl	8009574 <malloc>
 800897a:	4602      	mov	r2, r0
 800897c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008980:	b920      	cbnz	r0, 800898c <_dtoa_r+0x34>
 8008982:	4ba7      	ldr	r3, [pc, #668]	@ (8008c20 <_dtoa_r+0x2c8>)
 8008984:	21ef      	movs	r1, #239	@ 0xef
 8008986:	48a7      	ldr	r0, [pc, #668]	@ (8008c24 <_dtoa_r+0x2cc>)
 8008988:	f002 fc42 	bl	800b210 <__assert_func>
 800898c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008990:	6007      	str	r7, [r0, #0]
 8008992:	60c7      	str	r7, [r0, #12]
 8008994:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008998:	6819      	ldr	r1, [r3, #0]
 800899a:	b159      	cbz	r1, 80089b4 <_dtoa_r+0x5c>
 800899c:	685a      	ldr	r2, [r3, #4]
 800899e:	2301      	movs	r3, #1
 80089a0:	4658      	mov	r0, fp
 80089a2:	4093      	lsls	r3, r2
 80089a4:	604a      	str	r2, [r1, #4]
 80089a6:	608b      	str	r3, [r1, #8]
 80089a8:	f000 feda 	bl	8009760 <_Bfree>
 80089ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80089b0:	2200      	movs	r2, #0
 80089b2:	601a      	str	r2, [r3, #0]
 80089b4:	1e2b      	subs	r3, r5, #0
 80089b6:	bfb7      	itett	lt
 80089b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80089bc:	2300      	movge	r3, #0
 80089be:	2201      	movlt	r2, #1
 80089c0:	9303      	strlt	r3, [sp, #12]
 80089c2:	bfa8      	it	ge
 80089c4:	6033      	strge	r3, [r6, #0]
 80089c6:	9f03      	ldr	r7, [sp, #12]
 80089c8:	4b97      	ldr	r3, [pc, #604]	@ (8008c28 <_dtoa_r+0x2d0>)
 80089ca:	bfb8      	it	lt
 80089cc:	6032      	strlt	r2, [r6, #0]
 80089ce:	43bb      	bics	r3, r7
 80089d0:	d112      	bne.n	80089f8 <_dtoa_r+0xa0>
 80089d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80089d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80089d8:	6013      	str	r3, [r2, #0]
 80089da:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80089de:	4323      	orrs	r3, r4
 80089e0:	f000 854c 	beq.w	800947c <_dtoa_r+0xb24>
 80089e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80089e6:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008c3c <_dtoa_r+0x2e4>
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f000 854e 	beq.w	800948c <_dtoa_r+0xb34>
 80089f0:	f10a 0303 	add.w	r3, sl, #3
 80089f4:	f000 bd48 	b.w	8009488 <_dtoa_r+0xb30>
 80089f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80089fc:	2200      	movs	r2, #0
 80089fe:	2300      	movs	r3, #0
 8008a00:	ec51 0b17 	vmov	r0, r1, d7
 8008a04:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008a08:	f7f8 f872 	bl	8000af0 <__aeabi_dcmpeq>
 8008a0c:	4680      	mov	r8, r0
 8008a0e:	b158      	cbz	r0, 8008a28 <_dtoa_r+0xd0>
 8008a10:	2301      	movs	r3, #1
 8008a12:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008a14:	6013      	str	r3, [r2, #0]
 8008a16:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a18:	b113      	cbz	r3, 8008a20 <_dtoa_r+0xc8>
 8008a1a:	4b84      	ldr	r3, [pc, #528]	@ (8008c2c <_dtoa_r+0x2d4>)
 8008a1c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008a1e:	6013      	str	r3, [r2, #0]
 8008a20:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8008c40 <_dtoa_r+0x2e8>
 8008a24:	f000 bd32 	b.w	800948c <_dtoa_r+0xb34>
 8008a28:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008a2c:	aa16      	add	r2, sp, #88	@ 0x58
 8008a2e:	a917      	add	r1, sp, #92	@ 0x5c
 8008a30:	4658      	mov	r0, fp
 8008a32:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008a36:	f001 fa41 	bl	8009ebc <__d2b>
 8008a3a:	4681      	mov	r9, r0
 8008a3c:	2e00      	cmp	r6, #0
 8008a3e:	d075      	beq.n	8008b2c <_dtoa_r+0x1d4>
 8008a40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a42:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008a46:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008a4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a4e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008a52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a56:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	4b74      	ldr	r3, [pc, #464]	@ (8008c30 <_dtoa_r+0x2d8>)
 8008a60:	f7f7 fc26 	bl	80002b0 <__aeabi_dsub>
 8008a64:	a368      	add	r3, pc, #416	@ (adr r3, 8008c08 <_dtoa_r+0x2b0>)
 8008a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6a:	f7f7 fdd9 	bl	8000620 <__aeabi_dmul>
 8008a6e:	a368      	add	r3, pc, #416	@ (adr r3, 8008c10 <_dtoa_r+0x2b8>)
 8008a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a74:	f7f7 fc1e 	bl	80002b4 <__adddf3>
 8008a78:	4604      	mov	r4, r0
 8008a7a:	460d      	mov	r5, r1
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	f7f7 fd65 	bl	800054c <__aeabi_i2d>
 8008a82:	a365      	add	r3, pc, #404	@ (adr r3, 8008c18 <_dtoa_r+0x2c0>)
 8008a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a88:	f7f7 fdca 	bl	8000620 <__aeabi_dmul>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	460b      	mov	r3, r1
 8008a90:	4620      	mov	r0, r4
 8008a92:	4629      	mov	r1, r5
 8008a94:	f7f7 fc0e 	bl	80002b4 <__adddf3>
 8008a98:	4604      	mov	r4, r0
 8008a9a:	460d      	mov	r5, r1
 8008a9c:	f7f8 f870 	bl	8000b80 <__aeabi_d2iz>
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	4607      	mov	r7, r0
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	f7f8 f82b 	bl	8000b04 <__aeabi_dcmplt>
 8008aae:	b140      	cbz	r0, 8008ac2 <_dtoa_r+0x16a>
 8008ab0:	4638      	mov	r0, r7
 8008ab2:	f7f7 fd4b 	bl	800054c <__aeabi_i2d>
 8008ab6:	4622      	mov	r2, r4
 8008ab8:	462b      	mov	r3, r5
 8008aba:	f7f8 f819 	bl	8000af0 <__aeabi_dcmpeq>
 8008abe:	b900      	cbnz	r0, 8008ac2 <_dtoa_r+0x16a>
 8008ac0:	3f01      	subs	r7, #1
 8008ac2:	2f16      	cmp	r7, #22
 8008ac4:	d851      	bhi.n	8008b6a <_dtoa_r+0x212>
 8008ac6:	4b5b      	ldr	r3, [pc, #364]	@ (8008c34 <_dtoa_r+0x2dc>)
 8008ac8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008acc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad4:	f7f8 f816 	bl	8000b04 <__aeabi_dcmplt>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	d048      	beq.n	8008b6e <_dtoa_r+0x216>
 8008adc:	3f01      	subs	r7, #1
 8008ade:	2300      	movs	r3, #0
 8008ae0:	9312      	str	r3, [sp, #72]	@ 0x48
 8008ae2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008ae4:	1b9b      	subs	r3, r3, r6
 8008ae6:	1e5a      	subs	r2, r3, #1
 8008ae8:	bf46      	itte	mi
 8008aea:	f1c3 0801 	rsbmi	r8, r3, #1
 8008aee:	2300      	movmi	r3, #0
 8008af0:	f04f 0800 	movpl.w	r8, #0
 8008af4:	9208      	str	r2, [sp, #32]
 8008af6:	bf48      	it	mi
 8008af8:	9308      	strmi	r3, [sp, #32]
 8008afa:	2f00      	cmp	r7, #0
 8008afc:	db39      	blt.n	8008b72 <_dtoa_r+0x21a>
 8008afe:	9b08      	ldr	r3, [sp, #32]
 8008b00:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008b02:	443b      	add	r3, r7
 8008b04:	9308      	str	r3, [sp, #32]
 8008b06:	2300      	movs	r3, #0
 8008b08:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b0c:	2b09      	cmp	r3, #9
 8008b0e:	d864      	bhi.n	8008bda <_dtoa_r+0x282>
 8008b10:	2b05      	cmp	r3, #5
 8008b12:	bfc5      	ittet	gt
 8008b14:	3b04      	subgt	r3, #4
 8008b16:	2400      	movgt	r4, #0
 8008b18:	2401      	movle	r4, #1
 8008b1a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008b1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b1e:	3b02      	subs	r3, #2
 8008b20:	2b03      	cmp	r3, #3
 8008b22:	d865      	bhi.n	8008bf0 <_dtoa_r+0x298>
 8008b24:	e8df f003 	tbb	[pc, r3]
 8008b28:	5737392c 	.word	0x5737392c
 8008b2c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008b30:	441e      	add	r6, r3
 8008b32:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008b36:	2b20      	cmp	r3, #32
 8008b38:	bfc9      	itett	gt
 8008b3a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008b3e:	f1c3 0320 	rsble	r3, r3, #32
 8008b42:	409f      	lslgt	r7, r3
 8008b44:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008b48:	bfd8      	it	le
 8008b4a:	fa04 f003 	lslle.w	r0, r4, r3
 8008b4e:	f106 36ff 	add.w	r6, r6, #4294967295
 8008b52:	bfc4      	itt	gt
 8008b54:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008b58:	ea47 0003 	orrgt.w	r0, r7, r3
 8008b5c:	f7f7 fce6 	bl	800052c <__aeabi_ui2d>
 8008b60:	2201      	movs	r2, #1
 8008b62:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008b66:	9214      	str	r2, [sp, #80]	@ 0x50
 8008b68:	e777      	b.n	8008a5a <_dtoa_r+0x102>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e7b8      	b.n	8008ae0 <_dtoa_r+0x188>
 8008b6e:	9012      	str	r0, [sp, #72]	@ 0x48
 8008b70:	e7b7      	b.n	8008ae2 <_dtoa_r+0x18a>
 8008b72:	427b      	negs	r3, r7
 8008b74:	eba8 0807 	sub.w	r8, r8, r7
 8008b78:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008b7e:	e7c4      	b.n	8008b0a <_dtoa_r+0x1b2>
 8008b80:	2300      	movs	r3, #0
 8008b82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	dc35      	bgt.n	8008bf6 <_dtoa_r+0x29e>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	9307      	str	r3, [sp, #28]
 8008b92:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b94:	e00b      	b.n	8008bae <_dtoa_r+0x256>
 8008b96:	2301      	movs	r3, #1
 8008b98:	e7f3      	b.n	8008b82 <_dtoa_r+0x22a>
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ba0:	18fb      	adds	r3, r7, r3
 8008ba2:	9300      	str	r3, [sp, #0]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	9307      	str	r3, [sp, #28]
 8008baa:	bfb8      	it	lt
 8008bac:	2301      	movlt	r3, #1
 8008bae:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	2204      	movs	r2, #4
 8008bb6:	f102 0514 	add.w	r5, r2, #20
 8008bba:	429d      	cmp	r5, r3
 8008bbc:	d91f      	bls.n	8008bfe <_dtoa_r+0x2a6>
 8008bbe:	6041      	str	r1, [r0, #4]
 8008bc0:	4658      	mov	r0, fp
 8008bc2:	f000 fd8d 	bl	80096e0 <_Balloc>
 8008bc6:	4682      	mov	sl, r0
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	d13b      	bne.n	8008c44 <_dtoa_r+0x2ec>
 8008bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8008c38 <_dtoa_r+0x2e0>)
 8008bce:	4602      	mov	r2, r0
 8008bd0:	f240 11af 	movw	r1, #431	@ 0x1af
 8008bd4:	e6d7      	b.n	8008986 <_dtoa_r+0x2e>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e7e0      	b.n	8008b9c <_dtoa_r+0x244>
 8008bda:	2401      	movs	r4, #1
 8008bdc:	2300      	movs	r3, #0
 8008bde:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008be0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008be2:	f04f 33ff 	mov.w	r3, #4294967295
 8008be6:	2200      	movs	r2, #0
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	9307      	str	r3, [sp, #28]
 8008bec:	2312      	movs	r3, #18
 8008bee:	e7d0      	b.n	8008b92 <_dtoa_r+0x23a>
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008bf4:	e7f5      	b.n	8008be2 <_dtoa_r+0x28a>
 8008bf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	9307      	str	r3, [sp, #28]
 8008bfc:	e7d7      	b.n	8008bae <_dtoa_r+0x256>
 8008bfe:	3101      	adds	r1, #1
 8008c00:	0052      	lsls	r2, r2, #1
 8008c02:	e7d8      	b.n	8008bb6 <_dtoa_r+0x25e>
 8008c04:	f3af 8000 	nop.w
 8008c08:	636f4361 	.word	0x636f4361
 8008c0c:	3fd287a7 	.word	0x3fd287a7
 8008c10:	8b60c8b3 	.word	0x8b60c8b3
 8008c14:	3fc68a28 	.word	0x3fc68a28
 8008c18:	509f79fb 	.word	0x509f79fb
 8008c1c:	3fd34413 	.word	0x3fd34413
 8008c20:	0800bf96 	.word	0x0800bf96
 8008c24:	0800bfad 	.word	0x0800bfad
 8008c28:	7ff00000 	.word	0x7ff00000
 8008c2c:	0800bf61 	.word	0x0800bf61
 8008c30:	3ff80000 	.word	0x3ff80000
 8008c34:	0800c0a8 	.word	0x0800c0a8
 8008c38:	0800c005 	.word	0x0800c005
 8008c3c:	0800bf92 	.word	0x0800bf92
 8008c40:	0800bf60 	.word	0x0800bf60
 8008c44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008c48:	6018      	str	r0, [r3, #0]
 8008c4a:	9b07      	ldr	r3, [sp, #28]
 8008c4c:	2b0e      	cmp	r3, #14
 8008c4e:	f200 80a4 	bhi.w	8008d9a <_dtoa_r+0x442>
 8008c52:	2c00      	cmp	r4, #0
 8008c54:	f000 80a1 	beq.w	8008d9a <_dtoa_r+0x442>
 8008c58:	2f00      	cmp	r7, #0
 8008c5a:	dd33      	ble.n	8008cc4 <_dtoa_r+0x36c>
 8008c5c:	f007 020f 	and.w	r2, r7, #15
 8008c60:	4bac      	ldr	r3, [pc, #688]	@ (8008f14 <_dtoa_r+0x5bc>)
 8008c62:	05f8      	lsls	r0, r7, #23
 8008c64:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008c68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c6c:	ed93 7b00 	vldr	d7, [r3]
 8008c70:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008c74:	d516      	bpl.n	8008ca4 <_dtoa_r+0x34c>
 8008c76:	4ba8      	ldr	r3, [pc, #672]	@ (8008f18 <_dtoa_r+0x5c0>)
 8008c78:	f004 040f 	and.w	r4, r4, #15
 8008c7c:	2603      	movs	r6, #3
 8008c7e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c86:	f7f7 fdf5 	bl	8000874 <__aeabi_ddiv>
 8008c8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c8e:	4da2      	ldr	r5, [pc, #648]	@ (8008f18 <_dtoa_r+0x5c0>)
 8008c90:	b954      	cbnz	r4, 8008ca8 <_dtoa_r+0x350>
 8008c92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c9a:	f7f7 fdeb 	bl	8000874 <__aeabi_ddiv>
 8008c9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ca2:	e028      	b.n	8008cf6 <_dtoa_r+0x39e>
 8008ca4:	2602      	movs	r6, #2
 8008ca6:	e7f2      	b.n	8008c8e <_dtoa_r+0x336>
 8008ca8:	07e1      	lsls	r1, r4, #31
 8008caa:	d508      	bpl.n	8008cbe <_dtoa_r+0x366>
 8008cac:	3601      	adds	r6, #1
 8008cae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cb2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008cb6:	f7f7 fcb3 	bl	8000620 <__aeabi_dmul>
 8008cba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cbe:	1064      	asrs	r4, r4, #1
 8008cc0:	3508      	adds	r5, #8
 8008cc2:	e7e5      	b.n	8008c90 <_dtoa_r+0x338>
 8008cc4:	f000 80d2 	beq.w	8008e6c <_dtoa_r+0x514>
 8008cc8:	427c      	negs	r4, r7
 8008cca:	4b92      	ldr	r3, [pc, #584]	@ (8008f14 <_dtoa_r+0x5bc>)
 8008ccc:	4d92      	ldr	r5, [pc, #584]	@ (8008f18 <_dtoa_r+0x5c0>)
 8008cce:	2602      	movs	r6, #2
 8008cd0:	f004 020f 	and.w	r2, r4, #15
 8008cd4:	1124      	asrs	r4, r4, #4
 8008cd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	f7f7 fc9d 	bl	8000620 <__aeabi_dmul>
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cec:	2c00      	cmp	r4, #0
 8008cee:	f040 80b2 	bne.w	8008e56 <_dtoa_r+0x4fe>
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1d3      	bne.n	8008c9e <_dtoa_r+0x346>
 8008cf6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008cf8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f000 80b7 	beq.w	8008e70 <_dtoa_r+0x518>
 8008d02:	2200      	movs	r2, #0
 8008d04:	4b85      	ldr	r3, [pc, #532]	@ (8008f1c <_dtoa_r+0x5c4>)
 8008d06:	4620      	mov	r0, r4
 8008d08:	4629      	mov	r1, r5
 8008d0a:	f7f7 fefb 	bl	8000b04 <__aeabi_dcmplt>
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	f000 80ae 	beq.w	8008e70 <_dtoa_r+0x518>
 8008d14:	9b07      	ldr	r3, [sp, #28]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f000 80aa 	beq.w	8008e70 <_dtoa_r+0x518>
 8008d1c:	9b00      	ldr	r3, [sp, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	dd37      	ble.n	8008d92 <_dtoa_r+0x43a>
 8008d22:	1e7b      	subs	r3, r7, #1
 8008d24:	4620      	mov	r0, r4
 8008d26:	2200      	movs	r2, #0
 8008d28:	4629      	mov	r1, r5
 8008d2a:	9304      	str	r3, [sp, #16]
 8008d2c:	3601      	adds	r6, #1
 8008d2e:	4b7c      	ldr	r3, [pc, #496]	@ (8008f20 <_dtoa_r+0x5c8>)
 8008d30:	f7f7 fc76 	bl	8000620 <__aeabi_dmul>
 8008d34:	9c00      	ldr	r4, [sp, #0]
 8008d36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	f7f7 fc06 	bl	800054c <__aeabi_i2d>
 8008d40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d44:	f7f7 fc6c 	bl	8000620 <__aeabi_dmul>
 8008d48:	2200      	movs	r2, #0
 8008d4a:	4b76      	ldr	r3, [pc, #472]	@ (8008f24 <_dtoa_r+0x5cc>)
 8008d4c:	f7f7 fab2 	bl	80002b4 <__adddf3>
 8008d50:	4605      	mov	r5, r0
 8008d52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008d56:	2c00      	cmp	r4, #0
 8008d58:	f040 808d 	bne.w	8008e76 <_dtoa_r+0x51e>
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	4b72      	ldr	r3, [pc, #456]	@ (8008f28 <_dtoa_r+0x5d0>)
 8008d60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d64:	f7f7 faa4 	bl	80002b0 <__aeabi_dsub>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d70:	462a      	mov	r2, r5
 8008d72:	4633      	mov	r3, r6
 8008d74:	f7f7 fee4 	bl	8000b40 <__aeabi_dcmpgt>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	f040 828b 	bne.w	8009294 <_dtoa_r+0x93c>
 8008d7e:	462a      	mov	r2, r5
 8008d80:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008d84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d88:	f7f7 febc 	bl	8000b04 <__aeabi_dcmplt>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	f040 8128 	bne.w	8008fe2 <_dtoa_r+0x68a>
 8008d92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008d96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008d9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f2c0 815a 	blt.w	8009056 <_dtoa_r+0x6fe>
 8008da2:	2f0e      	cmp	r7, #14
 8008da4:	f300 8157 	bgt.w	8009056 <_dtoa_r+0x6fe>
 8008da8:	4b5a      	ldr	r3, [pc, #360]	@ (8008f14 <_dtoa_r+0x5bc>)
 8008daa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008dae:	ed93 7b00 	vldr	d7, [r3]
 8008db2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	ed8d 7b00 	vstr	d7, [sp]
 8008dba:	da03      	bge.n	8008dc4 <_dtoa_r+0x46c>
 8008dbc:	9b07      	ldr	r3, [sp, #28]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f340 8101 	ble.w	8008fc6 <_dtoa_r+0x66e>
 8008dc4:	4656      	mov	r6, sl
 8008dc6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008dca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008dce:	4620      	mov	r0, r4
 8008dd0:	4629      	mov	r1, r5
 8008dd2:	f7f7 fd4f 	bl	8000874 <__aeabi_ddiv>
 8008dd6:	f7f7 fed3 	bl	8000b80 <__aeabi_d2iz>
 8008dda:	4680      	mov	r8, r0
 8008ddc:	f7f7 fbb6 	bl	800054c <__aeabi_i2d>
 8008de0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008de4:	f7f7 fc1c 	bl	8000620 <__aeabi_dmul>
 8008de8:	4602      	mov	r2, r0
 8008dea:	4620      	mov	r0, r4
 8008dec:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008df0:	460b      	mov	r3, r1
 8008df2:	4629      	mov	r1, r5
 8008df4:	f7f7 fa5c 	bl	80002b0 <__aeabi_dsub>
 8008df8:	9d07      	ldr	r5, [sp, #28]
 8008dfa:	f806 4b01 	strb.w	r4, [r6], #1
 8008dfe:	eba6 040a 	sub.w	r4, r6, sl
 8008e02:	4602      	mov	r2, r0
 8008e04:	460b      	mov	r3, r1
 8008e06:	42a5      	cmp	r5, r4
 8008e08:	f040 8117 	bne.w	800903a <_dtoa_r+0x6e2>
 8008e0c:	f7f7 fa52 	bl	80002b4 <__adddf3>
 8008e10:	4604      	mov	r4, r0
 8008e12:	460d      	mov	r5, r1
 8008e14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e18:	f7f7 fe92 	bl	8000b40 <__aeabi_dcmpgt>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	f040 80f9 	bne.w	8009014 <_dtoa_r+0x6bc>
 8008e22:	4620      	mov	r0, r4
 8008e24:	4629      	mov	r1, r5
 8008e26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e2a:	f7f7 fe61 	bl	8000af0 <__aeabi_dcmpeq>
 8008e2e:	b118      	cbz	r0, 8008e38 <_dtoa_r+0x4e0>
 8008e30:	f018 0f01 	tst.w	r8, #1
 8008e34:	f040 80ee 	bne.w	8009014 <_dtoa_r+0x6bc>
 8008e38:	4649      	mov	r1, r9
 8008e3a:	4658      	mov	r0, fp
 8008e3c:	f000 fc90 	bl	8009760 <_Bfree>
 8008e40:	2300      	movs	r3, #0
 8008e42:	3701      	adds	r7, #1
 8008e44:	7033      	strb	r3, [r6, #0]
 8008e46:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008e48:	601f      	str	r7, [r3, #0]
 8008e4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f000 831d 	beq.w	800948c <_dtoa_r+0xb34>
 8008e52:	601e      	str	r6, [r3, #0]
 8008e54:	e31a      	b.n	800948c <_dtoa_r+0xb34>
 8008e56:	07e2      	lsls	r2, r4, #31
 8008e58:	d505      	bpl.n	8008e66 <_dtoa_r+0x50e>
 8008e5a:	3601      	adds	r6, #1
 8008e5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e60:	f7f7 fbde 	bl	8000620 <__aeabi_dmul>
 8008e64:	2301      	movs	r3, #1
 8008e66:	1064      	asrs	r4, r4, #1
 8008e68:	3508      	adds	r5, #8
 8008e6a:	e73f      	b.n	8008cec <_dtoa_r+0x394>
 8008e6c:	2602      	movs	r6, #2
 8008e6e:	e742      	b.n	8008cf6 <_dtoa_r+0x39e>
 8008e70:	9c07      	ldr	r4, [sp, #28]
 8008e72:	9704      	str	r7, [sp, #16]
 8008e74:	e761      	b.n	8008d3a <_dtoa_r+0x3e2>
 8008e76:	4b27      	ldr	r3, [pc, #156]	@ (8008f14 <_dtoa_r+0x5bc>)
 8008e78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008e7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e7e:	4454      	add	r4, sl
 8008e80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e84:	2900      	cmp	r1, #0
 8008e86:	d053      	beq.n	8008f30 <_dtoa_r+0x5d8>
 8008e88:	2000      	movs	r0, #0
 8008e8a:	4928      	ldr	r1, [pc, #160]	@ (8008f2c <_dtoa_r+0x5d4>)
 8008e8c:	f7f7 fcf2 	bl	8000874 <__aeabi_ddiv>
 8008e90:	4633      	mov	r3, r6
 8008e92:	4656      	mov	r6, sl
 8008e94:	462a      	mov	r2, r5
 8008e96:	f7f7 fa0b 	bl	80002b0 <__aeabi_dsub>
 8008e9a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ea2:	f7f7 fe6d 	bl	8000b80 <__aeabi_d2iz>
 8008ea6:	4605      	mov	r5, r0
 8008ea8:	f7f7 fb50 	bl	800054c <__aeabi_i2d>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	3530      	adds	r5, #48	@ 0x30
 8008eb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008eb6:	f7f7 f9fb 	bl	80002b0 <__aeabi_dsub>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	f806 5b01 	strb.w	r5, [r6], #1
 8008ec2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ec6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008eca:	f7f7 fe1b 	bl	8000b04 <__aeabi_dcmplt>
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d171      	bne.n	8008fb6 <_dtoa_r+0x65e>
 8008ed2:	2000      	movs	r0, #0
 8008ed4:	4911      	ldr	r1, [pc, #68]	@ (8008f1c <_dtoa_r+0x5c4>)
 8008ed6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008eda:	f7f7 f9e9 	bl	80002b0 <__aeabi_dsub>
 8008ede:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008ee2:	f7f7 fe0f 	bl	8000b04 <__aeabi_dcmplt>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	f040 8095 	bne.w	8009016 <_dtoa_r+0x6be>
 8008eec:	42a6      	cmp	r6, r4
 8008eee:	f43f af50 	beq.w	8008d92 <_dtoa_r+0x43a>
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8008f20 <_dtoa_r+0x5c8>)
 8008ef6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008efa:	f7f7 fb91 	bl	8000620 <__aeabi_dmul>
 8008efe:	2200      	movs	r2, #0
 8008f00:	4b07      	ldr	r3, [pc, #28]	@ (8008f20 <_dtoa_r+0x5c8>)
 8008f02:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f0a:	f7f7 fb89 	bl	8000620 <__aeabi_dmul>
 8008f0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f12:	e7c4      	b.n	8008e9e <_dtoa_r+0x546>
 8008f14:	0800c0a8 	.word	0x0800c0a8
 8008f18:	0800c080 	.word	0x0800c080
 8008f1c:	3ff00000 	.word	0x3ff00000
 8008f20:	40240000 	.word	0x40240000
 8008f24:	401c0000 	.word	0x401c0000
 8008f28:	40140000 	.word	0x40140000
 8008f2c:	3fe00000 	.word	0x3fe00000
 8008f30:	4631      	mov	r1, r6
 8008f32:	4656      	mov	r6, sl
 8008f34:	4628      	mov	r0, r5
 8008f36:	f7f7 fb73 	bl	8000620 <__aeabi_dmul>
 8008f3a:	9415      	str	r4, [sp, #84]	@ 0x54
 8008f3c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f44:	f7f7 fe1c 	bl	8000b80 <__aeabi_d2iz>
 8008f48:	4605      	mov	r5, r0
 8008f4a:	f7f7 faff 	bl	800054c <__aeabi_i2d>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	3530      	adds	r5, #48	@ 0x30
 8008f52:	460b      	mov	r3, r1
 8008f54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f58:	f7f7 f9aa 	bl	80002b0 <__aeabi_dsub>
 8008f5c:	f806 5b01 	strb.w	r5, [r6], #1
 8008f60:	4602      	mov	r2, r0
 8008f62:	460b      	mov	r3, r1
 8008f64:	42a6      	cmp	r6, r4
 8008f66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f6a:	f04f 0200 	mov.w	r2, #0
 8008f6e:	d124      	bne.n	8008fba <_dtoa_r+0x662>
 8008f70:	4bac      	ldr	r3, [pc, #688]	@ (8009224 <_dtoa_r+0x8cc>)
 8008f72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008f76:	f7f7 f99d 	bl	80002b4 <__adddf3>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f82:	f7f7 fddd 	bl	8000b40 <__aeabi_dcmpgt>
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d145      	bne.n	8009016 <_dtoa_r+0x6be>
 8008f8a:	2000      	movs	r0, #0
 8008f8c:	49a5      	ldr	r1, [pc, #660]	@ (8009224 <_dtoa_r+0x8cc>)
 8008f8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f92:	f7f7 f98d 	bl	80002b0 <__aeabi_dsub>
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f9e:	f7f7 fdb1 	bl	8000b04 <__aeabi_dcmplt>
 8008fa2:	2800      	cmp	r0, #0
 8008fa4:	f43f aef5 	beq.w	8008d92 <_dtoa_r+0x43a>
 8008fa8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008faa:	1e73      	subs	r3, r6, #1
 8008fac:	9315      	str	r3, [sp, #84]	@ 0x54
 8008fae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008fb2:	2b30      	cmp	r3, #48	@ 0x30
 8008fb4:	d0f8      	beq.n	8008fa8 <_dtoa_r+0x650>
 8008fb6:	9f04      	ldr	r7, [sp, #16]
 8008fb8:	e73e      	b.n	8008e38 <_dtoa_r+0x4e0>
 8008fba:	4b9b      	ldr	r3, [pc, #620]	@ (8009228 <_dtoa_r+0x8d0>)
 8008fbc:	f7f7 fb30 	bl	8000620 <__aeabi_dmul>
 8008fc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fc4:	e7bc      	b.n	8008f40 <_dtoa_r+0x5e8>
 8008fc6:	d10c      	bne.n	8008fe2 <_dtoa_r+0x68a>
 8008fc8:	2200      	movs	r2, #0
 8008fca:	4b98      	ldr	r3, [pc, #608]	@ (800922c <_dtoa_r+0x8d4>)
 8008fcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fd0:	f7f7 fb26 	bl	8000620 <__aeabi_dmul>
 8008fd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fd8:	f7f7 fda8 	bl	8000b2c <__aeabi_dcmpge>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	f000 8157 	beq.w	8009290 <_dtoa_r+0x938>
 8008fe2:	2400      	movs	r4, #0
 8008fe4:	4625      	mov	r5, r4
 8008fe6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fe8:	4656      	mov	r6, sl
 8008fea:	43db      	mvns	r3, r3
 8008fec:	9304      	str	r3, [sp, #16]
 8008fee:	2700      	movs	r7, #0
 8008ff0:	4621      	mov	r1, r4
 8008ff2:	4658      	mov	r0, fp
 8008ff4:	f000 fbb4 	bl	8009760 <_Bfree>
 8008ff8:	2d00      	cmp	r5, #0
 8008ffa:	d0dc      	beq.n	8008fb6 <_dtoa_r+0x65e>
 8008ffc:	b12f      	cbz	r7, 800900a <_dtoa_r+0x6b2>
 8008ffe:	42af      	cmp	r7, r5
 8009000:	d003      	beq.n	800900a <_dtoa_r+0x6b2>
 8009002:	4639      	mov	r1, r7
 8009004:	4658      	mov	r0, fp
 8009006:	f000 fbab 	bl	8009760 <_Bfree>
 800900a:	4629      	mov	r1, r5
 800900c:	4658      	mov	r0, fp
 800900e:	f000 fba7 	bl	8009760 <_Bfree>
 8009012:	e7d0      	b.n	8008fb6 <_dtoa_r+0x65e>
 8009014:	9704      	str	r7, [sp, #16]
 8009016:	4633      	mov	r3, r6
 8009018:	461e      	mov	r6, r3
 800901a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800901e:	2a39      	cmp	r2, #57	@ 0x39
 8009020:	d107      	bne.n	8009032 <_dtoa_r+0x6da>
 8009022:	459a      	cmp	sl, r3
 8009024:	d1f8      	bne.n	8009018 <_dtoa_r+0x6c0>
 8009026:	9a04      	ldr	r2, [sp, #16]
 8009028:	3201      	adds	r2, #1
 800902a:	9204      	str	r2, [sp, #16]
 800902c:	2230      	movs	r2, #48	@ 0x30
 800902e:	f88a 2000 	strb.w	r2, [sl]
 8009032:	781a      	ldrb	r2, [r3, #0]
 8009034:	3201      	adds	r2, #1
 8009036:	701a      	strb	r2, [r3, #0]
 8009038:	e7bd      	b.n	8008fb6 <_dtoa_r+0x65e>
 800903a:	2200      	movs	r2, #0
 800903c:	4b7a      	ldr	r3, [pc, #488]	@ (8009228 <_dtoa_r+0x8d0>)
 800903e:	f7f7 faef 	bl	8000620 <__aeabi_dmul>
 8009042:	2200      	movs	r2, #0
 8009044:	2300      	movs	r3, #0
 8009046:	4604      	mov	r4, r0
 8009048:	460d      	mov	r5, r1
 800904a:	f7f7 fd51 	bl	8000af0 <__aeabi_dcmpeq>
 800904e:	2800      	cmp	r0, #0
 8009050:	f43f aebb 	beq.w	8008dca <_dtoa_r+0x472>
 8009054:	e6f0      	b.n	8008e38 <_dtoa_r+0x4e0>
 8009056:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009058:	2a00      	cmp	r2, #0
 800905a:	f000 80db 	beq.w	8009214 <_dtoa_r+0x8bc>
 800905e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009060:	2a01      	cmp	r2, #1
 8009062:	f300 80bf 	bgt.w	80091e4 <_dtoa_r+0x88c>
 8009066:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009068:	2a00      	cmp	r2, #0
 800906a:	f000 80b7 	beq.w	80091dc <_dtoa_r+0x884>
 800906e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009072:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009074:	4646      	mov	r6, r8
 8009076:	9a08      	ldr	r2, [sp, #32]
 8009078:	2101      	movs	r1, #1
 800907a:	4658      	mov	r0, fp
 800907c:	4498      	add	r8, r3
 800907e:	441a      	add	r2, r3
 8009080:	9208      	str	r2, [sp, #32]
 8009082:	f000 fc6d 	bl	8009960 <__i2b>
 8009086:	4605      	mov	r5, r0
 8009088:	b15e      	cbz	r6, 80090a2 <_dtoa_r+0x74a>
 800908a:	9b08      	ldr	r3, [sp, #32]
 800908c:	2b00      	cmp	r3, #0
 800908e:	dd08      	ble.n	80090a2 <_dtoa_r+0x74a>
 8009090:	42b3      	cmp	r3, r6
 8009092:	9a08      	ldr	r2, [sp, #32]
 8009094:	bfa8      	it	ge
 8009096:	4633      	movge	r3, r6
 8009098:	eba8 0803 	sub.w	r8, r8, r3
 800909c:	1af6      	subs	r6, r6, r3
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	9308      	str	r3, [sp, #32]
 80090a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090a4:	b1f3      	cbz	r3, 80090e4 <_dtoa_r+0x78c>
 80090a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 80b7 	beq.w	800921c <_dtoa_r+0x8c4>
 80090ae:	b18c      	cbz	r4, 80090d4 <_dtoa_r+0x77c>
 80090b0:	4629      	mov	r1, r5
 80090b2:	4622      	mov	r2, r4
 80090b4:	4658      	mov	r0, fp
 80090b6:	f000 fd13 	bl	8009ae0 <__pow5mult>
 80090ba:	464a      	mov	r2, r9
 80090bc:	4601      	mov	r1, r0
 80090be:	4605      	mov	r5, r0
 80090c0:	4658      	mov	r0, fp
 80090c2:	f000 fc63 	bl	800998c <__multiply>
 80090c6:	4649      	mov	r1, r9
 80090c8:	9004      	str	r0, [sp, #16]
 80090ca:	4658      	mov	r0, fp
 80090cc:	f000 fb48 	bl	8009760 <_Bfree>
 80090d0:	9b04      	ldr	r3, [sp, #16]
 80090d2:	4699      	mov	r9, r3
 80090d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090d6:	1b1a      	subs	r2, r3, r4
 80090d8:	d004      	beq.n	80090e4 <_dtoa_r+0x78c>
 80090da:	4649      	mov	r1, r9
 80090dc:	4658      	mov	r0, fp
 80090de:	f000 fcff 	bl	8009ae0 <__pow5mult>
 80090e2:	4681      	mov	r9, r0
 80090e4:	2101      	movs	r1, #1
 80090e6:	4658      	mov	r0, fp
 80090e8:	f000 fc3a 	bl	8009960 <__i2b>
 80090ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090ee:	4604      	mov	r4, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f000 81cf 	beq.w	8009494 <_dtoa_r+0xb3c>
 80090f6:	461a      	mov	r2, r3
 80090f8:	4601      	mov	r1, r0
 80090fa:	4658      	mov	r0, fp
 80090fc:	f000 fcf0 	bl	8009ae0 <__pow5mult>
 8009100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009102:	4604      	mov	r4, r0
 8009104:	2b01      	cmp	r3, #1
 8009106:	f300 8095 	bgt.w	8009234 <_dtoa_r+0x8dc>
 800910a:	9b02      	ldr	r3, [sp, #8]
 800910c:	2b00      	cmp	r3, #0
 800910e:	f040 8087 	bne.w	8009220 <_dtoa_r+0x8c8>
 8009112:	9b03      	ldr	r3, [sp, #12]
 8009114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009118:	2b00      	cmp	r3, #0
 800911a:	f040 8089 	bne.w	8009230 <_dtoa_r+0x8d8>
 800911e:	9b03      	ldr	r3, [sp, #12]
 8009120:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009124:	0d1b      	lsrs	r3, r3, #20
 8009126:	051b      	lsls	r3, r3, #20
 8009128:	b12b      	cbz	r3, 8009136 <_dtoa_r+0x7de>
 800912a:	9b08      	ldr	r3, [sp, #32]
 800912c:	f108 0801 	add.w	r8, r8, #1
 8009130:	3301      	adds	r3, #1
 8009132:	9308      	str	r3, [sp, #32]
 8009134:	2301      	movs	r3, #1
 8009136:	930a      	str	r3, [sp, #40]	@ 0x28
 8009138:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800913a:	2b00      	cmp	r3, #0
 800913c:	f000 81b0 	beq.w	80094a0 <_dtoa_r+0xb48>
 8009140:	6923      	ldr	r3, [r4, #16]
 8009142:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009146:	6918      	ldr	r0, [r3, #16]
 8009148:	f000 fbbe 	bl	80098c8 <__hi0bits>
 800914c:	f1c0 0020 	rsb	r0, r0, #32
 8009150:	9b08      	ldr	r3, [sp, #32]
 8009152:	4418      	add	r0, r3
 8009154:	f010 001f 	ands.w	r0, r0, #31
 8009158:	d077      	beq.n	800924a <_dtoa_r+0x8f2>
 800915a:	f1c0 0320 	rsb	r3, r0, #32
 800915e:	2b04      	cmp	r3, #4
 8009160:	dd6b      	ble.n	800923a <_dtoa_r+0x8e2>
 8009162:	f1c0 001c 	rsb	r0, r0, #28
 8009166:	9b08      	ldr	r3, [sp, #32]
 8009168:	4480      	add	r8, r0
 800916a:	4403      	add	r3, r0
 800916c:	4406      	add	r6, r0
 800916e:	9308      	str	r3, [sp, #32]
 8009170:	f1b8 0f00 	cmp.w	r8, #0
 8009174:	dd05      	ble.n	8009182 <_dtoa_r+0x82a>
 8009176:	4649      	mov	r1, r9
 8009178:	4642      	mov	r2, r8
 800917a:	4658      	mov	r0, fp
 800917c:	f000 fd0a 	bl	8009b94 <__lshift>
 8009180:	4681      	mov	r9, r0
 8009182:	9b08      	ldr	r3, [sp, #32]
 8009184:	2b00      	cmp	r3, #0
 8009186:	dd05      	ble.n	8009194 <_dtoa_r+0x83c>
 8009188:	4621      	mov	r1, r4
 800918a:	461a      	mov	r2, r3
 800918c:	4658      	mov	r0, fp
 800918e:	f000 fd01 	bl	8009b94 <__lshift>
 8009192:	4604      	mov	r4, r0
 8009194:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009196:	2b00      	cmp	r3, #0
 8009198:	d059      	beq.n	800924e <_dtoa_r+0x8f6>
 800919a:	4621      	mov	r1, r4
 800919c:	4648      	mov	r0, r9
 800919e:	f000 fd65 	bl	8009c6c <__mcmp>
 80091a2:	2800      	cmp	r0, #0
 80091a4:	da53      	bge.n	800924e <_dtoa_r+0x8f6>
 80091a6:	1e7b      	subs	r3, r7, #1
 80091a8:	4649      	mov	r1, r9
 80091aa:	220a      	movs	r2, #10
 80091ac:	4658      	mov	r0, fp
 80091ae:	9304      	str	r3, [sp, #16]
 80091b0:	2300      	movs	r3, #0
 80091b2:	f000 faf7 	bl	80097a4 <__multadd>
 80091b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091b8:	4681      	mov	r9, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f000 8172 	beq.w	80094a4 <_dtoa_r+0xb4c>
 80091c0:	2300      	movs	r3, #0
 80091c2:	4629      	mov	r1, r5
 80091c4:	220a      	movs	r2, #10
 80091c6:	4658      	mov	r0, fp
 80091c8:	f000 faec 	bl	80097a4 <__multadd>
 80091cc:	9b00      	ldr	r3, [sp, #0]
 80091ce:	4605      	mov	r5, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	dc67      	bgt.n	80092a4 <_dtoa_r+0x94c>
 80091d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	dc41      	bgt.n	800925e <_dtoa_r+0x906>
 80091da:	e063      	b.n	80092a4 <_dtoa_r+0x94c>
 80091dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80091de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80091e2:	e746      	b.n	8009072 <_dtoa_r+0x71a>
 80091e4:	9b07      	ldr	r3, [sp, #28]
 80091e6:	1e5c      	subs	r4, r3, #1
 80091e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091ea:	42a3      	cmp	r3, r4
 80091ec:	bfb7      	itett	lt
 80091ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80091f0:	1b1c      	subge	r4, r3, r4
 80091f2:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80091f4:	1ae3      	sublt	r3, r4, r3
 80091f6:	bfbe      	ittt	lt
 80091f8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80091fa:	2400      	movlt	r4, #0
 80091fc:	18d2      	addlt	r2, r2, r3
 80091fe:	9b07      	ldr	r3, [sp, #28]
 8009200:	bfb8      	it	lt
 8009202:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009204:	2b00      	cmp	r3, #0
 8009206:	bfb5      	itete	lt
 8009208:	eba8 0603 	sublt.w	r6, r8, r3
 800920c:	4646      	movge	r6, r8
 800920e:	2300      	movlt	r3, #0
 8009210:	9b07      	ldrge	r3, [sp, #28]
 8009212:	e730      	b.n	8009076 <_dtoa_r+0x71e>
 8009214:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009216:	4646      	mov	r6, r8
 8009218:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800921a:	e735      	b.n	8009088 <_dtoa_r+0x730>
 800921c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800921e:	e75c      	b.n	80090da <_dtoa_r+0x782>
 8009220:	2300      	movs	r3, #0
 8009222:	e788      	b.n	8009136 <_dtoa_r+0x7de>
 8009224:	3fe00000 	.word	0x3fe00000
 8009228:	40240000 	.word	0x40240000
 800922c:	40140000 	.word	0x40140000
 8009230:	9b02      	ldr	r3, [sp, #8]
 8009232:	e780      	b.n	8009136 <_dtoa_r+0x7de>
 8009234:	2300      	movs	r3, #0
 8009236:	930a      	str	r3, [sp, #40]	@ 0x28
 8009238:	e782      	b.n	8009140 <_dtoa_r+0x7e8>
 800923a:	d099      	beq.n	8009170 <_dtoa_r+0x818>
 800923c:	331c      	adds	r3, #28
 800923e:	9a08      	ldr	r2, [sp, #32]
 8009240:	441a      	add	r2, r3
 8009242:	4498      	add	r8, r3
 8009244:	441e      	add	r6, r3
 8009246:	9208      	str	r2, [sp, #32]
 8009248:	e792      	b.n	8009170 <_dtoa_r+0x818>
 800924a:	4603      	mov	r3, r0
 800924c:	e7f6      	b.n	800923c <_dtoa_r+0x8e4>
 800924e:	9b07      	ldr	r3, [sp, #28]
 8009250:	9704      	str	r7, [sp, #16]
 8009252:	2b00      	cmp	r3, #0
 8009254:	dc20      	bgt.n	8009298 <_dtoa_r+0x940>
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800925a:	2b02      	cmp	r3, #2
 800925c:	dd1e      	ble.n	800929c <_dtoa_r+0x944>
 800925e:	9b00      	ldr	r3, [sp, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	f47f aec0 	bne.w	8008fe6 <_dtoa_r+0x68e>
 8009266:	4621      	mov	r1, r4
 8009268:	2205      	movs	r2, #5
 800926a:	4658      	mov	r0, fp
 800926c:	f000 fa9a 	bl	80097a4 <__multadd>
 8009270:	4601      	mov	r1, r0
 8009272:	4604      	mov	r4, r0
 8009274:	4648      	mov	r0, r9
 8009276:	f000 fcf9 	bl	8009c6c <__mcmp>
 800927a:	2800      	cmp	r0, #0
 800927c:	f77f aeb3 	ble.w	8008fe6 <_dtoa_r+0x68e>
 8009280:	2331      	movs	r3, #49	@ 0x31
 8009282:	4656      	mov	r6, sl
 8009284:	f806 3b01 	strb.w	r3, [r6], #1
 8009288:	9b04      	ldr	r3, [sp, #16]
 800928a:	3301      	adds	r3, #1
 800928c:	9304      	str	r3, [sp, #16]
 800928e:	e6ae      	b.n	8008fee <_dtoa_r+0x696>
 8009290:	9c07      	ldr	r4, [sp, #28]
 8009292:	9704      	str	r7, [sp, #16]
 8009294:	4625      	mov	r5, r4
 8009296:	e7f3      	b.n	8009280 <_dtoa_r+0x928>
 8009298:	9b07      	ldr	r3, [sp, #28]
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f000 8104 	beq.w	80094ac <_dtoa_r+0xb54>
 80092a4:	2e00      	cmp	r6, #0
 80092a6:	dd05      	ble.n	80092b4 <_dtoa_r+0x95c>
 80092a8:	4629      	mov	r1, r5
 80092aa:	4632      	mov	r2, r6
 80092ac:	4658      	mov	r0, fp
 80092ae:	f000 fc71 	bl	8009b94 <__lshift>
 80092b2:	4605      	mov	r5, r0
 80092b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d05a      	beq.n	8009370 <_dtoa_r+0xa18>
 80092ba:	6869      	ldr	r1, [r5, #4]
 80092bc:	4658      	mov	r0, fp
 80092be:	f000 fa0f 	bl	80096e0 <_Balloc>
 80092c2:	4606      	mov	r6, r0
 80092c4:	b928      	cbnz	r0, 80092d2 <_dtoa_r+0x97a>
 80092c6:	4b84      	ldr	r3, [pc, #528]	@ (80094d8 <_dtoa_r+0xb80>)
 80092c8:	4602      	mov	r2, r0
 80092ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80092ce:	f7ff bb5a 	b.w	8008986 <_dtoa_r+0x2e>
 80092d2:	692a      	ldr	r2, [r5, #16]
 80092d4:	f105 010c 	add.w	r1, r5, #12
 80092d8:	300c      	adds	r0, #12
 80092da:	3202      	adds	r2, #2
 80092dc:	0092      	lsls	r2, r2, #2
 80092de:	f001 ff81 	bl	800b1e4 <memcpy>
 80092e2:	2201      	movs	r2, #1
 80092e4:	4631      	mov	r1, r6
 80092e6:	4658      	mov	r0, fp
 80092e8:	f000 fc54 	bl	8009b94 <__lshift>
 80092ec:	f10a 0301 	add.w	r3, sl, #1
 80092f0:	462f      	mov	r7, r5
 80092f2:	4605      	mov	r5, r0
 80092f4:	9307      	str	r3, [sp, #28]
 80092f6:	9b00      	ldr	r3, [sp, #0]
 80092f8:	4453      	add	r3, sl
 80092fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092fc:	9b02      	ldr	r3, [sp, #8]
 80092fe:	f003 0301 	and.w	r3, r3, #1
 8009302:	930a      	str	r3, [sp, #40]	@ 0x28
 8009304:	9b07      	ldr	r3, [sp, #28]
 8009306:	4621      	mov	r1, r4
 8009308:	4648      	mov	r0, r9
 800930a:	3b01      	subs	r3, #1
 800930c:	9300      	str	r3, [sp, #0]
 800930e:	f7ff fa95 	bl	800883c <quorem>
 8009312:	4639      	mov	r1, r7
 8009314:	9002      	str	r0, [sp, #8]
 8009316:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800931a:	4648      	mov	r0, r9
 800931c:	f000 fca6 	bl	8009c6c <__mcmp>
 8009320:	462a      	mov	r2, r5
 8009322:	9008      	str	r0, [sp, #32]
 8009324:	4621      	mov	r1, r4
 8009326:	4658      	mov	r0, fp
 8009328:	f000 fcbc 	bl	8009ca4 <__mdiff>
 800932c:	68c2      	ldr	r2, [r0, #12]
 800932e:	4606      	mov	r6, r0
 8009330:	bb02      	cbnz	r2, 8009374 <_dtoa_r+0xa1c>
 8009332:	4601      	mov	r1, r0
 8009334:	4648      	mov	r0, r9
 8009336:	f000 fc99 	bl	8009c6c <__mcmp>
 800933a:	4602      	mov	r2, r0
 800933c:	4631      	mov	r1, r6
 800933e:	4658      	mov	r0, fp
 8009340:	920e      	str	r2, [sp, #56]	@ 0x38
 8009342:	f000 fa0d 	bl	8009760 <_Bfree>
 8009346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009348:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800934a:	9e07      	ldr	r6, [sp, #28]
 800934c:	ea43 0102 	orr.w	r1, r3, r2
 8009350:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009352:	4319      	orrs	r1, r3
 8009354:	d110      	bne.n	8009378 <_dtoa_r+0xa20>
 8009356:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800935a:	d029      	beq.n	80093b0 <_dtoa_r+0xa58>
 800935c:	9b08      	ldr	r3, [sp, #32]
 800935e:	2b00      	cmp	r3, #0
 8009360:	dd02      	ble.n	8009368 <_dtoa_r+0xa10>
 8009362:	9b02      	ldr	r3, [sp, #8]
 8009364:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009368:	9b00      	ldr	r3, [sp, #0]
 800936a:	f883 8000 	strb.w	r8, [r3]
 800936e:	e63f      	b.n	8008ff0 <_dtoa_r+0x698>
 8009370:	4628      	mov	r0, r5
 8009372:	e7bb      	b.n	80092ec <_dtoa_r+0x994>
 8009374:	2201      	movs	r2, #1
 8009376:	e7e1      	b.n	800933c <_dtoa_r+0x9e4>
 8009378:	9b08      	ldr	r3, [sp, #32]
 800937a:	2b00      	cmp	r3, #0
 800937c:	db04      	blt.n	8009388 <_dtoa_r+0xa30>
 800937e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009380:	430b      	orrs	r3, r1
 8009382:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009384:	430b      	orrs	r3, r1
 8009386:	d120      	bne.n	80093ca <_dtoa_r+0xa72>
 8009388:	2a00      	cmp	r2, #0
 800938a:	dded      	ble.n	8009368 <_dtoa_r+0xa10>
 800938c:	4649      	mov	r1, r9
 800938e:	2201      	movs	r2, #1
 8009390:	4658      	mov	r0, fp
 8009392:	f000 fbff 	bl	8009b94 <__lshift>
 8009396:	4621      	mov	r1, r4
 8009398:	4681      	mov	r9, r0
 800939a:	f000 fc67 	bl	8009c6c <__mcmp>
 800939e:	2800      	cmp	r0, #0
 80093a0:	dc03      	bgt.n	80093aa <_dtoa_r+0xa52>
 80093a2:	d1e1      	bne.n	8009368 <_dtoa_r+0xa10>
 80093a4:	f018 0f01 	tst.w	r8, #1
 80093a8:	d0de      	beq.n	8009368 <_dtoa_r+0xa10>
 80093aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80093ae:	d1d8      	bne.n	8009362 <_dtoa_r+0xa0a>
 80093b0:	2339      	movs	r3, #57	@ 0x39
 80093b2:	9a00      	ldr	r2, [sp, #0]
 80093b4:	7013      	strb	r3, [r2, #0]
 80093b6:	4633      	mov	r3, r6
 80093b8:	461e      	mov	r6, r3
 80093ba:	3b01      	subs	r3, #1
 80093bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80093c0:	2a39      	cmp	r2, #57	@ 0x39
 80093c2:	d052      	beq.n	800946a <_dtoa_r+0xb12>
 80093c4:	3201      	adds	r2, #1
 80093c6:	701a      	strb	r2, [r3, #0]
 80093c8:	e612      	b.n	8008ff0 <_dtoa_r+0x698>
 80093ca:	2a00      	cmp	r2, #0
 80093cc:	dd07      	ble.n	80093de <_dtoa_r+0xa86>
 80093ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80093d2:	d0ed      	beq.n	80093b0 <_dtoa_r+0xa58>
 80093d4:	f108 0301 	add.w	r3, r8, #1
 80093d8:	9a00      	ldr	r2, [sp, #0]
 80093da:	7013      	strb	r3, [r2, #0]
 80093dc:	e608      	b.n	8008ff0 <_dtoa_r+0x698>
 80093de:	9b07      	ldr	r3, [sp, #28]
 80093e0:	9a07      	ldr	r2, [sp, #28]
 80093e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80093e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d028      	beq.n	800943e <_dtoa_r+0xae6>
 80093ec:	4649      	mov	r1, r9
 80093ee:	2300      	movs	r3, #0
 80093f0:	220a      	movs	r2, #10
 80093f2:	4658      	mov	r0, fp
 80093f4:	f000 f9d6 	bl	80097a4 <__multadd>
 80093f8:	42af      	cmp	r7, r5
 80093fa:	4681      	mov	r9, r0
 80093fc:	f04f 0300 	mov.w	r3, #0
 8009400:	f04f 020a 	mov.w	r2, #10
 8009404:	4639      	mov	r1, r7
 8009406:	4658      	mov	r0, fp
 8009408:	d107      	bne.n	800941a <_dtoa_r+0xac2>
 800940a:	f000 f9cb 	bl	80097a4 <__multadd>
 800940e:	4607      	mov	r7, r0
 8009410:	4605      	mov	r5, r0
 8009412:	9b07      	ldr	r3, [sp, #28]
 8009414:	3301      	adds	r3, #1
 8009416:	9307      	str	r3, [sp, #28]
 8009418:	e774      	b.n	8009304 <_dtoa_r+0x9ac>
 800941a:	f000 f9c3 	bl	80097a4 <__multadd>
 800941e:	4629      	mov	r1, r5
 8009420:	4607      	mov	r7, r0
 8009422:	2300      	movs	r3, #0
 8009424:	220a      	movs	r2, #10
 8009426:	4658      	mov	r0, fp
 8009428:	f000 f9bc 	bl	80097a4 <__multadd>
 800942c:	4605      	mov	r5, r0
 800942e:	e7f0      	b.n	8009412 <_dtoa_r+0xaba>
 8009430:	9b00      	ldr	r3, [sp, #0]
 8009432:	2700      	movs	r7, #0
 8009434:	2b00      	cmp	r3, #0
 8009436:	bfcc      	ite	gt
 8009438:	461e      	movgt	r6, r3
 800943a:	2601      	movle	r6, #1
 800943c:	4456      	add	r6, sl
 800943e:	4649      	mov	r1, r9
 8009440:	2201      	movs	r2, #1
 8009442:	4658      	mov	r0, fp
 8009444:	f000 fba6 	bl	8009b94 <__lshift>
 8009448:	4621      	mov	r1, r4
 800944a:	4681      	mov	r9, r0
 800944c:	f000 fc0e 	bl	8009c6c <__mcmp>
 8009450:	2800      	cmp	r0, #0
 8009452:	dcb0      	bgt.n	80093b6 <_dtoa_r+0xa5e>
 8009454:	d102      	bne.n	800945c <_dtoa_r+0xb04>
 8009456:	f018 0f01 	tst.w	r8, #1
 800945a:	d1ac      	bne.n	80093b6 <_dtoa_r+0xa5e>
 800945c:	4633      	mov	r3, r6
 800945e:	461e      	mov	r6, r3
 8009460:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009464:	2a30      	cmp	r2, #48	@ 0x30
 8009466:	d0fa      	beq.n	800945e <_dtoa_r+0xb06>
 8009468:	e5c2      	b.n	8008ff0 <_dtoa_r+0x698>
 800946a:	459a      	cmp	sl, r3
 800946c:	d1a4      	bne.n	80093b8 <_dtoa_r+0xa60>
 800946e:	9b04      	ldr	r3, [sp, #16]
 8009470:	3301      	adds	r3, #1
 8009472:	9304      	str	r3, [sp, #16]
 8009474:	2331      	movs	r3, #49	@ 0x31
 8009476:	f88a 3000 	strb.w	r3, [sl]
 800947a:	e5b9      	b.n	8008ff0 <_dtoa_r+0x698>
 800947c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800947e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80094dc <_dtoa_r+0xb84>
 8009482:	b11b      	cbz	r3, 800948c <_dtoa_r+0xb34>
 8009484:	f10a 0308 	add.w	r3, sl, #8
 8009488:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800948a:	6013      	str	r3, [r2, #0]
 800948c:	4650      	mov	r0, sl
 800948e:	b019      	add	sp, #100	@ 0x64
 8009490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009496:	2b01      	cmp	r3, #1
 8009498:	f77f ae37 	ble.w	800910a <_dtoa_r+0x7b2>
 800949c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800949e:	930a      	str	r3, [sp, #40]	@ 0x28
 80094a0:	2001      	movs	r0, #1
 80094a2:	e655      	b.n	8009150 <_dtoa_r+0x7f8>
 80094a4:	9b00      	ldr	r3, [sp, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f77f aed6 	ble.w	8009258 <_dtoa_r+0x900>
 80094ac:	4656      	mov	r6, sl
 80094ae:	4621      	mov	r1, r4
 80094b0:	4648      	mov	r0, r9
 80094b2:	f7ff f9c3 	bl	800883c <quorem>
 80094b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80094ba:	9b00      	ldr	r3, [sp, #0]
 80094bc:	f806 8b01 	strb.w	r8, [r6], #1
 80094c0:	eba6 020a 	sub.w	r2, r6, sl
 80094c4:	4293      	cmp	r3, r2
 80094c6:	ddb3      	ble.n	8009430 <_dtoa_r+0xad8>
 80094c8:	4649      	mov	r1, r9
 80094ca:	2300      	movs	r3, #0
 80094cc:	220a      	movs	r2, #10
 80094ce:	4658      	mov	r0, fp
 80094d0:	f000 f968 	bl	80097a4 <__multadd>
 80094d4:	4681      	mov	r9, r0
 80094d6:	e7ea      	b.n	80094ae <_dtoa_r+0xb56>
 80094d8:	0800c005 	.word	0x0800c005
 80094dc:	0800bf89 	.word	0x0800bf89

080094e0 <_free_r>:
 80094e0:	b538      	push	{r3, r4, r5, lr}
 80094e2:	4605      	mov	r5, r0
 80094e4:	2900      	cmp	r1, #0
 80094e6:	d041      	beq.n	800956c <_free_r+0x8c>
 80094e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094ec:	1f0c      	subs	r4, r1, #4
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	bfb8      	it	lt
 80094f2:	18e4      	addlt	r4, r4, r3
 80094f4:	f000 f8e8 	bl	80096c8 <__malloc_lock>
 80094f8:	4a1d      	ldr	r2, [pc, #116]	@ (8009570 <_free_r+0x90>)
 80094fa:	6813      	ldr	r3, [r2, #0]
 80094fc:	b933      	cbnz	r3, 800950c <_free_r+0x2c>
 80094fe:	6063      	str	r3, [r4, #4]
 8009500:	6014      	str	r4, [r2, #0]
 8009502:	4628      	mov	r0, r5
 8009504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009508:	f000 b8e4 	b.w	80096d4 <__malloc_unlock>
 800950c:	42a3      	cmp	r3, r4
 800950e:	d908      	bls.n	8009522 <_free_r+0x42>
 8009510:	6820      	ldr	r0, [r4, #0]
 8009512:	1821      	adds	r1, r4, r0
 8009514:	428b      	cmp	r3, r1
 8009516:	bf01      	itttt	eq
 8009518:	6819      	ldreq	r1, [r3, #0]
 800951a:	685b      	ldreq	r3, [r3, #4]
 800951c:	1809      	addeq	r1, r1, r0
 800951e:	6021      	streq	r1, [r4, #0]
 8009520:	e7ed      	b.n	80094fe <_free_r+0x1e>
 8009522:	461a      	mov	r2, r3
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	b10b      	cbz	r3, 800952c <_free_r+0x4c>
 8009528:	42a3      	cmp	r3, r4
 800952a:	d9fa      	bls.n	8009522 <_free_r+0x42>
 800952c:	6811      	ldr	r1, [r2, #0]
 800952e:	1850      	adds	r0, r2, r1
 8009530:	42a0      	cmp	r0, r4
 8009532:	d10b      	bne.n	800954c <_free_r+0x6c>
 8009534:	6820      	ldr	r0, [r4, #0]
 8009536:	4401      	add	r1, r0
 8009538:	1850      	adds	r0, r2, r1
 800953a:	6011      	str	r1, [r2, #0]
 800953c:	4283      	cmp	r3, r0
 800953e:	d1e0      	bne.n	8009502 <_free_r+0x22>
 8009540:	6818      	ldr	r0, [r3, #0]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	4408      	add	r0, r1
 8009546:	6053      	str	r3, [r2, #4]
 8009548:	6010      	str	r0, [r2, #0]
 800954a:	e7da      	b.n	8009502 <_free_r+0x22>
 800954c:	d902      	bls.n	8009554 <_free_r+0x74>
 800954e:	230c      	movs	r3, #12
 8009550:	602b      	str	r3, [r5, #0]
 8009552:	e7d6      	b.n	8009502 <_free_r+0x22>
 8009554:	6820      	ldr	r0, [r4, #0]
 8009556:	1821      	adds	r1, r4, r0
 8009558:	428b      	cmp	r3, r1
 800955a:	bf02      	ittt	eq
 800955c:	6819      	ldreq	r1, [r3, #0]
 800955e:	685b      	ldreq	r3, [r3, #4]
 8009560:	1809      	addeq	r1, r1, r0
 8009562:	6063      	str	r3, [r4, #4]
 8009564:	bf08      	it	eq
 8009566:	6021      	streq	r1, [r4, #0]
 8009568:	6054      	str	r4, [r2, #4]
 800956a:	e7ca      	b.n	8009502 <_free_r+0x22>
 800956c:	bd38      	pop	{r3, r4, r5, pc}
 800956e:	bf00      	nop
 8009570:	2000066c 	.word	0x2000066c

08009574 <malloc>:
 8009574:	4b02      	ldr	r3, [pc, #8]	@ (8009580 <malloc+0xc>)
 8009576:	4601      	mov	r1, r0
 8009578:	6818      	ldr	r0, [r3, #0]
 800957a:	f000 b825 	b.w	80095c8 <_malloc_r>
 800957e:	bf00      	nop
 8009580:	20000030 	.word	0x20000030

08009584 <sbrk_aligned>:
 8009584:	b570      	push	{r4, r5, r6, lr}
 8009586:	4e0f      	ldr	r6, [pc, #60]	@ (80095c4 <sbrk_aligned+0x40>)
 8009588:	460c      	mov	r4, r1
 800958a:	4605      	mov	r5, r0
 800958c:	6831      	ldr	r1, [r6, #0]
 800958e:	b911      	cbnz	r1, 8009596 <sbrk_aligned+0x12>
 8009590:	f001 fe18 	bl	800b1c4 <_sbrk_r>
 8009594:	6030      	str	r0, [r6, #0]
 8009596:	4621      	mov	r1, r4
 8009598:	4628      	mov	r0, r5
 800959a:	f001 fe13 	bl	800b1c4 <_sbrk_r>
 800959e:	1c43      	adds	r3, r0, #1
 80095a0:	d103      	bne.n	80095aa <sbrk_aligned+0x26>
 80095a2:	f04f 34ff 	mov.w	r4, #4294967295
 80095a6:	4620      	mov	r0, r4
 80095a8:	bd70      	pop	{r4, r5, r6, pc}
 80095aa:	1cc4      	adds	r4, r0, #3
 80095ac:	f024 0403 	bic.w	r4, r4, #3
 80095b0:	42a0      	cmp	r0, r4
 80095b2:	d0f8      	beq.n	80095a6 <sbrk_aligned+0x22>
 80095b4:	1a21      	subs	r1, r4, r0
 80095b6:	4628      	mov	r0, r5
 80095b8:	f001 fe04 	bl	800b1c4 <_sbrk_r>
 80095bc:	3001      	adds	r0, #1
 80095be:	d1f2      	bne.n	80095a6 <sbrk_aligned+0x22>
 80095c0:	e7ef      	b.n	80095a2 <sbrk_aligned+0x1e>
 80095c2:	bf00      	nop
 80095c4:	20000668 	.word	0x20000668

080095c8 <_malloc_r>:
 80095c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095cc:	1ccd      	adds	r5, r1, #3
 80095ce:	4606      	mov	r6, r0
 80095d0:	f025 0503 	bic.w	r5, r5, #3
 80095d4:	3508      	adds	r5, #8
 80095d6:	2d0c      	cmp	r5, #12
 80095d8:	bf38      	it	cc
 80095da:	250c      	movcc	r5, #12
 80095dc:	2d00      	cmp	r5, #0
 80095de:	db01      	blt.n	80095e4 <_malloc_r+0x1c>
 80095e0:	42a9      	cmp	r1, r5
 80095e2:	d904      	bls.n	80095ee <_malloc_r+0x26>
 80095e4:	230c      	movs	r3, #12
 80095e6:	6033      	str	r3, [r6, #0]
 80095e8:	2000      	movs	r0, #0
 80095ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80096c4 <_malloc_r+0xfc>
 80095f2:	f000 f869 	bl	80096c8 <__malloc_lock>
 80095f6:	f8d8 3000 	ldr.w	r3, [r8]
 80095fa:	461c      	mov	r4, r3
 80095fc:	bb44      	cbnz	r4, 8009650 <_malloc_r+0x88>
 80095fe:	4629      	mov	r1, r5
 8009600:	4630      	mov	r0, r6
 8009602:	f7ff ffbf 	bl	8009584 <sbrk_aligned>
 8009606:	1c43      	adds	r3, r0, #1
 8009608:	4604      	mov	r4, r0
 800960a:	d158      	bne.n	80096be <_malloc_r+0xf6>
 800960c:	f8d8 4000 	ldr.w	r4, [r8]
 8009610:	4627      	mov	r7, r4
 8009612:	2f00      	cmp	r7, #0
 8009614:	d143      	bne.n	800969e <_malloc_r+0xd6>
 8009616:	2c00      	cmp	r4, #0
 8009618:	d04b      	beq.n	80096b2 <_malloc_r+0xea>
 800961a:	6823      	ldr	r3, [r4, #0]
 800961c:	4639      	mov	r1, r7
 800961e:	4630      	mov	r0, r6
 8009620:	eb04 0903 	add.w	r9, r4, r3
 8009624:	f001 fdce 	bl	800b1c4 <_sbrk_r>
 8009628:	4581      	cmp	r9, r0
 800962a:	d142      	bne.n	80096b2 <_malloc_r+0xea>
 800962c:	6821      	ldr	r1, [r4, #0]
 800962e:	4630      	mov	r0, r6
 8009630:	1a6d      	subs	r5, r5, r1
 8009632:	4629      	mov	r1, r5
 8009634:	f7ff ffa6 	bl	8009584 <sbrk_aligned>
 8009638:	3001      	adds	r0, #1
 800963a:	d03a      	beq.n	80096b2 <_malloc_r+0xea>
 800963c:	6823      	ldr	r3, [r4, #0]
 800963e:	442b      	add	r3, r5
 8009640:	6023      	str	r3, [r4, #0]
 8009642:	f8d8 3000 	ldr.w	r3, [r8]
 8009646:	685a      	ldr	r2, [r3, #4]
 8009648:	bb62      	cbnz	r2, 80096a4 <_malloc_r+0xdc>
 800964a:	f8c8 7000 	str.w	r7, [r8]
 800964e:	e00f      	b.n	8009670 <_malloc_r+0xa8>
 8009650:	6822      	ldr	r2, [r4, #0]
 8009652:	1b52      	subs	r2, r2, r5
 8009654:	d420      	bmi.n	8009698 <_malloc_r+0xd0>
 8009656:	2a0b      	cmp	r2, #11
 8009658:	d917      	bls.n	800968a <_malloc_r+0xc2>
 800965a:	1961      	adds	r1, r4, r5
 800965c:	42a3      	cmp	r3, r4
 800965e:	6025      	str	r5, [r4, #0]
 8009660:	bf18      	it	ne
 8009662:	6059      	strne	r1, [r3, #4]
 8009664:	6863      	ldr	r3, [r4, #4]
 8009666:	bf08      	it	eq
 8009668:	f8c8 1000 	streq.w	r1, [r8]
 800966c:	5162      	str	r2, [r4, r5]
 800966e:	604b      	str	r3, [r1, #4]
 8009670:	4630      	mov	r0, r6
 8009672:	f000 f82f 	bl	80096d4 <__malloc_unlock>
 8009676:	f104 000b 	add.w	r0, r4, #11
 800967a:	1d23      	adds	r3, r4, #4
 800967c:	f020 0007 	bic.w	r0, r0, #7
 8009680:	1ac2      	subs	r2, r0, r3
 8009682:	bf1c      	itt	ne
 8009684:	1a1b      	subne	r3, r3, r0
 8009686:	50a3      	strne	r3, [r4, r2]
 8009688:	e7af      	b.n	80095ea <_malloc_r+0x22>
 800968a:	6862      	ldr	r2, [r4, #4]
 800968c:	42a3      	cmp	r3, r4
 800968e:	bf0c      	ite	eq
 8009690:	f8c8 2000 	streq.w	r2, [r8]
 8009694:	605a      	strne	r2, [r3, #4]
 8009696:	e7eb      	b.n	8009670 <_malloc_r+0xa8>
 8009698:	4623      	mov	r3, r4
 800969a:	6864      	ldr	r4, [r4, #4]
 800969c:	e7ae      	b.n	80095fc <_malloc_r+0x34>
 800969e:	463c      	mov	r4, r7
 80096a0:	687f      	ldr	r7, [r7, #4]
 80096a2:	e7b6      	b.n	8009612 <_malloc_r+0x4a>
 80096a4:	461a      	mov	r2, r3
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	42a3      	cmp	r3, r4
 80096aa:	d1fb      	bne.n	80096a4 <_malloc_r+0xdc>
 80096ac:	2300      	movs	r3, #0
 80096ae:	6053      	str	r3, [r2, #4]
 80096b0:	e7de      	b.n	8009670 <_malloc_r+0xa8>
 80096b2:	230c      	movs	r3, #12
 80096b4:	4630      	mov	r0, r6
 80096b6:	6033      	str	r3, [r6, #0]
 80096b8:	f000 f80c 	bl	80096d4 <__malloc_unlock>
 80096bc:	e794      	b.n	80095e8 <_malloc_r+0x20>
 80096be:	6005      	str	r5, [r0, #0]
 80096c0:	e7d6      	b.n	8009670 <_malloc_r+0xa8>
 80096c2:	bf00      	nop
 80096c4:	2000066c 	.word	0x2000066c

080096c8 <__malloc_lock>:
 80096c8:	4801      	ldr	r0, [pc, #4]	@ (80096d0 <__malloc_lock+0x8>)
 80096ca:	f7ff b8a0 	b.w	800880e <__retarget_lock_acquire_recursive>
 80096ce:	bf00      	nop
 80096d0:	20000664 	.word	0x20000664

080096d4 <__malloc_unlock>:
 80096d4:	4801      	ldr	r0, [pc, #4]	@ (80096dc <__malloc_unlock+0x8>)
 80096d6:	f7ff b89b 	b.w	8008810 <__retarget_lock_release_recursive>
 80096da:	bf00      	nop
 80096dc:	20000664 	.word	0x20000664

080096e0 <_Balloc>:
 80096e0:	b570      	push	{r4, r5, r6, lr}
 80096e2:	69c6      	ldr	r6, [r0, #28]
 80096e4:	4604      	mov	r4, r0
 80096e6:	460d      	mov	r5, r1
 80096e8:	b976      	cbnz	r6, 8009708 <_Balloc+0x28>
 80096ea:	2010      	movs	r0, #16
 80096ec:	f7ff ff42 	bl	8009574 <malloc>
 80096f0:	4602      	mov	r2, r0
 80096f2:	61e0      	str	r0, [r4, #28]
 80096f4:	b920      	cbnz	r0, 8009700 <_Balloc+0x20>
 80096f6:	4b18      	ldr	r3, [pc, #96]	@ (8009758 <_Balloc+0x78>)
 80096f8:	216b      	movs	r1, #107	@ 0x6b
 80096fa:	4818      	ldr	r0, [pc, #96]	@ (800975c <_Balloc+0x7c>)
 80096fc:	f001 fd88 	bl	800b210 <__assert_func>
 8009700:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009704:	6006      	str	r6, [r0, #0]
 8009706:	60c6      	str	r6, [r0, #12]
 8009708:	69e6      	ldr	r6, [r4, #28]
 800970a:	68f3      	ldr	r3, [r6, #12]
 800970c:	b183      	cbz	r3, 8009730 <_Balloc+0x50>
 800970e:	69e3      	ldr	r3, [r4, #28]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009716:	b9b8      	cbnz	r0, 8009748 <_Balloc+0x68>
 8009718:	2101      	movs	r1, #1
 800971a:	4620      	mov	r0, r4
 800971c:	fa01 f605 	lsl.w	r6, r1, r5
 8009720:	1d72      	adds	r2, r6, #5
 8009722:	0092      	lsls	r2, r2, #2
 8009724:	f001 fd92 	bl	800b24c <_calloc_r>
 8009728:	b160      	cbz	r0, 8009744 <_Balloc+0x64>
 800972a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800972e:	e00e      	b.n	800974e <_Balloc+0x6e>
 8009730:	2221      	movs	r2, #33	@ 0x21
 8009732:	2104      	movs	r1, #4
 8009734:	4620      	mov	r0, r4
 8009736:	f001 fd89 	bl	800b24c <_calloc_r>
 800973a:	69e3      	ldr	r3, [r4, #28]
 800973c:	60f0      	str	r0, [r6, #12]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d1e4      	bne.n	800970e <_Balloc+0x2e>
 8009744:	2000      	movs	r0, #0
 8009746:	bd70      	pop	{r4, r5, r6, pc}
 8009748:	6802      	ldr	r2, [r0, #0]
 800974a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800974e:	2300      	movs	r3, #0
 8009750:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009754:	e7f7      	b.n	8009746 <_Balloc+0x66>
 8009756:	bf00      	nop
 8009758:	0800bf96 	.word	0x0800bf96
 800975c:	0800c016 	.word	0x0800c016

08009760 <_Bfree>:
 8009760:	b570      	push	{r4, r5, r6, lr}
 8009762:	69c6      	ldr	r6, [r0, #28]
 8009764:	4605      	mov	r5, r0
 8009766:	460c      	mov	r4, r1
 8009768:	b976      	cbnz	r6, 8009788 <_Bfree+0x28>
 800976a:	2010      	movs	r0, #16
 800976c:	f7ff ff02 	bl	8009574 <malloc>
 8009770:	4602      	mov	r2, r0
 8009772:	61e8      	str	r0, [r5, #28]
 8009774:	b920      	cbnz	r0, 8009780 <_Bfree+0x20>
 8009776:	4b09      	ldr	r3, [pc, #36]	@ (800979c <_Bfree+0x3c>)
 8009778:	218f      	movs	r1, #143	@ 0x8f
 800977a:	4809      	ldr	r0, [pc, #36]	@ (80097a0 <_Bfree+0x40>)
 800977c:	f001 fd48 	bl	800b210 <__assert_func>
 8009780:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009784:	6006      	str	r6, [r0, #0]
 8009786:	60c6      	str	r6, [r0, #12]
 8009788:	b13c      	cbz	r4, 800979a <_Bfree+0x3a>
 800978a:	69eb      	ldr	r3, [r5, #28]
 800978c:	6862      	ldr	r2, [r4, #4]
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009794:	6021      	str	r1, [r4, #0]
 8009796:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800979a:	bd70      	pop	{r4, r5, r6, pc}
 800979c:	0800bf96 	.word	0x0800bf96
 80097a0:	0800c016 	.word	0x0800c016

080097a4 <__multadd>:
 80097a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097a8:	f101 0c14 	add.w	ip, r1, #20
 80097ac:	4607      	mov	r7, r0
 80097ae:	460c      	mov	r4, r1
 80097b0:	461e      	mov	r6, r3
 80097b2:	690d      	ldr	r5, [r1, #16]
 80097b4:	2000      	movs	r0, #0
 80097b6:	f8dc 3000 	ldr.w	r3, [ip]
 80097ba:	3001      	adds	r0, #1
 80097bc:	b299      	uxth	r1, r3
 80097be:	4285      	cmp	r5, r0
 80097c0:	fb02 6101 	mla	r1, r2, r1, r6
 80097c4:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80097c8:	ea4f 4311 	mov.w	r3, r1, lsr #16
 80097cc:	b289      	uxth	r1, r1
 80097ce:	fb02 3306 	mla	r3, r2, r6, r3
 80097d2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80097d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80097da:	f84c 1b04 	str.w	r1, [ip], #4
 80097de:	dcea      	bgt.n	80097b6 <__multadd+0x12>
 80097e0:	b30e      	cbz	r6, 8009826 <__multadd+0x82>
 80097e2:	68a3      	ldr	r3, [r4, #8]
 80097e4:	42ab      	cmp	r3, r5
 80097e6:	dc19      	bgt.n	800981c <__multadd+0x78>
 80097e8:	6861      	ldr	r1, [r4, #4]
 80097ea:	4638      	mov	r0, r7
 80097ec:	3101      	adds	r1, #1
 80097ee:	f7ff ff77 	bl	80096e0 <_Balloc>
 80097f2:	4680      	mov	r8, r0
 80097f4:	b928      	cbnz	r0, 8009802 <__multadd+0x5e>
 80097f6:	4602      	mov	r2, r0
 80097f8:	4b0c      	ldr	r3, [pc, #48]	@ (800982c <__multadd+0x88>)
 80097fa:	21ba      	movs	r1, #186	@ 0xba
 80097fc:	480c      	ldr	r0, [pc, #48]	@ (8009830 <__multadd+0x8c>)
 80097fe:	f001 fd07 	bl	800b210 <__assert_func>
 8009802:	6922      	ldr	r2, [r4, #16]
 8009804:	f104 010c 	add.w	r1, r4, #12
 8009808:	300c      	adds	r0, #12
 800980a:	3202      	adds	r2, #2
 800980c:	0092      	lsls	r2, r2, #2
 800980e:	f001 fce9 	bl	800b1e4 <memcpy>
 8009812:	4621      	mov	r1, r4
 8009814:	4644      	mov	r4, r8
 8009816:	4638      	mov	r0, r7
 8009818:	f7ff ffa2 	bl	8009760 <_Bfree>
 800981c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009820:	3501      	adds	r5, #1
 8009822:	615e      	str	r6, [r3, #20]
 8009824:	6125      	str	r5, [r4, #16]
 8009826:	4620      	mov	r0, r4
 8009828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800982c:	0800c005 	.word	0x0800c005
 8009830:	0800c016 	.word	0x0800c016

08009834 <__s2b>:
 8009834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009838:	4615      	mov	r5, r2
 800983a:	461f      	mov	r7, r3
 800983c:	2209      	movs	r2, #9
 800983e:	3308      	adds	r3, #8
 8009840:	460c      	mov	r4, r1
 8009842:	4606      	mov	r6, r0
 8009844:	2100      	movs	r1, #0
 8009846:	fb93 f3f2 	sdiv	r3, r3, r2
 800984a:	2201      	movs	r2, #1
 800984c:	429a      	cmp	r2, r3
 800984e:	db09      	blt.n	8009864 <__s2b+0x30>
 8009850:	4630      	mov	r0, r6
 8009852:	f7ff ff45 	bl	80096e0 <_Balloc>
 8009856:	b940      	cbnz	r0, 800986a <__s2b+0x36>
 8009858:	4602      	mov	r2, r0
 800985a:	4b19      	ldr	r3, [pc, #100]	@ (80098c0 <__s2b+0x8c>)
 800985c:	21d3      	movs	r1, #211	@ 0xd3
 800985e:	4819      	ldr	r0, [pc, #100]	@ (80098c4 <__s2b+0x90>)
 8009860:	f001 fcd6 	bl	800b210 <__assert_func>
 8009864:	0052      	lsls	r2, r2, #1
 8009866:	3101      	adds	r1, #1
 8009868:	e7f0      	b.n	800984c <__s2b+0x18>
 800986a:	9b08      	ldr	r3, [sp, #32]
 800986c:	2d09      	cmp	r5, #9
 800986e:	6143      	str	r3, [r0, #20]
 8009870:	f04f 0301 	mov.w	r3, #1
 8009874:	6103      	str	r3, [r0, #16]
 8009876:	dd16      	ble.n	80098a6 <__s2b+0x72>
 8009878:	f104 0909 	add.w	r9, r4, #9
 800987c:	442c      	add	r4, r5
 800987e:	46c8      	mov	r8, r9
 8009880:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009884:	4601      	mov	r1, r0
 8009886:	220a      	movs	r2, #10
 8009888:	4630      	mov	r0, r6
 800988a:	3b30      	subs	r3, #48	@ 0x30
 800988c:	f7ff ff8a 	bl	80097a4 <__multadd>
 8009890:	45a0      	cmp	r8, r4
 8009892:	d1f5      	bne.n	8009880 <__s2b+0x4c>
 8009894:	f1a5 0408 	sub.w	r4, r5, #8
 8009898:	444c      	add	r4, r9
 800989a:	1b2d      	subs	r5, r5, r4
 800989c:	1963      	adds	r3, r4, r5
 800989e:	42bb      	cmp	r3, r7
 80098a0:	db04      	blt.n	80098ac <__s2b+0x78>
 80098a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098a6:	340a      	adds	r4, #10
 80098a8:	2509      	movs	r5, #9
 80098aa:	e7f6      	b.n	800989a <__s2b+0x66>
 80098ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80098b0:	4601      	mov	r1, r0
 80098b2:	220a      	movs	r2, #10
 80098b4:	4630      	mov	r0, r6
 80098b6:	3b30      	subs	r3, #48	@ 0x30
 80098b8:	f7ff ff74 	bl	80097a4 <__multadd>
 80098bc:	e7ee      	b.n	800989c <__s2b+0x68>
 80098be:	bf00      	nop
 80098c0:	0800c005 	.word	0x0800c005
 80098c4:	0800c016 	.word	0x0800c016

080098c8 <__hi0bits>:
 80098c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80098cc:	4603      	mov	r3, r0
 80098ce:	bf36      	itet	cc
 80098d0:	0403      	lslcc	r3, r0, #16
 80098d2:	2000      	movcs	r0, #0
 80098d4:	2010      	movcc	r0, #16
 80098d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80098da:	bf3c      	itt	cc
 80098dc:	021b      	lslcc	r3, r3, #8
 80098de:	3008      	addcc	r0, #8
 80098e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098e4:	bf3c      	itt	cc
 80098e6:	011b      	lslcc	r3, r3, #4
 80098e8:	3004      	addcc	r0, #4
 80098ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098ee:	bf3c      	itt	cc
 80098f0:	009b      	lslcc	r3, r3, #2
 80098f2:	3002      	addcc	r0, #2
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	db05      	blt.n	8009904 <__hi0bits+0x3c>
 80098f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80098fc:	f100 0001 	add.w	r0, r0, #1
 8009900:	bf08      	it	eq
 8009902:	2020      	moveq	r0, #32
 8009904:	4770      	bx	lr

08009906 <__lo0bits>:
 8009906:	6803      	ldr	r3, [r0, #0]
 8009908:	4602      	mov	r2, r0
 800990a:	f013 0007 	ands.w	r0, r3, #7
 800990e:	d00b      	beq.n	8009928 <__lo0bits+0x22>
 8009910:	07d9      	lsls	r1, r3, #31
 8009912:	d421      	bmi.n	8009958 <__lo0bits+0x52>
 8009914:	0798      	lsls	r0, r3, #30
 8009916:	bf47      	ittee	mi
 8009918:	085b      	lsrmi	r3, r3, #1
 800991a:	2001      	movmi	r0, #1
 800991c:	089b      	lsrpl	r3, r3, #2
 800991e:	2002      	movpl	r0, #2
 8009920:	bf4c      	ite	mi
 8009922:	6013      	strmi	r3, [r2, #0]
 8009924:	6013      	strpl	r3, [r2, #0]
 8009926:	4770      	bx	lr
 8009928:	b299      	uxth	r1, r3
 800992a:	b909      	cbnz	r1, 8009930 <__lo0bits+0x2a>
 800992c:	0c1b      	lsrs	r3, r3, #16
 800992e:	2010      	movs	r0, #16
 8009930:	b2d9      	uxtb	r1, r3
 8009932:	b909      	cbnz	r1, 8009938 <__lo0bits+0x32>
 8009934:	3008      	adds	r0, #8
 8009936:	0a1b      	lsrs	r3, r3, #8
 8009938:	0719      	lsls	r1, r3, #28
 800993a:	bf04      	itt	eq
 800993c:	091b      	lsreq	r3, r3, #4
 800993e:	3004      	addeq	r0, #4
 8009940:	0799      	lsls	r1, r3, #30
 8009942:	bf04      	itt	eq
 8009944:	089b      	lsreq	r3, r3, #2
 8009946:	3002      	addeq	r0, #2
 8009948:	07d9      	lsls	r1, r3, #31
 800994a:	d403      	bmi.n	8009954 <__lo0bits+0x4e>
 800994c:	085b      	lsrs	r3, r3, #1
 800994e:	f100 0001 	add.w	r0, r0, #1
 8009952:	d003      	beq.n	800995c <__lo0bits+0x56>
 8009954:	6013      	str	r3, [r2, #0]
 8009956:	4770      	bx	lr
 8009958:	2000      	movs	r0, #0
 800995a:	4770      	bx	lr
 800995c:	2020      	movs	r0, #32
 800995e:	4770      	bx	lr

08009960 <__i2b>:
 8009960:	b510      	push	{r4, lr}
 8009962:	460c      	mov	r4, r1
 8009964:	2101      	movs	r1, #1
 8009966:	f7ff febb 	bl	80096e0 <_Balloc>
 800996a:	4602      	mov	r2, r0
 800996c:	b928      	cbnz	r0, 800997a <__i2b+0x1a>
 800996e:	4b05      	ldr	r3, [pc, #20]	@ (8009984 <__i2b+0x24>)
 8009970:	f240 1145 	movw	r1, #325	@ 0x145
 8009974:	4804      	ldr	r0, [pc, #16]	@ (8009988 <__i2b+0x28>)
 8009976:	f001 fc4b 	bl	800b210 <__assert_func>
 800997a:	2301      	movs	r3, #1
 800997c:	6144      	str	r4, [r0, #20]
 800997e:	6103      	str	r3, [r0, #16]
 8009980:	bd10      	pop	{r4, pc}
 8009982:	bf00      	nop
 8009984:	0800c005 	.word	0x0800c005
 8009988:	0800c016 	.word	0x0800c016

0800998c <__multiply>:
 800998c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009990:	4614      	mov	r4, r2
 8009992:	690a      	ldr	r2, [r1, #16]
 8009994:	460f      	mov	r7, r1
 8009996:	b085      	sub	sp, #20
 8009998:	6923      	ldr	r3, [r4, #16]
 800999a:	429a      	cmp	r2, r3
 800999c:	bfa2      	ittt	ge
 800999e:	4623      	movge	r3, r4
 80099a0:	460c      	movge	r4, r1
 80099a2:	461f      	movge	r7, r3
 80099a4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80099a8:	68a3      	ldr	r3, [r4, #8]
 80099aa:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80099ae:	6861      	ldr	r1, [r4, #4]
 80099b0:	eb0a 0609 	add.w	r6, sl, r9
 80099b4:	42b3      	cmp	r3, r6
 80099b6:	bfb8      	it	lt
 80099b8:	3101      	addlt	r1, #1
 80099ba:	f7ff fe91 	bl	80096e0 <_Balloc>
 80099be:	b930      	cbnz	r0, 80099ce <__multiply+0x42>
 80099c0:	4602      	mov	r2, r0
 80099c2:	4b45      	ldr	r3, [pc, #276]	@ (8009ad8 <__multiply+0x14c>)
 80099c4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80099c8:	4844      	ldr	r0, [pc, #272]	@ (8009adc <__multiply+0x150>)
 80099ca:	f001 fc21 	bl	800b210 <__assert_func>
 80099ce:	f100 0514 	add.w	r5, r0, #20
 80099d2:	2200      	movs	r2, #0
 80099d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80099d8:	462b      	mov	r3, r5
 80099da:	4543      	cmp	r3, r8
 80099dc:	d321      	bcc.n	8009a22 <__multiply+0x96>
 80099de:	f107 0114 	add.w	r1, r7, #20
 80099e2:	f104 0214 	add.w	r2, r4, #20
 80099e6:	f104 0715 	add.w	r7, r4, #21
 80099ea:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80099ee:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80099f2:	9302      	str	r3, [sp, #8]
 80099f4:	1b13      	subs	r3, r2, r4
 80099f6:	3b15      	subs	r3, #21
 80099f8:	f023 0303 	bic.w	r3, r3, #3
 80099fc:	3304      	adds	r3, #4
 80099fe:	42ba      	cmp	r2, r7
 8009a00:	bf38      	it	cc
 8009a02:	2304      	movcc	r3, #4
 8009a04:	9301      	str	r3, [sp, #4]
 8009a06:	9b02      	ldr	r3, [sp, #8]
 8009a08:	9103      	str	r1, [sp, #12]
 8009a0a:	428b      	cmp	r3, r1
 8009a0c:	d80c      	bhi.n	8009a28 <__multiply+0x9c>
 8009a0e:	2e00      	cmp	r6, #0
 8009a10:	dd03      	ble.n	8009a1a <__multiply+0x8e>
 8009a12:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d05b      	beq.n	8009ad2 <__multiply+0x146>
 8009a1a:	6106      	str	r6, [r0, #16]
 8009a1c:	b005      	add	sp, #20
 8009a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a22:	f843 2b04 	str.w	r2, [r3], #4
 8009a26:	e7d8      	b.n	80099da <__multiply+0x4e>
 8009a28:	f8b1 a000 	ldrh.w	sl, [r1]
 8009a2c:	f1ba 0f00 	cmp.w	sl, #0
 8009a30:	d024      	beq.n	8009a7c <__multiply+0xf0>
 8009a32:	f104 0e14 	add.w	lr, r4, #20
 8009a36:	46a9      	mov	r9, r5
 8009a38:	f04f 0c00 	mov.w	ip, #0
 8009a3c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009a40:	f8d9 3000 	ldr.w	r3, [r9]
 8009a44:	fa1f fb87 	uxth.w	fp, r7
 8009a48:	4572      	cmp	r2, lr
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009a50:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009a54:	f8d9 7000 	ldr.w	r7, [r9]
 8009a58:	4463      	add	r3, ip
 8009a5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009a5e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009a62:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009a6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009a70:	f849 3b04 	str.w	r3, [r9], #4
 8009a74:	d8e2      	bhi.n	8009a3c <__multiply+0xb0>
 8009a76:	9b01      	ldr	r3, [sp, #4]
 8009a78:	f845 c003 	str.w	ip, [r5, r3]
 8009a7c:	9b03      	ldr	r3, [sp, #12]
 8009a7e:	3104      	adds	r1, #4
 8009a80:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009a84:	f1b9 0f00 	cmp.w	r9, #0
 8009a88:	d021      	beq.n	8009ace <__multiply+0x142>
 8009a8a:	682b      	ldr	r3, [r5, #0]
 8009a8c:	f104 0c14 	add.w	ip, r4, #20
 8009a90:	46ae      	mov	lr, r5
 8009a92:	f04f 0a00 	mov.w	sl, #0
 8009a96:	f8bc b000 	ldrh.w	fp, [ip]
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009aa0:	fb09 770b 	mla	r7, r9, fp, r7
 8009aa4:	4457      	add	r7, sl
 8009aa6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009aaa:	f84e 3b04 	str.w	r3, [lr], #4
 8009aae:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009ab2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ab6:	f8be 3000 	ldrh.w	r3, [lr]
 8009aba:	4562      	cmp	r2, ip
 8009abc:	fb09 330a 	mla	r3, r9, sl, r3
 8009ac0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009ac4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ac8:	d8e5      	bhi.n	8009a96 <__multiply+0x10a>
 8009aca:	9f01      	ldr	r7, [sp, #4]
 8009acc:	51eb      	str	r3, [r5, r7]
 8009ace:	3504      	adds	r5, #4
 8009ad0:	e799      	b.n	8009a06 <__multiply+0x7a>
 8009ad2:	3e01      	subs	r6, #1
 8009ad4:	e79b      	b.n	8009a0e <__multiply+0x82>
 8009ad6:	bf00      	nop
 8009ad8:	0800c005 	.word	0x0800c005
 8009adc:	0800c016 	.word	0x0800c016

08009ae0 <__pow5mult>:
 8009ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ae4:	4615      	mov	r5, r2
 8009ae6:	f012 0203 	ands.w	r2, r2, #3
 8009aea:	4607      	mov	r7, r0
 8009aec:	460e      	mov	r6, r1
 8009aee:	d007      	beq.n	8009b00 <__pow5mult+0x20>
 8009af0:	3a01      	subs	r2, #1
 8009af2:	4c25      	ldr	r4, [pc, #148]	@ (8009b88 <__pow5mult+0xa8>)
 8009af4:	2300      	movs	r3, #0
 8009af6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009afa:	f7ff fe53 	bl	80097a4 <__multadd>
 8009afe:	4606      	mov	r6, r0
 8009b00:	10ad      	asrs	r5, r5, #2
 8009b02:	d03d      	beq.n	8009b80 <__pow5mult+0xa0>
 8009b04:	69fc      	ldr	r4, [r7, #28]
 8009b06:	b97c      	cbnz	r4, 8009b28 <__pow5mult+0x48>
 8009b08:	2010      	movs	r0, #16
 8009b0a:	f7ff fd33 	bl	8009574 <malloc>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	61f8      	str	r0, [r7, #28]
 8009b12:	b928      	cbnz	r0, 8009b20 <__pow5mult+0x40>
 8009b14:	4b1d      	ldr	r3, [pc, #116]	@ (8009b8c <__pow5mult+0xac>)
 8009b16:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009b1a:	481d      	ldr	r0, [pc, #116]	@ (8009b90 <__pow5mult+0xb0>)
 8009b1c:	f001 fb78 	bl	800b210 <__assert_func>
 8009b20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b24:	6004      	str	r4, [r0, #0]
 8009b26:	60c4      	str	r4, [r0, #12]
 8009b28:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009b2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b30:	b94c      	cbnz	r4, 8009b46 <__pow5mult+0x66>
 8009b32:	f240 2171 	movw	r1, #625	@ 0x271
 8009b36:	4638      	mov	r0, r7
 8009b38:	f7ff ff12 	bl	8009960 <__i2b>
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	4604      	mov	r4, r0
 8009b40:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b44:	6003      	str	r3, [r0, #0]
 8009b46:	f04f 0900 	mov.w	r9, #0
 8009b4a:	07eb      	lsls	r3, r5, #31
 8009b4c:	d50a      	bpl.n	8009b64 <__pow5mult+0x84>
 8009b4e:	4631      	mov	r1, r6
 8009b50:	4622      	mov	r2, r4
 8009b52:	4638      	mov	r0, r7
 8009b54:	f7ff ff1a 	bl	800998c <__multiply>
 8009b58:	4680      	mov	r8, r0
 8009b5a:	4631      	mov	r1, r6
 8009b5c:	4638      	mov	r0, r7
 8009b5e:	4646      	mov	r6, r8
 8009b60:	f7ff fdfe 	bl	8009760 <_Bfree>
 8009b64:	106d      	asrs	r5, r5, #1
 8009b66:	d00b      	beq.n	8009b80 <__pow5mult+0xa0>
 8009b68:	6820      	ldr	r0, [r4, #0]
 8009b6a:	b938      	cbnz	r0, 8009b7c <__pow5mult+0x9c>
 8009b6c:	4622      	mov	r2, r4
 8009b6e:	4621      	mov	r1, r4
 8009b70:	4638      	mov	r0, r7
 8009b72:	f7ff ff0b 	bl	800998c <__multiply>
 8009b76:	6020      	str	r0, [r4, #0]
 8009b78:	f8c0 9000 	str.w	r9, [r0]
 8009b7c:	4604      	mov	r4, r0
 8009b7e:	e7e4      	b.n	8009b4a <__pow5mult+0x6a>
 8009b80:	4630      	mov	r0, r6
 8009b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b86:	bf00      	nop
 8009b88:	0800c070 	.word	0x0800c070
 8009b8c:	0800bf96 	.word	0x0800bf96
 8009b90:	0800c016 	.word	0x0800c016

08009b94 <__lshift>:
 8009b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b98:	460c      	mov	r4, r1
 8009b9a:	4607      	mov	r7, r0
 8009b9c:	4691      	mov	r9, r2
 8009b9e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ba2:	6923      	ldr	r3, [r4, #16]
 8009ba4:	6849      	ldr	r1, [r1, #4]
 8009ba6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009baa:	68a3      	ldr	r3, [r4, #8]
 8009bac:	f108 0601 	add.w	r6, r8, #1
 8009bb0:	42b3      	cmp	r3, r6
 8009bb2:	db0b      	blt.n	8009bcc <__lshift+0x38>
 8009bb4:	4638      	mov	r0, r7
 8009bb6:	f7ff fd93 	bl	80096e0 <_Balloc>
 8009bba:	4605      	mov	r5, r0
 8009bbc:	b948      	cbnz	r0, 8009bd2 <__lshift+0x3e>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	4b28      	ldr	r3, [pc, #160]	@ (8009c64 <__lshift+0xd0>)
 8009bc2:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009bc6:	4828      	ldr	r0, [pc, #160]	@ (8009c68 <__lshift+0xd4>)
 8009bc8:	f001 fb22 	bl	800b210 <__assert_func>
 8009bcc:	3101      	adds	r1, #1
 8009bce:	005b      	lsls	r3, r3, #1
 8009bd0:	e7ee      	b.n	8009bb0 <__lshift+0x1c>
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	f100 0114 	add.w	r1, r0, #20
 8009bd8:	f100 0210 	add.w	r2, r0, #16
 8009bdc:	4618      	mov	r0, r3
 8009bde:	4553      	cmp	r3, sl
 8009be0:	db33      	blt.n	8009c4a <__lshift+0xb6>
 8009be2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009be6:	f104 0314 	add.w	r3, r4, #20
 8009bea:	6920      	ldr	r0, [r4, #16]
 8009bec:	f019 091f 	ands.w	r9, r9, #31
 8009bf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009bf4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009bf8:	d02b      	beq.n	8009c52 <__lshift+0xbe>
 8009bfa:	f1c9 0e20 	rsb	lr, r9, #32
 8009bfe:	468a      	mov	sl, r1
 8009c00:	2200      	movs	r2, #0
 8009c02:	6818      	ldr	r0, [r3, #0]
 8009c04:	fa00 f009 	lsl.w	r0, r0, r9
 8009c08:	4310      	orrs	r0, r2
 8009c0a:	f84a 0b04 	str.w	r0, [sl], #4
 8009c0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c12:	459c      	cmp	ip, r3
 8009c14:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c18:	d8f3      	bhi.n	8009c02 <__lshift+0x6e>
 8009c1a:	ebac 0304 	sub.w	r3, ip, r4
 8009c1e:	f104 0015 	add.w	r0, r4, #21
 8009c22:	3b15      	subs	r3, #21
 8009c24:	f023 0303 	bic.w	r3, r3, #3
 8009c28:	3304      	adds	r3, #4
 8009c2a:	4584      	cmp	ip, r0
 8009c2c:	bf38      	it	cc
 8009c2e:	2304      	movcc	r3, #4
 8009c30:	50ca      	str	r2, [r1, r3]
 8009c32:	b10a      	cbz	r2, 8009c38 <__lshift+0xa4>
 8009c34:	f108 0602 	add.w	r6, r8, #2
 8009c38:	3e01      	subs	r6, #1
 8009c3a:	4638      	mov	r0, r7
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	612e      	str	r6, [r5, #16]
 8009c40:	f7ff fd8e 	bl	8009760 <_Bfree>
 8009c44:	4628      	mov	r0, r5
 8009c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	f842 0f04 	str.w	r0, [r2, #4]!
 8009c50:	e7c5      	b.n	8009bde <__lshift+0x4a>
 8009c52:	3904      	subs	r1, #4
 8009c54:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c58:	459c      	cmp	ip, r3
 8009c5a:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c5e:	d8f9      	bhi.n	8009c54 <__lshift+0xc0>
 8009c60:	e7ea      	b.n	8009c38 <__lshift+0xa4>
 8009c62:	bf00      	nop
 8009c64:	0800c005 	.word	0x0800c005
 8009c68:	0800c016 	.word	0x0800c016

08009c6c <__mcmp>:
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	690a      	ldr	r2, [r1, #16]
 8009c70:	6900      	ldr	r0, [r0, #16]
 8009c72:	1a80      	subs	r0, r0, r2
 8009c74:	b530      	push	{r4, r5, lr}
 8009c76:	d10e      	bne.n	8009c96 <__mcmp+0x2a>
 8009c78:	3314      	adds	r3, #20
 8009c7a:	3114      	adds	r1, #20
 8009c7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009c80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009c84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009c88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009c8c:	4295      	cmp	r5, r2
 8009c8e:	d003      	beq.n	8009c98 <__mcmp+0x2c>
 8009c90:	d205      	bcs.n	8009c9e <__mcmp+0x32>
 8009c92:	f04f 30ff 	mov.w	r0, #4294967295
 8009c96:	bd30      	pop	{r4, r5, pc}
 8009c98:	42a3      	cmp	r3, r4
 8009c9a:	d3f3      	bcc.n	8009c84 <__mcmp+0x18>
 8009c9c:	e7fb      	b.n	8009c96 <__mcmp+0x2a>
 8009c9e:	2001      	movs	r0, #1
 8009ca0:	e7f9      	b.n	8009c96 <__mcmp+0x2a>
	...

08009ca4 <__mdiff>:
 8009ca4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca8:	4689      	mov	r9, r1
 8009caa:	4606      	mov	r6, r0
 8009cac:	4611      	mov	r1, r2
 8009cae:	4614      	mov	r4, r2
 8009cb0:	4648      	mov	r0, r9
 8009cb2:	f7ff ffdb 	bl	8009c6c <__mcmp>
 8009cb6:	1e05      	subs	r5, r0, #0
 8009cb8:	d112      	bne.n	8009ce0 <__mdiff+0x3c>
 8009cba:	4629      	mov	r1, r5
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	f7ff fd0f 	bl	80096e0 <_Balloc>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	b928      	cbnz	r0, 8009cd2 <__mdiff+0x2e>
 8009cc6:	4b41      	ldr	r3, [pc, #260]	@ (8009dcc <__mdiff+0x128>)
 8009cc8:	f240 2137 	movw	r1, #567	@ 0x237
 8009ccc:	4840      	ldr	r0, [pc, #256]	@ (8009dd0 <__mdiff+0x12c>)
 8009cce:	f001 fa9f 	bl	800b210 <__assert_func>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009cd8:	4610      	mov	r0, r2
 8009cda:	b003      	add	sp, #12
 8009cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce0:	bfbc      	itt	lt
 8009ce2:	464b      	movlt	r3, r9
 8009ce4:	46a1      	movlt	r9, r4
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	bfb8      	it	lt
 8009cea:	2501      	movlt	r5, #1
 8009cec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009cf0:	bfb4      	ite	lt
 8009cf2:	461c      	movlt	r4, r3
 8009cf4:	2500      	movge	r5, #0
 8009cf6:	f7ff fcf3 	bl	80096e0 <_Balloc>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	b918      	cbnz	r0, 8009d06 <__mdiff+0x62>
 8009cfe:	4b33      	ldr	r3, [pc, #204]	@ (8009dcc <__mdiff+0x128>)
 8009d00:	f240 2145 	movw	r1, #581	@ 0x245
 8009d04:	e7e2      	b.n	8009ccc <__mdiff+0x28>
 8009d06:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009d0a:	f104 0e14 	add.w	lr, r4, #20
 8009d0e:	6926      	ldr	r6, [r4, #16]
 8009d10:	f100 0b14 	add.w	fp, r0, #20
 8009d14:	60c5      	str	r5, [r0, #12]
 8009d16:	f109 0514 	add.w	r5, r9, #20
 8009d1a:	f109 0310 	add.w	r3, r9, #16
 8009d1e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009d22:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009d26:	46d9      	mov	r9, fp
 8009d28:	f04f 0c00 	mov.w	ip, #0
 8009d2c:	9301      	str	r3, [sp, #4]
 8009d2e:	9b01      	ldr	r3, [sp, #4]
 8009d30:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009d34:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009d38:	4576      	cmp	r6, lr
 8009d3a:	9301      	str	r3, [sp, #4]
 8009d3c:	fa1f f38a 	uxth.w	r3, sl
 8009d40:	4619      	mov	r1, r3
 8009d42:	b283      	uxth	r3, r0
 8009d44:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8009d48:	eba1 0303 	sub.w	r3, r1, r3
 8009d4c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009d50:	4463      	add	r3, ip
 8009d52:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009d5c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009d60:	f849 3b04 	str.w	r3, [r9], #4
 8009d64:	d8e3      	bhi.n	8009d2e <__mdiff+0x8a>
 8009d66:	1b33      	subs	r3, r6, r4
 8009d68:	3415      	adds	r4, #21
 8009d6a:	3b15      	subs	r3, #21
 8009d6c:	f023 0303 	bic.w	r3, r3, #3
 8009d70:	3304      	adds	r3, #4
 8009d72:	42a6      	cmp	r6, r4
 8009d74:	bf38      	it	cc
 8009d76:	2304      	movcc	r3, #4
 8009d78:	441d      	add	r5, r3
 8009d7a:	445b      	add	r3, fp
 8009d7c:	462c      	mov	r4, r5
 8009d7e:	461e      	mov	r6, r3
 8009d80:	4544      	cmp	r4, r8
 8009d82:	d30e      	bcc.n	8009da2 <__mdiff+0xfe>
 8009d84:	f108 0103 	add.w	r1, r8, #3
 8009d88:	1b49      	subs	r1, r1, r5
 8009d8a:	3d03      	subs	r5, #3
 8009d8c:	f021 0103 	bic.w	r1, r1, #3
 8009d90:	45a8      	cmp	r8, r5
 8009d92:	bf38      	it	cc
 8009d94:	2100      	movcc	r1, #0
 8009d96:	440b      	add	r3, r1
 8009d98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d9c:	b199      	cbz	r1, 8009dc6 <__mdiff+0x122>
 8009d9e:	6117      	str	r7, [r2, #16]
 8009da0:	e79a      	b.n	8009cd8 <__mdiff+0x34>
 8009da2:	f854 1b04 	ldr.w	r1, [r4], #4
 8009da6:	46e6      	mov	lr, ip
 8009da8:	fa1f fc81 	uxth.w	ip, r1
 8009dac:	0c08      	lsrs	r0, r1, #16
 8009dae:	4471      	add	r1, lr
 8009db0:	44f4      	add	ip, lr
 8009db2:	b289      	uxth	r1, r1
 8009db4:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009db8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009dbc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009dc0:	f846 1b04 	str.w	r1, [r6], #4
 8009dc4:	e7dc      	b.n	8009d80 <__mdiff+0xdc>
 8009dc6:	3f01      	subs	r7, #1
 8009dc8:	e7e6      	b.n	8009d98 <__mdiff+0xf4>
 8009dca:	bf00      	nop
 8009dcc:	0800c005 	.word	0x0800c005
 8009dd0:	0800c016 	.word	0x0800c016

08009dd4 <__ulp>:
 8009dd4:	b082      	sub	sp, #8
 8009dd6:	4b11      	ldr	r3, [pc, #68]	@ (8009e1c <__ulp+0x48>)
 8009dd8:	ed8d 0b00 	vstr	d0, [sp]
 8009ddc:	9a01      	ldr	r2, [sp, #4]
 8009dde:	4013      	ands	r3, r2
 8009de0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	dc08      	bgt.n	8009dfa <__ulp+0x26>
 8009de8:	425b      	negs	r3, r3
 8009dea:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009dee:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009df2:	da04      	bge.n	8009dfe <__ulp+0x2a>
 8009df4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009df8:	4113      	asrs	r3, r2
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	e008      	b.n	8009e10 <__ulp+0x3c>
 8009dfe:	f1a2 0314 	sub.w	r3, r2, #20
 8009e02:	2b1e      	cmp	r3, #30
 8009e04:	bfd6      	itet	le
 8009e06:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009e0a:	2201      	movgt	r2, #1
 8009e0c:	40da      	lsrle	r2, r3
 8009e0e:	2300      	movs	r3, #0
 8009e10:	4619      	mov	r1, r3
 8009e12:	4610      	mov	r0, r2
 8009e14:	ec41 0b10 	vmov	d0, r0, r1
 8009e18:	b002      	add	sp, #8
 8009e1a:	4770      	bx	lr
 8009e1c:	7ff00000 	.word	0x7ff00000

08009e20 <__b2d>:
 8009e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e24:	6906      	ldr	r6, [r0, #16]
 8009e26:	f100 0814 	add.w	r8, r0, #20
 8009e2a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009e2e:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009e32:	1f37      	subs	r7, r6, #4
 8009e34:	4610      	mov	r0, r2
 8009e36:	f7ff fd47 	bl	80098c8 <__hi0bits>
 8009e3a:	f1c0 0320 	rsb	r3, r0, #32
 8009e3e:	280a      	cmp	r0, #10
 8009e40:	600b      	str	r3, [r1, #0]
 8009e42:	491d      	ldr	r1, [pc, #116]	@ (8009eb8 <__b2d+0x98>)
 8009e44:	dc16      	bgt.n	8009e74 <__b2d+0x54>
 8009e46:	f1c0 0c0b 	rsb	ip, r0, #11
 8009e4a:	45b8      	cmp	r8, r7
 8009e4c:	f100 0015 	add.w	r0, r0, #21
 8009e50:	fa22 f30c 	lsr.w	r3, r2, ip
 8009e54:	fa02 f000 	lsl.w	r0, r2, r0
 8009e58:	ea43 0501 	orr.w	r5, r3, r1
 8009e5c:	bf34      	ite	cc
 8009e5e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009e62:	2300      	movcs	r3, #0
 8009e64:	fa23 f30c 	lsr.w	r3, r3, ip
 8009e68:	4303      	orrs	r3, r0
 8009e6a:	461c      	mov	r4, r3
 8009e6c:	ec45 4b10 	vmov	d0, r4, r5
 8009e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e74:	45b8      	cmp	r8, r7
 8009e76:	bf3a      	itte	cc
 8009e78:	f1a6 0708 	subcc.w	r7, r6, #8
 8009e7c:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009e80:	2300      	movcs	r3, #0
 8009e82:	380b      	subs	r0, #11
 8009e84:	d014      	beq.n	8009eb0 <__b2d+0x90>
 8009e86:	f1c0 0120 	rsb	r1, r0, #32
 8009e8a:	4082      	lsls	r2, r0
 8009e8c:	4547      	cmp	r7, r8
 8009e8e:	fa23 f401 	lsr.w	r4, r3, r1
 8009e92:	fa03 f300 	lsl.w	r3, r3, r0
 8009e96:	ea42 0204 	orr.w	r2, r2, r4
 8009e9a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009e9e:	bf8c      	ite	hi
 8009ea0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009ea4:	2200      	movls	r2, #0
 8009ea6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009eaa:	40ca      	lsrs	r2, r1
 8009eac:	4313      	orrs	r3, r2
 8009eae:	e7dc      	b.n	8009e6a <__b2d+0x4a>
 8009eb0:	ea42 0501 	orr.w	r5, r2, r1
 8009eb4:	e7d9      	b.n	8009e6a <__b2d+0x4a>
 8009eb6:	bf00      	nop
 8009eb8:	3ff00000 	.word	0x3ff00000

08009ebc <__d2b>:
 8009ebc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ec0:	460f      	mov	r7, r1
 8009ec2:	2101      	movs	r1, #1
 8009ec4:	4616      	mov	r6, r2
 8009ec6:	ec59 8b10 	vmov	r8, r9, d0
 8009eca:	f7ff fc09 	bl	80096e0 <_Balloc>
 8009ece:	4604      	mov	r4, r0
 8009ed0:	b930      	cbnz	r0, 8009ee0 <__d2b+0x24>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	4b23      	ldr	r3, [pc, #140]	@ (8009f64 <__d2b+0xa8>)
 8009ed6:	f240 310f 	movw	r1, #783	@ 0x30f
 8009eda:	4823      	ldr	r0, [pc, #140]	@ (8009f68 <__d2b+0xac>)
 8009edc:	f001 f998 	bl	800b210 <__assert_func>
 8009ee0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009ee4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ee8:	b10d      	cbz	r5, 8009eee <__d2b+0x32>
 8009eea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009eee:	9301      	str	r3, [sp, #4]
 8009ef0:	f1b8 0300 	subs.w	r3, r8, #0
 8009ef4:	d023      	beq.n	8009f3e <__d2b+0x82>
 8009ef6:	4668      	mov	r0, sp
 8009ef8:	9300      	str	r3, [sp, #0]
 8009efa:	f7ff fd04 	bl	8009906 <__lo0bits>
 8009efe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009f02:	b1d0      	cbz	r0, 8009f3a <__d2b+0x7e>
 8009f04:	f1c0 0320 	rsb	r3, r0, #32
 8009f08:	fa02 f303 	lsl.w	r3, r2, r3
 8009f0c:	40c2      	lsrs	r2, r0
 8009f0e:	430b      	orrs	r3, r1
 8009f10:	9201      	str	r2, [sp, #4]
 8009f12:	6163      	str	r3, [r4, #20]
 8009f14:	9b01      	ldr	r3, [sp, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	61a3      	str	r3, [r4, #24]
 8009f1a:	bf0c      	ite	eq
 8009f1c:	2201      	moveq	r2, #1
 8009f1e:	2202      	movne	r2, #2
 8009f20:	6122      	str	r2, [r4, #16]
 8009f22:	b1a5      	cbz	r5, 8009f4e <__d2b+0x92>
 8009f24:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009f28:	4405      	add	r5, r0
 8009f2a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009f2e:	603d      	str	r5, [r7, #0]
 8009f30:	6030      	str	r0, [r6, #0]
 8009f32:	4620      	mov	r0, r4
 8009f34:	b003      	add	sp, #12
 8009f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f3a:	6161      	str	r1, [r4, #20]
 8009f3c:	e7ea      	b.n	8009f14 <__d2b+0x58>
 8009f3e:	a801      	add	r0, sp, #4
 8009f40:	f7ff fce1 	bl	8009906 <__lo0bits>
 8009f44:	9b01      	ldr	r3, [sp, #4]
 8009f46:	3020      	adds	r0, #32
 8009f48:	2201      	movs	r2, #1
 8009f4a:	6163      	str	r3, [r4, #20]
 8009f4c:	e7e8      	b.n	8009f20 <__d2b+0x64>
 8009f4e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009f52:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f56:	6038      	str	r0, [r7, #0]
 8009f58:	6918      	ldr	r0, [r3, #16]
 8009f5a:	f7ff fcb5 	bl	80098c8 <__hi0bits>
 8009f5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f62:	e7e5      	b.n	8009f30 <__d2b+0x74>
 8009f64:	0800c005 	.word	0x0800c005
 8009f68:	0800c016 	.word	0x0800c016

08009f6c <__ratio>:
 8009f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f70:	b085      	sub	sp, #20
 8009f72:	e9cd 1000 	strd	r1, r0, [sp]
 8009f76:	a902      	add	r1, sp, #8
 8009f78:	f7ff ff52 	bl	8009e20 <__b2d>
 8009f7c:	a903      	add	r1, sp, #12
 8009f7e:	9800      	ldr	r0, [sp, #0]
 8009f80:	ec55 4b10 	vmov	r4, r5, d0
 8009f84:	f7ff ff4c 	bl	8009e20 <__b2d>
 8009f88:	9b01      	ldr	r3, [sp, #4]
 8009f8a:	462f      	mov	r7, r5
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	6919      	ldr	r1, [r3, #16]
 8009f90:	9b00      	ldr	r3, [sp, #0]
 8009f92:	691b      	ldr	r3, [r3, #16]
 8009f94:	1ac9      	subs	r1, r1, r3
 8009f96:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009f9a:	ec5b ab10 	vmov	sl, fp, d0
 8009f9e:	1a9b      	subs	r3, r3, r2
 8009fa0:	46d9      	mov	r9, fp
 8009fa2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	bfcd      	iteet	gt
 8009faa:	462a      	movgt	r2, r5
 8009fac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009fb0:	465a      	movle	r2, fp
 8009fb2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009fb6:	bfd8      	it	le
 8009fb8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009fbc:	4652      	mov	r2, sl
 8009fbe:	4639      	mov	r1, r7
 8009fc0:	464b      	mov	r3, r9
 8009fc2:	f7f6 fc57 	bl	8000874 <__aeabi_ddiv>
 8009fc6:	ec41 0b10 	vmov	d0, r0, r1
 8009fca:	b005      	add	sp, #20
 8009fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009fd0 <__copybits>:
 8009fd0:	3901      	subs	r1, #1
 8009fd2:	f102 0314 	add.w	r3, r2, #20
 8009fd6:	1149      	asrs	r1, r1, #5
 8009fd8:	b570      	push	{r4, r5, r6, lr}
 8009fda:	3101      	adds	r1, #1
 8009fdc:	6914      	ldr	r4, [r2, #16]
 8009fde:	1f05      	subs	r5, r0, #4
 8009fe0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009fe4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009fe8:	42a3      	cmp	r3, r4
 8009fea:	d30c      	bcc.n	800a006 <__copybits+0x36>
 8009fec:	1aa3      	subs	r3, r4, r2
 8009fee:	3211      	adds	r2, #17
 8009ff0:	3b11      	subs	r3, #17
 8009ff2:	f023 0303 	bic.w	r3, r3, #3
 8009ff6:	42a2      	cmp	r2, r4
 8009ff8:	bf88      	it	hi
 8009ffa:	2300      	movhi	r3, #0
 8009ffc:	4418      	add	r0, r3
 8009ffe:	2300      	movs	r3, #0
 800a000:	4288      	cmp	r0, r1
 800a002:	d305      	bcc.n	800a010 <__copybits+0x40>
 800a004:	bd70      	pop	{r4, r5, r6, pc}
 800a006:	f853 6b04 	ldr.w	r6, [r3], #4
 800a00a:	f845 6f04 	str.w	r6, [r5, #4]!
 800a00e:	e7eb      	b.n	8009fe8 <__copybits+0x18>
 800a010:	f840 3b04 	str.w	r3, [r0], #4
 800a014:	e7f4      	b.n	800a000 <__copybits+0x30>

0800a016 <__any_on>:
 800a016:	f100 0214 	add.w	r2, r0, #20
 800a01a:	114b      	asrs	r3, r1, #5
 800a01c:	6900      	ldr	r0, [r0, #16]
 800a01e:	4298      	cmp	r0, r3
 800a020:	b510      	push	{r4, lr}
 800a022:	db11      	blt.n	800a048 <__any_on+0x32>
 800a024:	dd0a      	ble.n	800a03c <__any_on+0x26>
 800a026:	f011 011f 	ands.w	r1, r1, #31
 800a02a:	d007      	beq.n	800a03c <__any_on+0x26>
 800a02c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a030:	fa24 f001 	lsr.w	r0, r4, r1
 800a034:	fa00 f101 	lsl.w	r1, r0, r1
 800a038:	428c      	cmp	r4, r1
 800a03a:	d10b      	bne.n	800a054 <__any_on+0x3e>
 800a03c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a040:	4293      	cmp	r3, r2
 800a042:	d803      	bhi.n	800a04c <__any_on+0x36>
 800a044:	2000      	movs	r0, #0
 800a046:	bd10      	pop	{r4, pc}
 800a048:	4603      	mov	r3, r0
 800a04a:	e7f7      	b.n	800a03c <__any_on+0x26>
 800a04c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a050:	2900      	cmp	r1, #0
 800a052:	d0f5      	beq.n	800a040 <__any_on+0x2a>
 800a054:	2001      	movs	r0, #1
 800a056:	e7f6      	b.n	800a046 <__any_on+0x30>

0800a058 <sulp>:
 800a058:	b570      	push	{r4, r5, r6, lr}
 800a05a:	4604      	mov	r4, r0
 800a05c:	460d      	mov	r5, r1
 800a05e:	4616      	mov	r6, r2
 800a060:	ec45 4b10 	vmov	d0, r4, r5
 800a064:	f7ff feb6 	bl	8009dd4 <__ulp>
 800a068:	ec51 0b10 	vmov	r0, r1, d0
 800a06c:	b17e      	cbz	r6, 800a08e <sulp+0x36>
 800a06e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a072:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a076:	2b00      	cmp	r3, #0
 800a078:	dd09      	ble.n	800a08e <sulp+0x36>
 800a07a:	051b      	lsls	r3, r3, #20
 800a07c:	2400      	movs	r4, #0
 800a07e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a082:	4622      	mov	r2, r4
 800a084:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a088:	462b      	mov	r3, r5
 800a08a:	f7f6 fac9 	bl	8000620 <__aeabi_dmul>
 800a08e:	ec41 0b10 	vmov	d0, r0, r1
 800a092:	bd70      	pop	{r4, r5, r6, pc}
 800a094:	0000      	movs	r0, r0
	...

0800a098 <_strtod_l>:
 800a098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a09c:	b09f      	sub	sp, #124	@ 0x7c
 800a09e:	460c      	mov	r4, r1
 800a0a0:	f04f 0a00 	mov.w	sl, #0
 800a0a4:	f04f 0b00 	mov.w	fp, #0
 800a0a8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	9005      	str	r0, [sp, #20]
 800a0ae:	921a      	str	r2, [sp, #104]	@ 0x68
 800a0b0:	460a      	mov	r2, r1
 800a0b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a0b4:	7811      	ldrb	r1, [r2, #0]
 800a0b6:	292b      	cmp	r1, #43	@ 0x2b
 800a0b8:	d04a      	beq.n	800a150 <_strtod_l+0xb8>
 800a0ba:	d838      	bhi.n	800a12e <_strtod_l+0x96>
 800a0bc:	290d      	cmp	r1, #13
 800a0be:	d832      	bhi.n	800a126 <_strtod_l+0x8e>
 800a0c0:	2908      	cmp	r1, #8
 800a0c2:	d832      	bhi.n	800a12a <_strtod_l+0x92>
 800a0c4:	2900      	cmp	r1, #0
 800a0c6:	d03b      	beq.n	800a140 <_strtod_l+0xa8>
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a0cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a0ce:	782a      	ldrb	r2, [r5, #0]
 800a0d0:	2a30      	cmp	r2, #48	@ 0x30
 800a0d2:	f040 80b3 	bne.w	800a23c <_strtod_l+0x1a4>
 800a0d6:	786a      	ldrb	r2, [r5, #1]
 800a0d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a0dc:	2a58      	cmp	r2, #88	@ 0x58
 800a0de:	d16e      	bne.n	800a1be <_strtod_l+0x126>
 800a0e0:	9302      	str	r3, [sp, #8]
 800a0e2:	a919      	add	r1, sp, #100	@ 0x64
 800a0e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0e6:	4a90      	ldr	r2, [pc, #576]	@ (800a328 <_strtod_l+0x290>)
 800a0e8:	9301      	str	r3, [sp, #4]
 800a0ea:	ab1a      	add	r3, sp, #104	@ 0x68
 800a0ec:	9805      	ldr	r0, [sp, #20]
 800a0ee:	9300      	str	r3, [sp, #0]
 800a0f0:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a0f2:	f001 f925 	bl	800b340 <__gethex>
 800a0f6:	f010 060f 	ands.w	r6, r0, #15
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	d005      	beq.n	800a10a <_strtod_l+0x72>
 800a0fe:	2e06      	cmp	r6, #6
 800a100:	d128      	bne.n	800a154 <_strtod_l+0xbc>
 800a102:	3501      	adds	r5, #1
 800a104:	2300      	movs	r3, #0
 800a106:	9519      	str	r5, [sp, #100]	@ 0x64
 800a108:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a10a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f040 858e 	bne.w	800ac2e <_strtod_l+0xb96>
 800a112:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a114:	b1cb      	cbz	r3, 800a14a <_strtod_l+0xb2>
 800a116:	4652      	mov	r2, sl
 800a118:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a11c:	ec43 2b10 	vmov	d0, r2, r3
 800a120:	b01f      	add	sp, #124	@ 0x7c
 800a122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a126:	2920      	cmp	r1, #32
 800a128:	d1ce      	bne.n	800a0c8 <_strtod_l+0x30>
 800a12a:	3201      	adds	r2, #1
 800a12c:	e7c1      	b.n	800a0b2 <_strtod_l+0x1a>
 800a12e:	292d      	cmp	r1, #45	@ 0x2d
 800a130:	d1ca      	bne.n	800a0c8 <_strtod_l+0x30>
 800a132:	2101      	movs	r1, #1
 800a134:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a136:	1c51      	adds	r1, r2, #1
 800a138:	9119      	str	r1, [sp, #100]	@ 0x64
 800a13a:	7852      	ldrb	r2, [r2, #1]
 800a13c:	2a00      	cmp	r2, #0
 800a13e:	d1c5      	bne.n	800a0cc <_strtod_l+0x34>
 800a140:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a142:	9419      	str	r4, [sp, #100]	@ 0x64
 800a144:	2b00      	cmp	r3, #0
 800a146:	f040 8570 	bne.w	800ac2a <_strtod_l+0xb92>
 800a14a:	4652      	mov	r2, sl
 800a14c:	465b      	mov	r3, fp
 800a14e:	e7e5      	b.n	800a11c <_strtod_l+0x84>
 800a150:	2100      	movs	r1, #0
 800a152:	e7ef      	b.n	800a134 <_strtod_l+0x9c>
 800a154:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a156:	b13a      	cbz	r2, 800a168 <_strtod_l+0xd0>
 800a158:	2135      	movs	r1, #53	@ 0x35
 800a15a:	a81c      	add	r0, sp, #112	@ 0x70
 800a15c:	f7ff ff38 	bl	8009fd0 <__copybits>
 800a160:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a162:	9805      	ldr	r0, [sp, #20]
 800a164:	f7ff fafc 	bl	8009760 <_Bfree>
 800a168:	3e01      	subs	r6, #1
 800a16a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a16c:	2e04      	cmp	r6, #4
 800a16e:	d806      	bhi.n	800a17e <_strtod_l+0xe6>
 800a170:	e8df f006 	tbb	[pc, r6]
 800a174:	201d0314 	.word	0x201d0314
 800a178:	14          	.byte	0x14
 800a179:	00          	.byte	0x00
 800a17a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a17e:	05e1      	lsls	r1, r4, #23
 800a180:	bf48      	it	mi
 800a182:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a186:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a18a:	0d1b      	lsrs	r3, r3, #20
 800a18c:	051b      	lsls	r3, r3, #20
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d1bb      	bne.n	800a10a <_strtod_l+0x72>
 800a192:	f7fe fb11 	bl	80087b8 <__errno>
 800a196:	2322      	movs	r3, #34	@ 0x22
 800a198:	6003      	str	r3, [r0, #0]
 800a19a:	e7b6      	b.n	800a10a <_strtod_l+0x72>
 800a19c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a1a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a1a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a1a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a1ac:	e7e7      	b.n	800a17e <_strtod_l+0xe6>
 800a1ae:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a330 <_strtod_l+0x298>
 800a1b2:	e7e4      	b.n	800a17e <_strtod_l+0xe6>
 800a1b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a1b8:	f04f 3aff 	mov.w	sl, #4294967295
 800a1bc:	e7df      	b.n	800a17e <_strtod_l+0xe6>
 800a1be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1c0:	1c5a      	adds	r2, r3, #1
 800a1c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a1c4:	785b      	ldrb	r3, [r3, #1]
 800a1c6:	2b30      	cmp	r3, #48	@ 0x30
 800a1c8:	d0f9      	beq.n	800a1be <_strtod_l+0x126>
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d09d      	beq.n	800a10a <_strtod_l+0x72>
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1d2:	220a      	movs	r2, #10
 800a1d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1d6:	930c      	str	r3, [sp, #48]	@ 0x30
 800a1d8:	2300      	movs	r3, #0
 800a1da:	461f      	mov	r7, r3
 800a1dc:	9308      	str	r3, [sp, #32]
 800a1de:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1e0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a1e2:	7805      	ldrb	r5, [r0, #0]
 800a1e4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a1e8:	b2d9      	uxtb	r1, r3
 800a1ea:	2909      	cmp	r1, #9
 800a1ec:	d928      	bls.n	800a240 <_strtod_l+0x1a8>
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	494e      	ldr	r1, [pc, #312]	@ (800a32c <_strtod_l+0x294>)
 800a1f2:	f000 ffd5 	bl	800b1a0 <strncmp>
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	d033      	beq.n	800a262 <_strtod_l+0x1ca>
 800a1fa:	2000      	movs	r0, #0
 800a1fc:	462a      	mov	r2, r5
 800a1fe:	463d      	mov	r5, r7
 800a200:	4681      	mov	r9, r0
 800a202:	4603      	mov	r3, r0
 800a204:	2a65      	cmp	r2, #101	@ 0x65
 800a206:	d001      	beq.n	800a20c <_strtod_l+0x174>
 800a208:	2a45      	cmp	r2, #69	@ 0x45
 800a20a:	d114      	bne.n	800a236 <_strtod_l+0x19e>
 800a20c:	b91d      	cbnz	r5, 800a216 <_strtod_l+0x17e>
 800a20e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a210:	4302      	orrs	r2, r0
 800a212:	d095      	beq.n	800a140 <_strtod_l+0xa8>
 800a214:	2500      	movs	r5, #0
 800a216:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a218:	1c62      	adds	r2, r4, #1
 800a21a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a21c:	7862      	ldrb	r2, [r4, #1]
 800a21e:	2a2b      	cmp	r2, #43	@ 0x2b
 800a220:	d078      	beq.n	800a314 <_strtod_l+0x27c>
 800a222:	2a2d      	cmp	r2, #45	@ 0x2d
 800a224:	d07c      	beq.n	800a320 <_strtod_l+0x288>
 800a226:	f04f 0c00 	mov.w	ip, #0
 800a22a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a22e:	2909      	cmp	r1, #9
 800a230:	f240 8084 	bls.w	800a33c <_strtod_l+0x2a4>
 800a234:	9419      	str	r4, [sp, #100]	@ 0x64
 800a236:	f04f 0800 	mov.w	r8, #0
 800a23a:	e0a4      	b.n	800a386 <_strtod_l+0x2ee>
 800a23c:	2300      	movs	r3, #0
 800a23e:	e7c7      	b.n	800a1d0 <_strtod_l+0x138>
 800a240:	2f08      	cmp	r7, #8
 800a242:	f100 0001 	add.w	r0, r0, #1
 800a246:	f107 0701 	add.w	r7, r7, #1
 800a24a:	bfd5      	itete	le
 800a24c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a24e:	9908      	ldrgt	r1, [sp, #32]
 800a250:	fb02 3301 	mlale	r3, r2, r1, r3
 800a254:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a258:	bfd4      	ite	le
 800a25a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a25c:	9308      	strgt	r3, [sp, #32]
 800a25e:	9019      	str	r0, [sp, #100]	@ 0x64
 800a260:	e7be      	b.n	800a1e0 <_strtod_l+0x148>
 800a262:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a264:	1c5a      	adds	r2, r3, #1
 800a266:	9219      	str	r2, [sp, #100]	@ 0x64
 800a268:	785a      	ldrb	r2, [r3, #1]
 800a26a:	b37f      	cbz	r7, 800a2cc <_strtod_l+0x234>
 800a26c:	4681      	mov	r9, r0
 800a26e:	463d      	mov	r5, r7
 800a270:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a274:	2b09      	cmp	r3, #9
 800a276:	d912      	bls.n	800a29e <_strtod_l+0x206>
 800a278:	2301      	movs	r3, #1
 800a27a:	e7c3      	b.n	800a204 <_strtod_l+0x16c>
 800a27c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a27e:	3001      	adds	r0, #1
 800a280:	1c5a      	adds	r2, r3, #1
 800a282:	9219      	str	r2, [sp, #100]	@ 0x64
 800a284:	785a      	ldrb	r2, [r3, #1]
 800a286:	2a30      	cmp	r2, #48	@ 0x30
 800a288:	d0f8      	beq.n	800a27c <_strtod_l+0x1e4>
 800a28a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a28e:	2b08      	cmp	r3, #8
 800a290:	f200 84d2 	bhi.w	800ac38 <_strtod_l+0xba0>
 800a294:	4681      	mov	r9, r0
 800a296:	2000      	movs	r0, #0
 800a298:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a29a:	4605      	mov	r5, r0
 800a29c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a29e:	3a30      	subs	r2, #48	@ 0x30
 800a2a0:	f100 0301 	add.w	r3, r0, #1
 800a2a4:	d02a      	beq.n	800a2fc <_strtod_l+0x264>
 800a2a6:	4499      	add	r9, r3
 800a2a8:	eb00 0c05 	add.w	ip, r0, r5
 800a2ac:	462b      	mov	r3, r5
 800a2ae:	210a      	movs	r1, #10
 800a2b0:	4563      	cmp	r3, ip
 800a2b2:	d10d      	bne.n	800a2d0 <_strtod_l+0x238>
 800a2b4:	1c69      	adds	r1, r5, #1
 800a2b6:	4401      	add	r1, r0
 800a2b8:	4428      	add	r0, r5
 800a2ba:	2808      	cmp	r0, #8
 800a2bc:	dc16      	bgt.n	800a2ec <_strtod_l+0x254>
 800a2be:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a2c0:	230a      	movs	r3, #10
 800a2c2:	fb03 2300 	mla	r3, r3, r0, r2
 800a2c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	e018      	b.n	800a2fe <_strtod_l+0x266>
 800a2cc:	4638      	mov	r0, r7
 800a2ce:	e7da      	b.n	800a286 <_strtod_l+0x1ee>
 800a2d0:	2b08      	cmp	r3, #8
 800a2d2:	f103 0301 	add.w	r3, r3, #1
 800a2d6:	dc03      	bgt.n	800a2e0 <_strtod_l+0x248>
 800a2d8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a2da:	434e      	muls	r6, r1
 800a2dc:	960a      	str	r6, [sp, #40]	@ 0x28
 800a2de:	e7e7      	b.n	800a2b0 <_strtod_l+0x218>
 800a2e0:	2b10      	cmp	r3, #16
 800a2e2:	bfde      	ittt	le
 800a2e4:	9e08      	ldrle	r6, [sp, #32]
 800a2e6:	434e      	mulle	r6, r1
 800a2e8:	9608      	strle	r6, [sp, #32]
 800a2ea:	e7e1      	b.n	800a2b0 <_strtod_l+0x218>
 800a2ec:	280f      	cmp	r0, #15
 800a2ee:	dceb      	bgt.n	800a2c8 <_strtod_l+0x230>
 800a2f0:	9808      	ldr	r0, [sp, #32]
 800a2f2:	230a      	movs	r3, #10
 800a2f4:	fb03 2300 	mla	r3, r3, r0, r2
 800a2f8:	9308      	str	r3, [sp, #32]
 800a2fa:	e7e5      	b.n	800a2c8 <_strtod_l+0x230>
 800a2fc:	4629      	mov	r1, r5
 800a2fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a300:	460d      	mov	r5, r1
 800a302:	1c50      	adds	r0, r2, #1
 800a304:	9019      	str	r0, [sp, #100]	@ 0x64
 800a306:	4618      	mov	r0, r3
 800a308:	7852      	ldrb	r2, [r2, #1]
 800a30a:	e7b1      	b.n	800a270 <_strtod_l+0x1d8>
 800a30c:	f04f 0900 	mov.w	r9, #0
 800a310:	2301      	movs	r3, #1
 800a312:	e77c      	b.n	800a20e <_strtod_l+0x176>
 800a314:	f04f 0c00 	mov.w	ip, #0
 800a318:	1ca2      	adds	r2, r4, #2
 800a31a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a31c:	78a2      	ldrb	r2, [r4, #2]
 800a31e:	e784      	b.n	800a22a <_strtod_l+0x192>
 800a320:	f04f 0c01 	mov.w	ip, #1
 800a324:	e7f8      	b.n	800a318 <_strtod_l+0x280>
 800a326:	bf00      	nop
 800a328:	0800c188 	.word	0x0800c188
 800a32c:	0800c170 	.word	0x0800c170
 800a330:	7ff00000 	.word	0x7ff00000
 800a334:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a336:	1c51      	adds	r1, r2, #1
 800a338:	9119      	str	r1, [sp, #100]	@ 0x64
 800a33a:	7852      	ldrb	r2, [r2, #1]
 800a33c:	2a30      	cmp	r2, #48	@ 0x30
 800a33e:	d0f9      	beq.n	800a334 <_strtod_l+0x29c>
 800a340:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a344:	2908      	cmp	r1, #8
 800a346:	f63f af76 	bhi.w	800a236 <_strtod_l+0x19e>
 800a34a:	3a30      	subs	r2, #48	@ 0x30
 800a34c:	f04f 080a 	mov.w	r8, #10
 800a350:	920e      	str	r2, [sp, #56]	@ 0x38
 800a352:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a354:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a356:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a358:	1c56      	adds	r6, r2, #1
 800a35a:	9619      	str	r6, [sp, #100]	@ 0x64
 800a35c:	7852      	ldrb	r2, [r2, #1]
 800a35e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a362:	f1be 0f09 	cmp.w	lr, #9
 800a366:	d939      	bls.n	800a3dc <_strtod_l+0x344>
 800a368:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a36a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a36e:	1a76      	subs	r6, r6, r1
 800a370:	2e08      	cmp	r6, #8
 800a372:	dc03      	bgt.n	800a37c <_strtod_l+0x2e4>
 800a374:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a376:	4588      	cmp	r8, r1
 800a378:	bfa8      	it	ge
 800a37a:	4688      	movge	r8, r1
 800a37c:	f1bc 0f00 	cmp.w	ip, #0
 800a380:	d001      	beq.n	800a386 <_strtod_l+0x2ee>
 800a382:	f1c8 0800 	rsb	r8, r8, #0
 800a386:	2d00      	cmp	r5, #0
 800a388:	d14e      	bne.n	800a428 <_strtod_l+0x390>
 800a38a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a38c:	4308      	orrs	r0, r1
 800a38e:	f47f aebc 	bne.w	800a10a <_strtod_l+0x72>
 800a392:	2b00      	cmp	r3, #0
 800a394:	f47f aed4 	bne.w	800a140 <_strtod_l+0xa8>
 800a398:	2a69      	cmp	r2, #105	@ 0x69
 800a39a:	d028      	beq.n	800a3ee <_strtod_l+0x356>
 800a39c:	dc25      	bgt.n	800a3ea <_strtod_l+0x352>
 800a39e:	2a49      	cmp	r2, #73	@ 0x49
 800a3a0:	d025      	beq.n	800a3ee <_strtod_l+0x356>
 800a3a2:	2a4e      	cmp	r2, #78	@ 0x4e
 800a3a4:	f47f aecc 	bne.w	800a140 <_strtod_l+0xa8>
 800a3a8:	499b      	ldr	r1, [pc, #620]	@ (800a618 <_strtod_l+0x580>)
 800a3aa:	a819      	add	r0, sp, #100	@ 0x64
 800a3ac:	f001 f9e8 	bl	800b780 <__match>
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	f43f aec5 	beq.w	800a140 <_strtod_l+0xa8>
 800a3b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	2b28      	cmp	r3, #40	@ 0x28
 800a3bc:	d12e      	bne.n	800a41c <_strtod_l+0x384>
 800a3be:	aa1c      	add	r2, sp, #112	@ 0x70
 800a3c0:	4996      	ldr	r1, [pc, #600]	@ (800a61c <_strtod_l+0x584>)
 800a3c2:	a819      	add	r0, sp, #100	@ 0x64
 800a3c4:	f001 f9f0 	bl	800b7a8 <__hexnan>
 800a3c8:	2805      	cmp	r0, #5
 800a3ca:	d127      	bne.n	800a41c <_strtod_l+0x384>
 800a3cc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a3ce:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a3d2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a3d6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a3da:	e696      	b.n	800a10a <_strtod_l+0x72>
 800a3dc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a3de:	fb08 2101 	mla	r1, r8, r1, r2
 800a3e2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a3e6:	920e      	str	r2, [sp, #56]	@ 0x38
 800a3e8:	e7b5      	b.n	800a356 <_strtod_l+0x2be>
 800a3ea:	2a6e      	cmp	r2, #110	@ 0x6e
 800a3ec:	e7da      	b.n	800a3a4 <_strtod_l+0x30c>
 800a3ee:	498c      	ldr	r1, [pc, #560]	@ (800a620 <_strtod_l+0x588>)
 800a3f0:	a819      	add	r0, sp, #100	@ 0x64
 800a3f2:	f001 f9c5 	bl	800b780 <__match>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	f43f aea2 	beq.w	800a140 <_strtod_l+0xa8>
 800a3fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a3fe:	a819      	add	r0, sp, #100	@ 0x64
 800a400:	4988      	ldr	r1, [pc, #544]	@ (800a624 <_strtod_l+0x58c>)
 800a402:	3b01      	subs	r3, #1
 800a404:	9319      	str	r3, [sp, #100]	@ 0x64
 800a406:	f001 f9bb 	bl	800b780 <__match>
 800a40a:	b910      	cbnz	r0, 800a412 <_strtod_l+0x37a>
 800a40c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a40e:	3301      	adds	r3, #1
 800a410:	9319      	str	r3, [sp, #100]	@ 0x64
 800a412:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a634 <_strtod_l+0x59c>
 800a416:	f04f 0a00 	mov.w	sl, #0
 800a41a:	e676      	b.n	800a10a <_strtod_l+0x72>
 800a41c:	4882      	ldr	r0, [pc, #520]	@ (800a628 <_strtod_l+0x590>)
 800a41e:	f000 feef 	bl	800b200 <nan>
 800a422:	ec5b ab10 	vmov	sl, fp, d0
 800a426:	e670      	b.n	800a10a <_strtod_l+0x72>
 800a428:	eba8 0309 	sub.w	r3, r8, r9
 800a42c:	2f00      	cmp	r7, #0
 800a42e:	bf08      	it	eq
 800a430:	462f      	moveq	r7, r5
 800a432:	2d10      	cmp	r5, #16
 800a434:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a436:	462c      	mov	r4, r5
 800a438:	9309      	str	r3, [sp, #36]	@ 0x24
 800a43a:	bfa8      	it	ge
 800a43c:	2410      	movge	r4, #16
 800a43e:	f7f6 f875 	bl	800052c <__aeabi_ui2d>
 800a442:	2d09      	cmp	r5, #9
 800a444:	4682      	mov	sl, r0
 800a446:	468b      	mov	fp, r1
 800a448:	dc13      	bgt.n	800a472 <_strtod_l+0x3da>
 800a44a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f43f ae5c 	beq.w	800a10a <_strtod_l+0x72>
 800a452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a454:	dd78      	ble.n	800a548 <_strtod_l+0x4b0>
 800a456:	2b16      	cmp	r3, #22
 800a458:	dc5f      	bgt.n	800a51a <_strtod_l+0x482>
 800a45a:	4974      	ldr	r1, [pc, #464]	@ (800a62c <_strtod_l+0x594>)
 800a45c:	4652      	mov	r2, sl
 800a45e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a462:	465b      	mov	r3, fp
 800a464:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a468:	f7f6 f8da 	bl	8000620 <__aeabi_dmul>
 800a46c:	4682      	mov	sl, r0
 800a46e:	468b      	mov	fp, r1
 800a470:	e64b      	b.n	800a10a <_strtod_l+0x72>
 800a472:	4b6e      	ldr	r3, [pc, #440]	@ (800a62c <_strtod_l+0x594>)
 800a474:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a478:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a47c:	f7f6 f8d0 	bl	8000620 <__aeabi_dmul>
 800a480:	4682      	mov	sl, r0
 800a482:	468b      	mov	fp, r1
 800a484:	9808      	ldr	r0, [sp, #32]
 800a486:	f7f6 f851 	bl	800052c <__aeabi_ui2d>
 800a48a:	4602      	mov	r2, r0
 800a48c:	460b      	mov	r3, r1
 800a48e:	4650      	mov	r0, sl
 800a490:	4659      	mov	r1, fp
 800a492:	f7f5 ff0f 	bl	80002b4 <__adddf3>
 800a496:	2d0f      	cmp	r5, #15
 800a498:	4682      	mov	sl, r0
 800a49a:	468b      	mov	fp, r1
 800a49c:	ddd5      	ble.n	800a44a <_strtod_l+0x3b2>
 800a49e:	1b2c      	subs	r4, r5, r4
 800a4a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4a2:	441c      	add	r4, r3
 800a4a4:	2c00      	cmp	r4, #0
 800a4a6:	f340 8096 	ble.w	800a5d6 <_strtod_l+0x53e>
 800a4aa:	f014 030f 	ands.w	r3, r4, #15
 800a4ae:	d00a      	beq.n	800a4c6 <_strtod_l+0x42e>
 800a4b0:	495e      	ldr	r1, [pc, #376]	@ (800a62c <_strtod_l+0x594>)
 800a4b2:	4652      	mov	r2, sl
 800a4b4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a4b8:	465b      	mov	r3, fp
 800a4ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4be:	f7f6 f8af 	bl	8000620 <__aeabi_dmul>
 800a4c2:	4682      	mov	sl, r0
 800a4c4:	468b      	mov	fp, r1
 800a4c6:	f034 040f 	bics.w	r4, r4, #15
 800a4ca:	d073      	beq.n	800a5b4 <_strtod_l+0x51c>
 800a4cc:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a4d0:	dd48      	ble.n	800a564 <_strtod_l+0x4cc>
 800a4d2:	2400      	movs	r4, #0
 800a4d4:	46a0      	mov	r8, r4
 800a4d6:	46a1      	mov	r9, r4
 800a4d8:	940a      	str	r4, [sp, #40]	@ 0x28
 800a4da:	2322      	movs	r3, #34	@ 0x22
 800a4dc:	9a05      	ldr	r2, [sp, #20]
 800a4de:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a634 <_strtod_l+0x59c>
 800a4e2:	f04f 0a00 	mov.w	sl, #0
 800a4e6:	6013      	str	r3, [r2, #0]
 800a4e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f43f ae0d 	beq.w	800a10a <_strtod_l+0x72>
 800a4f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a4f2:	9805      	ldr	r0, [sp, #20]
 800a4f4:	f7ff f934 	bl	8009760 <_Bfree>
 800a4f8:	4649      	mov	r1, r9
 800a4fa:	9805      	ldr	r0, [sp, #20]
 800a4fc:	f7ff f930 	bl	8009760 <_Bfree>
 800a500:	4641      	mov	r1, r8
 800a502:	9805      	ldr	r0, [sp, #20]
 800a504:	f7ff f92c 	bl	8009760 <_Bfree>
 800a508:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a50a:	9805      	ldr	r0, [sp, #20]
 800a50c:	f7ff f928 	bl	8009760 <_Bfree>
 800a510:	4621      	mov	r1, r4
 800a512:	9805      	ldr	r0, [sp, #20]
 800a514:	f7ff f924 	bl	8009760 <_Bfree>
 800a518:	e5f7      	b.n	800a10a <_strtod_l+0x72>
 800a51a:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a51e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a520:	4293      	cmp	r3, r2
 800a522:	dbbc      	blt.n	800a49e <_strtod_l+0x406>
 800a524:	f1c5 050f 	rsb	r5, r5, #15
 800a528:	4c40      	ldr	r4, [pc, #256]	@ (800a62c <_strtod_l+0x594>)
 800a52a:	4652      	mov	r2, sl
 800a52c:	465b      	mov	r3, fp
 800a52e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a532:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a536:	f7f6 f873 	bl	8000620 <__aeabi_dmul>
 800a53a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a53c:	1b5d      	subs	r5, r3, r5
 800a53e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a542:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a546:	e78f      	b.n	800a468 <_strtod_l+0x3d0>
 800a548:	3316      	adds	r3, #22
 800a54a:	dba8      	blt.n	800a49e <_strtod_l+0x406>
 800a54c:	eba9 0808 	sub.w	r8, r9, r8
 800a550:	4b36      	ldr	r3, [pc, #216]	@ (800a62c <_strtod_l+0x594>)
 800a552:	4650      	mov	r0, sl
 800a554:	4659      	mov	r1, fp
 800a556:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a55a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a55e:	f7f6 f989 	bl	8000874 <__aeabi_ddiv>
 800a562:	e783      	b.n	800a46c <_strtod_l+0x3d4>
 800a564:	4b32      	ldr	r3, [pc, #200]	@ (800a630 <_strtod_l+0x598>)
 800a566:	1124      	asrs	r4, r4, #4
 800a568:	4650      	mov	r0, sl
 800a56a:	4659      	mov	r1, fp
 800a56c:	9308      	str	r3, [sp, #32]
 800a56e:	2300      	movs	r3, #0
 800a570:	461e      	mov	r6, r3
 800a572:	2c01      	cmp	r4, #1
 800a574:	dc21      	bgt.n	800a5ba <_strtod_l+0x522>
 800a576:	b10b      	cbz	r3, 800a57c <_strtod_l+0x4e4>
 800a578:	4682      	mov	sl, r0
 800a57a:	468b      	mov	fp, r1
 800a57c:	492c      	ldr	r1, [pc, #176]	@ (800a630 <_strtod_l+0x598>)
 800a57e:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a582:	4652      	mov	r2, sl
 800a584:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a588:	465b      	mov	r3, fp
 800a58a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a58e:	f7f6 f847 	bl	8000620 <__aeabi_dmul>
 800a592:	4b28      	ldr	r3, [pc, #160]	@ (800a634 <_strtod_l+0x59c>)
 800a594:	460a      	mov	r2, r1
 800a596:	4682      	mov	sl, r0
 800a598:	400b      	ands	r3, r1
 800a59a:	4927      	ldr	r1, [pc, #156]	@ (800a638 <_strtod_l+0x5a0>)
 800a59c:	428b      	cmp	r3, r1
 800a59e:	d898      	bhi.n	800a4d2 <_strtod_l+0x43a>
 800a5a0:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a5a4:	428b      	cmp	r3, r1
 800a5a6:	bf86      	itte	hi
 800a5a8:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a63c <_strtod_l+0x5a4>
 800a5ac:	f04f 3aff 	movhi.w	sl, #4294967295
 800a5b0:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	9308      	str	r3, [sp, #32]
 800a5b8:	e07a      	b.n	800a6b0 <_strtod_l+0x618>
 800a5ba:	07e2      	lsls	r2, r4, #31
 800a5bc:	d505      	bpl.n	800a5ca <_strtod_l+0x532>
 800a5be:	9b08      	ldr	r3, [sp, #32]
 800a5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c4:	f7f6 f82c 	bl	8000620 <__aeabi_dmul>
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	9a08      	ldr	r2, [sp, #32]
 800a5cc:	3601      	adds	r6, #1
 800a5ce:	1064      	asrs	r4, r4, #1
 800a5d0:	3208      	adds	r2, #8
 800a5d2:	9208      	str	r2, [sp, #32]
 800a5d4:	e7cd      	b.n	800a572 <_strtod_l+0x4da>
 800a5d6:	d0ed      	beq.n	800a5b4 <_strtod_l+0x51c>
 800a5d8:	4264      	negs	r4, r4
 800a5da:	f014 020f 	ands.w	r2, r4, #15
 800a5de:	d00a      	beq.n	800a5f6 <_strtod_l+0x55e>
 800a5e0:	4b12      	ldr	r3, [pc, #72]	@ (800a62c <_strtod_l+0x594>)
 800a5e2:	4650      	mov	r0, sl
 800a5e4:	4659      	mov	r1, fp
 800a5e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ee:	f7f6 f941 	bl	8000874 <__aeabi_ddiv>
 800a5f2:	4682      	mov	sl, r0
 800a5f4:	468b      	mov	fp, r1
 800a5f6:	1124      	asrs	r4, r4, #4
 800a5f8:	d0dc      	beq.n	800a5b4 <_strtod_l+0x51c>
 800a5fa:	2c1f      	cmp	r4, #31
 800a5fc:	dd20      	ble.n	800a640 <_strtod_l+0x5a8>
 800a5fe:	2400      	movs	r4, #0
 800a600:	46a0      	mov	r8, r4
 800a602:	46a1      	mov	r9, r4
 800a604:	940a      	str	r4, [sp, #40]	@ 0x28
 800a606:	2322      	movs	r3, #34	@ 0x22
 800a608:	9a05      	ldr	r2, [sp, #20]
 800a60a:	f04f 0a00 	mov.w	sl, #0
 800a60e:	f04f 0b00 	mov.w	fp, #0
 800a612:	6013      	str	r3, [r2, #0]
 800a614:	e768      	b.n	800a4e8 <_strtod_l+0x450>
 800a616:	bf00      	nop
 800a618:	0800bf5d 	.word	0x0800bf5d
 800a61c:	0800c174 	.word	0x0800c174
 800a620:	0800bf55 	.word	0x0800bf55
 800a624:	0800bf8c 	.word	0x0800bf8c
 800a628:	0800c31d 	.word	0x0800c31d
 800a62c:	0800c0a8 	.word	0x0800c0a8
 800a630:	0800c080 	.word	0x0800c080
 800a634:	7ff00000 	.word	0x7ff00000
 800a638:	7ca00000 	.word	0x7ca00000
 800a63c:	7fefffff 	.word	0x7fefffff
 800a640:	f014 0310 	ands.w	r3, r4, #16
 800a644:	4650      	mov	r0, sl
 800a646:	4659      	mov	r1, fp
 800a648:	4ea9      	ldr	r6, [pc, #676]	@ (800a8f0 <_strtod_l+0x858>)
 800a64a:	bf18      	it	ne
 800a64c:	236a      	movne	r3, #106	@ 0x6a
 800a64e:	9308      	str	r3, [sp, #32]
 800a650:	2300      	movs	r3, #0
 800a652:	07e2      	lsls	r2, r4, #31
 800a654:	d504      	bpl.n	800a660 <_strtod_l+0x5c8>
 800a656:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a65a:	f7f5 ffe1 	bl	8000620 <__aeabi_dmul>
 800a65e:	2301      	movs	r3, #1
 800a660:	1064      	asrs	r4, r4, #1
 800a662:	f106 0608 	add.w	r6, r6, #8
 800a666:	d1f4      	bne.n	800a652 <_strtod_l+0x5ba>
 800a668:	b10b      	cbz	r3, 800a66e <_strtod_l+0x5d6>
 800a66a:	4682      	mov	sl, r0
 800a66c:	468b      	mov	fp, r1
 800a66e:	9b08      	ldr	r3, [sp, #32]
 800a670:	b1b3      	cbz	r3, 800a6a0 <_strtod_l+0x608>
 800a672:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a676:	4659      	mov	r1, fp
 800a678:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	dd0f      	ble.n	800a6a0 <_strtod_l+0x608>
 800a680:	2b1f      	cmp	r3, #31
 800a682:	dd55      	ble.n	800a730 <_strtod_l+0x698>
 800a684:	2b34      	cmp	r3, #52	@ 0x34
 800a686:	f04f 0a00 	mov.w	sl, #0
 800a68a:	bfdb      	ittet	le
 800a68c:	f04f 33ff 	movle.w	r3, #4294967295
 800a690:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a694:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a698:	4093      	lslle	r3, r2
 800a69a:	bfd8      	it	le
 800a69c:	ea03 0b01 	andle.w	fp, r3, r1
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	4650      	mov	r0, sl
 800a6a6:	4659      	mov	r1, fp
 800a6a8:	f7f6 fa22 	bl	8000af0 <__aeabi_dcmpeq>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	d1a6      	bne.n	800a5fe <_strtod_l+0x566>
 800a6b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6b2:	463a      	mov	r2, r7
 800a6b4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a6b6:	9300      	str	r3, [sp, #0]
 800a6b8:	462b      	mov	r3, r5
 800a6ba:	9805      	ldr	r0, [sp, #20]
 800a6bc:	f7ff f8ba 	bl	8009834 <__s2b>
 800a6c0:	900a      	str	r0, [sp, #40]	@ 0x28
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	f43f af05 	beq.w	800a4d2 <_strtod_l+0x43a>
 800a6c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6ca:	eba9 0308 	sub.w	r3, r9, r8
 800a6ce:	2400      	movs	r4, #0
 800a6d0:	2a00      	cmp	r2, #0
 800a6d2:	46a0      	mov	r8, r4
 800a6d4:	bfa8      	it	ge
 800a6d6:	2300      	movge	r3, #0
 800a6d8:	9312      	str	r3, [sp, #72]	@ 0x48
 800a6da:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a6de:	9316      	str	r3, [sp, #88]	@ 0x58
 800a6e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6e2:	9805      	ldr	r0, [sp, #20]
 800a6e4:	6859      	ldr	r1, [r3, #4]
 800a6e6:	f7fe fffb 	bl	80096e0 <_Balloc>
 800a6ea:	4681      	mov	r9, r0
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	f43f aef4 	beq.w	800a4da <_strtod_l+0x442>
 800a6f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6f4:	300c      	adds	r0, #12
 800a6f6:	691a      	ldr	r2, [r3, #16]
 800a6f8:	f103 010c 	add.w	r1, r3, #12
 800a6fc:	3202      	adds	r2, #2
 800a6fe:	0092      	lsls	r2, r2, #2
 800a700:	f000 fd70 	bl	800b1e4 <memcpy>
 800a704:	aa1c      	add	r2, sp, #112	@ 0x70
 800a706:	a91b      	add	r1, sp, #108	@ 0x6c
 800a708:	9805      	ldr	r0, [sp, #20]
 800a70a:	ec4b ab10 	vmov	d0, sl, fp
 800a70e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a712:	f7ff fbd3 	bl	8009ebc <__d2b>
 800a716:	901a      	str	r0, [sp, #104]	@ 0x68
 800a718:	2800      	cmp	r0, #0
 800a71a:	f43f aede 	beq.w	800a4da <_strtod_l+0x442>
 800a71e:	2101      	movs	r1, #1
 800a720:	9805      	ldr	r0, [sp, #20]
 800a722:	f7ff f91d 	bl	8009960 <__i2b>
 800a726:	4680      	mov	r8, r0
 800a728:	b948      	cbnz	r0, 800a73e <_strtod_l+0x6a6>
 800a72a:	f04f 0800 	mov.w	r8, #0
 800a72e:	e6d4      	b.n	800a4da <_strtod_l+0x442>
 800a730:	f04f 32ff 	mov.w	r2, #4294967295
 800a734:	fa02 f303 	lsl.w	r3, r2, r3
 800a738:	ea03 0a0a 	and.w	sl, r3, sl
 800a73c:	e7b0      	b.n	800a6a0 <_strtod_l+0x608>
 800a73e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a740:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a742:	2d00      	cmp	r5, #0
 800a744:	bfa9      	itett	ge
 800a746:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a748:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a74a:	18ef      	addge	r7, r5, r3
 800a74c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a74e:	bfb8      	it	lt
 800a750:	1b5e      	sublt	r6, r3, r5
 800a752:	9b08      	ldr	r3, [sp, #32]
 800a754:	bfb8      	it	lt
 800a756:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a758:	1aed      	subs	r5, r5, r3
 800a75a:	4b66      	ldr	r3, [pc, #408]	@ (800a8f4 <_strtod_l+0x85c>)
 800a75c:	4415      	add	r5, r2
 800a75e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a762:	3d01      	subs	r5, #1
 800a764:	429d      	cmp	r5, r3
 800a766:	da4f      	bge.n	800a808 <_strtod_l+0x770>
 800a768:	1b5b      	subs	r3, r3, r5
 800a76a:	2101      	movs	r1, #1
 800a76c:	2b1f      	cmp	r3, #31
 800a76e:	eba2 0203 	sub.w	r2, r2, r3
 800a772:	dc3d      	bgt.n	800a7f0 <_strtod_l+0x758>
 800a774:	fa01 f303 	lsl.w	r3, r1, r3
 800a778:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a77a:	2300      	movs	r3, #0
 800a77c:	9310      	str	r3, [sp, #64]	@ 0x40
 800a77e:	18bd      	adds	r5, r7, r2
 800a780:	9b08      	ldr	r3, [sp, #32]
 800a782:	4416      	add	r6, r2
 800a784:	42af      	cmp	r7, r5
 800a786:	441e      	add	r6, r3
 800a788:	463b      	mov	r3, r7
 800a78a:	bfa8      	it	ge
 800a78c:	462b      	movge	r3, r5
 800a78e:	42b3      	cmp	r3, r6
 800a790:	bfa8      	it	ge
 800a792:	4633      	movge	r3, r6
 800a794:	2b00      	cmp	r3, #0
 800a796:	bfc2      	ittt	gt
 800a798:	1aed      	subgt	r5, r5, r3
 800a79a:	1af6      	subgt	r6, r6, r3
 800a79c:	1aff      	subgt	r7, r7, r3
 800a79e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	dd16      	ble.n	800a7d2 <_strtod_l+0x73a>
 800a7a4:	4641      	mov	r1, r8
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	9805      	ldr	r0, [sp, #20]
 800a7aa:	f7ff f999 	bl	8009ae0 <__pow5mult>
 800a7ae:	4680      	mov	r8, r0
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	d0ba      	beq.n	800a72a <_strtod_l+0x692>
 800a7b4:	4601      	mov	r1, r0
 800a7b6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a7b8:	9805      	ldr	r0, [sp, #20]
 800a7ba:	f7ff f8e7 	bl	800998c <__multiply>
 800a7be:	900e      	str	r0, [sp, #56]	@ 0x38
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	f43f ae8a 	beq.w	800a4da <_strtod_l+0x442>
 800a7c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a7c8:	9805      	ldr	r0, [sp, #20]
 800a7ca:	f7fe ffc9 	bl	8009760 <_Bfree>
 800a7ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7d0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a7d2:	2d00      	cmp	r5, #0
 800a7d4:	dc1d      	bgt.n	800a812 <_strtod_l+0x77a>
 800a7d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	dd23      	ble.n	800a824 <_strtod_l+0x78c>
 800a7dc:	4649      	mov	r1, r9
 800a7de:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a7e0:	9805      	ldr	r0, [sp, #20]
 800a7e2:	f7ff f97d 	bl	8009ae0 <__pow5mult>
 800a7e6:	4681      	mov	r9, r0
 800a7e8:	b9e0      	cbnz	r0, 800a824 <_strtod_l+0x78c>
 800a7ea:	f04f 0900 	mov.w	r9, #0
 800a7ee:	e674      	b.n	800a4da <_strtod_l+0x442>
 800a7f0:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a7f4:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a7f6:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a7fa:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a7fe:	35e2      	adds	r5, #226	@ 0xe2
 800a800:	fa01 f305 	lsl.w	r3, r1, r5
 800a804:	9310      	str	r3, [sp, #64]	@ 0x40
 800a806:	e7ba      	b.n	800a77e <_strtod_l+0x6e6>
 800a808:	2300      	movs	r3, #0
 800a80a:	9310      	str	r3, [sp, #64]	@ 0x40
 800a80c:	2301      	movs	r3, #1
 800a80e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a810:	e7b5      	b.n	800a77e <_strtod_l+0x6e6>
 800a812:	462a      	mov	r2, r5
 800a814:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a816:	9805      	ldr	r0, [sp, #20]
 800a818:	f7ff f9bc 	bl	8009b94 <__lshift>
 800a81c:	901a      	str	r0, [sp, #104]	@ 0x68
 800a81e:	2800      	cmp	r0, #0
 800a820:	d1d9      	bne.n	800a7d6 <_strtod_l+0x73e>
 800a822:	e65a      	b.n	800a4da <_strtod_l+0x442>
 800a824:	2e00      	cmp	r6, #0
 800a826:	dd07      	ble.n	800a838 <_strtod_l+0x7a0>
 800a828:	4649      	mov	r1, r9
 800a82a:	4632      	mov	r2, r6
 800a82c:	9805      	ldr	r0, [sp, #20]
 800a82e:	f7ff f9b1 	bl	8009b94 <__lshift>
 800a832:	4681      	mov	r9, r0
 800a834:	2800      	cmp	r0, #0
 800a836:	d0d8      	beq.n	800a7ea <_strtod_l+0x752>
 800a838:	2f00      	cmp	r7, #0
 800a83a:	dd08      	ble.n	800a84e <_strtod_l+0x7b6>
 800a83c:	4641      	mov	r1, r8
 800a83e:	463a      	mov	r2, r7
 800a840:	9805      	ldr	r0, [sp, #20]
 800a842:	f7ff f9a7 	bl	8009b94 <__lshift>
 800a846:	4680      	mov	r8, r0
 800a848:	2800      	cmp	r0, #0
 800a84a:	f43f ae46 	beq.w	800a4da <_strtod_l+0x442>
 800a84e:	464a      	mov	r2, r9
 800a850:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a852:	9805      	ldr	r0, [sp, #20]
 800a854:	f7ff fa26 	bl	8009ca4 <__mdiff>
 800a858:	4604      	mov	r4, r0
 800a85a:	2800      	cmp	r0, #0
 800a85c:	f43f ae3d 	beq.w	800a4da <_strtod_l+0x442>
 800a860:	68c3      	ldr	r3, [r0, #12]
 800a862:	4641      	mov	r1, r8
 800a864:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a866:	2300      	movs	r3, #0
 800a868:	60c3      	str	r3, [r0, #12]
 800a86a:	f7ff f9ff 	bl	8009c6c <__mcmp>
 800a86e:	2800      	cmp	r0, #0
 800a870:	da46      	bge.n	800a900 <_strtod_l+0x868>
 800a872:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a874:	ea53 030a 	orrs.w	r3, r3, sl
 800a878:	d16c      	bne.n	800a954 <_strtod_l+0x8bc>
 800a87a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d168      	bne.n	800a954 <_strtod_l+0x8bc>
 800a882:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a886:	0d1b      	lsrs	r3, r3, #20
 800a888:	051b      	lsls	r3, r3, #20
 800a88a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a88e:	d961      	bls.n	800a954 <_strtod_l+0x8bc>
 800a890:	6963      	ldr	r3, [r4, #20]
 800a892:	b913      	cbnz	r3, 800a89a <_strtod_l+0x802>
 800a894:	6923      	ldr	r3, [r4, #16]
 800a896:	2b01      	cmp	r3, #1
 800a898:	dd5c      	ble.n	800a954 <_strtod_l+0x8bc>
 800a89a:	4621      	mov	r1, r4
 800a89c:	2201      	movs	r2, #1
 800a89e:	9805      	ldr	r0, [sp, #20]
 800a8a0:	f7ff f978 	bl	8009b94 <__lshift>
 800a8a4:	4641      	mov	r1, r8
 800a8a6:	4604      	mov	r4, r0
 800a8a8:	f7ff f9e0 	bl	8009c6c <__mcmp>
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	dd51      	ble.n	800a954 <_strtod_l+0x8bc>
 800a8b0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a8b4:	9a08      	ldr	r2, [sp, #32]
 800a8b6:	0d1b      	lsrs	r3, r3, #20
 800a8b8:	051b      	lsls	r3, r3, #20
 800a8ba:	2a00      	cmp	r2, #0
 800a8bc:	d06b      	beq.n	800a996 <_strtod_l+0x8fe>
 800a8be:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a8c2:	d868      	bhi.n	800a996 <_strtod_l+0x8fe>
 800a8c4:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a8c8:	f67f ae9d 	bls.w	800a606 <_strtod_l+0x56e>
 800a8cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a8f8 <_strtod_l+0x860>)
 800a8ce:	4650      	mov	r0, sl
 800a8d0:	4659      	mov	r1, fp
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f7f5 fea4 	bl	8000620 <__aeabi_dmul>
 800a8d8:	4b08      	ldr	r3, [pc, #32]	@ (800a8fc <_strtod_l+0x864>)
 800a8da:	4682      	mov	sl, r0
 800a8dc:	468b      	mov	fp, r1
 800a8de:	400b      	ands	r3, r1
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f47f ae05 	bne.w	800a4f0 <_strtod_l+0x458>
 800a8e6:	2322      	movs	r3, #34	@ 0x22
 800a8e8:	9a05      	ldr	r2, [sp, #20]
 800a8ea:	6013      	str	r3, [r2, #0]
 800a8ec:	e600      	b.n	800a4f0 <_strtod_l+0x458>
 800a8ee:	bf00      	nop
 800a8f0:	0800c1a0 	.word	0x0800c1a0
 800a8f4:	fffffc02 	.word	0xfffffc02
 800a8f8:	39500000 	.word	0x39500000
 800a8fc:	7ff00000 	.word	0x7ff00000
 800a900:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a904:	d165      	bne.n	800a9d2 <_strtod_l+0x93a>
 800a906:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a908:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a90c:	b35a      	cbz	r2, 800a966 <_strtod_l+0x8ce>
 800a90e:	4a9e      	ldr	r2, [pc, #632]	@ (800ab88 <_strtod_l+0xaf0>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d12b      	bne.n	800a96c <_strtod_l+0x8d4>
 800a914:	9b08      	ldr	r3, [sp, #32]
 800a916:	4651      	mov	r1, sl
 800a918:	b303      	cbz	r3, 800a95c <_strtod_l+0x8c4>
 800a91a:	465a      	mov	r2, fp
 800a91c:	4b9b      	ldr	r3, [pc, #620]	@ (800ab8c <_strtod_l+0xaf4>)
 800a91e:	4013      	ands	r3, r2
 800a920:	f04f 32ff 	mov.w	r2, #4294967295
 800a924:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a928:	d81b      	bhi.n	800a962 <_strtod_l+0x8ca>
 800a92a:	0d1b      	lsrs	r3, r3, #20
 800a92c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a930:	fa02 f303 	lsl.w	r3, r2, r3
 800a934:	4299      	cmp	r1, r3
 800a936:	d119      	bne.n	800a96c <_strtod_l+0x8d4>
 800a938:	4b95      	ldr	r3, [pc, #596]	@ (800ab90 <_strtod_l+0xaf8>)
 800a93a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d102      	bne.n	800a946 <_strtod_l+0x8ae>
 800a940:	3101      	adds	r1, #1
 800a942:	f43f adca 	beq.w	800a4da <_strtod_l+0x442>
 800a946:	4b91      	ldr	r3, [pc, #580]	@ (800ab8c <_strtod_l+0xaf4>)
 800a948:	f04f 0a00 	mov.w	sl, #0
 800a94c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a94e:	401a      	ands	r2, r3
 800a950:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a954:	9b08      	ldr	r3, [sp, #32]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d1b8      	bne.n	800a8cc <_strtod_l+0x834>
 800a95a:	e5c9      	b.n	800a4f0 <_strtod_l+0x458>
 800a95c:	f04f 33ff 	mov.w	r3, #4294967295
 800a960:	e7e8      	b.n	800a934 <_strtod_l+0x89c>
 800a962:	4613      	mov	r3, r2
 800a964:	e7e6      	b.n	800a934 <_strtod_l+0x89c>
 800a966:	ea53 030a 	orrs.w	r3, r3, sl
 800a96a:	d0a1      	beq.n	800a8b0 <_strtod_l+0x818>
 800a96c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a96e:	b1db      	cbz	r3, 800a9a8 <_strtod_l+0x910>
 800a970:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a972:	4213      	tst	r3, r2
 800a974:	d0ee      	beq.n	800a954 <_strtod_l+0x8bc>
 800a976:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a978:	4650      	mov	r0, sl
 800a97a:	9a08      	ldr	r2, [sp, #32]
 800a97c:	4659      	mov	r1, fp
 800a97e:	b1bb      	cbz	r3, 800a9b0 <_strtod_l+0x918>
 800a980:	f7ff fb6a 	bl	800a058 <sulp>
 800a984:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a988:	ec53 2b10 	vmov	r2, r3, d0
 800a98c:	f7f5 fc92 	bl	80002b4 <__adddf3>
 800a990:	4682      	mov	sl, r0
 800a992:	468b      	mov	fp, r1
 800a994:	e7de      	b.n	800a954 <_strtod_l+0x8bc>
 800a996:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a99a:	f04f 3aff 	mov.w	sl, #4294967295
 800a99e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a9a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a9a6:	e7d5      	b.n	800a954 <_strtod_l+0x8bc>
 800a9a8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a9aa:	ea13 0f0a 	tst.w	r3, sl
 800a9ae:	e7e1      	b.n	800a974 <_strtod_l+0x8dc>
 800a9b0:	f7ff fb52 	bl	800a058 <sulp>
 800a9b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9b8:	ec53 2b10 	vmov	r2, r3, d0
 800a9bc:	f7f5 fc78 	bl	80002b0 <__aeabi_dsub>
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	4682      	mov	sl, r0
 800a9c6:	468b      	mov	fp, r1
 800a9c8:	f7f6 f892 	bl	8000af0 <__aeabi_dcmpeq>
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	d0c1      	beq.n	800a954 <_strtod_l+0x8bc>
 800a9d0:	e619      	b.n	800a606 <_strtod_l+0x56e>
 800a9d2:	4641      	mov	r1, r8
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	f7ff fac9 	bl	8009f6c <__ratio>
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a9e0:	ec57 6b10 	vmov	r6, r7, d0
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	4639      	mov	r1, r7
 800a9e8:	f7f6 f896 	bl	8000b18 <__aeabi_dcmple>
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	d06f      	beq.n	800aad0 <_strtod_l+0xa38>
 800a9f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d17a      	bne.n	800aaec <_strtod_l+0xa54>
 800a9f6:	f1ba 0f00 	cmp.w	sl, #0
 800a9fa:	d158      	bne.n	800aaae <_strtod_l+0xa16>
 800a9fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d15a      	bne.n	800aabc <_strtod_l+0xa24>
 800aa06:	2200      	movs	r2, #0
 800aa08:	4b62      	ldr	r3, [pc, #392]	@ (800ab94 <_strtod_l+0xafc>)
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	4639      	mov	r1, r7
 800aa0e:	f7f6 f879 	bl	8000b04 <__aeabi_dcmplt>
 800aa12:	2800      	cmp	r0, #0
 800aa14:	d159      	bne.n	800aaca <_strtod_l+0xa32>
 800aa16:	4630      	mov	r0, r6
 800aa18:	4639      	mov	r1, r7
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	4b5e      	ldr	r3, [pc, #376]	@ (800ab98 <_strtod_l+0xb00>)
 800aa1e:	f7f5 fdff 	bl	8000620 <__aeabi_dmul>
 800aa22:	4606      	mov	r6, r0
 800aa24:	460f      	mov	r7, r1
 800aa26:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800aa2a:	9606      	str	r6, [sp, #24]
 800aa2c:	9307      	str	r3, [sp, #28]
 800aa2e:	4d57      	ldr	r5, [pc, #348]	@ (800ab8c <_strtod_l+0xaf4>)
 800aa30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa34:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aa38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa3a:	401d      	ands	r5, r3
 800aa3c:	4b57      	ldr	r3, [pc, #348]	@ (800ab9c <_strtod_l+0xb04>)
 800aa3e:	429d      	cmp	r5, r3
 800aa40:	f040 80b0 	bne.w	800aba4 <_strtod_l+0xb0c>
 800aa44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa46:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800aa4a:	ec4b ab10 	vmov	d0, sl, fp
 800aa4e:	f7ff f9c1 	bl	8009dd4 <__ulp>
 800aa52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa56:	ec51 0b10 	vmov	r0, r1, d0
 800aa5a:	f7f5 fde1 	bl	8000620 <__aeabi_dmul>
 800aa5e:	4652      	mov	r2, sl
 800aa60:	465b      	mov	r3, fp
 800aa62:	f7f5 fc27 	bl	80002b4 <__adddf3>
 800aa66:	460b      	mov	r3, r1
 800aa68:	4948      	ldr	r1, [pc, #288]	@ (800ab8c <_strtod_l+0xaf4>)
 800aa6a:	4682      	mov	sl, r0
 800aa6c:	4a4c      	ldr	r2, [pc, #304]	@ (800aba0 <_strtod_l+0xb08>)
 800aa6e:	4019      	ands	r1, r3
 800aa70:	4291      	cmp	r1, r2
 800aa72:	d942      	bls.n	800aafa <_strtod_l+0xa62>
 800aa74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aa76:	4b46      	ldr	r3, [pc, #280]	@ (800ab90 <_strtod_l+0xaf8>)
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d103      	bne.n	800aa84 <_strtod_l+0x9ec>
 800aa7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa7e:	3301      	adds	r3, #1
 800aa80:	f43f ad2b 	beq.w	800a4da <_strtod_l+0x442>
 800aa84:	f8df b108 	ldr.w	fp, [pc, #264]	@ 800ab90 <_strtod_l+0xaf8>
 800aa88:	f04f 3aff 	mov.w	sl, #4294967295
 800aa8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa8e:	9805      	ldr	r0, [sp, #20]
 800aa90:	f7fe fe66 	bl	8009760 <_Bfree>
 800aa94:	4649      	mov	r1, r9
 800aa96:	9805      	ldr	r0, [sp, #20]
 800aa98:	f7fe fe62 	bl	8009760 <_Bfree>
 800aa9c:	4641      	mov	r1, r8
 800aa9e:	9805      	ldr	r0, [sp, #20]
 800aaa0:	f7fe fe5e 	bl	8009760 <_Bfree>
 800aaa4:	4621      	mov	r1, r4
 800aaa6:	9805      	ldr	r0, [sp, #20]
 800aaa8:	f7fe fe5a 	bl	8009760 <_Bfree>
 800aaac:	e618      	b.n	800a6e0 <_strtod_l+0x648>
 800aaae:	f1ba 0f01 	cmp.w	sl, #1
 800aab2:	d103      	bne.n	800aabc <_strtod_l+0xa24>
 800aab4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	f43f ada5 	beq.w	800a606 <_strtod_l+0x56e>
 800aabc:	2600      	movs	r6, #0
 800aabe:	4f35      	ldr	r7, [pc, #212]	@ (800ab94 <_strtod_l+0xafc>)
 800aac0:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 800ab68 <_strtod_l+0xad0>
 800aac4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aac8:	e7b1      	b.n	800aa2e <_strtod_l+0x996>
 800aaca:	2600      	movs	r6, #0
 800aacc:	4f32      	ldr	r7, [pc, #200]	@ (800ab98 <_strtod_l+0xb00>)
 800aace:	e7aa      	b.n	800aa26 <_strtod_l+0x98e>
 800aad0:	4b31      	ldr	r3, [pc, #196]	@ (800ab98 <_strtod_l+0xb00>)
 800aad2:	4630      	mov	r0, r6
 800aad4:	4639      	mov	r1, r7
 800aad6:	2200      	movs	r2, #0
 800aad8:	f7f5 fda2 	bl	8000620 <__aeabi_dmul>
 800aadc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aade:	4606      	mov	r6, r0
 800aae0:	460f      	mov	r7, r1
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d09f      	beq.n	800aa26 <_strtod_l+0x98e>
 800aae6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800aaea:	e7a0      	b.n	800aa2e <_strtod_l+0x996>
 800aaec:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800ab70 <_strtod_l+0xad8>
 800aaf0:	ec57 6b17 	vmov	r6, r7, d7
 800aaf4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aaf8:	e799      	b.n	800aa2e <_strtod_l+0x996>
 800aafa:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800aafe:	9b08      	ldr	r3, [sp, #32]
 800ab00:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1c1      	bne.n	800aa8c <_strtod_l+0x9f4>
 800ab08:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab0c:	0d1b      	lsrs	r3, r3, #20
 800ab0e:	051b      	lsls	r3, r3, #20
 800ab10:	429d      	cmp	r5, r3
 800ab12:	d1bb      	bne.n	800aa8c <_strtod_l+0x9f4>
 800ab14:	4630      	mov	r0, r6
 800ab16:	4639      	mov	r1, r7
 800ab18:	f7f6 f8e2 	bl	8000ce0 <__aeabi_d2lz>
 800ab1c:	f7f5 fd52 	bl	80005c4 <__aeabi_l2d>
 800ab20:	4602      	mov	r2, r0
 800ab22:	460b      	mov	r3, r1
 800ab24:	4630      	mov	r0, r6
 800ab26:	4639      	mov	r1, r7
 800ab28:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ab2c:	f7f5 fbc0 	bl	80002b0 <__aeabi_dsub>
 800ab30:	460b      	mov	r3, r1
 800ab32:	4602      	mov	r2, r0
 800ab34:	ea46 060a 	orr.w	r6, r6, sl
 800ab38:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ab3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab3e:	431e      	orrs	r6, r3
 800ab40:	d06d      	beq.n	800ac1e <_strtod_l+0xb86>
 800ab42:	a30d      	add	r3, pc, #52	@ (adr r3, 800ab78 <_strtod_l+0xae0>)
 800ab44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab48:	f7f5 ffdc 	bl	8000b04 <__aeabi_dcmplt>
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	f47f accf 	bne.w	800a4f0 <_strtod_l+0x458>
 800ab52:	a30b      	add	r3, pc, #44	@ (adr r3, 800ab80 <_strtod_l+0xae8>)
 800ab54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab5c:	f7f5 fff0 	bl	8000b40 <__aeabi_dcmpgt>
 800ab60:	2800      	cmp	r0, #0
 800ab62:	d093      	beq.n	800aa8c <_strtod_l+0x9f4>
 800ab64:	e4c4      	b.n	800a4f0 <_strtod_l+0x458>
 800ab66:	bf00      	nop
 800ab68:	00000000 	.word	0x00000000
 800ab6c:	bff00000 	.word	0xbff00000
 800ab70:	00000000 	.word	0x00000000
 800ab74:	3ff00000 	.word	0x3ff00000
 800ab78:	94a03595 	.word	0x94a03595
 800ab7c:	3fdfffff 	.word	0x3fdfffff
 800ab80:	35afe535 	.word	0x35afe535
 800ab84:	3fe00000 	.word	0x3fe00000
 800ab88:	000fffff 	.word	0x000fffff
 800ab8c:	7ff00000 	.word	0x7ff00000
 800ab90:	7fefffff 	.word	0x7fefffff
 800ab94:	3ff00000 	.word	0x3ff00000
 800ab98:	3fe00000 	.word	0x3fe00000
 800ab9c:	7fe00000 	.word	0x7fe00000
 800aba0:	7c9fffff 	.word	0x7c9fffff
 800aba4:	9b08      	ldr	r3, [sp, #32]
 800aba6:	b323      	cbz	r3, 800abf2 <_strtod_l+0xb5a>
 800aba8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800abac:	d821      	bhi.n	800abf2 <_strtod_l+0xb5a>
 800abae:	4630      	mov	r0, r6
 800abb0:	4639      	mov	r1, r7
 800abb2:	a327      	add	r3, pc, #156	@ (adr r3, 800ac50 <_strtod_l+0xbb8>)
 800abb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb8:	f7f5 ffae 	bl	8000b18 <__aeabi_dcmple>
 800abbc:	b1a0      	cbz	r0, 800abe8 <_strtod_l+0xb50>
 800abbe:	4639      	mov	r1, r7
 800abc0:	4630      	mov	r0, r6
 800abc2:	f7f6 f805 	bl	8000bd0 <__aeabi_d2uiz>
 800abc6:	2801      	cmp	r0, #1
 800abc8:	bf38      	it	cc
 800abca:	2001      	movcc	r0, #1
 800abcc:	f7f5 fcae 	bl	800052c <__aeabi_ui2d>
 800abd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abd2:	4606      	mov	r6, r0
 800abd4:	460f      	mov	r7, r1
 800abd6:	b9fb      	cbnz	r3, 800ac18 <_strtod_l+0xb80>
 800abd8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800abdc:	9014      	str	r0, [sp, #80]	@ 0x50
 800abde:	9315      	str	r3, [sp, #84]	@ 0x54
 800abe0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800abe4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800abe8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800abea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800abee:	1b5b      	subs	r3, r3, r5
 800abf0:	9311      	str	r3, [sp, #68]	@ 0x44
 800abf2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800abf6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800abfa:	f7ff f8eb 	bl	8009dd4 <__ulp>
 800abfe:	4650      	mov	r0, sl
 800ac00:	4659      	mov	r1, fp
 800ac02:	ec53 2b10 	vmov	r2, r3, d0
 800ac06:	f7f5 fd0b 	bl	8000620 <__aeabi_dmul>
 800ac0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ac0e:	f7f5 fb51 	bl	80002b4 <__adddf3>
 800ac12:	4682      	mov	sl, r0
 800ac14:	468b      	mov	fp, r1
 800ac16:	e772      	b.n	800aafe <_strtod_l+0xa66>
 800ac18:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ac1c:	e7e0      	b.n	800abe0 <_strtod_l+0xb48>
 800ac1e:	a30e      	add	r3, pc, #56	@ (adr r3, 800ac58 <_strtod_l+0xbc0>)
 800ac20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac24:	f7f5 ff6e 	bl	8000b04 <__aeabi_dcmplt>
 800ac28:	e79a      	b.n	800ab60 <_strtod_l+0xac8>
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac30:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ac32:	6013      	str	r3, [r2, #0]
 800ac34:	f7ff ba6d 	b.w	800a112 <_strtod_l+0x7a>
 800ac38:	2a65      	cmp	r2, #101	@ 0x65
 800ac3a:	f43f ab67 	beq.w	800a30c <_strtod_l+0x274>
 800ac3e:	2a45      	cmp	r2, #69	@ 0x45
 800ac40:	f43f ab64 	beq.w	800a30c <_strtod_l+0x274>
 800ac44:	2301      	movs	r3, #1
 800ac46:	f7ff bba0 	b.w	800a38a <_strtod_l+0x2f2>
 800ac4a:	bf00      	nop
 800ac4c:	f3af 8000 	nop.w
 800ac50:	ffc00000 	.word	0xffc00000
 800ac54:	41dfffff 	.word	0x41dfffff
 800ac58:	94a03595 	.word	0x94a03595
 800ac5c:	3fcfffff 	.word	0x3fcfffff

0800ac60 <_strtod_r>:
 800ac60:	4b01      	ldr	r3, [pc, #4]	@ (800ac68 <_strtod_r+0x8>)
 800ac62:	f7ff ba19 	b.w	800a098 <_strtod_l>
 800ac66:	bf00      	nop
 800ac68:	20000080 	.word	0x20000080

0800ac6c <_strtol_l.constprop.0>:
 800ac6c:	2b24      	cmp	r3, #36	@ 0x24
 800ac6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac72:	4686      	mov	lr, r0
 800ac74:	4690      	mov	r8, r2
 800ac76:	d801      	bhi.n	800ac7c <_strtol_l.constprop.0+0x10>
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d106      	bne.n	800ac8a <_strtol_l.constprop.0+0x1e>
 800ac7c:	f7fd fd9c 	bl	80087b8 <__errno>
 800ac80:	2316      	movs	r3, #22
 800ac82:	6003      	str	r3, [r0, #0]
 800ac84:	2000      	movs	r0, #0
 800ac86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac8a:	460d      	mov	r5, r1
 800ac8c:	4833      	ldr	r0, [pc, #204]	@ (800ad5c <_strtol_l.constprop.0+0xf0>)
 800ac8e:	462a      	mov	r2, r5
 800ac90:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac94:	5d06      	ldrb	r6, [r0, r4]
 800ac96:	f016 0608 	ands.w	r6, r6, #8
 800ac9a:	d1f8      	bne.n	800ac8e <_strtol_l.constprop.0+0x22>
 800ac9c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ac9e:	d12d      	bne.n	800acfc <_strtol_l.constprop.0+0x90>
 800aca0:	782c      	ldrb	r4, [r5, #0]
 800aca2:	2601      	movs	r6, #1
 800aca4:	1c95      	adds	r5, r2, #2
 800aca6:	f033 0210 	bics.w	r2, r3, #16
 800acaa:	d109      	bne.n	800acc0 <_strtol_l.constprop.0+0x54>
 800acac:	2c30      	cmp	r4, #48	@ 0x30
 800acae:	d12a      	bne.n	800ad06 <_strtol_l.constprop.0+0x9a>
 800acb0:	782a      	ldrb	r2, [r5, #0]
 800acb2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800acb6:	2a58      	cmp	r2, #88	@ 0x58
 800acb8:	d125      	bne.n	800ad06 <_strtol_l.constprop.0+0x9a>
 800acba:	786c      	ldrb	r4, [r5, #1]
 800acbc:	2310      	movs	r3, #16
 800acbe:	3502      	adds	r5, #2
 800acc0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800acc4:	2200      	movs	r2, #0
 800acc6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800acca:	4610      	mov	r0, r2
 800accc:	fbbc f9f3 	udiv	r9, ip, r3
 800acd0:	fb03 ca19 	mls	sl, r3, r9, ip
 800acd4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800acd8:	2f09      	cmp	r7, #9
 800acda:	d81b      	bhi.n	800ad14 <_strtol_l.constprop.0+0xa8>
 800acdc:	463c      	mov	r4, r7
 800acde:	42a3      	cmp	r3, r4
 800ace0:	dd27      	ble.n	800ad32 <_strtol_l.constprop.0+0xc6>
 800ace2:	1c57      	adds	r7, r2, #1
 800ace4:	d007      	beq.n	800acf6 <_strtol_l.constprop.0+0x8a>
 800ace6:	4581      	cmp	r9, r0
 800ace8:	d320      	bcc.n	800ad2c <_strtol_l.constprop.0+0xc0>
 800acea:	d101      	bne.n	800acf0 <_strtol_l.constprop.0+0x84>
 800acec:	45a2      	cmp	sl, r4
 800acee:	db1d      	blt.n	800ad2c <_strtol_l.constprop.0+0xc0>
 800acf0:	fb00 4003 	mla	r0, r0, r3, r4
 800acf4:	2201      	movs	r2, #1
 800acf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acfa:	e7eb      	b.n	800acd4 <_strtol_l.constprop.0+0x68>
 800acfc:	2c2b      	cmp	r4, #43	@ 0x2b
 800acfe:	bf04      	itt	eq
 800ad00:	782c      	ldrbeq	r4, [r5, #0]
 800ad02:	1c95      	addeq	r5, r2, #2
 800ad04:	e7cf      	b.n	800aca6 <_strtol_l.constprop.0+0x3a>
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d1da      	bne.n	800acc0 <_strtol_l.constprop.0+0x54>
 800ad0a:	2c30      	cmp	r4, #48	@ 0x30
 800ad0c:	bf0c      	ite	eq
 800ad0e:	2308      	moveq	r3, #8
 800ad10:	230a      	movne	r3, #10
 800ad12:	e7d5      	b.n	800acc0 <_strtol_l.constprop.0+0x54>
 800ad14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ad18:	2f19      	cmp	r7, #25
 800ad1a:	d801      	bhi.n	800ad20 <_strtol_l.constprop.0+0xb4>
 800ad1c:	3c37      	subs	r4, #55	@ 0x37
 800ad1e:	e7de      	b.n	800acde <_strtol_l.constprop.0+0x72>
 800ad20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ad24:	2f19      	cmp	r7, #25
 800ad26:	d804      	bhi.n	800ad32 <_strtol_l.constprop.0+0xc6>
 800ad28:	3c57      	subs	r4, #87	@ 0x57
 800ad2a:	e7d8      	b.n	800acde <_strtol_l.constprop.0+0x72>
 800ad2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad30:	e7e1      	b.n	800acf6 <_strtol_l.constprop.0+0x8a>
 800ad32:	1c53      	adds	r3, r2, #1
 800ad34:	d108      	bne.n	800ad48 <_strtol_l.constprop.0+0xdc>
 800ad36:	2322      	movs	r3, #34	@ 0x22
 800ad38:	4660      	mov	r0, ip
 800ad3a:	f8ce 3000 	str.w	r3, [lr]
 800ad3e:	f1b8 0f00 	cmp.w	r8, #0
 800ad42:	d0a0      	beq.n	800ac86 <_strtol_l.constprop.0+0x1a>
 800ad44:	1e69      	subs	r1, r5, #1
 800ad46:	e006      	b.n	800ad56 <_strtol_l.constprop.0+0xea>
 800ad48:	b106      	cbz	r6, 800ad4c <_strtol_l.constprop.0+0xe0>
 800ad4a:	4240      	negs	r0, r0
 800ad4c:	f1b8 0f00 	cmp.w	r8, #0
 800ad50:	d099      	beq.n	800ac86 <_strtol_l.constprop.0+0x1a>
 800ad52:	2a00      	cmp	r2, #0
 800ad54:	d1f6      	bne.n	800ad44 <_strtol_l.constprop.0+0xd8>
 800ad56:	f8c8 1000 	str.w	r1, [r8]
 800ad5a:	e794      	b.n	800ac86 <_strtol_l.constprop.0+0x1a>
 800ad5c:	0800c1c9 	.word	0x0800c1c9

0800ad60 <_strtol_r>:
 800ad60:	f7ff bf84 	b.w	800ac6c <_strtol_l.constprop.0>

0800ad64 <__ssputs_r>:
 800ad64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad68:	461f      	mov	r7, r3
 800ad6a:	688e      	ldr	r6, [r1, #8]
 800ad6c:	4682      	mov	sl, r0
 800ad6e:	460c      	mov	r4, r1
 800ad70:	42be      	cmp	r6, r7
 800ad72:	4690      	mov	r8, r2
 800ad74:	680b      	ldr	r3, [r1, #0]
 800ad76:	d82d      	bhi.n	800add4 <__ssputs_r+0x70>
 800ad78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ad80:	d026      	beq.n	800add0 <__ssputs_r+0x6c>
 800ad82:	6965      	ldr	r5, [r4, #20]
 800ad84:	6909      	ldr	r1, [r1, #16]
 800ad86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad8a:	eba3 0901 	sub.w	r9, r3, r1
 800ad8e:	1c7b      	adds	r3, r7, #1
 800ad90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad94:	444b      	add	r3, r9
 800ad96:	106d      	asrs	r5, r5, #1
 800ad98:	429d      	cmp	r5, r3
 800ad9a:	bf38      	it	cc
 800ad9c:	461d      	movcc	r5, r3
 800ad9e:	0553      	lsls	r3, r2, #21
 800ada0:	d527      	bpl.n	800adf2 <__ssputs_r+0x8e>
 800ada2:	4629      	mov	r1, r5
 800ada4:	f7fe fc10 	bl	80095c8 <_malloc_r>
 800ada8:	4606      	mov	r6, r0
 800adaa:	b360      	cbz	r0, 800ae06 <__ssputs_r+0xa2>
 800adac:	464a      	mov	r2, r9
 800adae:	6921      	ldr	r1, [r4, #16]
 800adb0:	f000 fa18 	bl	800b1e4 <memcpy>
 800adb4:	89a3      	ldrh	r3, [r4, #12]
 800adb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800adba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adbe:	81a3      	strh	r3, [r4, #12]
 800adc0:	6126      	str	r6, [r4, #16]
 800adc2:	444e      	add	r6, r9
 800adc4:	6165      	str	r5, [r4, #20]
 800adc6:	eba5 0509 	sub.w	r5, r5, r9
 800adca:	6026      	str	r6, [r4, #0]
 800adcc:	463e      	mov	r6, r7
 800adce:	60a5      	str	r5, [r4, #8]
 800add0:	42be      	cmp	r6, r7
 800add2:	d900      	bls.n	800add6 <__ssputs_r+0x72>
 800add4:	463e      	mov	r6, r7
 800add6:	4632      	mov	r2, r6
 800add8:	4641      	mov	r1, r8
 800adda:	6820      	ldr	r0, [r4, #0]
 800addc:	f000 f9c6 	bl	800b16c <memmove>
 800ade0:	68a3      	ldr	r3, [r4, #8]
 800ade2:	2000      	movs	r0, #0
 800ade4:	1b9b      	subs	r3, r3, r6
 800ade6:	60a3      	str	r3, [r4, #8]
 800ade8:	6823      	ldr	r3, [r4, #0]
 800adea:	4433      	add	r3, r6
 800adec:	6023      	str	r3, [r4, #0]
 800adee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adf2:	462a      	mov	r2, r5
 800adf4:	f000 fd85 	bl	800b902 <_realloc_r>
 800adf8:	4606      	mov	r6, r0
 800adfa:	2800      	cmp	r0, #0
 800adfc:	d1e0      	bne.n	800adc0 <__ssputs_r+0x5c>
 800adfe:	6921      	ldr	r1, [r4, #16]
 800ae00:	4650      	mov	r0, sl
 800ae02:	f7fe fb6d 	bl	80094e0 <_free_r>
 800ae06:	230c      	movs	r3, #12
 800ae08:	f04f 30ff 	mov.w	r0, #4294967295
 800ae0c:	f8ca 3000 	str.w	r3, [sl]
 800ae10:	89a3      	ldrh	r3, [r4, #12]
 800ae12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae16:	81a3      	strh	r3, [r4, #12]
 800ae18:	e7e9      	b.n	800adee <__ssputs_r+0x8a>
	...

0800ae1c <_svfiprintf_r>:
 800ae1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae20:	4698      	mov	r8, r3
 800ae22:	898b      	ldrh	r3, [r1, #12]
 800ae24:	b09d      	sub	sp, #116	@ 0x74
 800ae26:	4607      	mov	r7, r0
 800ae28:	061b      	lsls	r3, r3, #24
 800ae2a:	460d      	mov	r5, r1
 800ae2c:	4614      	mov	r4, r2
 800ae2e:	d510      	bpl.n	800ae52 <_svfiprintf_r+0x36>
 800ae30:	690b      	ldr	r3, [r1, #16]
 800ae32:	b973      	cbnz	r3, 800ae52 <_svfiprintf_r+0x36>
 800ae34:	2140      	movs	r1, #64	@ 0x40
 800ae36:	f7fe fbc7 	bl	80095c8 <_malloc_r>
 800ae3a:	6028      	str	r0, [r5, #0]
 800ae3c:	6128      	str	r0, [r5, #16]
 800ae3e:	b930      	cbnz	r0, 800ae4e <_svfiprintf_r+0x32>
 800ae40:	230c      	movs	r3, #12
 800ae42:	603b      	str	r3, [r7, #0]
 800ae44:	f04f 30ff 	mov.w	r0, #4294967295
 800ae48:	b01d      	add	sp, #116	@ 0x74
 800ae4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae4e:	2340      	movs	r3, #64	@ 0x40
 800ae50:	616b      	str	r3, [r5, #20]
 800ae52:	2300      	movs	r3, #0
 800ae54:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae58:	f04f 0901 	mov.w	r9, #1
 800ae5c:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800b000 <_svfiprintf_r+0x1e4>
 800ae60:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae62:	2320      	movs	r3, #32
 800ae64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae68:	2330      	movs	r3, #48	@ 0x30
 800ae6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae6e:	4623      	mov	r3, r4
 800ae70:	469a      	mov	sl, r3
 800ae72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae76:	b10a      	cbz	r2, 800ae7c <_svfiprintf_r+0x60>
 800ae78:	2a25      	cmp	r2, #37	@ 0x25
 800ae7a:	d1f9      	bne.n	800ae70 <_svfiprintf_r+0x54>
 800ae7c:	ebba 0b04 	subs.w	fp, sl, r4
 800ae80:	d00b      	beq.n	800ae9a <_svfiprintf_r+0x7e>
 800ae82:	465b      	mov	r3, fp
 800ae84:	4622      	mov	r2, r4
 800ae86:	4629      	mov	r1, r5
 800ae88:	4638      	mov	r0, r7
 800ae8a:	f7ff ff6b 	bl	800ad64 <__ssputs_r>
 800ae8e:	3001      	adds	r0, #1
 800ae90:	f000 80a7 	beq.w	800afe2 <_svfiprintf_r+0x1c6>
 800ae94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae96:	445a      	add	r2, fp
 800ae98:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	f000 809f 	beq.w	800afe2 <_svfiprintf_r+0x1c6>
 800aea4:	2300      	movs	r3, #0
 800aea6:	f04f 32ff 	mov.w	r2, #4294967295
 800aeaa:	f10a 0a01 	add.w	sl, sl, #1
 800aeae:	9304      	str	r3, [sp, #16]
 800aeb0:	9307      	str	r3, [sp, #28]
 800aeb2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aeb6:	931a      	str	r3, [sp, #104]	@ 0x68
 800aeb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aebc:	4654      	mov	r4, sl
 800aebe:	2205      	movs	r2, #5
 800aec0:	484f      	ldr	r0, [pc, #316]	@ (800b000 <_svfiprintf_r+0x1e4>)
 800aec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aec6:	f7fd fca4 	bl	8008812 <memchr>
 800aeca:	9a04      	ldr	r2, [sp, #16]
 800aecc:	b9d8      	cbnz	r0, 800af06 <_svfiprintf_r+0xea>
 800aece:	06d0      	lsls	r0, r2, #27
 800aed0:	bf44      	itt	mi
 800aed2:	2320      	movmi	r3, #32
 800aed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aed8:	0711      	lsls	r1, r2, #28
 800aeda:	bf44      	itt	mi
 800aedc:	232b      	movmi	r3, #43	@ 0x2b
 800aede:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aee2:	f89a 3000 	ldrb.w	r3, [sl]
 800aee6:	2b2a      	cmp	r3, #42	@ 0x2a
 800aee8:	d015      	beq.n	800af16 <_svfiprintf_r+0xfa>
 800aeea:	9a07      	ldr	r2, [sp, #28]
 800aeec:	4654      	mov	r4, sl
 800aeee:	2000      	movs	r0, #0
 800aef0:	f04f 0c0a 	mov.w	ip, #10
 800aef4:	4621      	mov	r1, r4
 800aef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aefa:	3b30      	subs	r3, #48	@ 0x30
 800aefc:	2b09      	cmp	r3, #9
 800aefe:	d94b      	bls.n	800af98 <_svfiprintf_r+0x17c>
 800af00:	b1b0      	cbz	r0, 800af30 <_svfiprintf_r+0x114>
 800af02:	9207      	str	r2, [sp, #28]
 800af04:	e014      	b.n	800af30 <_svfiprintf_r+0x114>
 800af06:	eba0 0308 	sub.w	r3, r0, r8
 800af0a:	46a2      	mov	sl, r4
 800af0c:	fa09 f303 	lsl.w	r3, r9, r3
 800af10:	4313      	orrs	r3, r2
 800af12:	9304      	str	r3, [sp, #16]
 800af14:	e7d2      	b.n	800aebc <_svfiprintf_r+0xa0>
 800af16:	9b03      	ldr	r3, [sp, #12]
 800af18:	1d19      	adds	r1, r3, #4
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	9103      	str	r1, [sp, #12]
 800af20:	bfbb      	ittet	lt
 800af22:	425b      	neglt	r3, r3
 800af24:	f042 0202 	orrlt.w	r2, r2, #2
 800af28:	9307      	strge	r3, [sp, #28]
 800af2a:	9307      	strlt	r3, [sp, #28]
 800af2c:	bfb8      	it	lt
 800af2e:	9204      	strlt	r2, [sp, #16]
 800af30:	7823      	ldrb	r3, [r4, #0]
 800af32:	2b2e      	cmp	r3, #46	@ 0x2e
 800af34:	d10a      	bne.n	800af4c <_svfiprintf_r+0x130>
 800af36:	7863      	ldrb	r3, [r4, #1]
 800af38:	2b2a      	cmp	r3, #42	@ 0x2a
 800af3a:	d132      	bne.n	800afa2 <_svfiprintf_r+0x186>
 800af3c:	9b03      	ldr	r3, [sp, #12]
 800af3e:	3402      	adds	r4, #2
 800af40:	1d1a      	adds	r2, r3, #4
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af48:	9203      	str	r2, [sp, #12]
 800af4a:	9305      	str	r3, [sp, #20]
 800af4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b010 <_svfiprintf_r+0x1f4>
 800af50:	2203      	movs	r2, #3
 800af52:	7821      	ldrb	r1, [r4, #0]
 800af54:	4650      	mov	r0, sl
 800af56:	f7fd fc5c 	bl	8008812 <memchr>
 800af5a:	b138      	cbz	r0, 800af6c <_svfiprintf_r+0x150>
 800af5c:	eba0 000a 	sub.w	r0, r0, sl
 800af60:	2240      	movs	r2, #64	@ 0x40
 800af62:	9b04      	ldr	r3, [sp, #16]
 800af64:	3401      	adds	r4, #1
 800af66:	4082      	lsls	r2, r0
 800af68:	4313      	orrs	r3, r2
 800af6a:	9304      	str	r3, [sp, #16]
 800af6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af70:	2206      	movs	r2, #6
 800af72:	4824      	ldr	r0, [pc, #144]	@ (800b004 <_svfiprintf_r+0x1e8>)
 800af74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af78:	f7fd fc4b 	bl	8008812 <memchr>
 800af7c:	2800      	cmp	r0, #0
 800af7e:	d036      	beq.n	800afee <_svfiprintf_r+0x1d2>
 800af80:	4b21      	ldr	r3, [pc, #132]	@ (800b008 <_svfiprintf_r+0x1ec>)
 800af82:	bb1b      	cbnz	r3, 800afcc <_svfiprintf_r+0x1b0>
 800af84:	9b03      	ldr	r3, [sp, #12]
 800af86:	3307      	adds	r3, #7
 800af88:	f023 0307 	bic.w	r3, r3, #7
 800af8c:	3308      	adds	r3, #8
 800af8e:	9303      	str	r3, [sp, #12]
 800af90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af92:	4433      	add	r3, r6
 800af94:	9309      	str	r3, [sp, #36]	@ 0x24
 800af96:	e76a      	b.n	800ae6e <_svfiprintf_r+0x52>
 800af98:	fb0c 3202 	mla	r2, ip, r2, r3
 800af9c:	460c      	mov	r4, r1
 800af9e:	2001      	movs	r0, #1
 800afa0:	e7a8      	b.n	800aef4 <_svfiprintf_r+0xd8>
 800afa2:	2300      	movs	r3, #0
 800afa4:	3401      	adds	r4, #1
 800afa6:	f04f 0c0a 	mov.w	ip, #10
 800afaa:	4619      	mov	r1, r3
 800afac:	9305      	str	r3, [sp, #20]
 800afae:	4620      	mov	r0, r4
 800afb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afb4:	3a30      	subs	r2, #48	@ 0x30
 800afb6:	2a09      	cmp	r2, #9
 800afb8:	d903      	bls.n	800afc2 <_svfiprintf_r+0x1a6>
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d0c6      	beq.n	800af4c <_svfiprintf_r+0x130>
 800afbe:	9105      	str	r1, [sp, #20]
 800afc0:	e7c4      	b.n	800af4c <_svfiprintf_r+0x130>
 800afc2:	fb0c 2101 	mla	r1, ip, r1, r2
 800afc6:	4604      	mov	r4, r0
 800afc8:	2301      	movs	r3, #1
 800afca:	e7f0      	b.n	800afae <_svfiprintf_r+0x192>
 800afcc:	ab03      	add	r3, sp, #12
 800afce:	462a      	mov	r2, r5
 800afd0:	a904      	add	r1, sp, #16
 800afd2:	4638      	mov	r0, r7
 800afd4:	9300      	str	r3, [sp, #0]
 800afd6:	4b0d      	ldr	r3, [pc, #52]	@ (800b00c <_svfiprintf_r+0x1f0>)
 800afd8:	f7fc fca8 	bl	800792c <_printf_float>
 800afdc:	1c42      	adds	r2, r0, #1
 800afde:	4606      	mov	r6, r0
 800afe0:	d1d6      	bne.n	800af90 <_svfiprintf_r+0x174>
 800afe2:	89ab      	ldrh	r3, [r5, #12]
 800afe4:	065b      	lsls	r3, r3, #25
 800afe6:	f53f af2d 	bmi.w	800ae44 <_svfiprintf_r+0x28>
 800afea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afec:	e72c      	b.n	800ae48 <_svfiprintf_r+0x2c>
 800afee:	ab03      	add	r3, sp, #12
 800aff0:	462a      	mov	r2, r5
 800aff2:	a904      	add	r1, sp, #16
 800aff4:	4638      	mov	r0, r7
 800aff6:	9300      	str	r3, [sp, #0]
 800aff8:	4b04      	ldr	r3, [pc, #16]	@ (800b00c <_svfiprintf_r+0x1f0>)
 800affa:	f7fc ff33 	bl	8007e64 <_printf_i>
 800affe:	e7ed      	b.n	800afdc <_svfiprintf_r+0x1c0>
 800b000:	0800c2c9 	.word	0x0800c2c9
 800b004:	0800c2d3 	.word	0x0800c2d3
 800b008:	0800792d 	.word	0x0800792d
 800b00c:	0800ad65 	.word	0x0800ad65
 800b010:	0800c2cf 	.word	0x0800c2cf

0800b014 <__sflush_r>:
 800b014:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b01c:	0716      	lsls	r6, r2, #28
 800b01e:	4605      	mov	r5, r0
 800b020:	460c      	mov	r4, r1
 800b022:	d454      	bmi.n	800b0ce <__sflush_r+0xba>
 800b024:	684b      	ldr	r3, [r1, #4]
 800b026:	2b00      	cmp	r3, #0
 800b028:	dc02      	bgt.n	800b030 <__sflush_r+0x1c>
 800b02a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	dd48      	ble.n	800b0c2 <__sflush_r+0xae>
 800b030:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b032:	2e00      	cmp	r6, #0
 800b034:	d045      	beq.n	800b0c2 <__sflush_r+0xae>
 800b036:	2300      	movs	r3, #0
 800b038:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b03c:	682f      	ldr	r7, [r5, #0]
 800b03e:	6a21      	ldr	r1, [r4, #32]
 800b040:	602b      	str	r3, [r5, #0]
 800b042:	d030      	beq.n	800b0a6 <__sflush_r+0x92>
 800b044:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b046:	89a3      	ldrh	r3, [r4, #12]
 800b048:	0759      	lsls	r1, r3, #29
 800b04a:	d505      	bpl.n	800b058 <__sflush_r+0x44>
 800b04c:	6863      	ldr	r3, [r4, #4]
 800b04e:	1ad2      	subs	r2, r2, r3
 800b050:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b052:	b10b      	cbz	r3, 800b058 <__sflush_r+0x44>
 800b054:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b056:	1ad2      	subs	r2, r2, r3
 800b058:	2300      	movs	r3, #0
 800b05a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b05c:	6a21      	ldr	r1, [r4, #32]
 800b05e:	4628      	mov	r0, r5
 800b060:	47b0      	blx	r6
 800b062:	1c43      	adds	r3, r0, #1
 800b064:	89a3      	ldrh	r3, [r4, #12]
 800b066:	d106      	bne.n	800b076 <__sflush_r+0x62>
 800b068:	6829      	ldr	r1, [r5, #0]
 800b06a:	291d      	cmp	r1, #29
 800b06c:	d82b      	bhi.n	800b0c6 <__sflush_r+0xb2>
 800b06e:	4a2a      	ldr	r2, [pc, #168]	@ (800b118 <__sflush_r+0x104>)
 800b070:	410a      	asrs	r2, r1
 800b072:	07d6      	lsls	r6, r2, #31
 800b074:	d427      	bmi.n	800b0c6 <__sflush_r+0xb2>
 800b076:	2200      	movs	r2, #0
 800b078:	04d9      	lsls	r1, r3, #19
 800b07a:	6062      	str	r2, [r4, #4]
 800b07c:	6922      	ldr	r2, [r4, #16]
 800b07e:	6022      	str	r2, [r4, #0]
 800b080:	d504      	bpl.n	800b08c <__sflush_r+0x78>
 800b082:	1c42      	adds	r2, r0, #1
 800b084:	d101      	bne.n	800b08a <__sflush_r+0x76>
 800b086:	682b      	ldr	r3, [r5, #0]
 800b088:	b903      	cbnz	r3, 800b08c <__sflush_r+0x78>
 800b08a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b08c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b08e:	602f      	str	r7, [r5, #0]
 800b090:	b1b9      	cbz	r1, 800b0c2 <__sflush_r+0xae>
 800b092:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b096:	4299      	cmp	r1, r3
 800b098:	d002      	beq.n	800b0a0 <__sflush_r+0x8c>
 800b09a:	4628      	mov	r0, r5
 800b09c:	f7fe fa20 	bl	80094e0 <_free_r>
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0a4:	e00d      	b.n	800b0c2 <__sflush_r+0xae>
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	4628      	mov	r0, r5
 800b0aa:	47b0      	blx	r6
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	1c50      	adds	r0, r2, #1
 800b0b0:	d1c9      	bne.n	800b046 <__sflush_r+0x32>
 800b0b2:	682b      	ldr	r3, [r5, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d0c6      	beq.n	800b046 <__sflush_r+0x32>
 800b0b8:	2b1d      	cmp	r3, #29
 800b0ba:	d001      	beq.n	800b0c0 <__sflush_r+0xac>
 800b0bc:	2b16      	cmp	r3, #22
 800b0be:	d11d      	bne.n	800b0fc <__sflush_r+0xe8>
 800b0c0:	602f      	str	r7, [r5, #0]
 800b0c2:	2000      	movs	r0, #0
 800b0c4:	e021      	b.n	800b10a <__sflush_r+0xf6>
 800b0c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0ca:	b21b      	sxth	r3, r3
 800b0cc:	e01a      	b.n	800b104 <__sflush_r+0xf0>
 800b0ce:	690f      	ldr	r7, [r1, #16]
 800b0d0:	2f00      	cmp	r7, #0
 800b0d2:	d0f6      	beq.n	800b0c2 <__sflush_r+0xae>
 800b0d4:	0793      	lsls	r3, r2, #30
 800b0d6:	680e      	ldr	r6, [r1, #0]
 800b0d8:	600f      	str	r7, [r1, #0]
 800b0da:	bf0c      	ite	eq
 800b0dc:	694b      	ldreq	r3, [r1, #20]
 800b0de:	2300      	movne	r3, #0
 800b0e0:	eba6 0807 	sub.w	r8, r6, r7
 800b0e4:	608b      	str	r3, [r1, #8]
 800b0e6:	f1b8 0f00 	cmp.w	r8, #0
 800b0ea:	ddea      	ble.n	800b0c2 <__sflush_r+0xae>
 800b0ec:	4643      	mov	r3, r8
 800b0ee:	463a      	mov	r2, r7
 800b0f0:	6a21      	ldr	r1, [r4, #32]
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b0f6:	47b0      	blx	r6
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	dc08      	bgt.n	800b10e <__sflush_r+0xfa>
 800b0fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b100:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b104:	f04f 30ff 	mov.w	r0, #4294967295
 800b108:	81a3      	strh	r3, [r4, #12]
 800b10a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b10e:	4407      	add	r7, r0
 800b110:	eba8 0800 	sub.w	r8, r8, r0
 800b114:	e7e7      	b.n	800b0e6 <__sflush_r+0xd2>
 800b116:	bf00      	nop
 800b118:	dfbffffe 	.word	0xdfbffffe

0800b11c <_fflush_r>:
 800b11c:	b538      	push	{r3, r4, r5, lr}
 800b11e:	690b      	ldr	r3, [r1, #16]
 800b120:	4605      	mov	r5, r0
 800b122:	460c      	mov	r4, r1
 800b124:	b913      	cbnz	r3, 800b12c <_fflush_r+0x10>
 800b126:	2500      	movs	r5, #0
 800b128:	4628      	mov	r0, r5
 800b12a:	bd38      	pop	{r3, r4, r5, pc}
 800b12c:	b118      	cbz	r0, 800b136 <_fflush_r+0x1a>
 800b12e:	6a03      	ldr	r3, [r0, #32]
 800b130:	b90b      	cbnz	r3, 800b136 <_fflush_r+0x1a>
 800b132:	f7fd fa55 	bl	80085e0 <__sinit>
 800b136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d0f3      	beq.n	800b126 <_fflush_r+0xa>
 800b13e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b140:	07d0      	lsls	r0, r2, #31
 800b142:	d404      	bmi.n	800b14e <_fflush_r+0x32>
 800b144:	0599      	lsls	r1, r3, #22
 800b146:	d402      	bmi.n	800b14e <_fflush_r+0x32>
 800b148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b14a:	f7fd fb60 	bl	800880e <__retarget_lock_acquire_recursive>
 800b14e:	4628      	mov	r0, r5
 800b150:	4621      	mov	r1, r4
 800b152:	f7ff ff5f 	bl	800b014 <__sflush_r>
 800b156:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b158:	4605      	mov	r5, r0
 800b15a:	07da      	lsls	r2, r3, #31
 800b15c:	d4e4      	bmi.n	800b128 <_fflush_r+0xc>
 800b15e:	89a3      	ldrh	r3, [r4, #12]
 800b160:	059b      	lsls	r3, r3, #22
 800b162:	d4e1      	bmi.n	800b128 <_fflush_r+0xc>
 800b164:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b166:	f7fd fb53 	bl	8008810 <__retarget_lock_release_recursive>
 800b16a:	e7dd      	b.n	800b128 <_fflush_r+0xc>

0800b16c <memmove>:
 800b16c:	4288      	cmp	r0, r1
 800b16e:	b510      	push	{r4, lr}
 800b170:	eb01 0402 	add.w	r4, r1, r2
 800b174:	d902      	bls.n	800b17c <memmove+0x10>
 800b176:	4284      	cmp	r4, r0
 800b178:	4623      	mov	r3, r4
 800b17a:	d807      	bhi.n	800b18c <memmove+0x20>
 800b17c:	1e43      	subs	r3, r0, #1
 800b17e:	42a1      	cmp	r1, r4
 800b180:	d008      	beq.n	800b194 <memmove+0x28>
 800b182:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b186:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b18a:	e7f8      	b.n	800b17e <memmove+0x12>
 800b18c:	4402      	add	r2, r0
 800b18e:	4601      	mov	r1, r0
 800b190:	428a      	cmp	r2, r1
 800b192:	d100      	bne.n	800b196 <memmove+0x2a>
 800b194:	bd10      	pop	{r4, pc}
 800b196:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b19a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b19e:	e7f7      	b.n	800b190 <memmove+0x24>

0800b1a0 <strncmp>:
 800b1a0:	b510      	push	{r4, lr}
 800b1a2:	b16a      	cbz	r2, 800b1c0 <strncmp+0x20>
 800b1a4:	3901      	subs	r1, #1
 800b1a6:	1884      	adds	r4, r0, r2
 800b1a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d103      	bne.n	800b1bc <strncmp+0x1c>
 800b1b4:	42a0      	cmp	r0, r4
 800b1b6:	d001      	beq.n	800b1bc <strncmp+0x1c>
 800b1b8:	2a00      	cmp	r2, #0
 800b1ba:	d1f5      	bne.n	800b1a8 <strncmp+0x8>
 800b1bc:	1ad0      	subs	r0, r2, r3
 800b1be:	bd10      	pop	{r4, pc}
 800b1c0:	4610      	mov	r0, r2
 800b1c2:	e7fc      	b.n	800b1be <strncmp+0x1e>

0800b1c4 <_sbrk_r>:
 800b1c4:	b538      	push	{r3, r4, r5, lr}
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	4d05      	ldr	r5, [pc, #20]	@ (800b1e0 <_sbrk_r+0x1c>)
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	4608      	mov	r0, r1
 800b1ce:	602b      	str	r3, [r5, #0]
 800b1d0:	f7f6 fd92 	bl	8001cf8 <_sbrk>
 800b1d4:	1c43      	adds	r3, r0, #1
 800b1d6:	d102      	bne.n	800b1de <_sbrk_r+0x1a>
 800b1d8:	682b      	ldr	r3, [r5, #0]
 800b1da:	b103      	cbz	r3, 800b1de <_sbrk_r+0x1a>
 800b1dc:	6023      	str	r3, [r4, #0]
 800b1de:	bd38      	pop	{r3, r4, r5, pc}
 800b1e0:	20000660 	.word	0x20000660

0800b1e4 <memcpy>:
 800b1e4:	440a      	add	r2, r1
 800b1e6:	1e43      	subs	r3, r0, #1
 800b1e8:	4291      	cmp	r1, r2
 800b1ea:	d100      	bne.n	800b1ee <memcpy+0xa>
 800b1ec:	4770      	bx	lr
 800b1ee:	b510      	push	{r4, lr}
 800b1f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1f4:	4291      	cmp	r1, r2
 800b1f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1fa:	d1f9      	bne.n	800b1f0 <memcpy+0xc>
 800b1fc:	bd10      	pop	{r4, pc}
	...

0800b200 <nan>:
 800b200:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b208 <nan+0x8>
 800b204:	4770      	bx	lr
 800b206:	bf00      	nop
 800b208:	00000000 	.word	0x00000000
 800b20c:	7ff80000 	.word	0x7ff80000

0800b210 <__assert_func>:
 800b210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b212:	4614      	mov	r4, r2
 800b214:	461a      	mov	r2, r3
 800b216:	4b09      	ldr	r3, [pc, #36]	@ (800b23c <__assert_func+0x2c>)
 800b218:	4605      	mov	r5, r0
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	68d8      	ldr	r0, [r3, #12]
 800b21e:	b954      	cbnz	r4, 800b236 <__assert_func+0x26>
 800b220:	4b07      	ldr	r3, [pc, #28]	@ (800b240 <__assert_func+0x30>)
 800b222:	461c      	mov	r4, r3
 800b224:	9100      	str	r1, [sp, #0]
 800b226:	4907      	ldr	r1, [pc, #28]	@ (800b244 <__assert_func+0x34>)
 800b228:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b22c:	462b      	mov	r3, r5
 800b22e:	f000 fba3 	bl	800b978 <fiprintf>
 800b232:	f000 fbb3 	bl	800b99c <abort>
 800b236:	4b04      	ldr	r3, [pc, #16]	@ (800b248 <__assert_func+0x38>)
 800b238:	e7f4      	b.n	800b224 <__assert_func+0x14>
 800b23a:	bf00      	nop
 800b23c:	20000030 	.word	0x20000030
 800b240:	0800c31d 	.word	0x0800c31d
 800b244:	0800c2ef 	.word	0x0800c2ef
 800b248:	0800c2e2 	.word	0x0800c2e2

0800b24c <_calloc_r>:
 800b24c:	b570      	push	{r4, r5, r6, lr}
 800b24e:	fba1 5402 	umull	r5, r4, r1, r2
 800b252:	b93c      	cbnz	r4, 800b264 <_calloc_r+0x18>
 800b254:	4629      	mov	r1, r5
 800b256:	f7fe f9b7 	bl	80095c8 <_malloc_r>
 800b25a:	4606      	mov	r6, r0
 800b25c:	b928      	cbnz	r0, 800b26a <_calloc_r+0x1e>
 800b25e:	2600      	movs	r6, #0
 800b260:	4630      	mov	r0, r6
 800b262:	bd70      	pop	{r4, r5, r6, pc}
 800b264:	220c      	movs	r2, #12
 800b266:	6002      	str	r2, [r0, #0]
 800b268:	e7f9      	b.n	800b25e <_calloc_r+0x12>
 800b26a:	462a      	mov	r2, r5
 800b26c:	4621      	mov	r1, r4
 800b26e:	f7fd fa50 	bl	8008712 <memset>
 800b272:	e7f5      	b.n	800b260 <_calloc_r+0x14>

0800b274 <rshift>:
 800b274:	6903      	ldr	r3, [r0, #16]
 800b276:	114a      	asrs	r2, r1, #5
 800b278:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b27c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b280:	f100 0414 	add.w	r4, r0, #20
 800b284:	dd45      	ble.n	800b312 <rshift+0x9e>
 800b286:	f011 011f 	ands.w	r1, r1, #31
 800b28a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b28e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b292:	d10c      	bne.n	800b2ae <rshift+0x3a>
 800b294:	f100 0710 	add.w	r7, r0, #16
 800b298:	4629      	mov	r1, r5
 800b29a:	42b1      	cmp	r1, r6
 800b29c:	d334      	bcc.n	800b308 <rshift+0x94>
 800b29e:	1a9b      	subs	r3, r3, r2
 800b2a0:	1eea      	subs	r2, r5, #3
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	4296      	cmp	r6, r2
 800b2a6:	bf38      	it	cc
 800b2a8:	2300      	movcc	r3, #0
 800b2aa:	4423      	add	r3, r4
 800b2ac:	e015      	b.n	800b2da <rshift+0x66>
 800b2ae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b2b2:	f1c1 0820 	rsb	r8, r1, #32
 800b2b6:	f105 0e04 	add.w	lr, r5, #4
 800b2ba:	46a1      	mov	r9, r4
 800b2bc:	40cf      	lsrs	r7, r1
 800b2be:	4576      	cmp	r6, lr
 800b2c0:	46f4      	mov	ip, lr
 800b2c2:	d815      	bhi.n	800b2f0 <rshift+0x7c>
 800b2c4:	1a9a      	subs	r2, r3, r2
 800b2c6:	3501      	adds	r5, #1
 800b2c8:	0092      	lsls	r2, r2, #2
 800b2ca:	3a04      	subs	r2, #4
 800b2cc:	42ae      	cmp	r6, r5
 800b2ce:	bf38      	it	cc
 800b2d0:	2200      	movcc	r2, #0
 800b2d2:	18a3      	adds	r3, r4, r2
 800b2d4:	50a7      	str	r7, [r4, r2]
 800b2d6:	b107      	cbz	r7, 800b2da <rshift+0x66>
 800b2d8:	3304      	adds	r3, #4
 800b2da:	1b1a      	subs	r2, r3, r4
 800b2dc:	42a3      	cmp	r3, r4
 800b2de:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b2e2:	bf08      	it	eq
 800b2e4:	2300      	moveq	r3, #0
 800b2e6:	6102      	str	r2, [r0, #16]
 800b2e8:	bf08      	it	eq
 800b2ea:	6143      	streq	r3, [r0, #20]
 800b2ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2f0:	f8dc c000 	ldr.w	ip, [ip]
 800b2f4:	fa0c fc08 	lsl.w	ip, ip, r8
 800b2f8:	ea4c 0707 	orr.w	r7, ip, r7
 800b2fc:	f849 7b04 	str.w	r7, [r9], #4
 800b300:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b304:	40cf      	lsrs	r7, r1
 800b306:	e7da      	b.n	800b2be <rshift+0x4a>
 800b308:	f851 cb04 	ldr.w	ip, [r1], #4
 800b30c:	f847 cf04 	str.w	ip, [r7, #4]!
 800b310:	e7c3      	b.n	800b29a <rshift+0x26>
 800b312:	4623      	mov	r3, r4
 800b314:	e7e1      	b.n	800b2da <rshift+0x66>

0800b316 <__hexdig_fun>:
 800b316:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b31a:	2b09      	cmp	r3, #9
 800b31c:	d802      	bhi.n	800b324 <__hexdig_fun+0xe>
 800b31e:	3820      	subs	r0, #32
 800b320:	b2c0      	uxtb	r0, r0
 800b322:	4770      	bx	lr
 800b324:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b328:	2b05      	cmp	r3, #5
 800b32a:	d801      	bhi.n	800b330 <__hexdig_fun+0x1a>
 800b32c:	3847      	subs	r0, #71	@ 0x47
 800b32e:	e7f7      	b.n	800b320 <__hexdig_fun+0xa>
 800b330:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b334:	2b05      	cmp	r3, #5
 800b336:	d801      	bhi.n	800b33c <__hexdig_fun+0x26>
 800b338:	3827      	subs	r0, #39	@ 0x27
 800b33a:	e7f1      	b.n	800b320 <__hexdig_fun+0xa>
 800b33c:	2000      	movs	r0, #0
 800b33e:	4770      	bx	lr

0800b340 <__gethex>:
 800b340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b344:	b085      	sub	sp, #20
 800b346:	468a      	mov	sl, r1
 800b348:	4690      	mov	r8, r2
 800b34a:	9302      	str	r3, [sp, #8]
 800b34c:	680b      	ldr	r3, [r1, #0]
 800b34e:	9001      	str	r0, [sp, #4]
 800b350:	1c9c      	adds	r4, r3, #2
 800b352:	46a1      	mov	r9, r4
 800b354:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b358:	2830      	cmp	r0, #48	@ 0x30
 800b35a:	d0fa      	beq.n	800b352 <__gethex+0x12>
 800b35c:	eba9 0303 	sub.w	r3, r9, r3
 800b360:	f1a3 0b02 	sub.w	fp, r3, #2
 800b364:	f7ff ffd7 	bl	800b316 <__hexdig_fun>
 800b368:	4605      	mov	r5, r0
 800b36a:	2800      	cmp	r0, #0
 800b36c:	d166      	bne.n	800b43c <__gethex+0xfc>
 800b36e:	2201      	movs	r2, #1
 800b370:	499e      	ldr	r1, [pc, #632]	@ (800b5ec <__gethex+0x2ac>)
 800b372:	4648      	mov	r0, r9
 800b374:	f7ff ff14 	bl	800b1a0 <strncmp>
 800b378:	4607      	mov	r7, r0
 800b37a:	2800      	cmp	r0, #0
 800b37c:	d165      	bne.n	800b44a <__gethex+0x10a>
 800b37e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b382:	4626      	mov	r6, r4
 800b384:	f7ff ffc7 	bl	800b316 <__hexdig_fun>
 800b388:	2800      	cmp	r0, #0
 800b38a:	d060      	beq.n	800b44e <__gethex+0x10e>
 800b38c:	4623      	mov	r3, r4
 800b38e:	7818      	ldrb	r0, [r3, #0]
 800b390:	4699      	mov	r9, r3
 800b392:	3301      	adds	r3, #1
 800b394:	2830      	cmp	r0, #48	@ 0x30
 800b396:	d0fa      	beq.n	800b38e <__gethex+0x4e>
 800b398:	f7ff ffbd 	bl	800b316 <__hexdig_fun>
 800b39c:	fab0 f580 	clz	r5, r0
 800b3a0:	f04f 0b01 	mov.w	fp, #1
 800b3a4:	096d      	lsrs	r5, r5, #5
 800b3a6:	464a      	mov	r2, r9
 800b3a8:	4616      	mov	r6, r2
 800b3aa:	3201      	adds	r2, #1
 800b3ac:	7830      	ldrb	r0, [r6, #0]
 800b3ae:	f7ff ffb2 	bl	800b316 <__hexdig_fun>
 800b3b2:	2800      	cmp	r0, #0
 800b3b4:	d1f8      	bne.n	800b3a8 <__gethex+0x68>
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	498c      	ldr	r1, [pc, #560]	@ (800b5ec <__gethex+0x2ac>)
 800b3ba:	4630      	mov	r0, r6
 800b3bc:	f7ff fef0 	bl	800b1a0 <strncmp>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	d13e      	bne.n	800b442 <__gethex+0x102>
 800b3c4:	b944      	cbnz	r4, 800b3d8 <__gethex+0x98>
 800b3c6:	1c74      	adds	r4, r6, #1
 800b3c8:	4622      	mov	r2, r4
 800b3ca:	4616      	mov	r6, r2
 800b3cc:	3201      	adds	r2, #1
 800b3ce:	7830      	ldrb	r0, [r6, #0]
 800b3d0:	f7ff ffa1 	bl	800b316 <__hexdig_fun>
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	d1f8      	bne.n	800b3ca <__gethex+0x8a>
 800b3d8:	1ba4      	subs	r4, r4, r6
 800b3da:	00a7      	lsls	r7, r4, #2
 800b3dc:	7833      	ldrb	r3, [r6, #0]
 800b3de:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b3e2:	2b50      	cmp	r3, #80	@ 0x50
 800b3e4:	d13d      	bne.n	800b462 <__gethex+0x122>
 800b3e6:	7873      	ldrb	r3, [r6, #1]
 800b3e8:	2b2b      	cmp	r3, #43	@ 0x2b
 800b3ea:	d032      	beq.n	800b452 <__gethex+0x112>
 800b3ec:	2b2d      	cmp	r3, #45	@ 0x2d
 800b3ee:	d033      	beq.n	800b458 <__gethex+0x118>
 800b3f0:	1c71      	adds	r1, r6, #1
 800b3f2:	2400      	movs	r4, #0
 800b3f4:	7808      	ldrb	r0, [r1, #0]
 800b3f6:	f7ff ff8e 	bl	800b316 <__hexdig_fun>
 800b3fa:	1e43      	subs	r3, r0, #1
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	2b18      	cmp	r3, #24
 800b400:	d82f      	bhi.n	800b462 <__gethex+0x122>
 800b402:	f1a0 0210 	sub.w	r2, r0, #16
 800b406:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b40a:	f7ff ff84 	bl	800b316 <__hexdig_fun>
 800b40e:	f100 3cff 	add.w	ip, r0, #4294967295
 800b412:	230a      	movs	r3, #10
 800b414:	fa5f fc8c 	uxtb.w	ip, ip
 800b418:	f1bc 0f18 	cmp.w	ip, #24
 800b41c:	d91e      	bls.n	800b45c <__gethex+0x11c>
 800b41e:	b104      	cbz	r4, 800b422 <__gethex+0xe2>
 800b420:	4252      	negs	r2, r2
 800b422:	4417      	add	r7, r2
 800b424:	f8ca 1000 	str.w	r1, [sl]
 800b428:	b1ed      	cbz	r5, 800b466 <__gethex+0x126>
 800b42a:	f1bb 0f00 	cmp.w	fp, #0
 800b42e:	bf0c      	ite	eq
 800b430:	2506      	moveq	r5, #6
 800b432:	2500      	movne	r5, #0
 800b434:	4628      	mov	r0, r5
 800b436:	b005      	add	sp, #20
 800b438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b43c:	2500      	movs	r5, #0
 800b43e:	462c      	mov	r4, r5
 800b440:	e7b1      	b.n	800b3a6 <__gethex+0x66>
 800b442:	2c00      	cmp	r4, #0
 800b444:	d1c8      	bne.n	800b3d8 <__gethex+0x98>
 800b446:	4627      	mov	r7, r4
 800b448:	e7c8      	b.n	800b3dc <__gethex+0x9c>
 800b44a:	464e      	mov	r6, r9
 800b44c:	462f      	mov	r7, r5
 800b44e:	2501      	movs	r5, #1
 800b450:	e7c4      	b.n	800b3dc <__gethex+0x9c>
 800b452:	2400      	movs	r4, #0
 800b454:	1cb1      	adds	r1, r6, #2
 800b456:	e7cd      	b.n	800b3f4 <__gethex+0xb4>
 800b458:	2401      	movs	r4, #1
 800b45a:	e7fb      	b.n	800b454 <__gethex+0x114>
 800b45c:	fb03 0002 	mla	r0, r3, r2, r0
 800b460:	e7cf      	b.n	800b402 <__gethex+0xc2>
 800b462:	4631      	mov	r1, r6
 800b464:	e7de      	b.n	800b424 <__gethex+0xe4>
 800b466:	eba6 0309 	sub.w	r3, r6, r9
 800b46a:	4629      	mov	r1, r5
 800b46c:	3b01      	subs	r3, #1
 800b46e:	2b07      	cmp	r3, #7
 800b470:	dc0a      	bgt.n	800b488 <__gethex+0x148>
 800b472:	9801      	ldr	r0, [sp, #4]
 800b474:	f7fe f934 	bl	80096e0 <_Balloc>
 800b478:	4604      	mov	r4, r0
 800b47a:	b940      	cbnz	r0, 800b48e <__gethex+0x14e>
 800b47c:	4b5c      	ldr	r3, [pc, #368]	@ (800b5f0 <__gethex+0x2b0>)
 800b47e:	4602      	mov	r2, r0
 800b480:	21e4      	movs	r1, #228	@ 0xe4
 800b482:	485c      	ldr	r0, [pc, #368]	@ (800b5f4 <__gethex+0x2b4>)
 800b484:	f7ff fec4 	bl	800b210 <__assert_func>
 800b488:	3101      	adds	r1, #1
 800b48a:	105b      	asrs	r3, r3, #1
 800b48c:	e7ef      	b.n	800b46e <__gethex+0x12e>
 800b48e:	f100 0a14 	add.w	sl, r0, #20
 800b492:	2300      	movs	r3, #0
 800b494:	4655      	mov	r5, sl
 800b496:	469b      	mov	fp, r3
 800b498:	45b1      	cmp	r9, r6
 800b49a:	d337      	bcc.n	800b50c <__gethex+0x1cc>
 800b49c:	f845 bb04 	str.w	fp, [r5], #4
 800b4a0:	eba5 050a 	sub.w	r5, r5, sl
 800b4a4:	4658      	mov	r0, fp
 800b4a6:	10ad      	asrs	r5, r5, #2
 800b4a8:	6125      	str	r5, [r4, #16]
 800b4aa:	016d      	lsls	r5, r5, #5
 800b4ac:	f7fe fa0c 	bl	80098c8 <__hi0bits>
 800b4b0:	f8d8 6000 	ldr.w	r6, [r8]
 800b4b4:	1a2d      	subs	r5, r5, r0
 800b4b6:	42b5      	cmp	r5, r6
 800b4b8:	dd54      	ble.n	800b564 <__gethex+0x224>
 800b4ba:	1bad      	subs	r5, r5, r6
 800b4bc:	4620      	mov	r0, r4
 800b4be:	4629      	mov	r1, r5
 800b4c0:	f7fe fda9 	bl	800a016 <__any_on>
 800b4c4:	4681      	mov	r9, r0
 800b4c6:	b178      	cbz	r0, 800b4e8 <__gethex+0x1a8>
 800b4c8:	1e6b      	subs	r3, r5, #1
 800b4ca:	f04f 0901 	mov.w	r9, #1
 800b4ce:	1159      	asrs	r1, r3, #5
 800b4d0:	f003 021f 	and.w	r2, r3, #31
 800b4d4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b4d8:	fa09 f202 	lsl.w	r2, r9, r2
 800b4dc:	420a      	tst	r2, r1
 800b4de:	d003      	beq.n	800b4e8 <__gethex+0x1a8>
 800b4e0:	454b      	cmp	r3, r9
 800b4e2:	dc36      	bgt.n	800b552 <__gethex+0x212>
 800b4e4:	f04f 0902 	mov.w	r9, #2
 800b4e8:	442f      	add	r7, r5
 800b4ea:	4629      	mov	r1, r5
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	f7ff fec1 	bl	800b274 <rshift>
 800b4f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b4f6:	42bb      	cmp	r3, r7
 800b4f8:	da42      	bge.n	800b580 <__gethex+0x240>
 800b4fa:	4621      	mov	r1, r4
 800b4fc:	9801      	ldr	r0, [sp, #4]
 800b4fe:	f7fe f92f 	bl	8009760 <_Bfree>
 800b502:	2300      	movs	r3, #0
 800b504:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b506:	25a3      	movs	r5, #163	@ 0xa3
 800b508:	6013      	str	r3, [r2, #0]
 800b50a:	e793      	b.n	800b434 <__gethex+0xf4>
 800b50c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b510:	2a2e      	cmp	r2, #46	@ 0x2e
 800b512:	d012      	beq.n	800b53a <__gethex+0x1fa>
 800b514:	2b20      	cmp	r3, #32
 800b516:	d104      	bne.n	800b522 <__gethex+0x1e2>
 800b518:	f845 bb04 	str.w	fp, [r5], #4
 800b51c:	f04f 0b00 	mov.w	fp, #0
 800b520:	465b      	mov	r3, fp
 800b522:	7830      	ldrb	r0, [r6, #0]
 800b524:	9303      	str	r3, [sp, #12]
 800b526:	f7ff fef6 	bl	800b316 <__hexdig_fun>
 800b52a:	9b03      	ldr	r3, [sp, #12]
 800b52c:	f000 000f 	and.w	r0, r0, #15
 800b530:	4098      	lsls	r0, r3
 800b532:	3304      	adds	r3, #4
 800b534:	ea4b 0b00 	orr.w	fp, fp, r0
 800b538:	e7ae      	b.n	800b498 <__gethex+0x158>
 800b53a:	45b1      	cmp	r9, r6
 800b53c:	d8ea      	bhi.n	800b514 <__gethex+0x1d4>
 800b53e:	2201      	movs	r2, #1
 800b540:	492a      	ldr	r1, [pc, #168]	@ (800b5ec <__gethex+0x2ac>)
 800b542:	4630      	mov	r0, r6
 800b544:	9303      	str	r3, [sp, #12]
 800b546:	f7ff fe2b 	bl	800b1a0 <strncmp>
 800b54a:	9b03      	ldr	r3, [sp, #12]
 800b54c:	2800      	cmp	r0, #0
 800b54e:	d1e1      	bne.n	800b514 <__gethex+0x1d4>
 800b550:	e7a2      	b.n	800b498 <__gethex+0x158>
 800b552:	1ea9      	subs	r1, r5, #2
 800b554:	4620      	mov	r0, r4
 800b556:	f7fe fd5e 	bl	800a016 <__any_on>
 800b55a:	2800      	cmp	r0, #0
 800b55c:	d0c2      	beq.n	800b4e4 <__gethex+0x1a4>
 800b55e:	f04f 0903 	mov.w	r9, #3
 800b562:	e7c1      	b.n	800b4e8 <__gethex+0x1a8>
 800b564:	da09      	bge.n	800b57a <__gethex+0x23a>
 800b566:	1b75      	subs	r5, r6, r5
 800b568:	4621      	mov	r1, r4
 800b56a:	9801      	ldr	r0, [sp, #4]
 800b56c:	462a      	mov	r2, r5
 800b56e:	1b7f      	subs	r7, r7, r5
 800b570:	f7fe fb10 	bl	8009b94 <__lshift>
 800b574:	4604      	mov	r4, r0
 800b576:	f100 0a14 	add.w	sl, r0, #20
 800b57a:	f04f 0900 	mov.w	r9, #0
 800b57e:	e7b8      	b.n	800b4f2 <__gethex+0x1b2>
 800b580:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b584:	42bd      	cmp	r5, r7
 800b586:	dd6f      	ble.n	800b668 <__gethex+0x328>
 800b588:	1bed      	subs	r5, r5, r7
 800b58a:	42ae      	cmp	r6, r5
 800b58c:	dc34      	bgt.n	800b5f8 <__gethex+0x2b8>
 800b58e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b592:	2b02      	cmp	r3, #2
 800b594:	d022      	beq.n	800b5dc <__gethex+0x29c>
 800b596:	2b03      	cmp	r3, #3
 800b598:	d024      	beq.n	800b5e4 <__gethex+0x2a4>
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d115      	bne.n	800b5ca <__gethex+0x28a>
 800b59e:	42ae      	cmp	r6, r5
 800b5a0:	d113      	bne.n	800b5ca <__gethex+0x28a>
 800b5a2:	2e01      	cmp	r6, #1
 800b5a4:	d10b      	bne.n	800b5be <__gethex+0x27e>
 800b5a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b5aa:	2562      	movs	r5, #98	@ 0x62
 800b5ac:	9a02      	ldr	r2, [sp, #8]
 800b5ae:	6013      	str	r3, [r2, #0]
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	6123      	str	r3, [r4, #16]
 800b5b4:	f8ca 3000 	str.w	r3, [sl]
 800b5b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5ba:	601c      	str	r4, [r3, #0]
 800b5bc:	e73a      	b.n	800b434 <__gethex+0xf4>
 800b5be:	1e71      	subs	r1, r6, #1
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	f7fe fd28 	bl	800a016 <__any_on>
 800b5c6:	2800      	cmp	r0, #0
 800b5c8:	d1ed      	bne.n	800b5a6 <__gethex+0x266>
 800b5ca:	4621      	mov	r1, r4
 800b5cc:	9801      	ldr	r0, [sp, #4]
 800b5ce:	f7fe f8c7 	bl	8009760 <_Bfree>
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5d6:	2550      	movs	r5, #80	@ 0x50
 800b5d8:	6013      	str	r3, [r2, #0]
 800b5da:	e72b      	b.n	800b434 <__gethex+0xf4>
 800b5dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d1f3      	bne.n	800b5ca <__gethex+0x28a>
 800b5e2:	e7e0      	b.n	800b5a6 <__gethex+0x266>
 800b5e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d1dd      	bne.n	800b5a6 <__gethex+0x266>
 800b5ea:	e7ee      	b.n	800b5ca <__gethex+0x28a>
 800b5ec:	0800c170 	.word	0x0800c170
 800b5f0:	0800c005 	.word	0x0800c005
 800b5f4:	0800c31e 	.word	0x0800c31e
 800b5f8:	1e6f      	subs	r7, r5, #1
 800b5fa:	f1b9 0f00 	cmp.w	r9, #0
 800b5fe:	d130      	bne.n	800b662 <__gethex+0x322>
 800b600:	b127      	cbz	r7, 800b60c <__gethex+0x2cc>
 800b602:	4639      	mov	r1, r7
 800b604:	4620      	mov	r0, r4
 800b606:	f7fe fd06 	bl	800a016 <__any_on>
 800b60a:	4681      	mov	r9, r0
 800b60c:	117a      	asrs	r2, r7, #5
 800b60e:	2301      	movs	r3, #1
 800b610:	f007 071f 	and.w	r7, r7, #31
 800b614:	4629      	mov	r1, r5
 800b616:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b61a:	4620      	mov	r0, r4
 800b61c:	40bb      	lsls	r3, r7
 800b61e:	1b76      	subs	r6, r6, r5
 800b620:	2502      	movs	r5, #2
 800b622:	4213      	tst	r3, r2
 800b624:	bf18      	it	ne
 800b626:	f049 0902 	orrne.w	r9, r9, #2
 800b62a:	f7ff fe23 	bl	800b274 <rshift>
 800b62e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b632:	f1b9 0f00 	cmp.w	r9, #0
 800b636:	d047      	beq.n	800b6c8 <__gethex+0x388>
 800b638:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	d015      	beq.n	800b66c <__gethex+0x32c>
 800b640:	2b03      	cmp	r3, #3
 800b642:	d017      	beq.n	800b674 <__gethex+0x334>
 800b644:	2b01      	cmp	r3, #1
 800b646:	d109      	bne.n	800b65c <__gethex+0x31c>
 800b648:	f019 0f02 	tst.w	r9, #2
 800b64c:	d006      	beq.n	800b65c <__gethex+0x31c>
 800b64e:	f8da 3000 	ldr.w	r3, [sl]
 800b652:	ea49 0903 	orr.w	r9, r9, r3
 800b656:	f019 0f01 	tst.w	r9, #1
 800b65a:	d10e      	bne.n	800b67a <__gethex+0x33a>
 800b65c:	f045 0510 	orr.w	r5, r5, #16
 800b660:	e032      	b.n	800b6c8 <__gethex+0x388>
 800b662:	f04f 0901 	mov.w	r9, #1
 800b666:	e7d1      	b.n	800b60c <__gethex+0x2cc>
 800b668:	2501      	movs	r5, #1
 800b66a:	e7e2      	b.n	800b632 <__gethex+0x2f2>
 800b66c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b66e:	f1c3 0301 	rsb	r3, r3, #1
 800b672:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b676:	2b00      	cmp	r3, #0
 800b678:	d0f0      	beq.n	800b65c <__gethex+0x31c>
 800b67a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b67e:	f104 0314 	add.w	r3, r4, #20
 800b682:	f04f 0c00 	mov.w	ip, #0
 800b686:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b68a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b68e:	4618      	mov	r0, r3
 800b690:	f853 2b04 	ldr.w	r2, [r3], #4
 800b694:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b698:	d01b      	beq.n	800b6d2 <__gethex+0x392>
 800b69a:	3201      	adds	r2, #1
 800b69c:	6002      	str	r2, [r0, #0]
 800b69e:	2d02      	cmp	r5, #2
 800b6a0:	f104 0314 	add.w	r3, r4, #20
 800b6a4:	d13c      	bne.n	800b720 <__gethex+0x3e0>
 800b6a6:	f8d8 2000 	ldr.w	r2, [r8]
 800b6aa:	3a01      	subs	r2, #1
 800b6ac:	42b2      	cmp	r2, r6
 800b6ae:	d109      	bne.n	800b6c4 <__gethex+0x384>
 800b6b0:	1171      	asrs	r1, r6, #5
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	f006 061f 	and.w	r6, r6, #31
 800b6b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b6bc:	fa02 f606 	lsl.w	r6, r2, r6
 800b6c0:	421e      	tst	r6, r3
 800b6c2:	d13a      	bne.n	800b73a <__gethex+0x3fa>
 800b6c4:	f045 0520 	orr.w	r5, r5, #32
 800b6c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6ca:	601c      	str	r4, [r3, #0]
 800b6cc:	9b02      	ldr	r3, [sp, #8]
 800b6ce:	601f      	str	r7, [r3, #0]
 800b6d0:	e6b0      	b.n	800b434 <__gethex+0xf4>
 800b6d2:	4299      	cmp	r1, r3
 800b6d4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b6d8:	d8d9      	bhi.n	800b68e <__gethex+0x34e>
 800b6da:	68a3      	ldr	r3, [r4, #8]
 800b6dc:	459b      	cmp	fp, r3
 800b6de:	db17      	blt.n	800b710 <__gethex+0x3d0>
 800b6e0:	6861      	ldr	r1, [r4, #4]
 800b6e2:	9801      	ldr	r0, [sp, #4]
 800b6e4:	3101      	adds	r1, #1
 800b6e6:	f7fd fffb 	bl	80096e0 <_Balloc>
 800b6ea:	4681      	mov	r9, r0
 800b6ec:	b918      	cbnz	r0, 800b6f6 <__gethex+0x3b6>
 800b6ee:	4b1a      	ldr	r3, [pc, #104]	@ (800b758 <__gethex+0x418>)
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	2184      	movs	r1, #132	@ 0x84
 800b6f4:	e6c5      	b.n	800b482 <__gethex+0x142>
 800b6f6:	6922      	ldr	r2, [r4, #16]
 800b6f8:	f104 010c 	add.w	r1, r4, #12
 800b6fc:	300c      	adds	r0, #12
 800b6fe:	3202      	adds	r2, #2
 800b700:	0092      	lsls	r2, r2, #2
 800b702:	f7ff fd6f 	bl	800b1e4 <memcpy>
 800b706:	4621      	mov	r1, r4
 800b708:	464c      	mov	r4, r9
 800b70a:	9801      	ldr	r0, [sp, #4]
 800b70c:	f7fe f828 	bl	8009760 <_Bfree>
 800b710:	6923      	ldr	r3, [r4, #16]
 800b712:	1c5a      	adds	r2, r3, #1
 800b714:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b718:	6122      	str	r2, [r4, #16]
 800b71a:	2201      	movs	r2, #1
 800b71c:	615a      	str	r2, [r3, #20]
 800b71e:	e7be      	b.n	800b69e <__gethex+0x35e>
 800b720:	6922      	ldr	r2, [r4, #16]
 800b722:	455a      	cmp	r2, fp
 800b724:	dd0b      	ble.n	800b73e <__gethex+0x3fe>
 800b726:	2101      	movs	r1, #1
 800b728:	4620      	mov	r0, r4
 800b72a:	f7ff fda3 	bl	800b274 <rshift>
 800b72e:	3701      	adds	r7, #1
 800b730:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b734:	42bb      	cmp	r3, r7
 800b736:	f6ff aee0 	blt.w	800b4fa <__gethex+0x1ba>
 800b73a:	2501      	movs	r5, #1
 800b73c:	e7c2      	b.n	800b6c4 <__gethex+0x384>
 800b73e:	f016 061f 	ands.w	r6, r6, #31
 800b742:	d0fa      	beq.n	800b73a <__gethex+0x3fa>
 800b744:	4453      	add	r3, sl
 800b746:	f1c6 0620 	rsb	r6, r6, #32
 800b74a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b74e:	f7fe f8bb 	bl	80098c8 <__hi0bits>
 800b752:	42b0      	cmp	r0, r6
 800b754:	dbe7      	blt.n	800b726 <__gethex+0x3e6>
 800b756:	e7f0      	b.n	800b73a <__gethex+0x3fa>
 800b758:	0800c005 	.word	0x0800c005

0800b75c <L_shift>:
 800b75c:	f1c2 0208 	rsb	r2, r2, #8
 800b760:	0092      	lsls	r2, r2, #2
 800b762:	b570      	push	{r4, r5, r6, lr}
 800b764:	f1c2 0620 	rsb	r6, r2, #32
 800b768:	6843      	ldr	r3, [r0, #4]
 800b76a:	6804      	ldr	r4, [r0, #0]
 800b76c:	fa03 f506 	lsl.w	r5, r3, r6
 800b770:	40d3      	lsrs	r3, r2
 800b772:	432c      	orrs	r4, r5
 800b774:	6004      	str	r4, [r0, #0]
 800b776:	f840 3f04 	str.w	r3, [r0, #4]!
 800b77a:	4288      	cmp	r0, r1
 800b77c:	d3f4      	bcc.n	800b768 <L_shift+0xc>
 800b77e:	bd70      	pop	{r4, r5, r6, pc}

0800b780 <__match>:
 800b780:	6803      	ldr	r3, [r0, #0]
 800b782:	3301      	adds	r3, #1
 800b784:	b530      	push	{r4, r5, lr}
 800b786:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b78a:	b914      	cbnz	r4, 800b792 <__match+0x12>
 800b78c:	6003      	str	r3, [r0, #0]
 800b78e:	2001      	movs	r0, #1
 800b790:	bd30      	pop	{r4, r5, pc}
 800b792:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b796:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b79a:	2d19      	cmp	r5, #25
 800b79c:	bf98      	it	ls
 800b79e:	3220      	addls	r2, #32
 800b7a0:	42a2      	cmp	r2, r4
 800b7a2:	d0f0      	beq.n	800b786 <__match+0x6>
 800b7a4:	2000      	movs	r0, #0
 800b7a6:	e7f3      	b.n	800b790 <__match+0x10>

0800b7a8 <__hexnan>:
 800b7a8:	680b      	ldr	r3, [r1, #0]
 800b7aa:	6801      	ldr	r1, [r0, #0]
 800b7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b0:	115e      	asrs	r6, r3, #5
 800b7b2:	f013 031f 	ands.w	r3, r3, #31
 800b7b6:	f04f 0500 	mov.w	r5, #0
 800b7ba:	b087      	sub	sp, #28
 800b7bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b7c0:	4682      	mov	sl, r0
 800b7c2:	4690      	mov	r8, r2
 800b7c4:	46ab      	mov	fp, r5
 800b7c6:	bf18      	it	ne
 800b7c8:	3604      	addne	r6, #4
 800b7ca:	9301      	str	r3, [sp, #4]
 800b7cc:	9502      	str	r5, [sp, #8]
 800b7ce:	1f37      	subs	r7, r6, #4
 800b7d0:	f846 5c04 	str.w	r5, [r6, #-4]
 800b7d4:	46b9      	mov	r9, r7
 800b7d6:	463c      	mov	r4, r7
 800b7d8:	1c4b      	adds	r3, r1, #1
 800b7da:	784a      	ldrb	r2, [r1, #1]
 800b7dc:	9303      	str	r3, [sp, #12]
 800b7de:	b342      	cbz	r2, 800b832 <__hexnan+0x8a>
 800b7e0:	4610      	mov	r0, r2
 800b7e2:	9105      	str	r1, [sp, #20]
 800b7e4:	9204      	str	r2, [sp, #16]
 800b7e6:	f7ff fd96 	bl	800b316 <__hexdig_fun>
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	d151      	bne.n	800b892 <__hexnan+0xea>
 800b7ee:	9a04      	ldr	r2, [sp, #16]
 800b7f0:	9905      	ldr	r1, [sp, #20]
 800b7f2:	2a20      	cmp	r2, #32
 800b7f4:	d818      	bhi.n	800b828 <__hexnan+0x80>
 800b7f6:	9b02      	ldr	r3, [sp, #8]
 800b7f8:	459b      	cmp	fp, r3
 800b7fa:	dd13      	ble.n	800b824 <__hexnan+0x7c>
 800b7fc:	454c      	cmp	r4, r9
 800b7fe:	d206      	bcs.n	800b80e <__hexnan+0x66>
 800b800:	2d07      	cmp	r5, #7
 800b802:	dc04      	bgt.n	800b80e <__hexnan+0x66>
 800b804:	462a      	mov	r2, r5
 800b806:	4649      	mov	r1, r9
 800b808:	4620      	mov	r0, r4
 800b80a:	f7ff ffa7 	bl	800b75c <L_shift>
 800b80e:	4544      	cmp	r4, r8
 800b810:	d951      	bls.n	800b8b6 <__hexnan+0x10e>
 800b812:	2300      	movs	r3, #0
 800b814:	f1a4 0904 	sub.w	r9, r4, #4
 800b818:	f8cd b008 	str.w	fp, [sp, #8]
 800b81c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b820:	461d      	mov	r5, r3
 800b822:	464c      	mov	r4, r9
 800b824:	9903      	ldr	r1, [sp, #12]
 800b826:	e7d7      	b.n	800b7d8 <__hexnan+0x30>
 800b828:	2a29      	cmp	r2, #41	@ 0x29
 800b82a:	d156      	bne.n	800b8da <__hexnan+0x132>
 800b82c:	3102      	adds	r1, #2
 800b82e:	f8ca 1000 	str.w	r1, [sl]
 800b832:	f1bb 0f00 	cmp.w	fp, #0
 800b836:	d050      	beq.n	800b8da <__hexnan+0x132>
 800b838:	454c      	cmp	r4, r9
 800b83a:	d206      	bcs.n	800b84a <__hexnan+0xa2>
 800b83c:	2d07      	cmp	r5, #7
 800b83e:	dc04      	bgt.n	800b84a <__hexnan+0xa2>
 800b840:	462a      	mov	r2, r5
 800b842:	4649      	mov	r1, r9
 800b844:	4620      	mov	r0, r4
 800b846:	f7ff ff89 	bl	800b75c <L_shift>
 800b84a:	4544      	cmp	r4, r8
 800b84c:	d935      	bls.n	800b8ba <__hexnan+0x112>
 800b84e:	f1a8 0204 	sub.w	r2, r8, #4
 800b852:	4623      	mov	r3, r4
 800b854:	f853 1b04 	ldr.w	r1, [r3], #4
 800b858:	429f      	cmp	r7, r3
 800b85a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b85e:	d2f9      	bcs.n	800b854 <__hexnan+0xac>
 800b860:	1b3b      	subs	r3, r7, r4
 800b862:	3e03      	subs	r6, #3
 800b864:	3401      	adds	r4, #1
 800b866:	2200      	movs	r2, #0
 800b868:	f023 0303 	bic.w	r3, r3, #3
 800b86c:	3304      	adds	r3, #4
 800b86e:	42b4      	cmp	r4, r6
 800b870:	bf88      	it	hi
 800b872:	2304      	movhi	r3, #4
 800b874:	4443      	add	r3, r8
 800b876:	f843 2b04 	str.w	r2, [r3], #4
 800b87a:	429f      	cmp	r7, r3
 800b87c:	d2fb      	bcs.n	800b876 <__hexnan+0xce>
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	b91b      	cbnz	r3, 800b88a <__hexnan+0xe2>
 800b882:	4547      	cmp	r7, r8
 800b884:	d127      	bne.n	800b8d6 <__hexnan+0x12e>
 800b886:	2301      	movs	r3, #1
 800b888:	603b      	str	r3, [r7, #0]
 800b88a:	2005      	movs	r0, #5
 800b88c:	b007      	add	sp, #28
 800b88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b892:	3501      	adds	r5, #1
 800b894:	f10b 0b01 	add.w	fp, fp, #1
 800b898:	2d08      	cmp	r5, #8
 800b89a:	dd05      	ble.n	800b8a8 <__hexnan+0x100>
 800b89c:	4544      	cmp	r4, r8
 800b89e:	d9c1      	bls.n	800b824 <__hexnan+0x7c>
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	3c04      	subs	r4, #4
 800b8a4:	2501      	movs	r5, #1
 800b8a6:	6023      	str	r3, [r4, #0]
 800b8a8:	6822      	ldr	r2, [r4, #0]
 800b8aa:	f000 000f 	and.w	r0, r0, #15
 800b8ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b8b2:	6020      	str	r0, [r4, #0]
 800b8b4:	e7b6      	b.n	800b824 <__hexnan+0x7c>
 800b8b6:	2508      	movs	r5, #8
 800b8b8:	e7b4      	b.n	800b824 <__hexnan+0x7c>
 800b8ba:	9b01      	ldr	r3, [sp, #4]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d0de      	beq.n	800b87e <__hexnan+0xd6>
 800b8c0:	f1c3 0320 	rsb	r3, r3, #32
 800b8c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b8c8:	40da      	lsrs	r2, r3
 800b8ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b8ce:	4013      	ands	r3, r2
 800b8d0:	f846 3c04 	str.w	r3, [r6, #-4]
 800b8d4:	e7d3      	b.n	800b87e <__hexnan+0xd6>
 800b8d6:	3f04      	subs	r7, #4
 800b8d8:	e7d1      	b.n	800b87e <__hexnan+0xd6>
 800b8da:	2004      	movs	r0, #4
 800b8dc:	e7d6      	b.n	800b88c <__hexnan+0xe4>

0800b8de <__ascii_mbtowc>:
 800b8de:	b082      	sub	sp, #8
 800b8e0:	b901      	cbnz	r1, 800b8e4 <__ascii_mbtowc+0x6>
 800b8e2:	a901      	add	r1, sp, #4
 800b8e4:	b142      	cbz	r2, 800b8f8 <__ascii_mbtowc+0x1a>
 800b8e6:	b14b      	cbz	r3, 800b8fc <__ascii_mbtowc+0x1e>
 800b8e8:	7813      	ldrb	r3, [r2, #0]
 800b8ea:	600b      	str	r3, [r1, #0]
 800b8ec:	7812      	ldrb	r2, [r2, #0]
 800b8ee:	1e10      	subs	r0, r2, #0
 800b8f0:	bf18      	it	ne
 800b8f2:	2001      	movne	r0, #1
 800b8f4:	b002      	add	sp, #8
 800b8f6:	4770      	bx	lr
 800b8f8:	4610      	mov	r0, r2
 800b8fa:	e7fb      	b.n	800b8f4 <__ascii_mbtowc+0x16>
 800b8fc:	f06f 0001 	mvn.w	r0, #1
 800b900:	e7f8      	b.n	800b8f4 <__ascii_mbtowc+0x16>

0800b902 <_realloc_r>:
 800b902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b906:	4680      	mov	r8, r0
 800b908:	4615      	mov	r5, r2
 800b90a:	460c      	mov	r4, r1
 800b90c:	b921      	cbnz	r1, 800b918 <_realloc_r+0x16>
 800b90e:	4611      	mov	r1, r2
 800b910:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b914:	f7fd be58 	b.w	80095c8 <_malloc_r>
 800b918:	b92a      	cbnz	r2, 800b926 <_realloc_r+0x24>
 800b91a:	f7fd fde1 	bl	80094e0 <_free_r>
 800b91e:	2400      	movs	r4, #0
 800b920:	4620      	mov	r0, r4
 800b922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b926:	f000 f840 	bl	800b9aa <_malloc_usable_size_r>
 800b92a:	4285      	cmp	r5, r0
 800b92c:	4606      	mov	r6, r0
 800b92e:	d802      	bhi.n	800b936 <_realloc_r+0x34>
 800b930:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b934:	d8f4      	bhi.n	800b920 <_realloc_r+0x1e>
 800b936:	4629      	mov	r1, r5
 800b938:	4640      	mov	r0, r8
 800b93a:	f7fd fe45 	bl	80095c8 <_malloc_r>
 800b93e:	4607      	mov	r7, r0
 800b940:	2800      	cmp	r0, #0
 800b942:	d0ec      	beq.n	800b91e <_realloc_r+0x1c>
 800b944:	42b5      	cmp	r5, r6
 800b946:	462a      	mov	r2, r5
 800b948:	4621      	mov	r1, r4
 800b94a:	bf28      	it	cs
 800b94c:	4632      	movcs	r2, r6
 800b94e:	f7ff fc49 	bl	800b1e4 <memcpy>
 800b952:	4621      	mov	r1, r4
 800b954:	4640      	mov	r0, r8
 800b956:	463c      	mov	r4, r7
 800b958:	f7fd fdc2 	bl	80094e0 <_free_r>
 800b95c:	e7e0      	b.n	800b920 <_realloc_r+0x1e>

0800b95e <__ascii_wctomb>:
 800b95e:	4603      	mov	r3, r0
 800b960:	4608      	mov	r0, r1
 800b962:	b141      	cbz	r1, 800b976 <__ascii_wctomb+0x18>
 800b964:	2aff      	cmp	r2, #255	@ 0xff
 800b966:	d904      	bls.n	800b972 <__ascii_wctomb+0x14>
 800b968:	228a      	movs	r2, #138	@ 0x8a
 800b96a:	f04f 30ff 	mov.w	r0, #4294967295
 800b96e:	601a      	str	r2, [r3, #0]
 800b970:	4770      	bx	lr
 800b972:	2001      	movs	r0, #1
 800b974:	700a      	strb	r2, [r1, #0]
 800b976:	4770      	bx	lr

0800b978 <fiprintf>:
 800b978:	b40e      	push	{r1, r2, r3}
 800b97a:	b503      	push	{r0, r1, lr}
 800b97c:	ab03      	add	r3, sp, #12
 800b97e:	4601      	mov	r1, r0
 800b980:	4805      	ldr	r0, [pc, #20]	@ (800b998 <fiprintf+0x20>)
 800b982:	f853 2b04 	ldr.w	r2, [r3], #4
 800b986:	6800      	ldr	r0, [r0, #0]
 800b988:	9301      	str	r3, [sp, #4]
 800b98a:	f000 f83f 	bl	800ba0c <_vfiprintf_r>
 800b98e:	b002      	add	sp, #8
 800b990:	f85d eb04 	ldr.w	lr, [sp], #4
 800b994:	b003      	add	sp, #12
 800b996:	4770      	bx	lr
 800b998:	20000030 	.word	0x20000030

0800b99c <abort>:
 800b99c:	2006      	movs	r0, #6
 800b99e:	b508      	push	{r3, lr}
 800b9a0:	f000 fa08 	bl	800bdb4 <raise>
 800b9a4:	2001      	movs	r0, #1
 800b9a6:	f7f6 f92e 	bl	8001c06 <_exit>

0800b9aa <_malloc_usable_size_r>:
 800b9aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9ae:	1f18      	subs	r0, r3, #4
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	bfbc      	itt	lt
 800b9b4:	580b      	ldrlt	r3, [r1, r0]
 800b9b6:	18c0      	addlt	r0, r0, r3
 800b9b8:	4770      	bx	lr

0800b9ba <__sfputc_r>:
 800b9ba:	6893      	ldr	r3, [r2, #8]
 800b9bc:	3b01      	subs	r3, #1
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	6093      	str	r3, [r2, #8]
 800b9c2:	b410      	push	{r4}
 800b9c4:	da08      	bge.n	800b9d8 <__sfputc_r+0x1e>
 800b9c6:	6994      	ldr	r4, [r2, #24]
 800b9c8:	42a3      	cmp	r3, r4
 800b9ca:	db01      	blt.n	800b9d0 <__sfputc_r+0x16>
 800b9cc:	290a      	cmp	r1, #10
 800b9ce:	d103      	bne.n	800b9d8 <__sfputc_r+0x1e>
 800b9d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9d4:	f000 b932 	b.w	800bc3c <__swbuf_r>
 800b9d8:	6813      	ldr	r3, [r2, #0]
 800b9da:	1c58      	adds	r0, r3, #1
 800b9dc:	6010      	str	r0, [r2, #0]
 800b9de:	4608      	mov	r0, r1
 800b9e0:	7019      	strb	r1, [r3, #0]
 800b9e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <__sfputs_r>:
 800b9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ea:	4606      	mov	r6, r0
 800b9ec:	460f      	mov	r7, r1
 800b9ee:	4614      	mov	r4, r2
 800b9f0:	18d5      	adds	r5, r2, r3
 800b9f2:	42ac      	cmp	r4, r5
 800b9f4:	d101      	bne.n	800b9fa <__sfputs_r+0x12>
 800b9f6:	2000      	movs	r0, #0
 800b9f8:	e007      	b.n	800ba0a <__sfputs_r+0x22>
 800b9fa:	463a      	mov	r2, r7
 800b9fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba00:	4630      	mov	r0, r6
 800ba02:	f7ff ffda 	bl	800b9ba <__sfputc_r>
 800ba06:	1c43      	adds	r3, r0, #1
 800ba08:	d1f3      	bne.n	800b9f2 <__sfputs_r+0xa>
 800ba0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ba0c <_vfiprintf_r>:
 800ba0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba10:	460d      	mov	r5, r1
 800ba12:	b09d      	sub	sp, #116	@ 0x74
 800ba14:	4614      	mov	r4, r2
 800ba16:	4698      	mov	r8, r3
 800ba18:	4606      	mov	r6, r0
 800ba1a:	b118      	cbz	r0, 800ba24 <_vfiprintf_r+0x18>
 800ba1c:	6a03      	ldr	r3, [r0, #32]
 800ba1e:	b90b      	cbnz	r3, 800ba24 <_vfiprintf_r+0x18>
 800ba20:	f7fc fdde 	bl	80085e0 <__sinit>
 800ba24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba26:	07d9      	lsls	r1, r3, #31
 800ba28:	d405      	bmi.n	800ba36 <_vfiprintf_r+0x2a>
 800ba2a:	89ab      	ldrh	r3, [r5, #12]
 800ba2c:	059a      	lsls	r2, r3, #22
 800ba2e:	d402      	bmi.n	800ba36 <_vfiprintf_r+0x2a>
 800ba30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba32:	f7fc feec 	bl	800880e <__retarget_lock_acquire_recursive>
 800ba36:	89ab      	ldrh	r3, [r5, #12]
 800ba38:	071b      	lsls	r3, r3, #28
 800ba3a:	d501      	bpl.n	800ba40 <_vfiprintf_r+0x34>
 800ba3c:	692b      	ldr	r3, [r5, #16]
 800ba3e:	b99b      	cbnz	r3, 800ba68 <_vfiprintf_r+0x5c>
 800ba40:	4629      	mov	r1, r5
 800ba42:	4630      	mov	r0, r6
 800ba44:	f000 f938 	bl	800bcb8 <__swsetup_r>
 800ba48:	b170      	cbz	r0, 800ba68 <_vfiprintf_r+0x5c>
 800ba4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba4c:	07dc      	lsls	r4, r3, #31
 800ba4e:	d504      	bpl.n	800ba5a <_vfiprintf_r+0x4e>
 800ba50:	f04f 30ff 	mov.w	r0, #4294967295
 800ba54:	b01d      	add	sp, #116	@ 0x74
 800ba56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba5a:	89ab      	ldrh	r3, [r5, #12]
 800ba5c:	0598      	lsls	r0, r3, #22
 800ba5e:	d4f7      	bmi.n	800ba50 <_vfiprintf_r+0x44>
 800ba60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba62:	f7fc fed5 	bl	8008810 <__retarget_lock_release_recursive>
 800ba66:	e7f3      	b.n	800ba50 <_vfiprintf_r+0x44>
 800ba68:	2300      	movs	r3, #0
 800ba6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba6e:	f04f 0901 	mov.w	r9, #1
 800ba72:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800bc28 <_vfiprintf_r+0x21c>
 800ba76:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba78:	2320      	movs	r3, #32
 800ba7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ba7e:	2330      	movs	r3, #48	@ 0x30
 800ba80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ba84:	4623      	mov	r3, r4
 800ba86:	469a      	mov	sl, r3
 800ba88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba8c:	b10a      	cbz	r2, 800ba92 <_vfiprintf_r+0x86>
 800ba8e:	2a25      	cmp	r2, #37	@ 0x25
 800ba90:	d1f9      	bne.n	800ba86 <_vfiprintf_r+0x7a>
 800ba92:	ebba 0b04 	subs.w	fp, sl, r4
 800ba96:	d00b      	beq.n	800bab0 <_vfiprintf_r+0xa4>
 800ba98:	465b      	mov	r3, fp
 800ba9a:	4622      	mov	r2, r4
 800ba9c:	4629      	mov	r1, r5
 800ba9e:	4630      	mov	r0, r6
 800baa0:	f7ff ffa2 	bl	800b9e8 <__sfputs_r>
 800baa4:	3001      	adds	r0, #1
 800baa6:	f000 80a7 	beq.w	800bbf8 <_vfiprintf_r+0x1ec>
 800baaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800baac:	445a      	add	r2, fp
 800baae:	9209      	str	r2, [sp, #36]	@ 0x24
 800bab0:	f89a 3000 	ldrb.w	r3, [sl]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	f000 809f 	beq.w	800bbf8 <_vfiprintf_r+0x1ec>
 800baba:	2300      	movs	r3, #0
 800babc:	f04f 32ff 	mov.w	r2, #4294967295
 800bac0:	f10a 0a01 	add.w	sl, sl, #1
 800bac4:	9304      	str	r3, [sp, #16]
 800bac6:	9307      	str	r3, [sp, #28]
 800bac8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bacc:	931a      	str	r3, [sp, #104]	@ 0x68
 800bace:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bad2:	4654      	mov	r4, sl
 800bad4:	2205      	movs	r2, #5
 800bad6:	4854      	ldr	r0, [pc, #336]	@ (800bc28 <_vfiprintf_r+0x21c>)
 800bad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800badc:	f7fc fe99 	bl	8008812 <memchr>
 800bae0:	9a04      	ldr	r2, [sp, #16]
 800bae2:	b9d8      	cbnz	r0, 800bb1c <_vfiprintf_r+0x110>
 800bae4:	06d1      	lsls	r1, r2, #27
 800bae6:	bf44      	itt	mi
 800bae8:	2320      	movmi	r3, #32
 800baea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800baee:	0713      	lsls	r3, r2, #28
 800baf0:	bf44      	itt	mi
 800baf2:	232b      	movmi	r3, #43	@ 0x2b
 800baf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800baf8:	f89a 3000 	ldrb.w	r3, [sl]
 800bafc:	2b2a      	cmp	r3, #42	@ 0x2a
 800bafe:	d015      	beq.n	800bb2c <_vfiprintf_r+0x120>
 800bb00:	9a07      	ldr	r2, [sp, #28]
 800bb02:	4654      	mov	r4, sl
 800bb04:	2000      	movs	r0, #0
 800bb06:	f04f 0c0a 	mov.w	ip, #10
 800bb0a:	4621      	mov	r1, r4
 800bb0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb10:	3b30      	subs	r3, #48	@ 0x30
 800bb12:	2b09      	cmp	r3, #9
 800bb14:	d94b      	bls.n	800bbae <_vfiprintf_r+0x1a2>
 800bb16:	b1b0      	cbz	r0, 800bb46 <_vfiprintf_r+0x13a>
 800bb18:	9207      	str	r2, [sp, #28]
 800bb1a:	e014      	b.n	800bb46 <_vfiprintf_r+0x13a>
 800bb1c:	eba0 0308 	sub.w	r3, r0, r8
 800bb20:	46a2      	mov	sl, r4
 800bb22:	fa09 f303 	lsl.w	r3, r9, r3
 800bb26:	4313      	orrs	r3, r2
 800bb28:	9304      	str	r3, [sp, #16]
 800bb2a:	e7d2      	b.n	800bad2 <_vfiprintf_r+0xc6>
 800bb2c:	9b03      	ldr	r3, [sp, #12]
 800bb2e:	1d19      	adds	r1, r3, #4
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	9103      	str	r1, [sp, #12]
 800bb36:	bfbb      	ittet	lt
 800bb38:	425b      	neglt	r3, r3
 800bb3a:	f042 0202 	orrlt.w	r2, r2, #2
 800bb3e:	9307      	strge	r3, [sp, #28]
 800bb40:	9307      	strlt	r3, [sp, #28]
 800bb42:	bfb8      	it	lt
 800bb44:	9204      	strlt	r2, [sp, #16]
 800bb46:	7823      	ldrb	r3, [r4, #0]
 800bb48:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb4a:	d10a      	bne.n	800bb62 <_vfiprintf_r+0x156>
 800bb4c:	7863      	ldrb	r3, [r4, #1]
 800bb4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb50:	d132      	bne.n	800bbb8 <_vfiprintf_r+0x1ac>
 800bb52:	9b03      	ldr	r3, [sp, #12]
 800bb54:	3402      	adds	r4, #2
 800bb56:	1d1a      	adds	r2, r3, #4
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb5e:	9203      	str	r2, [sp, #12]
 800bb60:	9305      	str	r3, [sp, #20]
 800bb62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bc38 <_vfiprintf_r+0x22c>
 800bb66:	2203      	movs	r2, #3
 800bb68:	7821      	ldrb	r1, [r4, #0]
 800bb6a:	4650      	mov	r0, sl
 800bb6c:	f7fc fe51 	bl	8008812 <memchr>
 800bb70:	b138      	cbz	r0, 800bb82 <_vfiprintf_r+0x176>
 800bb72:	eba0 000a 	sub.w	r0, r0, sl
 800bb76:	2240      	movs	r2, #64	@ 0x40
 800bb78:	9b04      	ldr	r3, [sp, #16]
 800bb7a:	3401      	adds	r4, #1
 800bb7c:	4082      	lsls	r2, r0
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	9304      	str	r3, [sp, #16]
 800bb82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb86:	2206      	movs	r2, #6
 800bb88:	4828      	ldr	r0, [pc, #160]	@ (800bc2c <_vfiprintf_r+0x220>)
 800bb8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb8e:	f7fc fe40 	bl	8008812 <memchr>
 800bb92:	2800      	cmp	r0, #0
 800bb94:	d03f      	beq.n	800bc16 <_vfiprintf_r+0x20a>
 800bb96:	4b26      	ldr	r3, [pc, #152]	@ (800bc30 <_vfiprintf_r+0x224>)
 800bb98:	bb1b      	cbnz	r3, 800bbe2 <_vfiprintf_r+0x1d6>
 800bb9a:	9b03      	ldr	r3, [sp, #12]
 800bb9c:	3307      	adds	r3, #7
 800bb9e:	f023 0307 	bic.w	r3, r3, #7
 800bba2:	3308      	adds	r3, #8
 800bba4:	9303      	str	r3, [sp, #12]
 800bba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bba8:	443b      	add	r3, r7
 800bbaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbac:	e76a      	b.n	800ba84 <_vfiprintf_r+0x78>
 800bbae:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbb2:	460c      	mov	r4, r1
 800bbb4:	2001      	movs	r0, #1
 800bbb6:	e7a8      	b.n	800bb0a <_vfiprintf_r+0xfe>
 800bbb8:	2300      	movs	r3, #0
 800bbba:	3401      	adds	r4, #1
 800bbbc:	f04f 0c0a 	mov.w	ip, #10
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	9305      	str	r3, [sp, #20]
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbca:	3a30      	subs	r2, #48	@ 0x30
 800bbcc:	2a09      	cmp	r2, #9
 800bbce:	d903      	bls.n	800bbd8 <_vfiprintf_r+0x1cc>
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d0c6      	beq.n	800bb62 <_vfiprintf_r+0x156>
 800bbd4:	9105      	str	r1, [sp, #20]
 800bbd6:	e7c4      	b.n	800bb62 <_vfiprintf_r+0x156>
 800bbd8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbdc:	4604      	mov	r4, r0
 800bbde:	2301      	movs	r3, #1
 800bbe0:	e7f0      	b.n	800bbc4 <_vfiprintf_r+0x1b8>
 800bbe2:	ab03      	add	r3, sp, #12
 800bbe4:	462a      	mov	r2, r5
 800bbe6:	a904      	add	r1, sp, #16
 800bbe8:	4630      	mov	r0, r6
 800bbea:	9300      	str	r3, [sp, #0]
 800bbec:	4b11      	ldr	r3, [pc, #68]	@ (800bc34 <_vfiprintf_r+0x228>)
 800bbee:	f7fb fe9d 	bl	800792c <_printf_float>
 800bbf2:	4607      	mov	r7, r0
 800bbf4:	1c78      	adds	r0, r7, #1
 800bbf6:	d1d6      	bne.n	800bba6 <_vfiprintf_r+0x19a>
 800bbf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbfa:	07d9      	lsls	r1, r3, #31
 800bbfc:	d405      	bmi.n	800bc0a <_vfiprintf_r+0x1fe>
 800bbfe:	89ab      	ldrh	r3, [r5, #12]
 800bc00:	059a      	lsls	r2, r3, #22
 800bc02:	d402      	bmi.n	800bc0a <_vfiprintf_r+0x1fe>
 800bc04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc06:	f7fc fe03 	bl	8008810 <__retarget_lock_release_recursive>
 800bc0a:	89ab      	ldrh	r3, [r5, #12]
 800bc0c:	065b      	lsls	r3, r3, #25
 800bc0e:	f53f af1f 	bmi.w	800ba50 <_vfiprintf_r+0x44>
 800bc12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc14:	e71e      	b.n	800ba54 <_vfiprintf_r+0x48>
 800bc16:	ab03      	add	r3, sp, #12
 800bc18:	462a      	mov	r2, r5
 800bc1a:	a904      	add	r1, sp, #16
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	9300      	str	r3, [sp, #0]
 800bc20:	4b04      	ldr	r3, [pc, #16]	@ (800bc34 <_vfiprintf_r+0x228>)
 800bc22:	f7fc f91f 	bl	8007e64 <_printf_i>
 800bc26:	e7e4      	b.n	800bbf2 <_vfiprintf_r+0x1e6>
 800bc28:	0800c2c9 	.word	0x0800c2c9
 800bc2c:	0800c2d3 	.word	0x0800c2d3
 800bc30:	0800792d 	.word	0x0800792d
 800bc34:	0800b9e9 	.word	0x0800b9e9
 800bc38:	0800c2cf 	.word	0x0800c2cf

0800bc3c <__swbuf_r>:
 800bc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc3e:	460e      	mov	r6, r1
 800bc40:	4614      	mov	r4, r2
 800bc42:	4605      	mov	r5, r0
 800bc44:	b118      	cbz	r0, 800bc4e <__swbuf_r+0x12>
 800bc46:	6a03      	ldr	r3, [r0, #32]
 800bc48:	b90b      	cbnz	r3, 800bc4e <__swbuf_r+0x12>
 800bc4a:	f7fc fcc9 	bl	80085e0 <__sinit>
 800bc4e:	69a3      	ldr	r3, [r4, #24]
 800bc50:	60a3      	str	r3, [r4, #8]
 800bc52:	89a3      	ldrh	r3, [r4, #12]
 800bc54:	071a      	lsls	r2, r3, #28
 800bc56:	d501      	bpl.n	800bc5c <__swbuf_r+0x20>
 800bc58:	6923      	ldr	r3, [r4, #16]
 800bc5a:	b943      	cbnz	r3, 800bc6e <__swbuf_r+0x32>
 800bc5c:	4621      	mov	r1, r4
 800bc5e:	4628      	mov	r0, r5
 800bc60:	f000 f82a 	bl	800bcb8 <__swsetup_r>
 800bc64:	b118      	cbz	r0, 800bc6e <__swbuf_r+0x32>
 800bc66:	f04f 37ff 	mov.w	r7, #4294967295
 800bc6a:	4638      	mov	r0, r7
 800bc6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc6e:	6823      	ldr	r3, [r4, #0]
 800bc70:	b2f6      	uxtb	r6, r6
 800bc72:	6922      	ldr	r2, [r4, #16]
 800bc74:	4637      	mov	r7, r6
 800bc76:	1a98      	subs	r0, r3, r2
 800bc78:	6963      	ldr	r3, [r4, #20]
 800bc7a:	4283      	cmp	r3, r0
 800bc7c:	dc05      	bgt.n	800bc8a <__swbuf_r+0x4e>
 800bc7e:	4621      	mov	r1, r4
 800bc80:	4628      	mov	r0, r5
 800bc82:	f7ff fa4b 	bl	800b11c <_fflush_r>
 800bc86:	2800      	cmp	r0, #0
 800bc88:	d1ed      	bne.n	800bc66 <__swbuf_r+0x2a>
 800bc8a:	68a3      	ldr	r3, [r4, #8]
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	60a3      	str	r3, [r4, #8]
 800bc90:	6823      	ldr	r3, [r4, #0]
 800bc92:	1c5a      	adds	r2, r3, #1
 800bc94:	6022      	str	r2, [r4, #0]
 800bc96:	701e      	strb	r6, [r3, #0]
 800bc98:	1c43      	adds	r3, r0, #1
 800bc9a:	6962      	ldr	r2, [r4, #20]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d004      	beq.n	800bcaa <__swbuf_r+0x6e>
 800bca0:	89a3      	ldrh	r3, [r4, #12]
 800bca2:	07db      	lsls	r3, r3, #31
 800bca4:	d5e1      	bpl.n	800bc6a <__swbuf_r+0x2e>
 800bca6:	2e0a      	cmp	r6, #10
 800bca8:	d1df      	bne.n	800bc6a <__swbuf_r+0x2e>
 800bcaa:	4621      	mov	r1, r4
 800bcac:	4628      	mov	r0, r5
 800bcae:	f7ff fa35 	bl	800b11c <_fflush_r>
 800bcb2:	2800      	cmp	r0, #0
 800bcb4:	d0d9      	beq.n	800bc6a <__swbuf_r+0x2e>
 800bcb6:	e7d6      	b.n	800bc66 <__swbuf_r+0x2a>

0800bcb8 <__swsetup_r>:
 800bcb8:	b538      	push	{r3, r4, r5, lr}
 800bcba:	4b29      	ldr	r3, [pc, #164]	@ (800bd60 <__swsetup_r+0xa8>)
 800bcbc:	4605      	mov	r5, r0
 800bcbe:	460c      	mov	r4, r1
 800bcc0:	6818      	ldr	r0, [r3, #0]
 800bcc2:	b118      	cbz	r0, 800bccc <__swsetup_r+0x14>
 800bcc4:	6a03      	ldr	r3, [r0, #32]
 800bcc6:	b90b      	cbnz	r3, 800bccc <__swsetup_r+0x14>
 800bcc8:	f7fc fc8a 	bl	80085e0 <__sinit>
 800bccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcd0:	0719      	lsls	r1, r3, #28
 800bcd2:	d422      	bmi.n	800bd1a <__swsetup_r+0x62>
 800bcd4:	06da      	lsls	r2, r3, #27
 800bcd6:	d407      	bmi.n	800bce8 <__swsetup_r+0x30>
 800bcd8:	2209      	movs	r2, #9
 800bcda:	602a      	str	r2, [r5, #0]
 800bcdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bce0:	f04f 30ff 	mov.w	r0, #4294967295
 800bce4:	81a3      	strh	r3, [r4, #12]
 800bce6:	e033      	b.n	800bd50 <__swsetup_r+0x98>
 800bce8:	0758      	lsls	r0, r3, #29
 800bcea:	d512      	bpl.n	800bd12 <__swsetup_r+0x5a>
 800bcec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bcee:	b141      	cbz	r1, 800bd02 <__swsetup_r+0x4a>
 800bcf0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bcf4:	4299      	cmp	r1, r3
 800bcf6:	d002      	beq.n	800bcfe <__swsetup_r+0x46>
 800bcf8:	4628      	mov	r0, r5
 800bcfa:	f7fd fbf1 	bl	80094e0 <_free_r>
 800bcfe:	2300      	movs	r3, #0
 800bd00:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd02:	89a3      	ldrh	r3, [r4, #12]
 800bd04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bd08:	81a3      	strh	r3, [r4, #12]
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	6063      	str	r3, [r4, #4]
 800bd0e:	6923      	ldr	r3, [r4, #16]
 800bd10:	6023      	str	r3, [r4, #0]
 800bd12:	89a3      	ldrh	r3, [r4, #12]
 800bd14:	f043 0308 	orr.w	r3, r3, #8
 800bd18:	81a3      	strh	r3, [r4, #12]
 800bd1a:	6923      	ldr	r3, [r4, #16]
 800bd1c:	b94b      	cbnz	r3, 800bd32 <__swsetup_r+0x7a>
 800bd1e:	89a3      	ldrh	r3, [r4, #12]
 800bd20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bd24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd28:	d003      	beq.n	800bd32 <__swsetup_r+0x7a>
 800bd2a:	4621      	mov	r1, r4
 800bd2c:	4628      	mov	r0, r5
 800bd2e:	f000 f882 	bl	800be36 <__smakebuf_r>
 800bd32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd36:	f013 0201 	ands.w	r2, r3, #1
 800bd3a:	d00a      	beq.n	800bd52 <__swsetup_r+0x9a>
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	60a2      	str	r2, [r4, #8]
 800bd40:	6962      	ldr	r2, [r4, #20]
 800bd42:	4252      	negs	r2, r2
 800bd44:	61a2      	str	r2, [r4, #24]
 800bd46:	6922      	ldr	r2, [r4, #16]
 800bd48:	b942      	cbnz	r2, 800bd5c <__swsetup_r+0xa4>
 800bd4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bd4e:	d1c5      	bne.n	800bcdc <__swsetup_r+0x24>
 800bd50:	bd38      	pop	{r3, r4, r5, pc}
 800bd52:	0799      	lsls	r1, r3, #30
 800bd54:	bf58      	it	pl
 800bd56:	6962      	ldrpl	r2, [r4, #20]
 800bd58:	60a2      	str	r2, [r4, #8]
 800bd5a:	e7f4      	b.n	800bd46 <__swsetup_r+0x8e>
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	e7f7      	b.n	800bd50 <__swsetup_r+0x98>
 800bd60:	20000030 	.word	0x20000030

0800bd64 <_raise_r>:
 800bd64:	291f      	cmp	r1, #31
 800bd66:	b538      	push	{r3, r4, r5, lr}
 800bd68:	4605      	mov	r5, r0
 800bd6a:	460c      	mov	r4, r1
 800bd6c:	d904      	bls.n	800bd78 <_raise_r+0x14>
 800bd6e:	2316      	movs	r3, #22
 800bd70:	6003      	str	r3, [r0, #0]
 800bd72:	f04f 30ff 	mov.w	r0, #4294967295
 800bd76:	bd38      	pop	{r3, r4, r5, pc}
 800bd78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bd7a:	b112      	cbz	r2, 800bd82 <_raise_r+0x1e>
 800bd7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd80:	b94b      	cbnz	r3, 800bd96 <_raise_r+0x32>
 800bd82:	4628      	mov	r0, r5
 800bd84:	f000 f830 	bl	800bde8 <_getpid_r>
 800bd88:	4622      	mov	r2, r4
 800bd8a:	4601      	mov	r1, r0
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd92:	f000 b817 	b.w	800bdc4 <_kill_r>
 800bd96:	2b01      	cmp	r3, #1
 800bd98:	d00a      	beq.n	800bdb0 <_raise_r+0x4c>
 800bd9a:	1c59      	adds	r1, r3, #1
 800bd9c:	d103      	bne.n	800bda6 <_raise_r+0x42>
 800bd9e:	2316      	movs	r3, #22
 800bda0:	6003      	str	r3, [r0, #0]
 800bda2:	2001      	movs	r0, #1
 800bda4:	e7e7      	b.n	800bd76 <_raise_r+0x12>
 800bda6:	2100      	movs	r1, #0
 800bda8:	4620      	mov	r0, r4
 800bdaa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bdae:	4798      	blx	r3
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	e7e0      	b.n	800bd76 <_raise_r+0x12>

0800bdb4 <raise>:
 800bdb4:	4b02      	ldr	r3, [pc, #8]	@ (800bdc0 <raise+0xc>)
 800bdb6:	4601      	mov	r1, r0
 800bdb8:	6818      	ldr	r0, [r3, #0]
 800bdba:	f7ff bfd3 	b.w	800bd64 <_raise_r>
 800bdbe:	bf00      	nop
 800bdc0:	20000030 	.word	0x20000030

0800bdc4 <_kill_r>:
 800bdc4:	b538      	push	{r3, r4, r5, lr}
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	4d06      	ldr	r5, [pc, #24]	@ (800bde4 <_kill_r+0x20>)
 800bdca:	4604      	mov	r4, r0
 800bdcc:	4608      	mov	r0, r1
 800bdce:	4611      	mov	r1, r2
 800bdd0:	602b      	str	r3, [r5, #0]
 800bdd2:	f7f5 ff08 	bl	8001be6 <_kill>
 800bdd6:	1c43      	adds	r3, r0, #1
 800bdd8:	d102      	bne.n	800bde0 <_kill_r+0x1c>
 800bdda:	682b      	ldr	r3, [r5, #0]
 800bddc:	b103      	cbz	r3, 800bde0 <_kill_r+0x1c>
 800bdde:	6023      	str	r3, [r4, #0]
 800bde0:	bd38      	pop	{r3, r4, r5, pc}
 800bde2:	bf00      	nop
 800bde4:	20000660 	.word	0x20000660

0800bde8 <_getpid_r>:
 800bde8:	f7f5 bef5 	b.w	8001bd6 <_getpid>

0800bdec <__swhatbuf_r>:
 800bdec:	b570      	push	{r4, r5, r6, lr}
 800bdee:	460c      	mov	r4, r1
 800bdf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdf4:	b096      	sub	sp, #88	@ 0x58
 800bdf6:	4615      	mov	r5, r2
 800bdf8:	2900      	cmp	r1, #0
 800bdfa:	461e      	mov	r6, r3
 800bdfc:	da0c      	bge.n	800be18 <__swhatbuf_r+0x2c>
 800bdfe:	89a3      	ldrh	r3, [r4, #12]
 800be00:	2100      	movs	r1, #0
 800be02:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800be06:	bf14      	ite	ne
 800be08:	2340      	movne	r3, #64	@ 0x40
 800be0a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800be0e:	2000      	movs	r0, #0
 800be10:	6031      	str	r1, [r6, #0]
 800be12:	602b      	str	r3, [r5, #0]
 800be14:	b016      	add	sp, #88	@ 0x58
 800be16:	bd70      	pop	{r4, r5, r6, pc}
 800be18:	466a      	mov	r2, sp
 800be1a:	f000 f849 	bl	800beb0 <_fstat_r>
 800be1e:	2800      	cmp	r0, #0
 800be20:	dbed      	blt.n	800bdfe <__swhatbuf_r+0x12>
 800be22:	9901      	ldr	r1, [sp, #4]
 800be24:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be28:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be2c:	4259      	negs	r1, r3
 800be2e:	4159      	adcs	r1, r3
 800be30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be34:	e7eb      	b.n	800be0e <__swhatbuf_r+0x22>

0800be36 <__smakebuf_r>:
 800be36:	898b      	ldrh	r3, [r1, #12]
 800be38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be3a:	079d      	lsls	r5, r3, #30
 800be3c:	4606      	mov	r6, r0
 800be3e:	460c      	mov	r4, r1
 800be40:	d507      	bpl.n	800be52 <__smakebuf_r+0x1c>
 800be42:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be46:	6023      	str	r3, [r4, #0]
 800be48:	6123      	str	r3, [r4, #16]
 800be4a:	2301      	movs	r3, #1
 800be4c:	6163      	str	r3, [r4, #20]
 800be4e:	b003      	add	sp, #12
 800be50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be52:	ab01      	add	r3, sp, #4
 800be54:	466a      	mov	r2, sp
 800be56:	f7ff ffc9 	bl	800bdec <__swhatbuf_r>
 800be5a:	9f00      	ldr	r7, [sp, #0]
 800be5c:	4605      	mov	r5, r0
 800be5e:	4630      	mov	r0, r6
 800be60:	4639      	mov	r1, r7
 800be62:	f7fd fbb1 	bl	80095c8 <_malloc_r>
 800be66:	b948      	cbnz	r0, 800be7c <__smakebuf_r+0x46>
 800be68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be6c:	059a      	lsls	r2, r3, #22
 800be6e:	d4ee      	bmi.n	800be4e <__smakebuf_r+0x18>
 800be70:	f023 0303 	bic.w	r3, r3, #3
 800be74:	f043 0302 	orr.w	r3, r3, #2
 800be78:	81a3      	strh	r3, [r4, #12]
 800be7a:	e7e2      	b.n	800be42 <__smakebuf_r+0xc>
 800be7c:	89a3      	ldrh	r3, [r4, #12]
 800be7e:	6020      	str	r0, [r4, #0]
 800be80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be84:	81a3      	strh	r3, [r4, #12]
 800be86:	9b01      	ldr	r3, [sp, #4]
 800be88:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800be8c:	b15b      	cbz	r3, 800bea6 <__smakebuf_r+0x70>
 800be8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be92:	4630      	mov	r0, r6
 800be94:	f000 f81e 	bl	800bed4 <_isatty_r>
 800be98:	b128      	cbz	r0, 800bea6 <__smakebuf_r+0x70>
 800be9a:	89a3      	ldrh	r3, [r4, #12]
 800be9c:	f023 0303 	bic.w	r3, r3, #3
 800bea0:	f043 0301 	orr.w	r3, r3, #1
 800bea4:	81a3      	strh	r3, [r4, #12]
 800bea6:	89a3      	ldrh	r3, [r4, #12]
 800bea8:	431d      	orrs	r5, r3
 800beaa:	81a5      	strh	r5, [r4, #12]
 800beac:	e7cf      	b.n	800be4e <__smakebuf_r+0x18>
	...

0800beb0 <_fstat_r>:
 800beb0:	b538      	push	{r3, r4, r5, lr}
 800beb2:	2300      	movs	r3, #0
 800beb4:	4d06      	ldr	r5, [pc, #24]	@ (800bed0 <_fstat_r+0x20>)
 800beb6:	4604      	mov	r4, r0
 800beb8:	4608      	mov	r0, r1
 800beba:	4611      	mov	r1, r2
 800bebc:	602b      	str	r3, [r5, #0]
 800bebe:	f7f5 fef2 	bl	8001ca6 <_fstat>
 800bec2:	1c43      	adds	r3, r0, #1
 800bec4:	d102      	bne.n	800becc <_fstat_r+0x1c>
 800bec6:	682b      	ldr	r3, [r5, #0]
 800bec8:	b103      	cbz	r3, 800becc <_fstat_r+0x1c>
 800beca:	6023      	str	r3, [r4, #0]
 800becc:	bd38      	pop	{r3, r4, r5, pc}
 800bece:	bf00      	nop
 800bed0:	20000660 	.word	0x20000660

0800bed4 <_isatty_r>:
 800bed4:	b538      	push	{r3, r4, r5, lr}
 800bed6:	2300      	movs	r3, #0
 800bed8:	4d05      	ldr	r5, [pc, #20]	@ (800bef0 <_isatty_r+0x1c>)
 800beda:	4604      	mov	r4, r0
 800bedc:	4608      	mov	r0, r1
 800bede:	602b      	str	r3, [r5, #0]
 800bee0:	f7f5 fef1 	bl	8001cc6 <_isatty>
 800bee4:	1c43      	adds	r3, r0, #1
 800bee6:	d102      	bne.n	800beee <_isatty_r+0x1a>
 800bee8:	682b      	ldr	r3, [r5, #0]
 800beea:	b103      	cbz	r3, 800beee <_isatty_r+0x1a>
 800beec:	6023      	str	r3, [r4, #0]
 800beee:	bd38      	pop	{r3, r4, r5, pc}
 800bef0:	20000660 	.word	0x20000660

0800bef4 <_init>:
 800bef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bef6:	bf00      	nop
 800bef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800befa:	bc08      	pop	{r3}
 800befc:	469e      	mov	lr, r3
 800befe:	4770      	bx	lr

0800bf00 <_fini>:
 800bf00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf02:	bf00      	nop
 800bf04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf06:	bc08      	pop	{r3}
 800bf08:	469e      	mov	lr, r3
 800bf0a:	4770      	bx	lr
