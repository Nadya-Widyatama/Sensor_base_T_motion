
STM32H503CBT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc34  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800be90  0800be90  0000ce90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c318  0800c318  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c318  0800c318  0000d318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c320  0800c320  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c320  0800c320  0000d320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c324  0800c324  0000d324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800c328  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  200001d4  0800c4fc  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000658  0800c4fc  0000e658  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d07  00000000  00000000  0000e20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002608  00000000  00000000  00022f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  00025520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c9d  00000000  00000000  00026570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003895  00000000  00000000  0002720d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c19  00000000  00000000  0002aaa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3cd5  00000000  00000000  000406bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00124390  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b0c  00000000  00000000  001243d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00129ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	200001d4 	.word	0x200001d4
 8000274:	00000000 	.word	0x00000000
 8000278:	0800be74 	.word	0x0800be74

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	200001d8 	.word	0x200001d8
 8000294:	0800be74 	.word	0x0800be74

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_drsub>:
 80002a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	e002      	b.n	80002b4 <__adddf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_dsub>:
 80002b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b4 <__adddf3>:
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002be:	ea94 0f05 	teq	r4, r5
 80002c2:	bf08      	it	eq
 80002c4:	ea90 0f02 	teqeq	r0, r2
 80002c8:	bf1f      	itttt	ne
 80002ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002da:	f000 80e2 	beq.w	80004a2 <__adddf3+0x1ee>
 80002de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e6:	bfb8      	it	lt
 80002e8:	426d      	neglt	r5, r5
 80002ea:	dd0c      	ble.n	8000306 <__adddf3+0x52>
 80002ec:	442c      	add	r4, r5
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	ea82 0000 	eor.w	r0, r2, r0
 80002fa:	ea83 0101 	eor.w	r1, r3, r1
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	2d36      	cmp	r5, #54	@ 0x36
 8000308:	bf88      	it	hi
 800030a:	bd30      	pophi	{r4, r5, pc}
 800030c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000310:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000314:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x70>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800032c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x84>
 8000332:	4252      	negs	r2, r2
 8000334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000338:	ea94 0f05 	teq	r4, r5
 800033c:	f000 80a7 	beq.w	800048e <__adddf3+0x1da>
 8000340:	f1a4 0401 	sub.w	r4, r4, #1
 8000344:	f1d5 0e20 	rsbs	lr, r5, #32
 8000348:	db0d      	blt.n	8000366 <__adddf3+0xb2>
 800034a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034e:	fa22 f205 	lsr.w	r2, r2, r5
 8000352:	1880      	adds	r0, r0, r2
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	fa03 f20e 	lsl.w	r2, r3, lr
 800035c:	1880      	adds	r0, r0, r2
 800035e:	fa43 f305 	asr.w	r3, r3, r5
 8000362:	4159      	adcs	r1, r3
 8000364:	e00e      	b.n	8000384 <__adddf3+0xd0>
 8000366:	f1a5 0520 	sub.w	r5, r5, #32
 800036a:	f10e 0e20 	add.w	lr, lr, #32
 800036e:	2a01      	cmp	r2, #1
 8000370:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000374:	bf28      	it	cs
 8000376:	f04c 0c02 	orrcs.w	ip, ip, #2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	18c0      	adds	r0, r0, r3
 8000380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000384:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000388:	d507      	bpl.n	800039a <__adddf3+0xe6>
 800038a:	f04f 0e00 	mov.w	lr, #0
 800038e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000392:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000396:	eb6e 0101 	sbc.w	r1, lr, r1
 800039a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039e:	d31b      	bcc.n	80003d8 <__adddf3+0x124>
 80003a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a4:	d30c      	bcc.n	80003c0 <__adddf3+0x10c>
 80003a6:	0849      	lsrs	r1, r1, #1
 80003a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b0:	f104 0401 	add.w	r4, r4, #1
 80003b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003bc:	f080 809a 	bcs.w	80004f4 <__adddf3+0x240>
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c4:	bf08      	it	eq
 80003c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ca:	f150 0000 	adcs.w	r0, r0, #0
 80003ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003d2:	ea41 0105 	orr.w	r1, r1, r5
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003dc:	4140      	adcs	r0, r0
 80003de:	eb41 0101 	adc.w	r1, r1, r1
 80003e2:	3c01      	subs	r4, #1
 80003e4:	bf28      	it	cs
 80003e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ea:	d2e9      	bcs.n	80003c0 <__adddf3+0x10c>
 80003ec:	f091 0f00 	teq	r1, #0
 80003f0:	bf04      	itt	eq
 80003f2:	4601      	moveq	r1, r0
 80003f4:	2000      	moveq	r0, #0
 80003f6:	fab1 f381 	clz	r3, r1
 80003fa:	bf08      	it	eq
 80003fc:	3320      	addeq	r3, #32
 80003fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000402:	f1b3 0220 	subs.w	r2, r3, #32
 8000406:	da0c      	bge.n	8000422 <__adddf3+0x16e>
 8000408:	320c      	adds	r2, #12
 800040a:	dd08      	ble.n	800041e <__adddf3+0x16a>
 800040c:	f102 0c14 	add.w	ip, r2, #20
 8000410:	f1c2 020c 	rsb	r2, r2, #12
 8000414:	fa01 f00c 	lsl.w	r0, r1, ip
 8000418:	fa21 f102 	lsr.w	r1, r1, r2
 800041c:	e00c      	b.n	8000438 <__adddf3+0x184>
 800041e:	f102 0214 	add.w	r2, r2, #20
 8000422:	bfd8      	it	le
 8000424:	f1c2 0c20 	rsble	ip, r2, #32
 8000428:	fa01 f102 	lsl.w	r1, r1, r2
 800042c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000430:	bfdc      	itt	le
 8000432:	ea41 010c 	orrle.w	r1, r1, ip
 8000436:	4090      	lslle	r0, r2
 8000438:	1ae4      	subs	r4, r4, r3
 800043a:	bfa2      	ittt	ge
 800043c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000440:	4329      	orrge	r1, r5
 8000442:	bd30      	popge	{r4, r5, pc}
 8000444:	ea6f 0404 	mvn.w	r4, r4
 8000448:	3c1f      	subs	r4, #31
 800044a:	da1c      	bge.n	8000486 <__adddf3+0x1d2>
 800044c:	340c      	adds	r4, #12
 800044e:	dc0e      	bgt.n	800046e <__adddf3+0x1ba>
 8000450:	f104 0414 	add.w	r4, r4, #20
 8000454:	f1c4 0220 	rsb	r2, r4, #32
 8000458:	fa20 f004 	lsr.w	r0, r0, r4
 800045c:	fa01 f302 	lsl.w	r3, r1, r2
 8000460:	ea40 0003 	orr.w	r0, r0, r3
 8000464:	fa21 f304 	lsr.w	r3, r1, r4
 8000468:	ea45 0103 	orr.w	r1, r5, r3
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f1c4 040c 	rsb	r4, r4, #12
 8000472:	f1c4 0220 	rsb	r2, r4, #32
 8000476:	fa20 f002 	lsr.w	r0, r0, r2
 800047a:	fa01 f304 	lsl.w	r3, r1, r4
 800047e:	ea40 0003 	orr.w	r0, r0, r3
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	fa21 f004 	lsr.w	r0, r1, r4
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f094 0f00 	teq	r4, #0
 8000492:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000496:	bf06      	itte	eq
 8000498:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800049c:	3401      	addeq	r4, #1
 800049e:	3d01      	subne	r5, #1
 80004a0:	e74e      	b.n	8000340 <__adddf3+0x8c>
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf18      	it	ne
 80004a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ac:	d029      	beq.n	8000502 <__adddf3+0x24e>
 80004ae:	ea94 0f05 	teq	r4, r5
 80004b2:	bf08      	it	eq
 80004b4:	ea90 0f02 	teqeq	r0, r2
 80004b8:	d005      	beq.n	80004c6 <__adddf3+0x212>
 80004ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80004be:	bf04      	itt	eq
 80004c0:	4619      	moveq	r1, r3
 80004c2:	4610      	moveq	r0, r2
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	ea91 0f03 	teq	r1, r3
 80004ca:	bf1e      	ittt	ne
 80004cc:	2100      	movne	r1, #0
 80004ce:	2000      	movne	r0, #0
 80004d0:	bd30      	popne	{r4, r5, pc}
 80004d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d6:	d105      	bne.n	80004e4 <__adddf3+0x230>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	4149      	adcs	r1, r1
 80004dc:	bf28      	it	cs
 80004de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e8:	bf3c      	itt	cc
 80004ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ee:	bd30      	popcc	{r4, r5, pc}
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004fc:	f04f 0000 	mov.w	r0, #0
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf1a      	itte	ne
 8000508:	4619      	movne	r1, r3
 800050a:	4610      	movne	r0, r2
 800050c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000510:	bf1c      	itt	ne
 8000512:	460b      	movne	r3, r1
 8000514:	4602      	movne	r2, r0
 8000516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800051a:	bf06      	itte	eq
 800051c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000520:	ea91 0f03 	teqeq	r1, r3
 8000524:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	bf00      	nop

0800052c <__aeabi_ui2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f04f 0500 	mov.w	r5, #0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e750      	b.n	80003ec <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_i2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000564:	bf48      	it	mi
 8000566:	4240      	negmi	r0, r0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e73e      	b.n	80003ec <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_f2d>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000576:	ea4f 0131 	mov.w	r1, r1, rrx
 800057a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057e:	bf1f      	itttt	ne
 8000580:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000584:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000588:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800058c:	4770      	bxne	lr
 800058e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000592:	bf08      	it	eq
 8000594:	4770      	bxeq	lr
 8000596:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800059a:	bf04      	itt	eq
 800059c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b0:	e71c      	b.n	80003ec <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aed8 	beq.w	800039a <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6bd      	b.n	800039a <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__gedf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__ledf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpdf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6e:	d01b      	beq.n	8000aa8 <__cmpdf2+0x54>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a76:	bf0c      	ite	eq
 8000a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a7c:	ea91 0f03 	teqne	r1, r3
 8000a80:	bf02      	ittt	eq
 8000a82:	ea90 0f02 	teqeq	r0, r2
 8000a86:	2000      	moveq	r0, #0
 8000a88:	4770      	bxeq	lr
 8000a8a:	f110 0f00 	cmn.w	r0, #0
 8000a8e:	ea91 0f03 	teq	r1, r3
 8000a92:	bf58      	it	pl
 8000a94:	4299      	cmppl	r1, r3
 8000a96:	bf08      	it	eq
 8000a98:	4290      	cmpeq	r0, r2
 8000a9a:	bf2c      	ite	cs
 8000a9c:	17d8      	asrcs	r0, r3, #31
 8000a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aa2:	f040 0001 	orr.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__cmpdf2+0x64>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d107      	bne.n	8000ac8 <__cmpdf2+0x74>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d1d6      	bne.n	8000a70 <__cmpdf2+0x1c>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d0d3      	beq.n	8000a70 <__cmpdf2+0x1c>
 8000ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4663      	mov	r3, ip
 8000adc:	e000      	b.n	8000ae0 <__aeabi_cdcmpeq>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdcmpeq>:
 8000ae0:	b501      	push	{r0, lr}
 8000ae2:	f7ff ffb7 	bl	8000a54 <__cmpdf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	bf48      	it	mi
 8000aea:	f110 0f00 	cmnmi.w	r0, #0
 8000aee:	bd01      	pop	{r0, pc}

08000af0 <__aeabi_dcmpeq>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff fff4 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000af8:	bf0c      	ite	eq
 8000afa:	2001      	moveq	r0, #1
 8000afc:	2000      	movne	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmplt>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffea 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b0c:	bf34      	ite	cc
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	2000      	movcs	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmple>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffe0 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpge>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffce 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpgt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffc4 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpun>:
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x10>
 8000b5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b62:	d10a      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x20>
 8000b6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0001 	mov.w	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2uiz>:
 8000bd0:	004a      	lsls	r2, r1, #1
 8000bd2:	d211      	bcs.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd8:	d211      	bcs.n	8000bfe <__aeabi_d2uiz+0x2e>
 8000bda:	d50d      	bpl.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d40e      	bmi.n	8000c04 <__aeabi_d2uiz+0x34>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_d2uiz+0x3a>
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2f>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c18:	bf24      	itt	cs
 8000c1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c22:	d90d      	bls.n	8000c40 <__aeabi_d2f+0x30>
 8000c24:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c30:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c38:	bf08      	it	eq
 8000c3a:	f020 0001 	biceq.w	r0, r0, #1
 8000c3e:	4770      	bx	lr
 8000c40:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c44:	d121      	bne.n	8000c8a <__aeabi_d2f+0x7a>
 8000c46:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c4a:	bfbc      	itt	lt
 8000c4c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	4770      	bxlt	lr
 8000c52:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c5a:	f1c2 0218 	rsb	r2, r2, #24
 8000c5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c66:	fa20 f002 	lsr.w	r0, r0, r2
 8000c6a:	bf18      	it	ne
 8000c6c:	f040 0001 	orrne.w	r0, r0, #1
 8000c70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c7c:	ea40 000c 	orr.w	r0, r0, ip
 8000c80:	fa23 f302 	lsr.w	r3, r3, r2
 8000c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c88:	e7cc      	b.n	8000c24 <__aeabi_d2f+0x14>
 8000c8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8e:	d107      	bne.n	8000ca0 <__aeabi_d2f+0x90>
 8000c90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c94:	bf1e      	ittt	ne
 8000c96:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c9a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c9e:	4770      	bxne	lr
 8000ca0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b9b4 	b.w	8001030 <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f83c 	bl	8000d4c <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_d2lz>:
 8000ce0:	b538      	push	{r3, r4, r5, lr}
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	460d      	mov	r5, r1
 8000cea:	f7ff ff0b 	bl	8000b04 <__aeabi_dcmplt>
 8000cee:	b928      	cbnz	r0, 8000cfc <__aeabi_d2lz+0x1c>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf8:	f000 b80a 	b.w	8000d10 <__aeabi_d2ulz>
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d02:	f000 f805 	bl	8000d10 <__aeabi_d2ulz>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	bd38      	pop	{r3, r4, r5, pc}
 8000d0e:	bf00      	nop

08000d10 <__aeabi_d2ulz>:
 8000d10:	b5d0      	push	{r4, r6, r7, lr}
 8000d12:	2200      	movs	r2, #0
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <__aeabi_d2ulz+0x34>)
 8000d16:	4606      	mov	r6, r0
 8000d18:	460f      	mov	r7, r1
 8000d1a:	f7ff fc81 	bl	8000620 <__aeabi_dmul>
 8000d1e:	f7ff ff57 	bl	8000bd0 <__aeabi_d2uiz>
 8000d22:	4604      	mov	r4, r0
 8000d24:	f7ff fc02 	bl	800052c <__aeabi_ui2d>
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <__aeabi_d2ulz+0x38>)
 8000d2c:	f7ff fc78 	bl	8000620 <__aeabi_dmul>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	4630      	mov	r0, r6
 8000d36:	4639      	mov	r1, r7
 8000d38:	f7ff faba 	bl	80002b0 <__aeabi_dsub>
 8000d3c:	f7ff ff48 	bl	8000bd0 <__aeabi_d2uiz>
 8000d40:	4621      	mov	r1, r4
 8000d42:	bdd0      	pop	{r4, r6, r7, pc}
 8000d44:	3df00000 	.word	0x3df00000
 8000d48:	41f00000 	.word	0x41f00000

08000d4c <__udivmoddi4>:
 8000d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d50:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d52:	460c      	mov	r4, r1
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d14d      	bne.n	8000df4 <__udivmoddi4+0xa8>
 8000d58:	428a      	cmp	r2, r1
 8000d5a:	460f      	mov	r7, r1
 8000d5c:	4684      	mov	ip, r0
 8000d5e:	4696      	mov	lr, r2
 8000d60:	fab2 f382 	clz	r3, r2
 8000d64:	d960      	bls.n	8000e28 <__udivmoddi4+0xdc>
 8000d66:	b14b      	cbz	r3, 8000d7c <__udivmoddi4+0x30>
 8000d68:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d6c:	f1c3 0220 	rsb	r2, r3, #32
 8000d70:	409f      	lsls	r7, r3
 8000d72:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d76:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7a:	4317      	orrs	r7, r2
 8000d7c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d80:	fa1f f48e 	uxth.w	r4, lr
 8000d84:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d88:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d8c:	fb06 7711 	mls	r7, r6, r1, r7
 8000d90:	fb01 f004 	mul.w	r0, r1, r4
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x62>
 8000d9c:	eb1e 0202 	adds.w	r2, lr, r2
 8000da0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x60>
 8000da6:	4290      	cmp	r0, r2
 8000da8:	f200 812d 	bhi.w	8001006 <__udivmoddi4+0x2ba>
 8000dac:	4639      	mov	r1, r7
 8000dae:	1a12      	subs	r2, r2, r0
 8000db0:	fa1f fc8c 	uxth.w	ip, ip
 8000db4:	fbb2 f0f6 	udiv	r0, r2, r6
 8000db8:	fb06 2210 	mls	r2, r6, r0, r2
 8000dbc:	fb00 f404 	mul.w	r4, r0, r4
 8000dc0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dc4:	4564      	cmp	r4, ip
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x8e>
 8000dc8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd0:	d202      	bcs.n	8000dd8 <__udivmoddi4+0x8c>
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	f200 811a 	bhi.w	800100c <__udivmoddi4+0x2c0>
 8000dd8:	4610      	mov	r0, r2
 8000dda:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dde:	ebac 0c04 	sub.w	ip, ip, r4
 8000de2:	2100      	movs	r1, #0
 8000de4:	b125      	cbz	r5, 8000df0 <__udivmoddi4+0xa4>
 8000de6:	fa2c f303 	lsr.w	r3, ip, r3
 8000dea:	2200      	movs	r2, #0
 8000dec:	e9c5 3200 	strd	r3, r2, [r5]
 8000df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d905      	bls.n	8000e04 <__udivmoddi4+0xb8>
 8000df8:	b10d      	cbz	r5, 8000dfe <__udivmoddi4+0xb2>
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4608      	mov	r0, r1
 8000e02:	e7f5      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e04:	fab3 f183 	clz	r1, r3
 8000e08:	2900      	cmp	r1, #0
 8000e0a:	d14d      	bne.n	8000ea8 <__udivmoddi4+0x15c>
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	f0c0 80f2 	bcc.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e12:	4290      	cmp	r0, r2
 8000e14:	f080 80ef 	bcs.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	d0e6      	beq.n	8000df0 <__udivmoddi4+0xa4>
 8000e22:	e9c5 6300 	strd	r6, r3, [r5]
 8000e26:	e7e3      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f040 80a2 	bne.w	8000f72 <__udivmoddi4+0x226>
 8000e2e:	1a8a      	subs	r2, r1, r2
 8000e30:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e34:	fa1f f68e 	uxth.w	r6, lr
 8000e38:	2101      	movs	r1, #1
 8000e3a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e3e:	fb07 2014 	mls	r0, r7, r4, r2
 8000e42:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e46:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4a:	fb06 f004 	mul.w	r0, r6, r4
 8000e4e:	4290      	cmp	r0, r2
 8000e50:	d90f      	bls.n	8000e72 <__udivmoddi4+0x126>
 8000e52:	eb1e 0202 	adds.w	r2, lr, r2
 8000e56:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e5a:	bf2c      	ite	cs
 8000e5c:	f04f 0901 	movcs.w	r9, #1
 8000e60:	f04f 0900 	movcc.w	r9, #0
 8000e64:	4290      	cmp	r0, r2
 8000e66:	d903      	bls.n	8000e70 <__udivmoddi4+0x124>
 8000e68:	f1b9 0f00 	cmp.w	r9, #0
 8000e6c:	f000 80c8 	beq.w	8001000 <__udivmoddi4+0x2b4>
 8000e70:	4644      	mov	r4, r8
 8000e72:	1a12      	subs	r2, r2, r0
 8000e74:	fa1f fc8c 	uxth.w	ip, ip
 8000e78:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e7c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e80:	fb00 f606 	mul.w	r6, r0, r6
 8000e84:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e88:	4566      	cmp	r6, ip
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x152>
 8000e8c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e94:	d202      	bcs.n	8000e9c <__udivmoddi4+0x150>
 8000e96:	4566      	cmp	r6, ip
 8000e98:	f200 80bb 	bhi.w	8001012 <__udivmoddi4+0x2c6>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	ebac 0c06 	sub.w	ip, ip, r6
 8000ea2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ea6:	e79d      	b.n	8000de4 <__udivmoddi4+0x98>
 8000ea8:	f1c1 0620 	rsb	r6, r1, #32
 8000eac:	408b      	lsls	r3, r1
 8000eae:	fa04 fe01 	lsl.w	lr, r4, r1
 8000eb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000eb6:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eba:	40f4      	lsrs	r4, r6
 8000ebc:	408a      	lsls	r2, r1
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	ea4e 030c 	orr.w	r3, lr, ip
 8000ec4:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ec8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ecc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed0:	fa1f fc87 	uxth.w	ip, r7
 8000ed4:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ed8:	fb08 4410 	mls	r4, r8, r0, r4
 8000edc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee0:	fb00 f90c 	mul.w	r9, r0, ip
 8000ee4:	45a1      	cmp	r9, r4
 8000ee6:	d90e      	bls.n	8000f06 <__udivmoddi4+0x1ba>
 8000ee8:	193c      	adds	r4, r7, r4
 8000eea:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eee:	bf2c      	ite	cs
 8000ef0:	f04f 0b01 	movcs.w	fp, #1
 8000ef4:	f04f 0b00 	movcc.w	fp, #0
 8000ef8:	45a1      	cmp	r9, r4
 8000efa:	d903      	bls.n	8000f04 <__udivmoddi4+0x1b8>
 8000efc:	f1bb 0f00 	cmp.w	fp, #0
 8000f00:	f000 8093 	beq.w	800102a <__udivmoddi4+0x2de>
 8000f04:	4650      	mov	r0, sl
 8000f06:	eba4 0409 	sub.w	r4, r4, r9
 8000f0a:	fa1f f983 	uxth.w	r9, r3
 8000f0e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000f12:	fb08 4413 	mls	r4, r8, r3, r4
 8000f16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d906      	bls.n	8000f30 <__udivmoddi4+0x1e4>
 8000f22:	193c      	adds	r4, r7, r4
 8000f24:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x1e2>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d87a      	bhi.n	8001024 <__udivmoddi4+0x2d8>
 8000f2e:	4643      	mov	r3, r8
 8000f30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f34:	eba4 040c 	sub.w	r4, r4, ip
 8000f38:	fba0 9802 	umull	r9, r8, r0, r2
 8000f3c:	4544      	cmp	r4, r8
 8000f3e:	46cc      	mov	ip, r9
 8000f40:	4643      	mov	r3, r8
 8000f42:	d302      	bcc.n	8000f4a <__udivmoddi4+0x1fe>
 8000f44:	d106      	bne.n	8000f54 <__udivmoddi4+0x208>
 8000f46:	45ce      	cmp	lr, r9
 8000f48:	d204      	bcs.n	8000f54 <__udivmoddi4+0x208>
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f50:	eb68 0307 	sbc.w	r3, r8, r7
 8000f54:	b15d      	cbz	r5, 8000f6e <__udivmoddi4+0x222>
 8000f56:	ebbe 020c 	subs.w	r2, lr, ip
 8000f5a:	eb64 0403 	sbc.w	r4, r4, r3
 8000f5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000f62:	fa22 f301 	lsr.w	r3, r2, r1
 8000f66:	40cc      	lsrs	r4, r1
 8000f68:	431e      	orrs	r6, r3
 8000f6a:	e9c5 6400 	strd	r6, r4, [r5]
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e73e      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000f72:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f76:	f1c3 0120 	rsb	r1, r3, #32
 8000f7a:	fa04 f203 	lsl.w	r2, r4, r3
 8000f7e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f82:	40cc      	lsrs	r4, r1
 8000f84:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f88:	fa20 f101 	lsr.w	r1, r0, r1
 8000f8c:	fa1f f68e 	uxth.w	r6, lr
 8000f90:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f94:	430a      	orrs	r2, r1
 8000f96:	fb07 4410 	mls	r4, r7, r0, r4
 8000f9a:	0c11      	lsrs	r1, r2, #16
 8000f9c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000fa0:	fb00 f406 	mul.w	r4, r0, r6
 8000fa4:	428c      	cmp	r4, r1
 8000fa6:	d90e      	bls.n	8000fc6 <__udivmoddi4+0x27a>
 8000fa8:	eb1e 0101 	adds.w	r1, lr, r1
 8000fac:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb0:	bf2c      	ite	cs
 8000fb2:	f04f 0901 	movcs.w	r9, #1
 8000fb6:	f04f 0900 	movcc.w	r9, #0
 8000fba:	428c      	cmp	r4, r1
 8000fbc:	d902      	bls.n	8000fc4 <__udivmoddi4+0x278>
 8000fbe:	f1b9 0f00 	cmp.w	r9, #0
 8000fc2:	d02c      	beq.n	800101e <__udivmoddi4+0x2d2>
 8000fc4:	4640      	mov	r0, r8
 8000fc6:	1b09      	subs	r1, r1, r4
 8000fc8:	b292      	uxth	r2, r2
 8000fca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fce:	fb07 1114 	mls	r1, r7, r4, r1
 8000fd2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd6:	fb04 f106 	mul.w	r1, r4, r6
 8000fda:	4291      	cmp	r1, r2
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x2a2>
 8000fde:	eb1e 0202 	adds.w	r2, lr, r2
 8000fe2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fe6:	d201      	bcs.n	8000fec <__udivmoddi4+0x2a0>
 8000fe8:	4291      	cmp	r1, r2
 8000fea:	d815      	bhi.n	8001018 <__udivmoddi4+0x2cc>
 8000fec:	4644      	mov	r4, r8
 8000fee:	1a52      	subs	r2, r2, r1
 8000ff0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000ff4:	e721      	b.n	8000e3a <__udivmoddi4+0xee>
 8000ff6:	1a86      	subs	r6, r0, r2
 8000ff8:	eb64 0303 	sbc.w	r3, r4, r3
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	e70e      	b.n	8000e1e <__udivmoddi4+0xd2>
 8001000:	3c02      	subs	r4, #2
 8001002:	4472      	add	r2, lr
 8001004:	e735      	b.n	8000e72 <__udivmoddi4+0x126>
 8001006:	3902      	subs	r1, #2
 8001008:	4472      	add	r2, lr
 800100a:	e6d0      	b.n	8000dae <__udivmoddi4+0x62>
 800100c:	44f4      	add	ip, lr
 800100e:	3802      	subs	r0, #2
 8001010:	e6e3      	b.n	8000dda <__udivmoddi4+0x8e>
 8001012:	44f4      	add	ip, lr
 8001014:	3802      	subs	r0, #2
 8001016:	e742      	b.n	8000e9e <__udivmoddi4+0x152>
 8001018:	3c02      	subs	r4, #2
 800101a:	4472      	add	r2, lr
 800101c:	e7e7      	b.n	8000fee <__udivmoddi4+0x2a2>
 800101e:	3802      	subs	r0, #2
 8001020:	4471      	add	r1, lr
 8001022:	e7d0      	b.n	8000fc6 <__udivmoddi4+0x27a>
 8001024:	3b02      	subs	r3, #2
 8001026:	443c      	add	r4, r7
 8001028:	e782      	b.n	8000f30 <__udivmoddi4+0x1e4>
 800102a:	3802      	subs	r0, #2
 800102c:	443c      	add	r4, r7
 800102e:	e76a      	b.n	8000f06 <__udivmoddi4+0x1ba>

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__io_putchar>:

uint16_t readValue;
uint32_t sumADC = 0;
LIS2DW12_Data_t accel_data;

void __io_putchar(char ch) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800103e:	1df9      	adds	r1, r7, #7
 8001040:	f04f 33ff 	mov.w	r3, #4294967295
 8001044:	2201      	movs	r2, #1
 8001046:	4803      	ldr	r0, [pc, #12]	@ (8001054 <__io_putchar+0x20>)
 8001048:	f005 fd1d 	bl	8006a86 <HAL_UART_Transmit>
	//return ch;
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200003d8 	.word	0x200003d8

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105c:	f000 fe7e 	bl	8001d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001060:	f000 f816 	bl	8001090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001064:	f000 fa5e 	bl	8001524 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8001068:	f000 f8ec 	bl	8001244 <MX_GPDMA1_Init>
  MX_USART2_UART_Init();
 800106c:	f000 f9b2 	bl	80013d4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001070:	f000 f9fc 	bl	800146c <MX_USART3_UART_Init>
  MX_SBS_Init();
 8001074:	f000 f950 	bl	8001318 <MX_SBS_Init>
  MX_ADC1_Init();
 8001078:	f000 f880 	bl	800117c <MX_ADC1_Init>
  MX_SPI1_Init();
 800107c:	f000 f954 	bl	8001328 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  printf("UART3 Polling Example\n");
 8001080:	4802      	ldr	r0, [pc, #8]	@ (800108c <main+0x34>)
 8001082:	f007 fa99 	bl	80085b8 <puts>
  while (1)
  {
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  USART3_ReceiveAndProcess();
 8001086:	f000 fac7 	bl	8001618 <USART3_ReceiveAndProcess>
 800108a:	e7fc      	b.n	8001086 <main+0x2e>
 800108c:	0800be90 	.word	0x0800be90

08001090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b09c      	sub	sp, #112	@ 0x70
 8001094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001096:	f107 0320 	add.w	r3, r7, #32
 800109a:	2250      	movs	r2, #80	@ 0x50
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f007 fb8a 	bl	80087b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a4:	f107 0308 	add.w	r3, r7, #8
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
 80010b4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001174 <SystemClock_Config+0xe4>)
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	4a2e      	ldr	r2, [pc, #184]	@ (8001174 <SystemClock_Config+0xe4>)
 80010bc:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80010c0:	6113      	str	r3, [r2, #16]
 80010c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001174 <SystemClock_Config+0xe4>)
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010ce:	bf00      	nop
 80010d0:	4b28      	ldr	r3, [pc, #160]	@ (8001174 <SystemClock_Config+0xe4>)
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	f003 0308 	and.w	r3, r3, #8
 80010d8:	2b08      	cmp	r3, #8
 80010da:	d1f9      	bne.n	80010d0 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_CSI;
 80010dc:	2312      	movs	r3, #18
 80010de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e0:	2301      	movs	r3, #1
 80010e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 80010e4:	2308      	movs	r3, #8
 80010e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e8:	2340      	movs	r3, #64	@ 0x40
 80010ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80010ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80010f2:	2320      	movs	r3, #32
 80010f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f6:	2302      	movs	r3, #2
 80010f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 80010fa:	2302      	movs	r3, #2
 80010fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010fe:	2301      	movs	r3, #1
 8001100:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 4;
 8001102:	2304      	movs	r3, #4
 8001104:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001106:	2302      	movs	r3, #2
 8001108:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800110a:	2302      	movs	r3, #2
 800110c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800110e:	2302      	movs	r3, #2
 8001110:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8001112:	2308      	movs	r3, #8
 8001114:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8001116:	2300      	movs	r3, #0
 8001118:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111e:	f107 0320 	add.w	r3, r7, #32
 8001122:	4618      	mov	r0, r3
 8001124:	f002 fb00 	bl	8003728 <HAL_RCC_OscConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800112e:	f000 fabb 	bl	80016a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001132:	231f      	movs	r3, #31
 8001134:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800114a:	f107 0308 	add.w	r3, r7, #8
 800114e:	2101      	movs	r1, #1
 8001150:	4618      	mov	r0, r3
 8001152:	f002 ff21 	bl	8003f98 <HAL_RCC_ClockConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800115c:	f000 faa4 	bl	80016a8 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <SystemClock_Config+0xe8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a04      	ldr	r2, [pc, #16]	@ (8001178 <SystemClock_Config+0xe8>)
 8001166:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	3770      	adds	r7, #112	@ 0x70
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	44020800 	.word	0x44020800
 8001178:	40022000 	.word	0x40022000

0800117c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001182:	463b      	mov	r3, r7
 8001184:	2220      	movs	r2, #32
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f007 fb15 	bl	80087b8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800118e:	4b2a      	ldr	r3, [pc, #168]	@ (8001238 <MX_ADC1_Init+0xbc>)
 8001190:	4a2a      	ldr	r2, [pc, #168]	@ (800123c <MX_ADC1_Init+0xc0>)
 8001192:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001194:	4b28      	ldr	r3, [pc, #160]	@ (8001238 <MX_ADC1_Init+0xbc>)
 8001196:	2200      	movs	r2, #0
 8001198:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800119a:	4b27      	ldr	r3, [pc, #156]	@ (8001238 <MX_ADC1_Init+0xbc>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011a0:	4b25      	ldr	r3, [pc, #148]	@ (8001238 <MX_ADC1_Init+0xbc>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011a6:	4b24      	ldr	r3, [pc, #144]	@ (8001238 <MX_ADC1_Init+0xbc>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ac:	4b22      	ldr	r3, [pc, #136]	@ (8001238 <MX_ADC1_Init+0xbc>)
 80011ae:	2204      	movs	r2, #4
 80011b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011b2:	4b21      	ldr	r3, [pc, #132]	@ (8001238 <MX_ADC1_Init+0xbc>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001238 <MX_ADC1_Init+0xbc>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80011be:	4b1e      	ldr	r3, [pc, #120]	@ (8001238 <MX_ADC1_Init+0xbc>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001238 <MX_ADC1_Init+0xbc>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001238 <MX_ADC1_Init+0xbc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011d2:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <MX_ADC1_Init+0xbc>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011d8:	4b17      	ldr	r3, [pc, #92]	@ (8001238 <MX_ADC1_Init+0xbc>)
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80011e0:	4b15      	ldr	r3, [pc, #84]	@ (8001238 <MX_ADC1_Init+0xbc>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011e6:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <MX_ADC1_Init+0xbc>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80011ec:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <MX_ADC1_Init+0xbc>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011f4:	4810      	ldr	r0, [pc, #64]	@ (8001238 <MX_ADC1_Init+0xbc>)
 80011f6:	f001 f88f 	bl	8002318 <HAL_ADC_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001200:	f000 fa52 	bl	80016a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001204:	4b0e      	ldr	r3, [pc, #56]	@ (8001240 <MX_ADC1_Init+0xc4>)
 8001206:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001208:	2306      	movs	r3, #6
 800120a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001210:	237f      	movs	r3, #127	@ 0x7f
 8001212:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001214:	2304      	movs	r3, #4
 8001216:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800121c:	463b      	mov	r3, r7
 800121e:	4619      	mov	r1, r3
 8001220:	4805      	ldr	r0, [pc, #20]	@ (8001238 <MX_ADC1_Init+0xbc>)
 8001222:	f001 f9c7 	bl	80025b4 <HAL_ADC_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800122c:	f000 fa3c 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200001f0 	.word	0x200001f0
 800123c:	42028000 	.word	0x42028000
 8001240:	04300002 	.word	0x04300002

08001244 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800124a:	4b2e      	ldr	r3, [pc, #184]	@ (8001304 <MX_GPDMA1_Init+0xc0>)
 800124c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001250:	4a2c      	ldr	r2, [pc, #176]	@ (8001304 <MX_GPDMA1_Init+0xc0>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800125a:	4b2a      	ldr	r3, [pc, #168]	@ (8001304 <MX_GPDMA1_Init+0xc0>)
 800125c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  handle_GPDMA1_Channel7.Instance = GPDMA1_Channel7;
 8001268:	4b27      	ldr	r3, [pc, #156]	@ (8001308 <MX_GPDMA1_Init+0xc4>)
 800126a:	4a28      	ldr	r2, [pc, #160]	@ (800130c <MX_GPDMA1_Init+0xc8>)
 800126c:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel7.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800126e:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <MX_GPDMA1_Init+0xc4>)
 8001270:	2200      	movs	r2, #0
 8001272:	639a      	str	r2, [r3, #56]	@ 0x38
  handle_GPDMA1_Channel7.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001274:	4b24      	ldr	r3, [pc, #144]	@ (8001308 <MX_GPDMA1_Init+0xc4>)
 8001276:	2200      	movs	r2, #0
 8001278:	63da      	str	r2, [r3, #60]	@ 0x3c
  handle_GPDMA1_Channel7.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800127a:	4b23      	ldr	r3, [pc, #140]	@ (8001308 <MX_GPDMA1_Init+0xc4>)
 800127c:	2200      	movs	r2, #0
 800127e:	641a      	str	r2, [r3, #64]	@ 0x40
  handle_GPDMA1_Channel7.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8001280:	4b21      	ldr	r3, [pc, #132]	@ (8001308 <MX_GPDMA1_Init+0xc4>)
 8001282:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8001286:	645a      	str	r2, [r3, #68]	@ 0x44
  handle_GPDMA1_Channel7.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_NORMAL;
 8001288:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <MX_GPDMA1_Init+0xc4>)
 800128a:	2280      	movs	r2, #128	@ 0x80
 800128c:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel7) != HAL_OK)
 800128e:	481e      	ldr	r0, [pc, #120]	@ (8001308 <MX_GPDMA1_Init+0xc4>)
 8001290:	f001 ff5c 	bl	800314c <HAL_DMAEx_List_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_GPDMA1_Init+0x5a>
  {
    Error_Handler();
 800129a:	f000 fa05 	bl	80016a8 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel7, DMA_CHANNEL_NPRIV) != HAL_OK)
 800129e:	2110      	movs	r1, #16
 80012a0:	4819      	ldr	r0, [pc, #100]	@ (8001308 <MX_GPDMA1_Init+0xc4>)
 80012a2:	f001 ff17 	bl	80030d4 <HAL_DMA_ConfigChannelAttributes>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_GPDMA1_Init+0x6c>
  {
    Error_Handler();
 80012ac:	f000 f9fc 	bl	80016a8 <Error_Handler>
  }
  handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80012b0:	4b17      	ldr	r3, [pc, #92]	@ (8001310 <MX_GPDMA1_Init+0xcc>)
 80012b2:	4a18      	ldr	r2, [pc, #96]	@ (8001314 <MX_GPDMA1_Init+0xd0>)
 80012b4:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80012b6:	4b16      	ldr	r3, [pc, #88]	@ (8001310 <MX_GPDMA1_Init+0xcc>)
 80012b8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80012bc:	639a      	str	r2, [r3, #56]	@ 0x38
  handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_1LINK_EXECUTION;
 80012be:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <MX_GPDMA1_Init+0xcc>)
 80012c0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80012c6:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <MX_GPDMA1_Init+0xcc>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	641a      	str	r2, [r3, #64]	@ 0x40
  handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 80012cc:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <MX_GPDMA1_Init+0xcc>)
 80012ce:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 80012d2:	645a      	str	r2, [r3, #68]	@ 0x44
  handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80012d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <MX_GPDMA1_Init+0xcc>)
 80012d6:	2281      	movs	r2, #129	@ 0x81
 80012d8:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 80012da:	480d      	ldr	r0, [pc, #52]	@ (8001310 <MX_GPDMA1_Init+0xcc>)
 80012dc:	f001 ff36 	bl	800314c <HAL_DMAEx_List_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_GPDMA1_Init+0xa6>
  {
    Error_Handler();
 80012e6:	f000 f9df 	bl	80016a8 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80012ea:	2110      	movs	r1, #16
 80012ec:	4808      	ldr	r0, [pc, #32]	@ (8001310 <MX_GPDMA1_Init+0xcc>)
 80012ee:	f001 fef1 	bl	80030d4 <HAL_DMA_ConfigChannelAttributes>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_GPDMA1_Init+0xb8>
  {
    Error_Handler();
 80012f8:	f000 f9d6 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	44020c00 	.word	0x44020c00
 8001308:	20000258 	.word	0x20000258
 800130c:	400203d0 	.word	0x400203d0
 8001310:	200002d0 	.word	0x200002d0
 8001314:	400200d0 	.word	0x400200d0

08001318 <MX_SBS_Init>:
  * @brief SBS Initialization Function
  * @param None
  * @retval None
  */
static void MX_SBS_Init(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END SBS_Init 1 */
  /* USER CODE BEGIN SBS_Init 2 */

  /* USER CODE END SBS_Init 2 */

}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800132c:	4b27      	ldr	r3, [pc, #156]	@ (80013cc <MX_SPI1_Init+0xa4>)
 800132e:	4a28      	ldr	r2, [pc, #160]	@ (80013d0 <MX_SPI1_Init+0xa8>)
 8001330:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001332:	4b26      	ldr	r3, [pc, #152]	@ (80013cc <MX_SPI1_Init+0xa4>)
 8001334:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001338:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800133a:	4b24      	ldr	r3, [pc, #144]	@ (80013cc <MX_SPI1_Init+0xa4>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001340:	4b22      	ldr	r3, [pc, #136]	@ (80013cc <MX_SPI1_Init+0xa4>)
 8001342:	2203      	movs	r2, #3
 8001344:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001346:	4b21      	ldr	r3, [pc, #132]	@ (80013cc <MX_SPI1_Init+0xa4>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800134c:	4b1f      	ldr	r3, [pc, #124]	@ (80013cc <MX_SPI1_Init+0xa4>)
 800134e:	2200      	movs	r2, #0
 8001350:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001352:	4b1e      	ldr	r3, [pc, #120]	@ (80013cc <MX_SPI1_Init+0xa4>)
 8001354:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001358:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800135a:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <MX_SPI1_Init+0xa4>)
 800135c:	2200      	movs	r2, #0
 800135e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001360:	4b1a      	ldr	r3, [pc, #104]	@ (80013cc <MX_SPI1_Init+0xa4>)
 8001362:	2200      	movs	r2, #0
 8001364:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001366:	4b19      	ldr	r3, [pc, #100]	@ (80013cc <MX_SPI1_Init+0xa4>)
 8001368:	2200      	movs	r2, #0
 800136a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800136c:	4b17      	ldr	r3, [pc, #92]	@ (80013cc <MX_SPI1_Init+0xa4>)
 800136e:	2200      	movs	r2, #0
 8001370:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001372:	4b16      	ldr	r3, [pc, #88]	@ (80013cc <MX_SPI1_Init+0xa4>)
 8001374:	2207      	movs	r2, #7
 8001376:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001378:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <MX_SPI1_Init+0xa4>)
 800137a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800137e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001380:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <MX_SPI1_Init+0xa4>)
 8001382:	2200      	movs	r2, #0
 8001384:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001386:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <MX_SPI1_Init+0xa4>)
 8001388:	2200      	movs	r2, #0
 800138a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <MX_SPI1_Init+0xa4>)
 800138e:	2200      	movs	r2, #0
 8001390:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <MX_SPI1_Init+0xa4>)
 8001394:	2200      	movs	r2, #0
 8001396:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001398:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <MX_SPI1_Init+0xa4>)
 800139a:	2200      	movs	r2, #0
 800139c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	@ (80013cc <MX_SPI1_Init+0xa4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013a4:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <MX_SPI1_Init+0xa4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80013aa:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <MX_SPI1_Init+0xa4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <MX_SPI1_Init+0xa4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	@ (80013cc <MX_SPI1_Init+0xa4>)
 80013b8:	f005 f9fe 	bl	80067b8 <HAL_SPI_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80013c2:	f000 f971 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000348 	.word	0x20000348
 80013d0:	40013000 	.word	0x40013000

080013d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013d8:	4b22      	ldr	r3, [pc, #136]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 80013da:	4a23      	ldr	r2, [pc, #140]	@ (8001468 <MX_USART2_UART_Init+0x94>)
 80013dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013de:	4b21      	ldr	r3, [pc, #132]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 80013e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 80013fa:	220c      	movs	r2, #12
 80013fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fe:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001404:	4b17      	ldr	r3, [pc, #92]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800140a:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001410:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 8001412:	2200      	movs	r2, #0
 8001414:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001416:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 8001418:	2200      	movs	r2, #0
 800141a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800141c:	4811      	ldr	r0, [pc, #68]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 800141e:	f005 fae2 	bl	80069e6 <HAL_UART_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001428:	f000 f93e 	bl	80016a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800142c:	2100      	movs	r1, #0
 800142e:	480d      	ldr	r0, [pc, #52]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 8001430:	f006 f874 	bl	800751c <HAL_UARTEx_SetTxFifoThreshold>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800143a:	f000 f935 	bl	80016a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800143e:	2100      	movs	r1, #0
 8001440:	4808      	ldr	r0, [pc, #32]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 8001442:	f006 f8a9 	bl	8007598 <HAL_UARTEx_SetRxFifoThreshold>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800144c:	f000 f92c 	bl	80016a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001450:	4804      	ldr	r0, [pc, #16]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 8001452:	f006 f82a 	bl	80074aa <HAL_UARTEx_DisableFifoMode>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800145c:	f000 f924 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200003d8 	.word	0x200003d8
 8001468:	40004400 	.word	0x40004400

0800146c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001470:	4b2a      	ldr	r3, [pc, #168]	@ (800151c <MX_USART3_UART_Init+0xb0>)
 8001472:	4a2b      	ldr	r2, [pc, #172]	@ (8001520 <MX_USART3_UART_Init+0xb4>)
 8001474:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001476:	4b29      	ldr	r3, [pc, #164]	@ (800151c <MX_USART3_UART_Init+0xb0>)
 8001478:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800147c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800147e:	4b27      	ldr	r3, [pc, #156]	@ (800151c <MX_USART3_UART_Init+0xb0>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001484:	4b25      	ldr	r3, [pc, #148]	@ (800151c <MX_USART3_UART_Init+0xb0>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800148a:	4b24      	ldr	r3, [pc, #144]	@ (800151c <MX_USART3_UART_Init+0xb0>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001490:	4b22      	ldr	r3, [pc, #136]	@ (800151c <MX_USART3_UART_Init+0xb0>)
 8001492:	220c      	movs	r2, #12
 8001494:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001496:	4b21      	ldr	r3, [pc, #132]	@ (800151c <MX_USART3_UART_Init+0xb0>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800149c:	4b1f      	ldr	r3, [pc, #124]	@ (800151c <MX_USART3_UART_Init+0xb0>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a2:	4b1e      	ldr	r3, [pc, #120]	@ (800151c <MX_USART3_UART_Init+0xb0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014a8:	4b1c      	ldr	r3, [pc, #112]	@ (800151c <MX_USART3_UART_Init+0xb0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ae:	4b1b      	ldr	r3, [pc, #108]	@ (800151c <MX_USART3_UART_Init+0xb0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014b4:	4819      	ldr	r0, [pc, #100]	@ (800151c <MX_USART3_UART_Init+0xb0>)
 80014b6:	f005 fa96 	bl	80069e6 <HAL_UART_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014c0:	f000 f8f2 	bl	80016a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014c4:	2100      	movs	r1, #0
 80014c6:	4815      	ldr	r0, [pc, #84]	@ (800151c <MX_USART3_UART_Init+0xb0>)
 80014c8:	f006 f828 	bl	800751c <HAL_UARTEx_SetTxFifoThreshold>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014d2:	f000 f8e9 	bl	80016a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d6:	2100      	movs	r1, #0
 80014d8:	4810      	ldr	r0, [pc, #64]	@ (800151c <MX_USART3_UART_Init+0xb0>)
 80014da:	f006 f85d 	bl	8007598 <HAL_UARTEx_SetRxFifoThreshold>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014e4:	f000 f8e0 	bl	80016a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014e8:	480c      	ldr	r0, [pc, #48]	@ (800151c <MX_USART3_UART_Init+0xb0>)
 80014ea:	f005 ffde 	bl	80074aa <HAL_UARTEx_DisableFifoMode>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014f4:	f000 f8d8 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

	HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2100      	movs	r1, #0
 80014fc:	203c      	movs	r0, #60	@ 0x3c
 80014fe:	f001 fd11 	bl	8002f24 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001502:	203c      	movs	r0, #60	@ 0x3c
 8001504:	f001 fd28 	bl	8002f58 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001508:	2200      	movs	r2, #0
 800150a:	2100      	movs	r1, #0
 800150c:	203c      	movs	r0, #60	@ 0x3c
 800150e:	f001 fd09 	bl	8002f24 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001512:	203c      	movs	r0, #60	@ 0x3c
 8001514:	f001 fd20 	bl	8002f58 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2000046c 	.word	0x2000046c
 8001520:	40004800 	.word	0x40004800

08001524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	f107 030c 	add.w	r3, r7, #12
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	4b34      	ldr	r3, [pc, #208]	@ (800160c <MX_GPIO_Init+0xe8>)
 800153c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001540:	4a32      	ldr	r2, [pc, #200]	@ (800160c <MX_GPIO_Init+0xe8>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800154a:	4b30      	ldr	r3, [pc, #192]	@ (800160c <MX_GPIO_Init+0xe8>)
 800154c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001558:	4b2c      	ldr	r3, [pc, #176]	@ (800160c <MX_GPIO_Init+0xe8>)
 800155a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800155e:	4a2b      	ldr	r2, [pc, #172]	@ (800160c <MX_GPIO_Init+0xe8>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001568:	4b28      	ldr	r3, [pc, #160]	@ (800160c <MX_GPIO_Init+0xe8>)
 800156a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	2120      	movs	r1, #32
 800157a:	4825      	ldr	r0, [pc, #148]	@ (8001610 <MX_GPIO_Init+0xec>)
 800157c:	f002 f8bc 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	2120      	movs	r1, #32
 8001584:	4823      	ldr	r0, [pc, #140]	@ (8001614 <MX_GPIO_Init+0xf0>)
 8001586:	f002 f8b7 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800158a:	2320      	movs	r3, #32
 800158c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158e:	2301      	movs	r3, #1
 8001590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	4619      	mov	r1, r3
 80015a0:	481b      	ldr	r0, [pc, #108]	@ (8001610 <MX_GPIO_Init+0xec>)
 80015a2:	f001 ff57 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ac:	2312      	movs	r3, #18
 80015ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015b8:	2304      	movs	r3, #4
 80015ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	4619      	mov	r1, r3
 80015c2:	4814      	ldr	r0, [pc, #80]	@ (8001614 <MX_GPIO_Init+0xf0>)
 80015c4:	f001 ff46 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015c8:	2308      	movs	r3, #8
 80015ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015cc:	2312      	movs	r3, #18
 80015ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF8_I2C2;
 80015d8:	2308      	movs	r3, #8
 80015da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	4619      	mov	r1, r3
 80015e2:	480c      	ldr	r0, [pc, #48]	@ (8001614 <MX_GPIO_Init+0xf0>)
 80015e4:	f001 ff36 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015e8:	2320      	movs	r3, #32
 80015ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ec:	2301      	movs	r3, #1
 80015ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	4619      	mov	r1, r3
 80015fe:	4805      	ldr	r0, [pc, #20]	@ (8001614 <MX_GPIO_Init+0xf0>)
 8001600:	f001 ff28 	bl	8003454 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001604:	bf00      	nop
 8001606:	3720      	adds	r7, #32
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	44020c00 	.word	0x44020c00
 8001610:	42020000 	.word	0x42020000
 8001614:	42020400 	.word	0x42020400

08001618 <USART3_ReceiveAndProcess>:

/* USER CODE BEGIN 4 */

void USART3_ReceiveAndProcess(void) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
	static char previous_char = 0;
	char received_char = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	71fb      	strb	r3, [r7, #7]
	if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_ORE)) {
 8001622:	4b1d      	ldr	r3, [pc, #116]	@ (8001698 <USART3_ReceiveAndProcess+0x80>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	2b08      	cmp	r3, #8
 800162e:	d103      	bne.n	8001638 <USART3_ReceiveAndProcess+0x20>
		__HAL_UART_CLEAR_OREFLAG(&huart3);
 8001630:	4b19      	ldr	r3, [pc, #100]	@ (8001698 <USART3_ReceiveAndProcess+0x80>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2208      	movs	r2, #8
 8001636:	621a      	str	r2, [r3, #32]
	}

	if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE)) {
 8001638:	4b17      	ldr	r3, [pc, #92]	@ (8001698 <USART3_ReceiveAndProcess+0x80>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	f003 0320 	and.w	r3, r3, #32
 8001642:	2b20      	cmp	r3, #32
 8001644:	d124      	bne.n	8001690 <USART3_ReceiveAndProcess+0x78>
		HAL_UART_Receive(&huart3, (uint8_t*)&received_char, 1, HAL_MAX_DELAY);
 8001646:	1df9      	adds	r1, r7, #7
 8001648:	f04f 33ff 	mov.w	r3, #4294967295
 800164c:	2201      	movs	r2, #1
 800164e:	4812      	ldr	r0, [pc, #72]	@ (8001698 <USART3_ReceiveAndProcess+0x80>)
 8001650:	f005 fab7 	bl	8006bc2 <HAL_UART_Receive>
		countertick++;
 8001654:	4b11      	ldr	r3, [pc, #68]	@ (800169c <USART3_ReceiveAndProcess+0x84>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	3301      	adds	r3, #1
 800165a:	b2da      	uxtb	r2, r3
 800165c:	4b0f      	ldr	r3, [pc, #60]	@ (800169c <USART3_ReceiveAndProcess+0x84>)
 800165e:	701a      	strb	r2, [r3, #0]

		if (previous_char == 0x95 && received_char == 0x10) {
 8001660:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <USART3_ReceiveAndProcess+0x88>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b95      	cmp	r3, #149	@ 0x95
 8001666:	d10b      	bne.n	8001680 <USART3_ReceiveAndProcess+0x68>
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	2b10      	cmp	r3, #16
 800166c:	d108      	bne.n	8001680 <USART3_ReceiveAndProcess+0x68>
			// Toggle LED for debugging
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800166e:	2201      	movs	r2, #1
 8001670:	2120      	movs	r1, #32
 8001672:	480c      	ldr	r0, [pc, #48]	@ (80016a4 <USART3_ReceiveAndProcess+0x8c>)
 8001674:	f002 f840 	bl	80036f8 <HAL_GPIO_WritePin>
			//printf("Data 0x95 diterima\n");
			countertick = 0;
 8001678:	4b08      	ldr	r3, [pc, #32]	@ (800169c <USART3_ReceiveAndProcess+0x84>)
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
 800167e:	e004      	b.n	800168a <USART3_ReceiveAndProcess+0x72>
		}else{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001680:	2200      	movs	r2, #0
 8001682:	2120      	movs	r1, #32
 8001684:	4807      	ldr	r0, [pc, #28]	@ (80016a4 <USART3_ReceiveAndProcess+0x8c>)
 8001686:	f002 f837 	bl	80036f8 <HAL_GPIO_WritePin>

		if(countertick == 16){
			//printf("Terkirim\n");
		}

		previous_char = received_char;
 800168a:	79fa      	ldrb	r2, [r7, #7]
 800168c:	4b04      	ldr	r3, [pc, #16]	@ (80016a0 <USART3_ReceiveAndProcess+0x88>)
 800168e:	701a      	strb	r2, [r3, #0]
		//printf("Received: 0x%02X |", received_char);
		//printf("countertick : %d\n", countertick);
	}
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	2000046c 	.word	0x2000046c
 800169c:	20000500 	.word	0x20000500
 80016a0:	20000501 	.word	0x20000501
 80016a4:	42020000 	.word	0x42020000

080016a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ac:	b672      	cpsid	i
}
 80016ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <Error_Handler+0x8>

080016b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/

  HAL_SBS_EnableVddIO2CompensationCell();
 80016b8:	f000 fc20 	bl	8001efc <HAL_SBS_EnableVddIO2CompensationCell>
  HAL_SBS_EnableVddIO1CompensationCell();
 80016bc:	f000 fc0c 	bl	8001ed8 <HAL_SBS_EnableVddIO1CompensationCell>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b0ac      	sub	sp, #176	@ 0xb0
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	2288      	movs	r2, #136	@ 0x88
 80016e2:	2100      	movs	r1, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f007 f867 	bl	80087b8 <memset>
  if(hadc->Instance==ADC1)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a23      	ldr	r2, [pc, #140]	@ (800177c <HAL_ADC_MspInit+0xb8>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d13e      	bne.n	8001772 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80016f4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 8001700:	2300      	movs	r3, #0
 8001702:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	4618      	mov	r0, r3
 800170a:	f002 ff87 	bl	800461c <HAL_RCCEx_PeriphCLKConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 8001714:	f7ff ffc8 	bl	80016a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001718:	4b19      	ldr	r3, [pc, #100]	@ (8001780 <HAL_ADC_MspInit+0xbc>)
 800171a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800171e:	4a18      	ldr	r2, [pc, #96]	@ (8001780 <HAL_ADC_MspInit+0xbc>)
 8001720:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001724:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001728:	4b15      	ldr	r3, [pc, #84]	@ (8001780 <HAL_ADC_MspInit+0xbc>)
 800172a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800172e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	4b12      	ldr	r3, [pc, #72]	@ (8001780 <HAL_ADC_MspInit+0xbc>)
 8001738:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800173c:	4a10      	ldr	r2, [pc, #64]	@ (8001780 <HAL_ADC_MspInit+0xbc>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001746:	4b0e      	ldr	r3, [pc, #56]	@ (8001780 <HAL_ADC_MspInit+0xbc>)
 8001748:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001754:	2302      	movs	r3, #2
 8001756:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800175a:	2303      	movs	r3, #3
 800175c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001766:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800176a:	4619      	mov	r1, r3
 800176c:	4805      	ldr	r0, [pc, #20]	@ (8001784 <HAL_ADC_MspInit+0xc0>)
 800176e:	f001 fe71 	bl	8003454 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001772:	bf00      	nop
 8001774:	37b0      	adds	r7, #176	@ 0xb0
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	42028000 	.word	0x42028000
 8001780:	44020c00 	.word	0x44020c00
 8001784:	42020000 	.word	0x42020000

08001788 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b0ac      	sub	sp, #176	@ 0xb0
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017a0:	f107 0310 	add.w	r3, r7, #16
 80017a4:	2288      	movs	r2, #136	@ 0x88
 80017a6:	2100      	movs	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f007 f805 	bl	80087b8 <memset>
  if(hspi->Instance==SPI1)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a31      	ldr	r2, [pc, #196]	@ (8001878 <HAL_SPI_MspInit+0xf0>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d15a      	bne.n	800186e <HAL_SPI_MspInit+0xe6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80017b8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 80017c4:	2300      	movs	r3, #0
 80017c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	4618      	mov	r0, r3
 80017ce:	f002 ff25 	bl	800461c <HAL_RCCEx_PeriphCLKConfig>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80017d8:	f7ff ff66 	bl	80016a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017dc:	4b27      	ldr	r3, [pc, #156]	@ (800187c <HAL_SPI_MspInit+0xf4>)
 80017de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80017e2:	4a26      	ldr	r2, [pc, #152]	@ (800187c <HAL_SPI_MspInit+0xf4>)
 80017e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017e8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80017ec:	4b23      	ldr	r3, [pc, #140]	@ (800187c <HAL_SPI_MspInit+0xf4>)
 80017ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80017f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	4b20      	ldr	r3, [pc, #128]	@ (800187c <HAL_SPI_MspInit+0xf4>)
 80017fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001800:	4a1e      	ldr	r2, [pc, #120]	@ (800187c <HAL_SPI_MspInit+0xf4>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800180a:	4b1c      	ldr	r3, [pc, #112]	@ (800187c <HAL_SPI_MspInit+0xf4>)
 800180c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA0     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA8     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 8001818:	f240 1301 	movw	r3, #257	@ 0x101
 800181c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SPI1;
 8001832:	230c      	movs	r3, #12
 8001834:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001838:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800183c:	4619      	mov	r1, r3
 800183e:	4810      	ldr	r0, [pc, #64]	@ (8001880 <HAL_SPI_MspInit+0xf8>)
 8001840:	f001 fe08 	bl	8003454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001844:	2380      	movs	r3, #128	@ 0x80
 8001846:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800185c:	2305      	movs	r3, #5
 800185e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001862:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001866:	4619      	mov	r1, r3
 8001868:	4805      	ldr	r0, [pc, #20]	@ (8001880 <HAL_SPI_MspInit+0xf8>)
 800186a:	f001 fdf3 	bl	8003454 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800186e:	bf00      	nop
 8001870:	37b0      	adds	r7, #176	@ 0xb0
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40013000 	.word	0x40013000
 800187c:	44020c00 	.word	0x44020c00
 8001880:	42020000 	.word	0x42020000

08001884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b0b0      	sub	sp, #192	@ 0xc0
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800189c:	f107 0320 	add.w	r3, r7, #32
 80018a0:	2288      	movs	r2, #136	@ 0x88
 80018a2:	2100      	movs	r1, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f006 ff87 	bl	80087b8 <memset>
  if(huart->Instance==USART2)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a5d      	ldr	r2, [pc, #372]	@ (8001a24 <HAL_UART_MspInit+0x1a0>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d169      	bne.n	8001988 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018b4:	f04f 0202 	mov.w	r2, #2
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018c4:	f107 0320 	add.w	r3, r7, #32
 80018c8:	4618      	mov	r0, r3
 80018ca:	f002 fea7 	bl	800461c <HAL_RCCEx_PeriphCLKConfig>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80018d4:	f7ff fee8 	bl	80016a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018d8:	4b53      	ldr	r3, [pc, #332]	@ (8001a28 <HAL_UART_MspInit+0x1a4>)
 80018da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80018de:	4a52      	ldr	r2, [pc, #328]	@ (8001a28 <HAL_UART_MspInit+0x1a4>)
 80018e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018e4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80018e8:	4b4f      	ldr	r3, [pc, #316]	@ (8001a28 <HAL_UART_MspInit+0x1a4>)
 80018ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80018ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f2:	61fb      	str	r3, [r7, #28]
 80018f4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	4b4c      	ldr	r3, [pc, #304]	@ (8001a28 <HAL_UART_MspInit+0x1a4>)
 80018f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018fc:	4a4a      	ldr	r2, [pc, #296]	@ (8001a28 <HAL_UART_MspInit+0x1a4>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001906:	4b48      	ldr	r3, [pc, #288]	@ (8001a28 <HAL_UART_MspInit+0x1a4>)
 8001908:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	61bb      	str	r3, [r7, #24]
 8001912:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001914:	4b44      	ldr	r3, [pc, #272]	@ (8001a28 <HAL_UART_MspInit+0x1a4>)
 8001916:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800191a:	4a43      	ldr	r2, [pc, #268]	@ (8001a28 <HAL_UART_MspInit+0x1a4>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001924:	4b40      	ldr	r3, [pc, #256]	@ (8001a28 <HAL_UART_MspInit+0x1a4>)
 8001926:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PB1     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001932:	2304      	movs	r3, #4
 8001934:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800194a:	2307      	movs	r3, #7
 800194c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001950:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001954:	4619      	mov	r1, r3
 8001956:	4835      	ldr	r0, [pc, #212]	@ (8001a2c <HAL_UART_MspInit+0x1a8>)
 8001958:	f001 fd7c 	bl	8003454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800195c:	2302      	movs	r3, #2
 800195e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	2300      	movs	r3, #0
 8001970:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_USART2;
 8001974:	2309      	movs	r3, #9
 8001976:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800197e:	4619      	mov	r1, r3
 8001980:	482b      	ldr	r0, [pc, #172]	@ (8001a30 <HAL_UART_MspInit+0x1ac>)
 8001982:	f001 fd67 	bl	8003454 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001986:	e049      	b.n	8001a1c <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART3)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a29      	ldr	r2, [pc, #164]	@ (8001a34 <HAL_UART_MspInit+0x1b0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d144      	bne.n	8001a1c <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001992:	f04f 0204 	mov.w	r2, #4
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800199e:	2300      	movs	r3, #0
 80019a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a2:	f107 0320 	add.w	r3, r7, #32
 80019a6:	4618      	mov	r0, r3
 80019a8:	f002 fe38 	bl	800461c <HAL_RCCEx_PeriphCLKConfig>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_UART_MspInit+0x132>
      Error_Handler();
 80019b2:	f7ff fe79 	bl	80016a8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a28 <HAL_UART_MspInit+0x1a4>)
 80019b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80019bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001a28 <HAL_UART_MspInit+0x1a4>)
 80019be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019c2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80019c6:	4b18      	ldr	r3, [pc, #96]	@ (8001a28 <HAL_UART_MspInit+0x1a4>)
 80019c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80019cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d4:	4b14      	ldr	r3, [pc, #80]	@ (8001a28 <HAL_UART_MspInit+0x1a4>)
 80019d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019da:	4a13      	ldr	r2, [pc, #76]	@ (8001a28 <HAL_UART_MspInit+0x1a4>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80019e4:	4b10      	ldr	r3, [pc, #64]	@ (8001a28 <HAL_UART_MspInit+0x1a4>)
 80019e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80019f2:	2318      	movs	r3, #24
 80019f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a04:	2300      	movs	r3, #0
 8001a06:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 8001a0a:	230d      	movs	r3, #13
 8001a0c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a10:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a14:	4619      	mov	r1, r3
 8001a16:	4805      	ldr	r0, [pc, #20]	@ (8001a2c <HAL_UART_MspInit+0x1a8>)
 8001a18:	f001 fd1c 	bl	8003454 <HAL_GPIO_Init>
}
 8001a1c:	bf00      	nop
 8001a1e:	37c0      	adds	r7, #192	@ 0xc0
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40004400 	.word	0x40004400
 8001a28:	44020c00 	.word	0x44020c00
 8001a2c:	42020000 	.word	0x42020000
 8001a30:	42020400 	.word	0x42020400
 8001a34:	40004800 	.word	0x40004800

08001a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <NMI_Handler+0x4>

08001a40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <HardFault_Handler+0x4>

08001a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <MemManage_Handler+0x4>

08001a50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <BusFault_Handler+0x4>

08001a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <UsageFault_Handler+0x4>

08001a60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a8e:	f000 fa03 	bl	8001e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  return 1;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <_kill>:

int _kill(int pid, int sig)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ab0:	f006 fed4 	bl	800885c <__errno>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2216      	movs	r2, #22
 8001ab8:	601a      	str	r2, [r3, #0]
  return -1;
 8001aba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <_exit>:

void _exit (int status)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ace:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffe7 	bl	8001aa6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ad8:	bf00      	nop
 8001ada:	e7fd      	b.n	8001ad8 <_exit+0x12>

08001adc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	e00a      	b.n	8001b04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aee:	f3af 8000 	nop.w
 8001af2:	4601      	mov	r1, r0
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	60ba      	str	r2, [r7, #8]
 8001afa:	b2ca      	uxtb	r2, r1
 8001afc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	3301      	adds	r3, #1
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	dbf0      	blt.n	8001aee <_read+0x12>
  }

  return len;
 8001b0c:	687b      	ldr	r3, [r7, #4]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b086      	sub	sp, #24
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	e009      	b.n	8001b3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	60ba      	str	r2, [r7, #8]
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fa7f 	bl	8001034 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	dbf1      	blt.n	8001b28 <_write+0x12>
  }
  return len;
 8001b44:	687b      	ldr	r3, [r7, #4]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <_close>:

int _close(int file)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b76:	605a      	str	r2, [r3, #4]
  return 0;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <_isatty>:

int _isatty(int file)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b8e:	2301      	movs	r3, #1
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc0:	4a14      	ldr	r2, [pc, #80]	@ (8001c14 <_sbrk+0x5c>)
 8001bc2:	4b15      	ldr	r3, [pc, #84]	@ (8001c18 <_sbrk+0x60>)
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bcc:	4b13      	ldr	r3, [pc, #76]	@ (8001c1c <_sbrk+0x64>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d102      	bne.n	8001bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <_sbrk+0x64>)
 8001bd6:	4a12      	ldr	r2, [pc, #72]	@ (8001c20 <_sbrk+0x68>)
 8001bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bda:	4b10      	ldr	r3, [pc, #64]	@ (8001c1c <_sbrk+0x64>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d207      	bcs.n	8001bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be8:	f006 fe38 	bl	800885c <__errno>
 8001bec:	4603      	mov	r3, r0
 8001bee:	220c      	movs	r2, #12
 8001bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf6:	e009      	b.n	8001c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf8:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <_sbrk+0x64>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bfe:	4b07      	ldr	r3, [pc, #28]	@ (8001c1c <_sbrk+0x64>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	4a05      	ldr	r2, [pc, #20]	@ (8001c1c <_sbrk+0x64>)
 8001c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20008000 	.word	0x20008000
 8001c18:	00000400 	.word	0x00000400
 8001c1c:	20000504 	.word	0x20000504
 8001c20:	20000658 	.word	0x20000658

08001c24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c2a:	4b30      	ldr	r3, [pc, #192]	@ (8001cec <SystemInit+0xc8>)
 8001c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c30:	4a2e      	ldr	r2, [pc, #184]	@ (8001cec <SystemInit+0xc8>)
 8001c32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c36:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf0 <SystemInit+0xcc>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001c40:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf0 <SystemInit+0xcc>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001c46:	4b2a      	ldr	r3, [pc, #168]	@ (8001cf0 <SystemInit+0xcc>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001c4c:	4b28      	ldr	r3, [pc, #160]	@ (8001cf0 <SystemInit+0xcc>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4927      	ldr	r1, [pc, #156]	@ (8001cf0 <SystemInit+0xcc>)
 8001c52:	4b28      	ldr	r3, [pc, #160]	@ (8001cf4 <SystemInit+0xd0>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001c58:	4b25      	ldr	r3, [pc, #148]	@ (8001cf0 <SystemInit+0xcc>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001c5e:	4b24      	ldr	r3, [pc, #144]	@ (8001cf0 <SystemInit+0xcc>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001c64:	4b22      	ldr	r3, [pc, #136]	@ (8001cf0 <SystemInit+0xcc>)
 8001c66:	4a24      	ldr	r2, [pc, #144]	@ (8001cf8 <SystemInit+0xd4>)
 8001c68:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001c6a:	4b21      	ldr	r3, [pc, #132]	@ (8001cf0 <SystemInit+0xcc>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001c70:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf0 <SystemInit+0xcc>)
 8001c72:	4a21      	ldr	r2, [pc, #132]	@ (8001cf8 <SystemInit+0xd4>)
 8001c74:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001c76:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf0 <SystemInit+0xcc>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf0 <SystemInit+0xcc>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a1b      	ldr	r2, [pc, #108]	@ (8001cf0 <SystemInit+0xcc>)
 8001c82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c86:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001c88:	4b19      	ldr	r3, [pc, #100]	@ (8001cf0 <SystemInit+0xcc>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c8e:	4b17      	ldr	r3, [pc, #92]	@ (8001cec <SystemInit+0xc8>)
 8001c90:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c94:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001c96:	4b19      	ldr	r3, [pc, #100]	@ (8001cfc <SystemInit+0xd8>)
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001c9e:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001ca6:	d003      	beq.n	8001cb0 <SystemInit+0x8c>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001cae:	d117      	bne.n	8001ce0 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001cb0:	4b12      	ldr	r3, [pc, #72]	@ (8001cfc <SystemInit+0xd8>)
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001cfc <SystemInit+0xd8>)
 8001cbe:	4a10      	ldr	r2, [pc, #64]	@ (8001d00 <SystemInit+0xdc>)
 8001cc0:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cfc <SystemInit+0xd8>)
 8001cc4:	4a0f      	ldr	r2, [pc, #60]	@ (8001d04 <SystemInit+0xe0>)
 8001cc6:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cfc <SystemInit+0xd8>)
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	4a0b      	ldr	r2, [pc, #44]	@ (8001cfc <SystemInit+0xd8>)
 8001cce:	f043 0302 	orr.w	r3, r3, #2
 8001cd2:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001cd4:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <SystemInit+0xd8>)
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	4a08      	ldr	r2, [pc, #32]	@ (8001cfc <SystemInit+0xd8>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	61d3      	str	r3, [r2, #28]
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000ed00 	.word	0xe000ed00
 8001cf0:	44020c00 	.word	0x44020c00
 8001cf4:	fae2eae3 	.word	0xfae2eae3
 8001cf8:	01010280 	.word	0x01010280
 8001cfc:	40022000 	.word	0x40022000
 8001d00:	08192a3b 	.word	0x08192a3b
 8001d04:	4c5d6e7f 	.word	0x4c5d6e7f

08001d08 <Reset_Handler>:
 8001d08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d40 <LoopForever+0x2>
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	e003      	b.n	8001d18 <LoopCopyDataInit>

08001d10 <CopyDataInit>:
 8001d10:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <LoopForever+0x6>)
 8001d12:	585b      	ldr	r3, [r3, r1]
 8001d14:	5043      	str	r3, [r0, r1]
 8001d16:	3104      	adds	r1, #4

08001d18 <LoopCopyDataInit>:
 8001d18:	480b      	ldr	r0, [pc, #44]	@ (8001d48 <LoopForever+0xa>)
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d4c <LoopForever+0xe>)
 8001d1c:	1842      	adds	r2, r0, r1
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d3f6      	bcc.n	8001d10 <CopyDataInit>
 8001d22:	4a0b      	ldr	r2, [pc, #44]	@ (8001d50 <LoopForever+0x12>)
 8001d24:	e002      	b.n	8001d2c <LoopFillZerobss>

08001d26 <FillZerobss>:
 8001d26:	2300      	movs	r3, #0
 8001d28:	f842 3b04 	str.w	r3, [r2], #4

08001d2c <LoopFillZerobss>:
 8001d2c:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <LoopForever+0x16>)
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d3f9      	bcc.n	8001d26 <FillZerobss>
 8001d32:	f7ff ff77 	bl	8001c24 <SystemInit>
 8001d36:	f006 fd97 	bl	8008868 <__libc_init_array>
 8001d3a:	f7ff f98d 	bl	8001058 <main>

08001d3e <LoopForever>:
 8001d3e:	e7fe      	b.n	8001d3e <LoopForever>
 8001d40:	20008000 	.word	0x20008000
 8001d44:	0800c328 	.word	0x0800c328
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	200001d4 	.word	0x200001d4
 8001d50:	200001d4 	.word	0x200001d4
 8001d54:	20000658 	.word	0x20000658

08001d58 <ADC1_IRQHandler>:
 8001d58:	e7fe      	b.n	8001d58 <ADC1_IRQHandler>
	...

08001d5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d60:	2003      	movs	r0, #3
 8001d62:	f001 f8d4 	bl	8002f0e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001d66:	f002 facf 	bl	8004308 <HAL_RCC_GetSysClockFreq>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <HAL_Init+0x44>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	f003 030f 	and.w	r3, r3, #15
 8001d74:	490b      	ldr	r1, [pc, #44]	@ (8001da4 <HAL_Init+0x48>)
 8001d76:	5ccb      	ldrb	r3, [r1, r3]
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001da8 <HAL_Init+0x4c>)
 8001d7e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001d80:	2004      	movs	r0, #4
 8001d82:	f001 f919 	bl	8002fb8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d86:	200f      	movs	r0, #15
 8001d88:	f000 f810 	bl	8001dac <HAL_InitTick>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e002      	b.n	8001d9c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d96:	f7ff fc8d 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	44020c00 	.word	0x44020c00
 8001da4:	0800bea8 	.word	0x0800bea8
 8001da8:	20000000 	.word	0x20000000

08001dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001db8:	4b33      	ldr	r3, [pc, #204]	@ (8001e88 <HAL_InitTick+0xdc>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e05c      	b.n	8001e7e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001dc4:	4b31      	ldr	r3, [pc, #196]	@ (8001e8c <HAL_InitTick+0xe0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d10c      	bne.n	8001dea <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001dd0:	4b2f      	ldr	r3, [pc, #188]	@ (8001e90 <HAL_InitTick+0xe4>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b2c      	ldr	r3, [pc, #176]	@ (8001e88 <HAL_InitTick+0xdc>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	e037      	b.n	8001e5a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001dea:	f001 f93d 	bl	8003068 <HAL_SYSTICK_GetCLKSourceConfig>
 8001dee:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d023      	beq.n	8001e3e <HAL_InitTick+0x92>
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d82d      	bhi.n	8001e58 <HAL_InitTick+0xac>
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_InitTick+0x5e>
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d00d      	beq.n	8001e24 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001e08:	e026      	b.n	8001e58 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001e0a:	4b21      	ldr	r3, [pc, #132]	@ (8001e90 <HAL_InitTick+0xe4>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e88 <HAL_InitTick+0xdc>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	4619      	mov	r1, r3
 8001e14:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001e18:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e20:	60fb      	str	r3, [r7, #12]
        break;
 8001e22:	e01a      	b.n	8001e5a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001e24:	4b18      	ldr	r3, [pc, #96]	@ (8001e88 <HAL_InitTick+0xdc>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e32:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3a:	60fb      	str	r3, [r7, #12]
        break;
 8001e3c:	e00d      	b.n	8001e5a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001e3e:	4b12      	ldr	r3, [pc, #72]	@ (8001e88 <HAL_InitTick+0xdc>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e48:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e4c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e54:	60fb      	str	r3, [r7, #12]
        break;
 8001e56:	e000      	b.n	8001e5a <HAL_InitTick+0xae>
        break;
 8001e58:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f001 f88a 	bl	8002f74 <HAL_SYSTICK_Config>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e009      	b.n	8001e7e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e72:	f001 f857 	bl	8002f24 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001e76:	4a07      	ldr	r2, [pc, #28]	@ (8001e94 <HAL_InitTick+0xe8>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000008 	.word	0x20000008
 8001e8c:	e000e010 	.word	0xe000e010
 8001e90:	20000000 	.word	0x20000000
 8001e94:	20000004 	.word	0x20000004

08001e98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e9c:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <HAL_IncTick+0x20>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <HAL_IncTick+0x24>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	4a04      	ldr	r2, [pc, #16]	@ (8001ebc <HAL_IncTick+0x24>)
 8001eaa:	6013      	str	r3, [r2, #0]
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	20000008 	.word	0x20000008
 8001ebc:	20000508 	.word	0x20000508

08001ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec4:	4b03      	ldr	r3, [pc, #12]	@ (8001ed4 <HAL_GetTick+0x14>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20000508 	.word	0x20000508

08001ed8 <HAL_SBS_EnableVddIO1CompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.
  * @retval None
  */
void HAL_SBS_EnableVddIO1CompensationCell(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  SET_BIT(SBS->CCCSR, SBS_CCCSR_EN1) ;
 8001edc:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <HAL_SBS_EnableVddIO1CompensationCell+0x20>)
 8001ede:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8001ee2:	4a05      	ldr	r2, [pc, #20]	@ (8001ef8 <HAL_SBS_EnableVddIO1CompensationCell+0x20>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	44000400 	.word	0x44000400

08001efc <HAL_SBS_EnableVddIO2CompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.
  * @retval None
  */
void HAL_SBS_EnableVddIO2CompensationCell(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  SET_BIT(SBS->CCCSR, SBS_CCCSR_EN2) ;
 8001f00:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <HAL_SBS_EnableVddIO2CompensationCell+0x20>)
 8001f02:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8001f06:	4a05      	ldr	r2, [pc, #20]	@ (8001f1c <HAL_SBS_EnableVddIO2CompensationCell+0x20>)
 8001f08:	f043 0304 	orr.w	r3, r3, #4
 8001f0c:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	44000400 	.word	0x44000400

08001f20 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	609a      	str	r2, [r3, #8]
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP1       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP1);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8001f96:	f043 0202 	orr.w	r2, r3, #2
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 8001fb4:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8001fb6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8001fba:	4a05      	ldr	r2, [pc, #20]	@ (8001fd0 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	42028000 	.word	0x42028000

08001fd4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b087      	sub	sp, #28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	3360      	adds	r3, #96	@ 0x60
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b08      	ldr	r3, [pc, #32]	@ (8002018 <LL_ADC_SetOffset+0x44>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	4313      	orrs	r3, r2
 8002004:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800200c:	bf00      	nop
 800200e:	371c      	adds	r7, #28
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	03fff000 	.word	0x03fff000

0800201c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3360      	adds	r3, #96	@ 0x60
 800202a:	461a      	mov	r2, r3
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800203c:	4618      	mov	r0, r3
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002048:	b480      	push	{r7}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	3360      	adds	r3, #96	@ 0x60
 8002058:	461a      	mov	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	431a      	orrs	r2, r3
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002072:	bf00      	nop
 8002074:	371c      	adds	r7, #28
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800207e:	b480      	push	{r7}
 8002080:	b087      	sub	sp, #28
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	3360      	adds	r3, #96	@ 0x60
 800208e:	461a      	mov	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	431a      	orrs	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80020a8:	bf00      	nop
 80020aa:	371c      	adds	r7, #28
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	3360      	adds	r3, #96	@ 0x60
 80020c4:	461a      	mov	r2, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	431a      	orrs	r2, r3
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80020de:	bf00      	nop
 80020e0:	371c      	adds	r7, #28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	615a      	str	r2, [r3, #20]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	3330      	adds	r3, #48	@ 0x30
 8002120:	461a      	mov	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	f003 030c 	and.w	r3, r3, #12
 800212c:	4413      	add	r3, r2
 800212e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f003 031f 	and.w	r3, r3, #31
 800213a:	211f      	movs	r1, #31
 800213c:	fa01 f303 	lsl.w	r3, r1, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	401a      	ands	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	0e9b      	lsrs	r3, r3, #26
 8002148:	f003 011f 	and.w	r1, r3, #31
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	431a      	orrs	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800215c:	bf00      	nop
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	3314      	adds	r3, #20
 8002178:	461a      	mov	r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	0e5b      	lsrs	r3, r3, #25
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	4413      	add	r3, r2
 8002186:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	0d1b      	lsrs	r3, r3, #20
 8002190:	f003 031f 	and.w	r3, r3, #31
 8002194:	2107      	movs	r1, #7
 8002196:	fa01 f303 	lsl.w	r3, r1, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	401a      	ands	r2, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	0d1b      	lsrs	r3, r3, #20
 80021a2:	f003 031f 	and.w	r3, r3, #31
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ac:	431a      	orrs	r2, r3
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021b2:	bf00      	nop
 80021b4:	371c      	adds	r7, #28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021d8:	43db      	mvns	r3, r3
 80021da:	401a      	ands	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f003 0318 	and.w	r3, r3, #24
 80021e2:	4908      	ldr	r1, [pc, #32]	@ (8002204 <LL_ADC_SetChannelSingleDiff+0x44>)
 80021e4:	40d9      	lsrs	r1, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	400b      	ands	r3, r1
 80021ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021ee:	431a      	orrs	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	000fffff 	.word	0x000fffff

08002208 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002218:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6093      	str	r3, [r2, #8]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800223c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002240:	d101      	bne.n	8002246 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002264:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002268:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800228c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002290:	d101      	bne.n	8002296 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <LL_ADC_IsEnabled+0x18>
 80022b8:	2301      	movs	r3, #1
 80022ba:	e000      	b.n	80022be <LL_ADC_IsEnabled+0x1a>
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d101      	bne.n	80022e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b08      	cmp	r3, #8
 8002302:	d101      	bne.n	8002308 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e131      	b.n	8002596 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233c:	2b00      	cmp	r3, #0
 800233e:	d109      	bne.n	8002354 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff f9bf 	bl	80016c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff67 	bl	800222c <LL_ADC_IsDeepPowerDownEnabled>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d004      	beq.n	800236e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff4d 	bl	8002208 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff ff82 	bl	800227c <LL_ADC_IsInternalRegulatorEnabled>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d115      	bne.n	80023aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ff66 	bl	8002254 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002388:	4b85      	ldr	r3, [pc, #532]	@ (80025a0 <HAL_ADC_Init+0x288>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	099b      	lsrs	r3, r3, #6
 800238e:	4a85      	ldr	r2, [pc, #532]	@ (80025a4 <HAL_ADC_Init+0x28c>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	099b      	lsrs	r3, r3, #6
 8002396:	3301      	adds	r3, #1
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800239c:	e002      	b.n	80023a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f9      	bne.n	800239e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff ff64 	bl	800227c <LL_ADC_IsInternalRegulatorEnabled>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10d      	bne.n	80023d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023be:	f043 0210 	orr.w	r2, r3, #16
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ca:	f043 0201 	orr.w	r2, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff ff75 	bl	80022ca <LL_ADC_REG_IsConversionOngoing>
 80023e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f040 80ca 	bne.w	8002584 <HAL_ADC_Init+0x26c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f040 80c6 	bne.w	8002584 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002400:	f043 0202 	orr.w	r2, r3, #2
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff49 	bl	80022a4 <LL_ADC_IsEnabled>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10b      	bne.n	8002430 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002418:	4863      	ldr	r0, [pc, #396]	@ (80025a8 <HAL_ADC_Init+0x290>)
 800241a:	f7ff ff43 	bl	80022a4 <LL_ADC_IsEnabled>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d105      	bne.n	8002430 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	4619      	mov	r1, r3
 800242a:	4860      	ldr	r0, [pc, #384]	@ (80025ac <HAL_ADC_Init+0x294>)
 800242c:	f7ff fd78 	bl	8001f20 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	7e5b      	ldrb	r3, [r3, #25]
 8002434:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800243a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002440:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002446:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800244e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 3020 	ldrb.w	r3, [r3, #32]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d106      	bne.n	800246c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002462:	3b01      	subs	r3, #1
 8002464:	045b      	lsls	r3, r3, #17
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002470:	2b00      	cmp	r3, #0
 8002472:	d009      	beq.n	8002488 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002478:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002480:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	4b48      	ldr	r3, [pc, #288]	@ (80025b0 <HAL_ADC_Init+0x298>)
 8002490:	4013      	ands	r3, r2
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	69b9      	ldr	r1, [r7, #24]
 8002498:	430b      	orrs	r3, r1
 800249a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff ff1a 	bl	80022f0 <LL_ADC_INJ_IsConversionOngoing>
 80024bc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d13d      	bne.n	8002540 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d13a      	bne.n	8002540 <HAL_ADC_Init+0x228>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	7e1b      	ldrb	r3, [r3, #24]
 80024ce:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80024d6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80024e6:	f023 0302 	bic.w	r3, r3, #2
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	69b9      	ldr	r1, [r7, #24]
 80024f0:	430b      	orrs	r3, r1
 80024f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d118      	bne.n	8002530 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002508:	f023 0304 	bic.w	r3, r3, #4
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002514:	4311      	orrs	r1, r2
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800251a:	4311      	orrs	r1, r2
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002520:	430a      	orrs	r2, r1
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 0201 	orr.w	r2, r2, #1
 800252c:	611a      	str	r2, [r3, #16]
 800252e:	e007      	b.n	8002540 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691a      	ldr	r2, [r3, #16]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0201 	bic.w	r2, r2, #1
 800253e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d10c      	bne.n	8002562 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	f023 010f 	bic.w	r1, r3, #15
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	1e5a      	subs	r2, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002560:	e007      	b.n	8002572 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 020f 	bic.w	r2, r2, #15
 8002570:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002576:	f023 0303 	bic.w	r3, r3, #3
 800257a:	f043 0201 	orr.w	r2, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	659a      	str	r2, [r3, #88]	@ 0x58
 8002582:	e007      	b.n	8002594 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002588:	f043 0210 	orr.w	r2, r3, #16
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002594:	7ffb      	ldrb	r3, [r7, #31]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3720      	adds	r7, #32
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000000 	.word	0x20000000
 80025a4:	053e2d63 	.word	0x053e2d63
 80025a8:	42028000 	.word	0x42028000
 80025ac:	42028300 	.word	0x42028300
 80025b0:	fff04007 	.word	0xfff04007

080025b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b0b6      	sub	sp, #216	@ 0xd8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x22>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e3d8      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x7d4>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fe71 	bl	80022ca <LL_ADC_REG_IsConversionOngoing>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f040 83bd 	bne.w	8002d6a <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d104      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fcd5 	bl	8001fac <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	6859      	ldr	r1, [r3, #4]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	f7ff fd7e 	bl	8002110 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fe56 	bl	80022ca <LL_ADC_REG_IsConversionOngoing>
 800261e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fe62 	bl	80022f0 <LL_ADC_INJ_IsConversionOngoing>
 800262c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002630:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002634:	2b00      	cmp	r3, #0
 8002636:	f040 81d9 	bne.w	80029ec <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800263a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800263e:	2b00      	cmp	r3, #0
 8002640:	f040 81d4 	bne.w	80029ec <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800264c:	d10f      	bne.n	800266e <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2200      	movs	r2, #0
 8002658:	4619      	mov	r1, r3
 800265a:	f7ff fd85 	bl	8002168 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fd3f 	bl	80020ea <LL_ADC_SetSamplingTimeCommonConfig>
 800266c:	e00e      	b.n	800268c <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6819      	ldr	r1, [r3, #0]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	461a      	mov	r2, r3
 800267c:	f7ff fd74 	bl	8002168 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2100      	movs	r1, #0
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fd2f 	bl	80020ea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	08db      	lsrs	r3, r3, #3
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d022      	beq.n	80026f4 <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	6919      	ldr	r1, [r3, #16]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80026be:	f7ff fc89 	bl	8001fd4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	6919      	ldr	r1, [r3, #16]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	461a      	mov	r2, r3
 80026d0:	f7ff fcd5 	bl	800207e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d102      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x136>
 80026e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026e8:	e000      	b.n	80026ec <HAL_ADC_ConfigChannel+0x138>
 80026ea:	2300      	movs	r3, #0
 80026ec:	461a      	mov	r2, r3
 80026ee:	f7ff fce1 	bl	80020b4 <LL_ADC_SetOffsetSaturation>
 80026f2:	e17b      	b.n	80029ec <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2100      	movs	r1, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fc8e 	bl	800201c <LL_ADC_GetOffsetChannel>
 8002700:	4603      	mov	r3, r0
 8002702:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10a      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x16c>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2100      	movs	r1, #0
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fc83 	bl	800201c <LL_ADC_GetOffsetChannel>
 8002716:	4603      	mov	r3, r0
 8002718:	0e9b      	lsrs	r3, r3, #26
 800271a:	f003 021f 	and.w	r2, r3, #31
 800271e:	e01e      	b.n	800275e <HAL_ADC_ConfigChannel+0x1aa>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2100      	movs	r1, #0
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff fc78 	bl	800201c <LL_ADC_GetOffsetChannel>
 800272c:	4603      	mov	r3, r0
 800272e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002732:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002736:	fa93 f3a3 	rbit	r3, r3
 800273a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 800273e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002742:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 8002746:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 800274e:	2320      	movs	r3, #32
 8002750:	e004      	b.n	800275c <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 8002752:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002756:	fab3 f383 	clz	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002766:	2b00      	cmp	r3, #0
 8002768:	d105      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x1c2>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	0e9b      	lsrs	r3, r3, #26
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	e018      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x1f4>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002782:	fa93 f3a3 	rbit	r3, r3
 8002786:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800278a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800278e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002792:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 800279a:	2320      	movs	r3, #32
 800279c:	e004      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 800279e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80027a2:	fab3 f383 	clz	r3, r3
 80027a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d106      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2200      	movs	r2, #0
 80027b2:	2100      	movs	r1, #0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fc47 	bl	8002048 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2101      	movs	r1, #1
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fc2b 	bl	800201c <LL_ADC_GetOffsetChannel>
 80027c6:	4603      	mov	r3, r0
 80027c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10a      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x232>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2101      	movs	r1, #1
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fc20 	bl	800201c <LL_ADC_GetOffsetChannel>
 80027dc:	4603      	mov	r3, r0
 80027de:	0e9b      	lsrs	r3, r3, #26
 80027e0:	f003 021f 	and.w	r2, r3, #31
 80027e4:	e01e      	b.n	8002824 <HAL_ADC_ConfigChannel+0x270>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2101      	movs	r1, #1
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fc15 	bl	800201c <LL_ADC_GetOffsetChannel>
 80027f2:	4603      	mov	r3, r0
 80027f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002804:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002808:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800280c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 8002814:	2320      	movs	r3, #32
 8002816:	e004      	b.n	8002822 <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 8002818:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800281c:	fab3 f383 	clz	r3, r3
 8002820:	b2db      	uxtb	r3, r3
 8002822:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800282c:	2b00      	cmp	r3, #0
 800282e:	d105      	bne.n	800283c <HAL_ADC_ConfigChannel+0x288>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	0e9b      	lsrs	r3, r3, #26
 8002836:	f003 031f 	and.w	r3, r3, #31
 800283a:	e018      	b.n	800286e <HAL_ADC_ConfigChannel+0x2ba>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002850:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002854:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002858:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 8002860:	2320      	movs	r3, #32
 8002862:	e004      	b.n	800286e <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 8002864:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002868:	fab3 f383 	clz	r3, r3
 800286c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800286e:	429a      	cmp	r2, r3
 8002870:	d106      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2200      	movs	r2, #0
 8002878:	2101      	movs	r1, #1
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fbe4 	bl	8002048 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2102      	movs	r1, #2
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff fbc8 	bl	800201c <LL_ADC_GetOffsetChannel>
 800288c:	4603      	mov	r3, r0
 800288e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10a      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x2f8>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2102      	movs	r1, #2
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fbbd 	bl	800201c <LL_ADC_GetOffsetChannel>
 80028a2:	4603      	mov	r3, r0
 80028a4:	0e9b      	lsrs	r3, r3, #26
 80028a6:	f003 021f 	and.w	r2, r3, #31
 80028aa:	e01e      	b.n	80028ea <HAL_ADC_ConfigChannel+0x336>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2102      	movs	r1, #2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fbb2 	bl	800201c <LL_ADC_GetOffsetChannel>
 80028b8:	4603      	mov	r3, r0
 80028ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80028ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80028d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 80028da:	2320      	movs	r3, #32
 80028dc:	e004      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 80028de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028e2:	fab3 f383 	clz	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d105      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x34e>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	0e9b      	lsrs	r3, r3, #26
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	e016      	b.n	8002930 <HAL_ADC_ConfigChannel+0x37c>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002914:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002916:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800291a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 8002922:	2320      	movs	r3, #32
 8002924:	e004      	b.n	8002930 <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 8002926:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800292a:	fab3 f383 	clz	r3, r3
 800292e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002930:	429a      	cmp	r2, r3
 8002932:	d106      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2200      	movs	r2, #0
 800293a:	2102      	movs	r1, #2
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fb83 	bl	8002048 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2103      	movs	r1, #3
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff fb67 	bl	800201c <LL_ADC_GetOffsetChannel>
 800294e:	4603      	mov	r3, r0
 8002950:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10a      	bne.n	800296e <HAL_ADC_ConfigChannel+0x3ba>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2103      	movs	r1, #3
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff fb5c 	bl	800201c <LL_ADC_GetOffsetChannel>
 8002964:	4603      	mov	r3, r0
 8002966:	0e9b      	lsrs	r3, r3, #26
 8002968:	f003 021f 	and.w	r2, r3, #31
 800296c:	e017      	b.n	800299e <HAL_ADC_ConfigChannel+0x3ea>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2103      	movs	r1, #3
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fb51 	bl	800201c <LL_ADC_GetOffsetChannel>
 800297a:	4603      	mov	r3, r0
 800297c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002986:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002988:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800298a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 8002990:	2320      	movs	r3, #32
 8002992:	e003      	b.n	800299c <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 8002994:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d105      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x402>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	0e9b      	lsrs	r3, r3, #26
 80029b0:	f003 031f 	and.w	r3, r3, #31
 80029b4:	e011      	b.n	80029da <HAL_ADC_ConfigChannel+0x426>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80029c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80029c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 80029ce:	2320      	movs	r3, #32
 80029d0:	e003      	b.n	80029da <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 80029d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029d4:	fab3 f383 	clz	r3, r3
 80029d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029da:	429a      	cmp	r2, r3
 80029dc:	d106      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2200      	movs	r2, #0
 80029e4:	2103      	movs	r1, #3
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fb2e 	bl	8002048 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff fc57 	bl	80022a4 <LL_ADC_IsEnabled>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f040 813f 	bne.w	8002c7c <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	6819      	ldr	r1, [r3, #0]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	f7ff fbd8 	bl	80021c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4a8e      	ldr	r2, [pc, #568]	@ (8002c50 <HAL_ADC_ConfigChannel+0x69c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	f040 8130 	bne.w	8002c7c <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10b      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x490>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	0e9b      	lsrs	r3, r3, #26
 8002a32:	3301      	adds	r3, #1
 8002a34:	f003 031f 	and.w	r3, r3, #31
 8002a38:	2b09      	cmp	r3, #9
 8002a3a:	bf94      	ite	ls
 8002a3c:	2301      	movls	r3, #1
 8002a3e:	2300      	movhi	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	e019      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x4c4>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a4c:	fa93 f3a3 	rbit	r3, r3
 8002a50:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002a52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a54:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002a56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002a5c:	2320      	movs	r3, #32
 8002a5e:	e003      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002a60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a62:	fab3 f383 	clz	r3, r3
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	3301      	adds	r3, #1
 8002a6a:	f003 031f 	and.w	r3, r3, #31
 8002a6e:	2b09      	cmp	r3, #9
 8002a70:	bf94      	ite	ls
 8002a72:	2301      	movls	r3, #1
 8002a74:	2300      	movhi	r3, #0
 8002a76:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d079      	beq.n	8002b70 <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d107      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x4e4>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	0e9b      	lsrs	r3, r3, #26
 8002a8e:	3301      	adds	r3, #1
 8002a90:	069b      	lsls	r3, r3, #26
 8002a92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a96:	e015      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0x510>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002aa0:	fa93 f3a3 	rbit	r3, r3
 8002aa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002aa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002aa8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 8002ab0:	2320      	movs	r3, #32
 8002ab2:	e003      	b.n	8002abc <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 8002ab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ab6:	fab3 f383 	clz	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	3301      	adds	r3, #1
 8002abe:	069b      	lsls	r3, r3, #26
 8002ac0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d109      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x530>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	0e9b      	lsrs	r3, r3, #26
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	f003 031f 	and.w	r3, r3, #31
 8002adc:	2101      	movs	r1, #1
 8002ade:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae2:	e017      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x560>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aec:	fa93 f3a3 	rbit	r3, r3
 8002af0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002af2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002af4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002af6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 8002afc:	2320      	movs	r3, #32
 8002afe:	e003      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 8002b00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b02:	fab3 f383 	clz	r3, r3
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	3301      	adds	r3, #1
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	2101      	movs	r1, #1
 8002b10:	fa01 f303 	lsl.w	r3, r1, r3
 8002b14:	ea42 0103 	orr.w	r1, r2, r3
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10a      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x586>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	0e9b      	lsrs	r3, r3, #26
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	f003 021f 	and.w	r2, r3, #31
 8002b30:	4613      	mov	r3, r2
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4413      	add	r3, r2
 8002b36:	051b      	lsls	r3, r3, #20
 8002b38:	e018      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x5b8>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b42:	fa93 f3a3 	rbit	r3, r3
 8002b46:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002b4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 8002b52:	2320      	movs	r3, #32
 8002b54:	e003      	b.n	8002b5e <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 8002b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b58:	fab3 f383 	clz	r3, r3
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	3301      	adds	r3, #1
 8002b60:	f003 021f 	and.w	r2, r3, #31
 8002b64:	4613      	mov	r3, r2
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	4413      	add	r3, r2
 8002b6a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	e080      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d107      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x5d8>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	0e9b      	lsrs	r3, r3, #26
 8002b82:	3301      	adds	r3, #1
 8002b84:	069b      	lsls	r3, r3, #26
 8002b86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b8a:	e015      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x604>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b94:	fa93 f3a3 	rbit	r3, r3
 8002b98:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b9c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 8002ba4:	2320      	movs	r3, #32
 8002ba6:	e003      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002baa:	fab3 f383 	clz	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	069b      	lsls	r3, r3, #26
 8002bb4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d109      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x624>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	0e9b      	lsrs	r3, r3, #26
 8002bca:	3301      	adds	r3, #1
 8002bcc:	f003 031f 	and.w	r3, r3, #31
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd6:	e017      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x654>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	61fb      	str	r3, [r7, #28]
  return result;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 8002bf0:	2320      	movs	r3, #32
 8002bf2:	e003      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf6:	fab3 f383 	clz	r3, r3
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f003 031f 	and.w	r3, r3, #31
 8002c02:	2101      	movs	r1, #1
 8002c04:	fa01 f303 	lsl.w	r3, r1, r3
 8002c08:	ea42 0103 	orr.w	r1, r2, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10d      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x680>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	0e9b      	lsrs	r3, r3, #26
 8002c1e:	3301      	adds	r3, #1
 8002c20:	f003 021f 	and.w	r2, r3, #31
 8002c24:	4613      	mov	r3, r2
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	4413      	add	r3, r2
 8002c2a:	3b1e      	subs	r3, #30
 8002c2c:	051b      	lsls	r3, r3, #20
 8002c2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c32:	e01d      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x6bc>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	fa93 f3a3 	rbit	r3, r3
 8002c40:	613b      	str	r3, [r7, #16]
  return result;
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d103      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8002c4c:	2320      	movs	r3, #32
 8002c4e:	e005      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x6a8>
 8002c50:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	fab3 f383 	clz	r3, r3
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	f003 021f 	and.w	r2, r3, #31
 8002c62:	4613      	mov	r3, r2
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	4413      	add	r3, r2
 8002c68:	3b1e      	subs	r3, #30
 8002c6a:	051b      	lsls	r3, r3, #20
 8002c6c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c70:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c76:	4619      	mov	r1, r3
 8002c78:	f7ff fa76 	bl	8002168 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	4b43      	ldr	r3, [pc, #268]	@ (8002d90 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d079      	beq.n	8002d7c <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c88:	4842      	ldr	r0, [pc, #264]	@ (8002d94 <HAL_ADC_ConfigChannel+0x7e0>)
 8002c8a:	f7ff f96f 	bl	8001f6c <LL_ADC_GetCommonPathInternalCh>
 8002c8e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a40      	ldr	r2, [pc, #256]	@ (8002d98 <HAL_ADC_ConfigChannel+0x7e4>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d124      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ca0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d11e      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a3b      	ldr	r2, [pc, #236]	@ (8002d9c <HAL_ADC_ConfigChannel+0x7e8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d164      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cb6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4835      	ldr	r0, [pc, #212]	@ (8002d94 <HAL_ADC_ConfigChannel+0x7e0>)
 8002cbe:	f7ff f942 	bl	8001f46 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cc2:	4b37      	ldr	r3, [pc, #220]	@ (8002da0 <HAL_ADC_ConfigChannel+0x7ec>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	099b      	lsrs	r3, r3, #6
 8002cc8:	4a36      	ldr	r2, [pc, #216]	@ (8002da4 <HAL_ADC_ConfigChannel+0x7f0>)
 8002cca:	fba2 2303 	umull	r2, r3, r2, r3
 8002cce:	099b      	lsrs	r3, r3, #6
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cd6:	e002      	b.n	8002cde <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1f9      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ce4:	e04a      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a2f      	ldr	r2, [pc, #188]	@ (8002da8 <HAL_ADC_ConfigChannel+0x7f4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d113      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cf4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10d      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a26      	ldr	r2, [pc, #152]	@ (8002d9c <HAL_ADC_ConfigChannel+0x7e8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d13a      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4820      	ldr	r0, [pc, #128]	@ (8002d94 <HAL_ADC_ConfigChannel+0x7e0>)
 8002d12:	f7ff f918 	bl	8001f46 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d16:	e031      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a23      	ldr	r2, [pc, #140]	@ (8002dac <HAL_ADC_ConfigChannel+0x7f8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d113      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10d      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a1a      	ldr	r2, [pc, #104]	@ (8002d9c <HAL_ADC_ConfigChannel+0x7e8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d121      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d3c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d40:	4619      	mov	r1, r3
 8002d42:	4814      	ldr	r0, [pc, #80]	@ (8002d94 <HAL_ADC_ConfigChannel+0x7e0>)
 8002d44:	f7ff f8ff 	bl	8001f46 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d48:	e018      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a18      	ldr	r2, [pc, #96]	@ (8002db0 <HAL_ADC_ConfigChannel+0x7fc>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d113      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a10      	ldr	r2, [pc, #64]	@ (8002d9c <HAL_ADC_ConfigChannel+0x7e8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00e      	beq.n	8002d7c <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff f910 	bl	8001f88 <LL_ADC_EnableChannelVDDcore>
 8002d68:	e008      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d6e:	f043 0220 	orr.w	r2, r3, #32
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002d84:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	37d8      	adds	r7, #216	@ 0xd8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	80080000 	.word	0x80080000
 8002d94:	42028300 	.word	0x42028300
 8002d98:	c3210000 	.word	0xc3210000
 8002d9c:	42028000 	.word	0x42028000
 8002da0:	20000000 	.word	0x20000000
 8002da4:	053e2d63 	.word	0x053e2d63
 8002da8:	88600004 	.word	0x88600004
 8002dac:	c7520000 	.word	0xc7520000
 8002db0:	99200040 	.word	0x99200040

08002db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002df8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ddc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002de6:	4a04      	ldr	r2, [pc, #16]	@ (8002df8 <__NVIC_SetPriorityGrouping+0x44>)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	60d3      	str	r3, [r2, #12]
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e00:	4b04      	ldr	r3, [pc, #16]	@ (8002e14 <__NVIC_GetPriorityGrouping+0x18>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	0a1b      	lsrs	r3, r3, #8
 8002e06:	f003 0307 	and.w	r3, r3, #7
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	db0b      	blt.n	8002e42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	f003 021f 	and.w	r2, r3, #31
 8002e30:	4907      	ldr	r1, [pc, #28]	@ (8002e50 <__NVIC_EnableIRQ+0x38>)
 8002e32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	2001      	movs	r0, #1
 8002e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	e000e100 	.word	0xe000e100

08002e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	6039      	str	r1, [r7, #0]
 8002e5e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	db0a      	blt.n	8002e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	490c      	ldr	r1, [pc, #48]	@ (8002ea0 <__NVIC_SetPriority+0x4c>)
 8002e6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e72:	0112      	lsls	r2, r2, #4
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	440b      	add	r3, r1
 8002e78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e7c:	e00a      	b.n	8002e94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	4908      	ldr	r1, [pc, #32]	@ (8002ea4 <__NVIC_SetPriority+0x50>)
 8002e84:	88fb      	ldrh	r3, [r7, #6]
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	3b04      	subs	r3, #4
 8002e8c:	0112      	lsls	r2, r2, #4
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	440b      	add	r3, r1
 8002e92:	761a      	strb	r2, [r3, #24]
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	e000e100 	.word	0xe000e100
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b089      	sub	sp, #36	@ 0x24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f1c3 0307 	rsb	r3, r3, #7
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	bf28      	it	cs
 8002ec6:	2304      	movcs	r3, #4
 8002ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	2b06      	cmp	r3, #6
 8002ed0:	d902      	bls.n	8002ed8 <NVIC_EncodePriority+0x30>
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3b03      	subs	r3, #3
 8002ed6:	e000      	b.n	8002eda <NVIC_EncodePriority+0x32>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002edc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	401a      	ands	r2, r3
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8002efa:	43d9      	mvns	r1, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f00:	4313      	orrs	r3, r2
         );
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3724      	adds	r7, #36	@ 0x24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff ff4c 	bl	8002db4 <__NVIC_SetPriorityGrouping>
}
 8002f1c:	bf00      	nop
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
 8002f30:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f32:	f7ff ff63 	bl	8002dfc <__NVIC_GetPriorityGrouping>
 8002f36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	68b9      	ldr	r1, [r7, #8]
 8002f3c:	6978      	ldr	r0, [r7, #20]
 8002f3e:	f7ff ffb3 	bl	8002ea8 <NVIC_EncodePriority>
 8002f42:	4602      	mov	r2, r0
 8002f44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff ff82 	bl	8002e54 <__NVIC_SetPriority>
}
 8002f50:	bf00      	nop
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff ff56 	bl	8002e18 <__NVIC_EnableIRQ>
}
 8002f6c:	bf00      	nop
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f84:	d301      	bcc.n	8002f8a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002f86:	2301      	movs	r3, #1
 8002f88:	e00d      	b.n	8002fa6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb4 <HAL_SYSTICK_Config+0x40>)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002f92:	4b08      	ldr	r3, [pc, #32]	@ (8002fb4 <HAL_SYSTICK_Config+0x40>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002f98:	4b06      	ldr	r3, [pc, #24]	@ (8002fb4 <HAL_SYSTICK_Config+0x40>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a05      	ldr	r2, [pc, #20]	@ (8002fb4 <HAL_SYSTICK_Config+0x40>)
 8002f9e:	f043 0303 	orr.w	r3, r3, #3
 8002fa2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	e000e010 	.word	0xe000e010

08002fb8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d844      	bhi.n	8003050 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8002fcc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fcc:	08002fef 	.word	0x08002fef
 8002fd0:	0800300d 	.word	0x0800300d
 8002fd4:	0800302f 	.word	0x0800302f
 8002fd8:	08003051 	.word	0x08003051
 8002fdc:	08002fe1 	.word	0x08002fe1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8003060 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a1e      	ldr	r2, [pc, #120]	@ (8003060 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002fe6:	f043 0304 	orr.w	r3, r3, #4
 8002fea:	6013      	str	r3, [r2, #0]
      break;
 8002fec:	e031      	b.n	8003052 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002fee:	4b1c      	ldr	r3, [pc, #112]	@ (8003060 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a1b      	ldr	r2, [pc, #108]	@ (8003060 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002ff4:	f023 0304 	bic.w	r3, r3, #4
 8002ff8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8002ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8003064 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002ffc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003000:	4a18      	ldr	r2, [pc, #96]	@ (8003064 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003002:	f023 030c 	bic.w	r3, r3, #12
 8003006:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800300a:	e022      	b.n	8003052 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800300c:	4b14      	ldr	r3, [pc, #80]	@ (8003060 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a13      	ldr	r2, [pc, #76]	@ (8003060 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003012:	f023 0304 	bic.w	r3, r3, #4
 8003016:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8003018:	4b12      	ldr	r3, [pc, #72]	@ (8003064 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800301a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800301e:	f023 030c 	bic.w	r3, r3, #12
 8003022:	4a10      	ldr	r2, [pc, #64]	@ (8003064 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003024:	f043 0304 	orr.w	r3, r3, #4
 8003028:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800302c:	e011      	b.n	8003052 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800302e:	4b0c      	ldr	r3, [pc, #48]	@ (8003060 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a0b      	ldr	r2, [pc, #44]	@ (8003060 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003034:	f023 0304 	bic.w	r3, r3, #4
 8003038:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800303a:	4b0a      	ldr	r3, [pc, #40]	@ (8003064 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800303c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003040:	f023 030c 	bic.w	r3, r3, #12
 8003044:	4a07      	ldr	r2, [pc, #28]	@ (8003064 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003046:	f043 0308 	orr.w	r3, r3, #8
 800304a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800304e:	e000      	b.n	8003052 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003050:	bf00      	nop
  }
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	e000e010 	.word	0xe000e010
 8003064:	44020c00 	.word	0x44020c00

08003068 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800306e:	4b17      	ldr	r3, [pc, #92]	@ (80030cc <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800307a:	2304      	movs	r3, #4
 800307c:	607b      	str	r3, [r7, #4]
 800307e:	e01e      	b.n	80030be <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8003080:	4b13      	ldr	r3, [pc, #76]	@ (80030d0 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8003082:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003086:	f003 030c 	and.w	r3, r3, #12
 800308a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2b08      	cmp	r3, #8
 8003090:	d00f      	beq.n	80030b2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b08      	cmp	r3, #8
 8003096:	d80f      	bhi.n	80030b8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d003      	beq.n	80030ac <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80030a4:	e008      	b.n	80030b8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80030a6:	2300      	movs	r3, #0
 80030a8:	607b      	str	r3, [r7, #4]
        break;
 80030aa:	e008      	b.n	80030be <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80030ac:	2301      	movs	r3, #1
 80030ae:	607b      	str	r3, [r7, #4]
        break;
 80030b0:	e005      	b.n	80030be <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80030b2:	2302      	movs	r3, #2
 80030b4:	607b      	str	r3, [r7, #4]
        break;
 80030b6:	e002      	b.n	80030be <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80030b8:	2300      	movs	r3, #0
 80030ba:	607b      	str	r3, [r7, #4]
        break;
 80030bc:	bf00      	nop
    }
  }
  return systick_source;
 80030be:	687b      	ldr	r3, [r7, #4]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	e000e010 	.word	0xe000e010
 80030d0:	44020c00 	.word	0x44020c00

080030d4 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e02b      	b.n	8003140 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80030f0:	f023 030f 	bic.w	r3, r3, #15
 80030f4:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030fe:	3b50      	subs	r3, #80	@ 0x50
 8003100:	09db      	lsrs	r3, r3, #7
 8003102:	f003 031f 	and.w	r3, r3, #31
 8003106:	2201      	movs	r2, #1
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b00      	cmp	r3, #0
 8003116:	d012      	beq.n	800313e <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	f003 0311 	and.w	r3, r3, #17
 800311e:	2b11      	cmp	r3, #17
 8003120:	d106      	bne.n	8003130 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	431a      	orrs	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	e006      	b.n	800313e <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	43db      	mvns	r3, r3
 8003138:	401a      	ands	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003154:	f7fe feb4 	bl	8001ec0 <HAL_GetTick>
 8003158:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e085      	b.n	8003270 <HAL_DMAEx_List_Init+0x124>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a43      	ldr	r2, [pc, #268]	@ (8003278 <HAL_DMAEx_List_Init+0x12c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d049      	beq.n	8003202 <HAL_DMAEx_List_Init+0xb6>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a42      	ldr	r2, [pc, #264]	@ (800327c <HAL_DMAEx_List_Init+0x130>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d044      	beq.n	8003202 <HAL_DMAEx_List_Init+0xb6>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a40      	ldr	r2, [pc, #256]	@ (8003280 <HAL_DMAEx_List_Init+0x134>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d03f      	beq.n	8003202 <HAL_DMAEx_List_Init+0xb6>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a3f      	ldr	r2, [pc, #252]	@ (8003284 <HAL_DMAEx_List_Init+0x138>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d03a      	beq.n	8003202 <HAL_DMAEx_List_Init+0xb6>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a3d      	ldr	r2, [pc, #244]	@ (8003288 <HAL_DMAEx_List_Init+0x13c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d035      	beq.n	8003202 <HAL_DMAEx_List_Init+0xb6>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a3c      	ldr	r2, [pc, #240]	@ (800328c <HAL_DMAEx_List_Init+0x140>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d030      	beq.n	8003202 <HAL_DMAEx_List_Init+0xb6>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a3a      	ldr	r2, [pc, #232]	@ (8003290 <HAL_DMAEx_List_Init+0x144>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d02b      	beq.n	8003202 <HAL_DMAEx_List_Init+0xb6>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a39      	ldr	r2, [pc, #228]	@ (8003294 <HAL_DMAEx_List_Init+0x148>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d026      	beq.n	8003202 <HAL_DMAEx_List_Init+0xb6>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a37      	ldr	r2, [pc, #220]	@ (8003298 <HAL_DMAEx_List_Init+0x14c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d021      	beq.n	8003202 <HAL_DMAEx_List_Init+0xb6>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a36      	ldr	r2, [pc, #216]	@ (800329c <HAL_DMAEx_List_Init+0x150>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d01c      	beq.n	8003202 <HAL_DMAEx_List_Init+0xb6>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a34      	ldr	r2, [pc, #208]	@ (80032a0 <HAL_DMAEx_List_Init+0x154>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d017      	beq.n	8003202 <HAL_DMAEx_List_Init+0xb6>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a33      	ldr	r2, [pc, #204]	@ (80032a4 <HAL_DMAEx_List_Init+0x158>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d012      	beq.n	8003202 <HAL_DMAEx_List_Init+0xb6>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a31      	ldr	r2, [pc, #196]	@ (80032a8 <HAL_DMAEx_List_Init+0x15c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00d      	beq.n	8003202 <HAL_DMAEx_List_Init+0xb6>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a30      	ldr	r2, [pc, #192]	@ (80032ac <HAL_DMAEx_List_Init+0x160>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d008      	beq.n	8003202 <HAL_DMAEx_List_Init+0xb6>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a2e      	ldr	r2, [pc, #184]	@ (80032b0 <HAL_DMAEx_List_Init+0x164>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d003      	beq.n	8003202 <HAL_DMAEx_List_Init+0xb6>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a2d      	ldr	r2, [pc, #180]	@ (80032b4 <HAL_DMAEx_List_Init+0x168>)
 8003200:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2202      	movs	r2, #2
 800320e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695a      	ldr	r2, [r3, #20]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0206 	orr.w	r2, r2, #6
 8003220:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003222:	e00f      	b.n	8003244 <HAL_DMAEx_List_Init+0xf8>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003224:	f7fe fe4c 	bl	8001ec0 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b05      	cmp	r3, #5
 8003230:	d908      	bls.n	8003244 <HAL_DMAEx_List_Init+0xf8>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2210      	movs	r2, #16
 8003236:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2203      	movs	r2, #3
 800323c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e015      	b.n	8003270 <HAL_DMAEx_List_Init+0x124>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1e8      	bne.n	8003224 <HAL_DMAEx_List_Init+0xd8>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f830 	bl	80032b8 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40020050 	.word	0x40020050
 800327c:	400200d0 	.word	0x400200d0
 8003280:	40020150 	.word	0x40020150
 8003284:	400201d0 	.word	0x400201d0
 8003288:	40020250 	.word	0x40020250
 800328c:	400202d0 	.word	0x400202d0
 8003290:	40020350 	.word	0x40020350
 8003294:	400203d0 	.word	0x400203d0
 8003298:	40021050 	.word	0x40021050
 800329c:	400210d0 	.word	0x400210d0
 80032a0:	40021150 	.word	0x40021150
 80032a4:	400211d0 	.word	0x400211d0
 80032a8:	40021250 	.word	0x40021250
 80032ac:	400212d0 	.word	0x400212d0
 80032b0:	40021350 	.word	0x40021350
 80032b4:	400213d0 	.word	0x400213d0

080032b8 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a50      	ldr	r2, [pc, #320]	@ (8003414 <DMA_List_Init+0x15c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d04a      	beq.n	800336c <DMA_List_Init+0xb4>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a4f      	ldr	r2, [pc, #316]	@ (8003418 <DMA_List_Init+0x160>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d045      	beq.n	800336c <DMA_List_Init+0xb4>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a4d      	ldr	r2, [pc, #308]	@ (800341c <DMA_List_Init+0x164>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d040      	beq.n	800336c <DMA_List_Init+0xb4>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a4c      	ldr	r2, [pc, #304]	@ (8003420 <DMA_List_Init+0x168>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d03b      	beq.n	800336c <DMA_List_Init+0xb4>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a4a      	ldr	r2, [pc, #296]	@ (8003424 <DMA_List_Init+0x16c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d036      	beq.n	800336c <DMA_List_Init+0xb4>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a49      	ldr	r2, [pc, #292]	@ (8003428 <DMA_List_Init+0x170>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d031      	beq.n	800336c <DMA_List_Init+0xb4>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a47      	ldr	r2, [pc, #284]	@ (800342c <DMA_List_Init+0x174>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d02c      	beq.n	800336c <DMA_List_Init+0xb4>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a46      	ldr	r2, [pc, #280]	@ (8003430 <DMA_List_Init+0x178>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d027      	beq.n	800336c <DMA_List_Init+0xb4>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a44      	ldr	r2, [pc, #272]	@ (8003434 <DMA_List_Init+0x17c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d022      	beq.n	800336c <DMA_List_Init+0xb4>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a43      	ldr	r2, [pc, #268]	@ (8003438 <DMA_List_Init+0x180>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d01d      	beq.n	800336c <DMA_List_Init+0xb4>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a41      	ldr	r2, [pc, #260]	@ (800343c <DMA_List_Init+0x184>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d018      	beq.n	800336c <DMA_List_Init+0xb4>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a40      	ldr	r2, [pc, #256]	@ (8003440 <DMA_List_Init+0x188>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d013      	beq.n	800336c <DMA_List_Init+0xb4>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a3e      	ldr	r2, [pc, #248]	@ (8003444 <DMA_List_Init+0x18c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00e      	beq.n	800336c <DMA_List_Init+0xb4>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a3d      	ldr	r2, [pc, #244]	@ (8003448 <DMA_List_Init+0x190>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d009      	beq.n	800336c <DMA_List_Init+0xb4>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a3b      	ldr	r2, [pc, #236]	@ (800344c <DMA_List_Init+0x194>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d004      	beq.n	800336c <DMA_List_Init+0xb4>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a3a      	ldr	r2, [pc, #232]	@ (8003450 <DMA_List_Init+0x198>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d101      	bne.n	8003370 <DMA_List_Init+0xb8>
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <DMA_List_Init+0xba>
 8003370:	2300      	movs	r3, #0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d004      	beq.n	8003380 <DMA_List_Init+0xc8>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4313      	orrs	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	430a      	orrs	r2, r1
 8003392:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2200      	movs	r2, #0
 800339a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80033a4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2200      	movs	r2, #0
 80033ac:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2200      	movs	r2, #0
 80033b4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2200      	movs	r2, #0
 80033bc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a1a      	ldr	r2, [pc, #104]	@ (800342c <DMA_List_Init+0x174>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00e      	beq.n	80033e6 <DMA_List_Init+0x12e>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a18      	ldr	r2, [pc, #96]	@ (8003430 <DMA_List_Init+0x178>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d009      	beq.n	80033e6 <DMA_List_Init+0x12e>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a1d      	ldr	r2, [pc, #116]	@ (800344c <DMA_List_Init+0x194>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d004      	beq.n	80033e6 <DMA_List_Init+0x12e>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003450 <DMA_List_Init+0x198>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d101      	bne.n	80033ea <DMA_List_Init+0x132>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <DMA_List_Init+0x134>
 80033ea:	2300      	movs	r3, #0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d007      	beq.n	8003400 <DMA_List_Init+0x148>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2200      	movs	r2, #0
 80033f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2200      	movs	r2, #0
 80033fe:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2200      	movs	r2, #0
 8003406:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003408:	bf00      	nop
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	40020050 	.word	0x40020050
 8003418:	400200d0 	.word	0x400200d0
 800341c:	40020150 	.word	0x40020150
 8003420:	400201d0 	.word	0x400201d0
 8003424:	40020250 	.word	0x40020250
 8003428:	400202d0 	.word	0x400202d0
 800342c:	40020350 	.word	0x40020350
 8003430:	400203d0 	.word	0x400203d0
 8003434:	40021050 	.word	0x40021050
 8003438:	400210d0 	.word	0x400210d0
 800343c:	40021150 	.word	0x40021150
 8003440:	400211d0 	.word	0x400211d0
 8003444:	40021250 	.word	0x40021250
 8003448:	400212d0 	.word	0x400212d0
 800344c:	40021350 	.word	0x40021350
 8003450:	400213d0 	.word	0x400213d0

08003454 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003462:	e136      	b.n	80036d2 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	2101      	movs	r1, #1
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	fa01 f303 	lsl.w	r3, r1, r3
 8003470:	4013      	ands	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 8128 	beq.w	80036cc <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d003      	beq.n	800348c <HAL_GPIO_Init+0x38>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b12      	cmp	r3, #18
 800348a:	d125      	bne.n	80034d8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	08da      	lsrs	r2, r3, #3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3208      	adds	r2, #8
 8003494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003498:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	220f      	movs	r2, #15
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4013      	ands	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	f003 020f 	and.w	r2, r3, #15
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	08da      	lsrs	r2, r3, #3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3208      	adds	r2, #8
 80034d2:	6979      	ldr	r1, [r7, #20]
 80034d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	2203      	movs	r2, #3
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4013      	ands	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0203 	and.w	r2, r3, #3
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	4313      	orrs	r3, r2
 8003504:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d00b      	beq.n	800352c <HAL_GPIO_Init+0xd8>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d007      	beq.n	800352c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003520:	2b11      	cmp	r3, #17
 8003522:	d003      	beq.n	800352c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b12      	cmp	r3, #18
 800352a:	d130      	bne.n	800358e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	2203      	movs	r2, #3
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	4013      	ands	r3, r2
 8003542:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003562:	2201      	movs	r2, #1
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43db      	mvns	r3, r3
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	4013      	ands	r3, r2
 8003570:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	091b      	lsrs	r3, r3, #4
 8003578:	f003 0201 	and.w	r2, r3, #1
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4313      	orrs	r3, r2
 8003586:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b03      	cmp	r3, #3
 8003594:	d017      	beq.n	80035c6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	2203      	movs	r2, #3
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43db      	mvns	r3, r3
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	4013      	ands	r3, r2
 80035ac:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d07c      	beq.n	80036cc <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80035d2:	4a47      	ldr	r2, [pc, #284]	@ (80036f0 <HAL_GPIO_Init+0x29c>)
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	089b      	lsrs	r3, r3, #2
 80035d8:	3318      	adds	r3, #24
 80035da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035de:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	220f      	movs	r2, #15
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43db      	mvns	r3, r3
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4013      	ands	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	0a9a      	lsrs	r2, r3, #10
 80035fa:	4b3e      	ldr	r3, [pc, #248]	@ (80036f4 <HAL_GPIO_Init+0x2a0>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	f002 0203 	and.w	r2, r2, #3
 8003604:	00d2      	lsls	r2, r2, #3
 8003606:	4093      	lsls	r3, r2
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	4313      	orrs	r3, r2
 800360c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800360e:	4938      	ldr	r1, [pc, #224]	@ (80036f0 <HAL_GPIO_Init+0x29c>)
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	089b      	lsrs	r3, r3, #2
 8003614:	3318      	adds	r3, #24
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800361c:	4b34      	ldr	r3, [pc, #208]	@ (80036f0 <HAL_GPIO_Init+0x29c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	43db      	mvns	r3, r3
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	4013      	ands	r3, r2
 800362a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003640:	4a2b      	ldr	r2, [pc, #172]	@ (80036f0 <HAL_GPIO_Init+0x29c>)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003646:	4b2a      	ldr	r3, [pc, #168]	@ (80036f0 <HAL_GPIO_Init+0x29c>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	43db      	mvns	r3, r3
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	4013      	ands	r3, r2
 8003654:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800366a:	4a21      	ldr	r2, [pc, #132]	@ (80036f0 <HAL_GPIO_Init+0x29c>)
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003670:	4b1f      	ldr	r3, [pc, #124]	@ (80036f0 <HAL_GPIO_Init+0x29c>)
 8003672:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003676:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	43db      	mvns	r3, r3
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	4013      	ands	r3, r2
 8003680:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003696:	4a16      	ldr	r2, [pc, #88]	@ (80036f0 <HAL_GPIO_Init+0x29c>)
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800369e:	4b14      	ldr	r3, [pc, #80]	@ (80036f0 <HAL_GPIO_Init+0x29c>)
 80036a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036a4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	43db      	mvns	r3, r3
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	4013      	ands	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80036c4:	4a0a      	ldr	r2, [pc, #40]	@ (80036f0 <HAL_GPIO_Init+0x29c>)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	3301      	adds	r3, #1
 80036d0:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f47f aec1 	bne.w	8003464 <HAL_GPIO_Init+0x10>
  }
}
 80036e2:	bf00      	nop
 80036e4:	bf00      	nop
 80036e6:	371c      	adds	r7, #28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	44022000 	.word	0x44022000
 80036f4:	002f7f7f 	.word	0x002f7f7f

080036f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	807b      	strh	r3, [r7, #2]
 8003704:	4613      	mov	r3, r2
 8003706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003708:	787b      	ldrb	r3, [r7, #1]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800370e:	887a      	ldrh	r2, [r7, #2]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003714:	e002      	b.n	800371c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003716:	887a      	ldrh	r2, [r7, #2]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d102      	bne.n	800373c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	f000 bc28 	b.w	8003f8c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800373c:	4b94      	ldr	r3, [pc, #592]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	f003 0318 	and.w	r3, r3, #24
 8003744:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003746:	4b92      	ldr	r3, [pc, #584]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 8003748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0310 	and.w	r3, r3, #16
 8003758:	2b00      	cmp	r3, #0
 800375a:	d05b      	beq.n	8003814 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	2b08      	cmp	r3, #8
 8003760:	d005      	beq.n	800376e <HAL_RCC_OscConfig+0x46>
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	2b18      	cmp	r3, #24
 8003766:	d114      	bne.n	8003792 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d111      	bne.n	8003792 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d102      	bne.n	800377c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	f000 bc08 	b.w	8003f8c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800377c:	4b84      	ldr	r3, [pc, #528]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	041b      	lsls	r3, r3, #16
 800378a:	4981      	ldr	r1, [pc, #516]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 800378c:	4313      	orrs	r3, r2
 800378e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003790:	e040      	b.n	8003814 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d023      	beq.n	80037e2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800379a:	4b7d      	ldr	r3, [pc, #500]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a7c      	ldr	r2, [pc, #496]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 80037a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a6:	f7fe fb8b 	bl	8001ec0 <HAL_GetTick>
 80037aa:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80037ae:	f7fe fb87 	bl	8001ec0 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e3e5      	b.n	8003f8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80037c0:	4b73      	ldr	r3, [pc, #460]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f0      	beq.n	80037ae <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80037cc:	4b70      	ldr	r3, [pc, #448]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	041b      	lsls	r3, r3, #16
 80037da:	496d      	ldr	r1, [pc, #436]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	618b      	str	r3, [r1, #24]
 80037e0:	e018      	b.n	8003814 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80037e2:	4b6b      	ldr	r3, [pc, #428]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a6a      	ldr	r2, [pc, #424]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 80037e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ee:	f7fe fb67 	bl	8001ec0 <HAL_GetTick>
 80037f2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80037f6:	f7fe fb63 	bl	8001ec0 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e3c1      	b.n	8003f8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003808:	4b61      	ldr	r3, [pc, #388]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1f0      	bne.n	80037f6 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 80a0 	beq.w	8003962 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	2b10      	cmp	r3, #16
 8003826:	d005      	beq.n	8003834 <HAL_RCC_OscConfig+0x10c>
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	2b18      	cmp	r3, #24
 800382c:	d109      	bne.n	8003842 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	2b03      	cmp	r3, #3
 8003832:	d106      	bne.n	8003842 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	f040 8092 	bne.w	8003962 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e3a4      	b.n	8003f8c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800384a:	d106      	bne.n	800385a <HAL_RCC_OscConfig+0x132>
 800384c:	4b50      	ldr	r3, [pc, #320]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a4f      	ldr	r2, [pc, #316]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 8003852:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003856:	6013      	str	r3, [r2, #0]
 8003858:	e058      	b.n	800390c <HAL_RCC_OscConfig+0x1e4>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d112      	bne.n	8003888 <HAL_RCC_OscConfig+0x160>
 8003862:	4b4b      	ldr	r3, [pc, #300]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a4a      	ldr	r2, [pc, #296]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 8003868:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	4b48      	ldr	r3, [pc, #288]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a47      	ldr	r2, [pc, #284]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 8003874:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	4b45      	ldr	r3, [pc, #276]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a44      	ldr	r2, [pc, #272]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 8003880:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	e041      	b.n	800390c <HAL_RCC_OscConfig+0x1e4>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003890:	d112      	bne.n	80038b8 <HAL_RCC_OscConfig+0x190>
 8003892:	4b3f      	ldr	r3, [pc, #252]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a3e      	ldr	r2, [pc, #248]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 8003898:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	4b3c      	ldr	r3, [pc, #240]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a3b      	ldr	r2, [pc, #236]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 80038a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	4b39      	ldr	r3, [pc, #228]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a38      	ldr	r2, [pc, #224]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 80038b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e029      	b.n	800390c <HAL_RCC_OscConfig+0x1e4>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80038c0:	d112      	bne.n	80038e8 <HAL_RCC_OscConfig+0x1c0>
 80038c2:	4b33      	ldr	r3, [pc, #204]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a32      	ldr	r2, [pc, #200]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 80038c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	4b30      	ldr	r3, [pc, #192]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a2f      	ldr	r2, [pc, #188]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 80038d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	4b2d      	ldr	r3, [pc, #180]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a2c      	ldr	r2, [pc, #176]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 80038e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	e011      	b.n	800390c <HAL_RCC_OscConfig+0x1e4>
 80038e8:	4b29      	ldr	r3, [pc, #164]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a28      	ldr	r2, [pc, #160]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 80038ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	4b26      	ldr	r3, [pc, #152]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a25      	ldr	r2, [pc, #148]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 80038fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	4b23      	ldr	r3, [pc, #140]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a22      	ldr	r2, [pc, #136]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 8003906:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800390a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d013      	beq.n	800393c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003914:	f7fe fad4 	bl	8001ec0 <HAL_GetTick>
 8003918:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800391c:	f7fe fad0 	bl	8001ec0 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b64      	cmp	r3, #100	@ 0x64
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e32e      	b.n	8003f8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800392e:	4b18      	ldr	r3, [pc, #96]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0x1f4>
 800393a:	e012      	b.n	8003962 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393c:	f7fe fac0 	bl	8001ec0 <HAL_GetTick>
 8003940:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003944:	f7fe fabc 	bl	8001ec0 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b64      	cmp	r3, #100	@ 0x64
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e31a      	b.n	8003f8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003956:	4b0e      	ldr	r3, [pc, #56]	@ (8003990 <HAL_RCC_OscConfig+0x268>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 809a 	beq.w	8003aa4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d005      	beq.n	8003982 <HAL_RCC_OscConfig+0x25a>
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	2b18      	cmp	r3, #24
 800397a:	d149      	bne.n	8003a10 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d146      	bne.n	8003a10 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d104      	bne.n	8003994 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e2fe      	b.n	8003f8c <HAL_RCC_OscConfig+0x864>
 800398e:	bf00      	nop
 8003990:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d11c      	bne.n	80039d4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800399a:	4b9a      	ldr	r3, [pc, #616]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0218 	and.w	r2, r3, #24
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d014      	beq.n	80039d4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80039aa:	4b96      	ldr	r3, [pc, #600]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f023 0218 	bic.w	r2, r3, #24
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	4993      	ldr	r1, [pc, #588]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80039bc:	f000 fdd0 	bl	8004560 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80039c0:	4b91      	ldr	r3, [pc, #580]	@ (8003c08 <HAL_RCC_OscConfig+0x4e0>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fe f9f1 	bl	8001dac <HAL_InitTick>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e2db      	b.n	8003f8c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d4:	f7fe fa74 	bl	8001ec0 <HAL_GetTick>
 80039d8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80039dc:	f7fe fa70 	bl	8001ec0 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e2ce      	b.n	8003f8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039ee:	4b85      	ldr	r3, [pc, #532]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f0      	beq.n	80039dc <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80039fa:	4b82      	ldr	r3, [pc, #520]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	041b      	lsls	r3, r3, #16
 8003a08:	497e      	ldr	r1, [pc, #504]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003a0e:	e049      	b.n	8003aa4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d02c      	beq.n	8003a72 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003a18:	4b7a      	ldr	r3, [pc, #488]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f023 0218 	bic.w	r2, r3, #24
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	4977      	ldr	r1, [pc, #476]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003a2a:	4b76      	ldr	r3, [pc, #472]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a75      	ldr	r2, [pc, #468]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a36:	f7fe fa43 	bl	8001ec0 <HAL_GetTick>
 8003a3a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003a3e:	f7fe fa3f 	bl	8001ec0 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e29d      	b.n	8003f8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a50:	4b6c      	ldr	r3, [pc, #432]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f0      	beq.n	8003a3e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003a5c:	4b69      	ldr	r3, [pc, #420]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	041b      	lsls	r3, r3, #16
 8003a6a:	4966      	ldr	r1, [pc, #408]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	610b      	str	r3, [r1, #16]
 8003a70:	e018      	b.n	8003aa4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a72:	4b64      	ldr	r3, [pc, #400]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a63      	ldr	r2, [pc, #396]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003a78:	f023 0301 	bic.w	r3, r3, #1
 8003a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7e:	f7fe fa1f 	bl	8001ec0 <HAL_GetTick>
 8003a82:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003a86:	f7fe fa1b 	bl	8001ec0 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e279      	b.n	8003f8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a98:	4b5a      	ldr	r3, [pc, #360]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1f0      	bne.n	8003a86 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d03c      	beq.n	8003b2a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d01c      	beq.n	8003af2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ab8:	4b52      	ldr	r3, [pc, #328]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003aba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003abe:	4a51      	ldr	r2, [pc, #324]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003ac0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ac4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac8:	f7fe f9fa 	bl	8001ec0 <HAL_GetTick>
 8003acc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003ad0:	f7fe f9f6 	bl	8001ec0 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e254      	b.n	8003f8c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003ae2:	4b48      	ldr	r3, [pc, #288]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003ae4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ae8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0ef      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x3a8>
 8003af0:	e01b      	b.n	8003b2a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003af2:	4b44      	ldr	r3, [pc, #272]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003af4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003af8:	4a42      	ldr	r2, [pc, #264]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003afa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003afe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b02:	f7fe f9dd 	bl	8001ec0 <HAL_GetTick>
 8003b06:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003b0a:	f7fe f9d9 	bl	8001ec0 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e237      	b.n	8003f8c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003b1c:	4b39      	ldr	r3, [pc, #228]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003b1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1ef      	bne.n	8003b0a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 80d2 	beq.w	8003cdc <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003b38:	4b34      	ldr	r3, [pc, #208]	@ (8003c0c <HAL_RCC_OscConfig+0x4e4>)
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d118      	bne.n	8003b76 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003b44:	4b31      	ldr	r3, [pc, #196]	@ (8003c0c <HAL_RCC_OscConfig+0x4e4>)
 8003b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b48:	4a30      	ldr	r2, [pc, #192]	@ (8003c0c <HAL_RCC_OscConfig+0x4e4>)
 8003b4a:	f043 0301 	orr.w	r3, r3, #1
 8003b4e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b50:	f7fe f9b6 	bl	8001ec0 <HAL_GetTick>
 8003b54:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b58:	f7fe f9b2 	bl	8001ec0 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e210      	b.n	8003f8c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003b6a:	4b28      	ldr	r3, [pc, #160]	@ (8003c0c <HAL_RCC_OscConfig+0x4e4>)
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f0      	beq.n	8003b58 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d108      	bne.n	8003b90 <HAL_RCC_OscConfig+0x468>
 8003b7e:	4b21      	ldr	r3, [pc, #132]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003b80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b84:	4a1f      	ldr	r2, [pc, #124]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b8e:	e074      	b.n	8003c7a <HAL_RCC_OscConfig+0x552>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d118      	bne.n	8003bca <HAL_RCC_OscConfig+0x4a2>
 8003b98:	4b1a      	ldr	r3, [pc, #104]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003b9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b9e:	4a19      	ldr	r2, [pc, #100]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003ba0:	f023 0301 	bic.w	r3, r3, #1
 8003ba4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ba8:	4b16      	ldr	r3, [pc, #88]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003baa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bae:	4a15      	ldr	r2, [pc, #84]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003bb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bb4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003bb8:	4b12      	ldr	r3, [pc, #72]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003bba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bbe:	4a11      	ldr	r2, [pc, #68]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003bc0:	f023 0304 	bic.w	r3, r3, #4
 8003bc4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003bc8:	e057      	b.n	8003c7a <HAL_RCC_OscConfig+0x552>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b05      	cmp	r3, #5
 8003bd0:	d11e      	bne.n	8003c10 <HAL_RCC_OscConfig+0x4e8>
 8003bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003bd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bd8:	4a0a      	ldr	r2, [pc, #40]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003bda:	f043 0304 	orr.w	r3, r3, #4
 8003bde:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003be2:	4b08      	ldr	r3, [pc, #32]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003be4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003be8:	4a06      	ldr	r2, [pc, #24]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003bea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003bf2:	4b04      	ldr	r3, [pc, #16]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003bf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bf8:	4a02      	ldr	r2, [pc, #8]	@ (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003c02:	e03a      	b.n	8003c7a <HAL_RCC_OscConfig+0x552>
 8003c04:	44020c00 	.word	0x44020c00
 8003c08:	20000004 	.word	0x20000004
 8003c0c:	44020800 	.word	0x44020800
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b85      	cmp	r3, #133	@ 0x85
 8003c16:	d118      	bne.n	8003c4a <HAL_RCC_OscConfig+0x522>
 8003c18:	4ba2      	ldr	r3, [pc, #648]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003c1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c1e:	4aa1      	ldr	r2, [pc, #644]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003c20:	f043 0304 	orr.w	r3, r3, #4
 8003c24:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003c28:	4b9e      	ldr	r3, [pc, #632]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003c2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c2e:	4a9d      	ldr	r2, [pc, #628]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c34:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003c38:	4b9a      	ldr	r3, [pc, #616]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003c3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c3e:	4a99      	ldr	r2, [pc, #612]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003c40:	f043 0301 	orr.w	r3, r3, #1
 8003c44:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003c48:	e017      	b.n	8003c7a <HAL_RCC_OscConfig+0x552>
 8003c4a:	4b96      	ldr	r3, [pc, #600]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003c4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c50:	4a94      	ldr	r2, [pc, #592]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003c52:	f023 0301 	bic.w	r3, r3, #1
 8003c56:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003c5a:	4b92      	ldr	r3, [pc, #584]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003c5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c60:	4a90      	ldr	r2, [pc, #576]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003c62:	f023 0304 	bic.w	r3, r3, #4
 8003c66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003c6a:	4b8e      	ldr	r3, [pc, #568]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003c6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c70:	4a8c      	ldr	r2, [pc, #560]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003c72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d016      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c82:	f7fe f91d 	bl	8001ec0 <HAL_GetTick>
 8003c86:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c88:	e00a      	b.n	8003ca0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c8a:	f7fe f919 	bl	8001ec0 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e175      	b.n	8003f8c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca0:	4b80      	ldr	r3, [pc, #512]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003ca2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0ed      	beq.n	8003c8a <HAL_RCC_OscConfig+0x562>
 8003cae:	e015      	b.n	8003cdc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb0:	f7fe f906 	bl	8001ec0 <HAL_GetTick>
 8003cb4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cb6:	e00a      	b.n	8003cce <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb8:	f7fe f902 	bl	8001ec0 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e15e      	b.n	8003f8c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cce:	4b75      	ldr	r3, [pc, #468]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003cd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1ed      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d036      	beq.n	8003d56 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d019      	beq.n	8003d24 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cf0:	4b6c      	ldr	r3, [pc, #432]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a6b      	ldr	r2, [pc, #428]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003cf6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003cfa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfc:	f7fe f8e0 	bl	8001ec0 <HAL_GetTick>
 8003d00:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003d04:	f7fe f8dc 	bl	8001ec0 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e13a      	b.n	8003f8c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003d16:	4b63      	ldr	r3, [pc, #396]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f0      	beq.n	8003d04 <HAL_RCC_OscConfig+0x5dc>
 8003d22:	e018      	b.n	8003d56 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d24:	4b5f      	ldr	r3, [pc, #380]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a5e      	ldr	r2, [pc, #376]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003d2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d30:	f7fe f8c6 	bl	8001ec0 <HAL_GetTick>
 8003d34:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003d38:	f7fe f8c2 	bl	8001ec0 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e120      	b.n	8003f8c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003d4a:	4b56      	ldr	r3, [pc, #344]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 8115 	beq.w	8003f8a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	2b18      	cmp	r3, #24
 8003d64:	f000 80af 	beq.w	8003ec6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	f040 8086 	bne.w	8003e7e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003d72:	4b4c      	ldr	r3, [pc, #304]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a4b      	ldr	r2, [pc, #300]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003d78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7e:	f7fe f89f 	bl	8001ec0 <HAL_GetTick>
 8003d82:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003d86:	f7fe f89b 	bl	8001ec0 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e0f9      	b.n	8003f8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003d98:	4b42      	ldr	r3, [pc, #264]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f0      	bne.n	8003d86 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003da4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003dac:	f023 0303 	bic.w	r3, r3, #3
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003db8:	0212      	lsls	r2, r2, #8
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	4939      	ldr	r1, [pc, #228]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	628b      	str	r3, [r1, #40]	@ 0x28
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	025b      	lsls	r3, r3, #9
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	041b      	lsls	r3, r3, #16
 8003de0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dea:	3b01      	subs	r3, #1
 8003dec:	061b      	lsls	r3, r3, #24
 8003dee:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003df2:	492c      	ldr	r1, [pc, #176]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003df8:	4b2a      	ldr	r3, [pc, #168]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfc:	4a29      	ldr	r2, [pc, #164]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003dfe:	f023 0310 	bic.w	r3, r3, #16
 8003e02:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e08:	4a26      	ldr	r2, [pc, #152]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003e0e:	4b25      	ldr	r3, [pc, #148]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e12:	4a24      	ldr	r2, [pc, #144]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003e14:	f043 0310 	orr.w	r3, r3, #16
 8003e18:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003e1a:	4b22      	ldr	r3, [pc, #136]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1e:	f023 020c 	bic.w	r2, r3, #12
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e26:	491f      	ldr	r1, [pc, #124]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e30:	f023 0220 	bic.w	r2, r3, #32
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e38:	491a      	ldr	r1, [pc, #104]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e3e:	4b19      	ldr	r3, [pc, #100]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e42:	4a18      	ldr	r2, [pc, #96]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e48:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003e4a:	4b16      	ldr	r3, [pc, #88]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a15      	ldr	r2, [pc, #84]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003e50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e56:	f7fe f833 	bl	8001ec0 <HAL_GetTick>
 8003e5a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003e5c:	e008      	b.n	8003e70 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003e5e:	f7fe f82f 	bl	8001ec0 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e08d      	b.n	8003f8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003e70:	4b0c      	ldr	r3, [pc, #48]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0f0      	beq.n	8003e5e <HAL_RCC_OscConfig+0x736>
 8003e7c:	e085      	b.n	8003f8a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003e7e:	4b09      	ldr	r3, [pc, #36]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a08      	ldr	r2, [pc, #32]	@ (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003e84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8a:	f7fe f819 	bl	8001ec0 <HAL_GetTick>
 8003e8e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003e90:	e00a      	b.n	8003ea8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003e92:	f7fe f815 	bl	8001ec0 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d903      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e073      	b.n	8003f8c <HAL_RCC_OscConfig+0x864>
 8003ea4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003ea8:	4b3a      	ldr	r3, [pc, #232]	@ (8003f94 <HAL_RCC_OscConfig+0x86c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1ee      	bne.n	8003e92 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003eb4:	4b37      	ldr	r3, [pc, #220]	@ (8003f94 <HAL_RCC_OscConfig+0x86c>)
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb8:	4a36      	ldr	r2, [pc, #216]	@ (8003f94 <HAL_RCC_OscConfig+0x86c>)
 8003eba:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003ebe:	f023 0303 	bic.w	r3, r3, #3
 8003ec2:	6293      	str	r3, [r2, #40]	@ 0x28
 8003ec4:	e061      	b.n	8003f8a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003ec6:	4b33      	ldr	r3, [pc, #204]	@ (8003f94 <HAL_RCC_OscConfig+0x86c>)
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eca:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003ecc:	4b31      	ldr	r3, [pc, #196]	@ (8003f94 <HAL_RCC_OscConfig+0x86c>)
 8003ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ed0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d031      	beq.n	8003f3e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	f003 0203 	and.w	r2, r3, #3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d12a      	bne.n	8003f3e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	0a1b      	lsrs	r3, r3, #8
 8003eec:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d122      	bne.n	8003f3e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f02:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d11a      	bne.n	8003f3e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	0a5b      	lsrs	r3, r3, #9
 8003f0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f14:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d111      	bne.n	8003f3e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f26:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d108      	bne.n	8003f3e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	0e1b      	lsrs	r3, r3, #24
 8003f30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f38:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d001      	beq.n	8003f42 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e024      	b.n	8003f8c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003f42:	4b14      	ldr	r3, [pc, #80]	@ (8003f94 <HAL_RCC_OscConfig+0x86c>)
 8003f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f46:	08db      	lsrs	r3, r3, #3
 8003f48:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d01a      	beq.n	8003f8a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003f54:	4b0f      	ldr	r3, [pc, #60]	@ (8003f94 <HAL_RCC_OscConfig+0x86c>)
 8003f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f58:	4a0e      	ldr	r2, [pc, #56]	@ (8003f94 <HAL_RCC_OscConfig+0x86c>)
 8003f5a:	f023 0310 	bic.w	r3, r3, #16
 8003f5e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f60:	f7fd ffae 	bl	8001ec0 <HAL_GetTick>
 8003f64:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003f66:	bf00      	nop
 8003f68:	f7fd ffaa 	bl	8001ec0 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d0f9      	beq.n	8003f68 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f78:	4a06      	ldr	r2, [pc, #24]	@ (8003f94 <HAL_RCC_OscConfig+0x86c>)
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003f7e:	4b05      	ldr	r3, [pc, #20]	@ (8003f94 <HAL_RCC_OscConfig+0x86c>)
 8003f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f82:	4a04      	ldr	r2, [pc, #16]	@ (8003f94 <HAL_RCC_OscConfig+0x86c>)
 8003f84:	f043 0310 	orr.w	r3, r3, #16
 8003f88:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3720      	adds	r7, #32
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	44020c00 	.word	0x44020c00

08003f98 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e19e      	b.n	80042ea <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fac:	4b83      	ldr	r3, [pc, #524]	@ (80041bc <HAL_RCC_ClockConfig+0x224>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 030f 	and.w	r3, r3, #15
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d910      	bls.n	8003fdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fba:	4b80      	ldr	r3, [pc, #512]	@ (80041bc <HAL_RCC_ClockConfig+0x224>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f023 020f 	bic.w	r2, r3, #15
 8003fc2:	497e      	ldr	r1, [pc, #504]	@ (80041bc <HAL_RCC_ClockConfig+0x224>)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fca:	4b7c      	ldr	r3, [pc, #496]	@ (80041bc <HAL_RCC_ClockConfig+0x224>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d001      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e186      	b.n	80042ea <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d012      	beq.n	800400e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	695a      	ldr	r2, [r3, #20]
 8003fec:	4b74      	ldr	r3, [pc, #464]	@ (80041c0 <HAL_RCC_ClockConfig+0x228>)
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	0a1b      	lsrs	r3, r3, #8
 8003ff2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d909      	bls.n	800400e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003ffa:	4b71      	ldr	r3, [pc, #452]	@ (80041c0 <HAL_RCC_ClockConfig+0x228>)
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	021b      	lsls	r3, r3, #8
 8004008:	496d      	ldr	r1, [pc, #436]	@ (80041c0 <HAL_RCC_ClockConfig+0x228>)
 800400a:	4313      	orrs	r3, r2
 800400c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d012      	beq.n	8004040 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691a      	ldr	r2, [r3, #16]
 800401e:	4b68      	ldr	r3, [pc, #416]	@ (80041c0 <HAL_RCC_ClockConfig+0x228>)
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	091b      	lsrs	r3, r3, #4
 8004024:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004028:	429a      	cmp	r2, r3
 800402a:	d909      	bls.n	8004040 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800402c:	4b64      	ldr	r3, [pc, #400]	@ (80041c0 <HAL_RCC_ClockConfig+0x228>)
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	4961      	ldr	r1, [pc, #388]	@ (80041c0 <HAL_RCC_ClockConfig+0x228>)
 800403c:	4313      	orrs	r3, r2
 800403e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	d010      	beq.n	800406e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	4b5b      	ldr	r3, [pc, #364]	@ (80041c0 <HAL_RCC_ClockConfig+0x228>)
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004058:	429a      	cmp	r2, r3
 800405a:	d908      	bls.n	800406e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800405c:	4b58      	ldr	r3, [pc, #352]	@ (80041c0 <HAL_RCC_ClockConfig+0x228>)
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	4955      	ldr	r1, [pc, #340]	@ (80041c0 <HAL_RCC_ClockConfig+0x228>)
 800406a:	4313      	orrs	r3, r2
 800406c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d010      	beq.n	800409c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	4b50      	ldr	r3, [pc, #320]	@ (80041c0 <HAL_RCC_ClockConfig+0x228>)
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	429a      	cmp	r2, r3
 8004088:	d908      	bls.n	800409c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800408a:	4b4d      	ldr	r3, [pc, #308]	@ (80041c0 <HAL_RCC_ClockConfig+0x228>)
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	f023 020f 	bic.w	r2, r3, #15
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	494a      	ldr	r1, [pc, #296]	@ (80041c0 <HAL_RCC_ClockConfig+0x228>)
 8004098:	4313      	orrs	r3, r2
 800409a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 8093 	beq.w	80041d0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d107      	bne.n	80040c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80040b2:	4b43      	ldr	r3, [pc, #268]	@ (80041c0 <HAL_RCC_ClockConfig+0x228>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d121      	bne.n	8004102 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e113      	b.n	80042ea <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d107      	bne.n	80040da <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ca:	4b3d      	ldr	r3, [pc, #244]	@ (80041c0 <HAL_RCC_ClockConfig+0x228>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d115      	bne.n	8004102 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e107      	b.n	80042ea <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d107      	bne.n	80040f2 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80040e2:	4b37      	ldr	r3, [pc, #220]	@ (80041c0 <HAL_RCC_ClockConfig+0x228>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d109      	bne.n	8004102 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e0fb      	b.n	80042ea <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040f2:	4b33      	ldr	r3, [pc, #204]	@ (80041c0 <HAL_RCC_ClockConfig+0x228>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e0f3      	b.n	80042ea <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004102:	4b2f      	ldr	r3, [pc, #188]	@ (80041c0 <HAL_RCC_ClockConfig+0x228>)
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f023 0203 	bic.w	r2, r3, #3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	492c      	ldr	r1, [pc, #176]	@ (80041c0 <HAL_RCC_ClockConfig+0x228>)
 8004110:	4313      	orrs	r3, r2
 8004112:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004114:	f7fd fed4 	bl	8001ec0 <HAL_GetTick>
 8004118:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b03      	cmp	r3, #3
 8004120:	d112      	bne.n	8004148 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004122:	e00a      	b.n	800413a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004124:	f7fd fecc 	bl	8001ec0 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004132:	4293      	cmp	r3, r2
 8004134:	d901      	bls.n	800413a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e0d7      	b.n	80042ea <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800413a:	4b21      	ldr	r3, [pc, #132]	@ (80041c0 <HAL_RCC_ClockConfig+0x228>)
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f003 0318 	and.w	r3, r3, #24
 8004142:	2b18      	cmp	r3, #24
 8004144:	d1ee      	bne.n	8004124 <HAL_RCC_ClockConfig+0x18c>
 8004146:	e043      	b.n	80041d0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b02      	cmp	r3, #2
 800414e:	d112      	bne.n	8004176 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004150:	e00a      	b.n	8004168 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004152:	f7fd feb5 	bl	8001ec0 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004160:	4293      	cmp	r3, r2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e0c0      	b.n	80042ea <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004168:	4b15      	ldr	r3, [pc, #84]	@ (80041c0 <HAL_RCC_ClockConfig+0x228>)
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	f003 0318 	and.w	r3, r3, #24
 8004170:	2b10      	cmp	r3, #16
 8004172:	d1ee      	bne.n	8004152 <HAL_RCC_ClockConfig+0x1ba>
 8004174:	e02c      	b.n	80041d0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d122      	bne.n	80041c4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800417e:	e00a      	b.n	8004196 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004180:	f7fd fe9e 	bl	8001ec0 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800418e:	4293      	cmp	r3, r2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e0a9      	b.n	80042ea <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004196:	4b0a      	ldr	r3, [pc, #40]	@ (80041c0 <HAL_RCC_ClockConfig+0x228>)
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	f003 0318 	and.w	r3, r3, #24
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d1ee      	bne.n	8004180 <HAL_RCC_ClockConfig+0x1e8>
 80041a2:	e015      	b.n	80041d0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80041a4:	f7fd fe8c 	bl	8001ec0 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d906      	bls.n	80041c4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e097      	b.n	80042ea <HAL_RCC_ClockConfig+0x352>
 80041ba:	bf00      	nop
 80041bc:	40022000 	.word	0x40022000
 80041c0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80041c4:	4b4b      	ldr	r3, [pc, #300]	@ (80042f4 <HAL_RCC_ClockConfig+0x35c>)
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	f003 0318 	and.w	r3, r3, #24
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e9      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d010      	beq.n	80041fe <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	4b44      	ldr	r3, [pc, #272]	@ (80042f4 <HAL_RCC_ClockConfig+0x35c>)
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	f003 030f 	and.w	r3, r3, #15
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d208      	bcs.n	80041fe <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80041ec:	4b41      	ldr	r3, [pc, #260]	@ (80042f4 <HAL_RCC_ClockConfig+0x35c>)
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	f023 020f 	bic.w	r2, r3, #15
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	493e      	ldr	r1, [pc, #248]	@ (80042f4 <HAL_RCC_ClockConfig+0x35c>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041fe:	4b3e      	ldr	r3, [pc, #248]	@ (80042f8 <HAL_RCC_ClockConfig+0x360>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d210      	bcs.n	800422e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420c:	4b3a      	ldr	r3, [pc, #232]	@ (80042f8 <HAL_RCC_ClockConfig+0x360>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f023 020f 	bic.w	r2, r3, #15
 8004214:	4938      	ldr	r1, [pc, #224]	@ (80042f8 <HAL_RCC_ClockConfig+0x360>)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	4313      	orrs	r3, r2
 800421a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800421c:	4b36      	ldr	r3, [pc, #216]	@ (80042f8 <HAL_RCC_ClockConfig+0x360>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 030f 	and.w	r3, r3, #15
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d001      	beq.n	800422e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e05d      	b.n	80042ea <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	d010      	beq.n	800425c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	4b2d      	ldr	r3, [pc, #180]	@ (80042f4 <HAL_RCC_ClockConfig+0x35c>)
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004246:	429a      	cmp	r2, r3
 8004248:	d208      	bcs.n	800425c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800424a:	4b2a      	ldr	r3, [pc, #168]	@ (80042f4 <HAL_RCC_ClockConfig+0x35c>)
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	4927      	ldr	r1, [pc, #156]	@ (80042f4 <HAL_RCC_ClockConfig+0x35c>)
 8004258:	4313      	orrs	r3, r2
 800425a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b00      	cmp	r3, #0
 8004266:	d012      	beq.n	800428e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	4b21      	ldr	r3, [pc, #132]	@ (80042f4 <HAL_RCC_ClockConfig+0x35c>)
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004276:	429a      	cmp	r2, r3
 8004278:	d209      	bcs.n	800428e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800427a:	4b1e      	ldr	r3, [pc, #120]	@ (80042f4 <HAL_RCC_ClockConfig+0x35c>)
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	491a      	ldr	r1, [pc, #104]	@ (80042f4 <HAL_RCC_ClockConfig+0x35c>)
 800428a:	4313      	orrs	r3, r2
 800428c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0310 	and.w	r3, r3, #16
 8004296:	2b00      	cmp	r3, #0
 8004298:	d012      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695a      	ldr	r2, [r3, #20]
 800429e:	4b15      	ldr	r3, [pc, #84]	@ (80042f4 <HAL_RCC_ClockConfig+0x35c>)
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	0a1b      	lsrs	r3, r3, #8
 80042a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d209      	bcs.n	80042c0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80042ac:	4b11      	ldr	r3, [pc, #68]	@ (80042f4 <HAL_RCC_ClockConfig+0x35c>)
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	021b      	lsls	r3, r3, #8
 80042ba:	490e      	ldr	r1, [pc, #56]	@ (80042f4 <HAL_RCC_ClockConfig+0x35c>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80042c0:	f000 f822 	bl	8004308 <HAL_RCC_GetSysClockFreq>
 80042c4:	4602      	mov	r2, r0
 80042c6:	4b0b      	ldr	r3, [pc, #44]	@ (80042f4 <HAL_RCC_ClockConfig+0x35c>)
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	490b      	ldr	r1, [pc, #44]	@ (80042fc <HAL_RCC_ClockConfig+0x364>)
 80042d0:	5ccb      	ldrb	r3, [r1, r3]
 80042d2:	fa22 f303 	lsr.w	r3, r2, r3
 80042d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004300 <HAL_RCC_ClockConfig+0x368>)
 80042d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80042da:	4b0a      	ldr	r3, [pc, #40]	@ (8004304 <HAL_RCC_ClockConfig+0x36c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fd fd64 	bl	8001dac <HAL_InitTick>
 80042e4:	4603      	mov	r3, r0
 80042e6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80042e8:	7afb      	ldrb	r3, [r7, #11]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	44020c00 	.word	0x44020c00
 80042f8:	40022000 	.word	0x40022000
 80042fc:	0800bea8 	.word	0x0800bea8
 8004300:	20000000 	.word	0x20000000
 8004304:	20000004 	.word	0x20000004

08004308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004308:	b480      	push	{r7}
 800430a:	b089      	sub	sp, #36	@ 0x24
 800430c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800430e:	4b8c      	ldr	r3, [pc, #560]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x238>)
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	f003 0318 	and.w	r3, r3, #24
 8004316:	2b08      	cmp	r3, #8
 8004318:	d102      	bne.n	8004320 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800431a:	4b8a      	ldr	r3, [pc, #552]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x23c>)
 800431c:	61fb      	str	r3, [r7, #28]
 800431e:	e107      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004320:	4b87      	ldr	r3, [pc, #540]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x238>)
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	f003 0318 	and.w	r3, r3, #24
 8004328:	2b00      	cmp	r3, #0
 800432a:	d112      	bne.n	8004352 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800432c:	4b84      	ldr	r3, [pc, #528]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x238>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0320 	and.w	r3, r3, #32
 8004334:	2b00      	cmp	r3, #0
 8004336:	d009      	beq.n	800434c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004338:	4b81      	ldr	r3, [pc, #516]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x238>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	08db      	lsrs	r3, r3, #3
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	4a81      	ldr	r2, [pc, #516]	@ (8004548 <HAL_RCC_GetSysClockFreq+0x240>)
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
 8004348:	61fb      	str	r3, [r7, #28]
 800434a:	e0f1      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800434c:	4b7e      	ldr	r3, [pc, #504]	@ (8004548 <HAL_RCC_GetSysClockFreq+0x240>)
 800434e:	61fb      	str	r3, [r7, #28]
 8004350:	e0ee      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004352:	4b7b      	ldr	r3, [pc, #492]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x238>)
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f003 0318 	and.w	r3, r3, #24
 800435a:	2b10      	cmp	r3, #16
 800435c:	d102      	bne.n	8004364 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800435e:	4b7b      	ldr	r3, [pc, #492]	@ (800454c <HAL_RCC_GetSysClockFreq+0x244>)
 8004360:	61fb      	str	r3, [r7, #28]
 8004362:	e0e5      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004364:	4b76      	ldr	r3, [pc, #472]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x238>)
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	f003 0318 	and.w	r3, r3, #24
 800436c:	2b18      	cmp	r3, #24
 800436e:	f040 80dd 	bne.w	800452c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004372:	4b73      	ldr	r3, [pc, #460]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x238>)
 8004374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800437c:	4b70      	ldr	r3, [pc, #448]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x238>)
 800437e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004380:	0a1b      	lsrs	r3, r3, #8
 8004382:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004386:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004388:	4b6d      	ldr	r3, [pc, #436]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x238>)
 800438a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438c:	091b      	lsrs	r3, r3, #4
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004394:	4b6a      	ldr	r3, [pc, #424]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x238>)
 8004396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004398:	08db      	lsrs	r3, r3, #3
 800439a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	fb02 f303 	mul.w	r3, r2, r3
 80043a4:	ee07 3a90 	vmov	s15, r3
 80043a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ac:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 80b7 	beq.w	8004526 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d003      	beq.n	80043c6 <HAL_RCC_GetSysClockFreq+0xbe>
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d056      	beq.n	8004472 <HAL_RCC_GetSysClockFreq+0x16a>
 80043c4:	e077      	b.n	80044b6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80043c6:	4b5e      	ldr	r3, [pc, #376]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x238>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d02d      	beq.n	800442e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80043d2:	4b5b      	ldr	r3, [pc, #364]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x238>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	08db      	lsrs	r3, r3, #3
 80043d8:	f003 0303 	and.w	r3, r3, #3
 80043dc:	4a5a      	ldr	r2, [pc, #360]	@ (8004548 <HAL_RCC_GetSysClockFreq+0x240>)
 80043de:	fa22 f303 	lsr.w	r3, r2, r3
 80043e2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	ee07 3a90 	vmov	s15, r3
 80043ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	ee07 3a90 	vmov	s15, r3
 80043f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043fc:	4b50      	ldr	r3, [pc, #320]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x238>)
 80043fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004404:	ee07 3a90 	vmov	s15, r3
 8004408:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800440c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004410:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004550 <HAL_RCC_GetSysClockFreq+0x248>
 8004414:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004418:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800441c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004420:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004428:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800442c:	e065      	b.n	80044fa <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	ee07 3a90 	vmov	s15, r3
 8004434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004438:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004554 <HAL_RCC_GetSysClockFreq+0x24c>
 800443c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004440:	4b3f      	ldr	r3, [pc, #252]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x238>)
 8004442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004448:	ee07 3a90 	vmov	s15, r3
 800444c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004450:	ed97 6a02 	vldr	s12, [r7, #8]
 8004454:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004550 <HAL_RCC_GetSysClockFreq+0x248>
 8004458:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800445c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004460:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004464:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800446c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004470:	e043      	b.n	80044fa <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	ee07 3a90 	vmov	s15, r3
 8004478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800447c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004558 <HAL_RCC_GetSysClockFreq+0x250>
 8004480:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004484:	4b2e      	ldr	r3, [pc, #184]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x238>)
 8004486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800448c:	ee07 3a90 	vmov	s15, r3
 8004490:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004494:	ed97 6a02 	vldr	s12, [r7, #8]
 8004498:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004550 <HAL_RCC_GetSysClockFreq+0x248>
 800449c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80044a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044b0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80044b4:	e021      	b.n	80044fa <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	ee07 3a90 	vmov	s15, r3
 80044bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044c0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800455c <HAL_RCC_GetSysClockFreq+0x254>
 80044c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x238>)
 80044ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d0:	ee07 3a90 	vmov	s15, r3
 80044d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80044d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80044dc:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004550 <HAL_RCC_GetSysClockFreq+0x248>
 80044e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80044e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044f4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80044f8:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80044fa:	4b11      	ldr	r3, [pc, #68]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x238>)
 80044fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044fe:	0a5b      	lsrs	r3, r3, #9
 8004500:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004504:	3301      	adds	r3, #1
 8004506:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004512:	edd7 6a06 	vldr	s13, [r7, #24]
 8004516:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800451a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800451e:	ee17 3a90 	vmov	r3, s15
 8004522:	61fb      	str	r3, [r7, #28]
 8004524:	e004      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004526:	2300      	movs	r3, #0
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	e001      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800452c:	4b06      	ldr	r3, [pc, #24]	@ (8004548 <HAL_RCC_GetSysClockFreq+0x240>)
 800452e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004530:	69fb      	ldr	r3, [r7, #28]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3724      	adds	r7, #36	@ 0x24
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	44020c00 	.word	0x44020c00
 8004544:	003d0900 	.word	0x003d0900
 8004548:	03d09000 	.word	0x03d09000
 800454c:	017d7840 	.word	0x017d7840
 8004550:	46000000 	.word	0x46000000
 8004554:	4c742400 	.word	0x4c742400
 8004558:	4bbebc20 	.word	0x4bbebc20
 800455c:	4a742400 	.word	0x4a742400

08004560 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004564:	f7ff fed0 	bl	8004308 <HAL_RCC_GetSysClockFreq>
 8004568:	4602      	mov	r2, r0
 800456a:	4b08      	ldr	r3, [pc, #32]	@ (800458c <HAL_RCC_GetHCLKFreq+0x2c>)
 800456c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800456e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004572:	4907      	ldr	r1, [pc, #28]	@ (8004590 <HAL_RCC_GetHCLKFreq+0x30>)
 8004574:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004576:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800457a:	fa22 f303 	lsr.w	r3, r2, r3
 800457e:	4a05      	ldr	r2, [pc, #20]	@ (8004594 <HAL_RCC_GetHCLKFreq+0x34>)
 8004580:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004582:	4b04      	ldr	r3, [pc, #16]	@ (8004594 <HAL_RCC_GetHCLKFreq+0x34>)
 8004584:	681b      	ldr	r3, [r3, #0]
}
 8004586:	4618      	mov	r0, r3
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	44020c00 	.word	0x44020c00
 8004590:	0800bea8 	.word	0x0800bea8
 8004594:	20000000 	.word	0x20000000

08004598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800459c:	f7ff ffe0 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 80045a0:	4602      	mov	r2, r0
 80045a2:	4b06      	ldr	r3, [pc, #24]	@ (80045bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	091b      	lsrs	r3, r3, #4
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	4904      	ldr	r1, [pc, #16]	@ (80045c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045ae:	5ccb      	ldrb	r3, [r1, r3]
 80045b0:	f003 031f 	and.w	r3, r3, #31
 80045b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	44020c00 	.word	0x44020c00
 80045c0:	0800beb8 	.word	0x0800beb8

080045c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80045c8:	f7ff ffca 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 80045cc:	4602      	mov	r2, r0
 80045ce:	4b06      	ldr	r3, [pc, #24]	@ (80045e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	0a1b      	lsrs	r3, r3, #8
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	4904      	ldr	r1, [pc, #16]	@ (80045ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80045da:	5ccb      	ldrb	r3, [r1, r3]
 80045dc:	f003 031f 	and.w	r3, r3, #31
 80045e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	44020c00 	.word	0x44020c00
 80045ec:	0800beb8 	.word	0x0800beb8

080045f0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80045f4:	f7ff ffb4 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 80045f8:	4602      	mov	r2, r0
 80045fa:	4b06      	ldr	r3, [pc, #24]	@ (8004614 <HAL_RCC_GetPCLK3Freq+0x24>)
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	0b1b      	lsrs	r3, r3, #12
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	4904      	ldr	r1, [pc, #16]	@ (8004618 <HAL_RCC_GetPCLK3Freq+0x28>)
 8004606:	5ccb      	ldrb	r3, [r1, r3]
 8004608:	f003 031f 	and.w	r3, r3, #31
 800460c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004610:	4618      	mov	r0, r3
 8004612:	bd80      	pop	{r7, pc}
 8004614:	44020c00 	.word	0x44020c00
 8004618:	0800beb8 	.word	0x0800beb8

0800461c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800461c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004620:	b0aa      	sub	sp, #168	@ 0xa8
 8004622:	af00      	add	r7, sp, #0
 8004624:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004628:	2300      	movs	r3, #0
 800462a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800462e:	2300      	movs	r3, #0
 8004630:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004634:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004640:	2500      	movs	r5, #0
 8004642:	ea54 0305 	orrs.w	r3, r4, r5
 8004646:	d00b      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004648:	4bb8      	ldr	r3, [pc, #736]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800464a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800464e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004652:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004658:	4ab4      	ldr	r2, [pc, #720]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800465a:	430b      	orrs	r3, r1
 800465c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004660:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	f002 0801 	and.w	r8, r2, #1
 800466c:	f04f 0900 	mov.w	r9, #0
 8004670:	ea58 0309 	orrs.w	r3, r8, r9
 8004674:	d038      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004676:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800467a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800467c:	2b05      	cmp	r3, #5
 800467e:	d819      	bhi.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004680:	a201      	add	r2, pc, #4	@ (adr r2, 8004688 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8004682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004686:	bf00      	nop
 8004688:	080046bd 	.word	0x080046bd
 800468c:	080046a1 	.word	0x080046a1
 8004690:	080046b5 	.word	0x080046b5
 8004694:	080046bd 	.word	0x080046bd
 8004698:	080046bd 	.word	0x080046bd
 800469c:	080046bd 	.word	0x080046bd
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80046a4:	3308      	adds	r3, #8
 80046a6:	4618      	mov	r0, r3
 80046a8:	f001 ffee 	bl	8006688 <RCCEx_PLL2_Config>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 80046b2:	e004      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80046ba:	e000      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 80046bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046be:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10c      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80046c6:	4b99      	ldr	r3, [pc, #612]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80046c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80046cc:	f023 0107 	bic.w	r1, r3, #7
 80046d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80046d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046d6:	4a95      	ldr	r2, [pc, #596]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80046d8:	430b      	orrs	r3, r1
 80046da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80046de:	e003      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80046e4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80046ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f0:	f002 0a02 	and.w	sl, r2, #2
 80046f4:	f04f 0b00 	mov.w	fp, #0
 80046f8:	ea5a 030b 	orrs.w	r3, sl, fp
 80046fc:	d03c      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80046fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004704:	2b28      	cmp	r3, #40	@ 0x28
 8004706:	d01b      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8004708:	2b28      	cmp	r3, #40	@ 0x28
 800470a:	d815      	bhi.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800470c:	2b20      	cmp	r3, #32
 800470e:	d019      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8004710:	2b20      	cmp	r3, #32
 8004712:	d811      	bhi.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004714:	2b18      	cmp	r3, #24
 8004716:	d017      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8004718:	2b18      	cmp	r3, #24
 800471a:	d80d      	bhi.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800471c:	2b00      	cmp	r3, #0
 800471e:	d015      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x130>
 8004720:	2b08      	cmp	r3, #8
 8004722:	d109      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004724:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004728:	3308      	adds	r3, #8
 800472a:	4618      	mov	r0, r3
 800472c:	f001 ffac 	bl	8006688 <RCCEx_PLL2_Config>
 8004730:	4603      	mov	r3, r0
 8004732:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004736:	e00a      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800473e:	e006      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004740:	bf00      	nop
 8004742:	e004      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004744:	bf00      	nop
 8004746:	e002      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004748:	bf00      	nop
 800474a:	e000      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 800474c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800474e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10c      	bne.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004756:	4b75      	ldr	r3, [pc, #468]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004758:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800475c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004760:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004766:	4a71      	ldr	r2, [pc, #452]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004768:	430b      	orrs	r3, r1
 800476a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800476e:	e003      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004770:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004774:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004778:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800477c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004780:	f002 0304 	and.w	r3, r2, #4
 8004784:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004788:	2300      	movs	r3, #0
 800478a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800478e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004792:	460b      	mov	r3, r1
 8004794:	4313      	orrs	r3, r2
 8004796:	d040      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004798:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800479c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800479e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80047a2:	d01e      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80047a4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80047a8:	d817      	bhi.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80047aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047ae:	d01a      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 80047b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047b4:	d811      	bhi.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80047b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80047b8:	d017      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80047ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80047bc:	d80d      	bhi.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d015      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 80047c2:	2b40      	cmp	r3, #64	@ 0x40
 80047c4:	d109      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80047ca:	3308      	adds	r3, #8
 80047cc:	4618      	mov	r0, r3
 80047ce:	f001 ff5b 	bl	8006688 <RCCEx_PLL2_Config>
 80047d2:	4603      	mov	r3, r0
 80047d4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 80047d8:	e00a      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80047e0:	e006      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80047e2:	bf00      	nop
 80047e4:	e004      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80047e6:	bf00      	nop
 80047e8:	e002      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80047ea:	bf00      	nop
 80047ec:	e000      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80047ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047f0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10c      	bne.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80047f8:	4b4c      	ldr	r3, [pc, #304]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80047fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80047fe:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004802:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004808:	4a48      	ldr	r2, [pc, #288]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800480a:	430b      	orrs	r3, r1
 800480c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004810:	e003      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004812:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004816:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800481a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800481e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004822:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004826:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800482a:	2300      	movs	r3, #0
 800482c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004830:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004834:	460b      	mov	r3, r1
 8004836:	4313      	orrs	r3, r2
 8004838:	d043      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800483a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800483e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004840:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004844:	d021      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004846:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800484a:	d81a      	bhi.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800484c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004850:	d01d      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004852:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004856:	d814      	bhi.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8004858:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800485c:	d019      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800485e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004862:	d80e      	bhi.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8004864:	2b00      	cmp	r3, #0
 8004866:	d016      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8004868:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800486c:	d109      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800486e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004872:	3308      	adds	r3, #8
 8004874:	4618      	mov	r0, r3
 8004876:	f001 ff07 	bl	8006688 <RCCEx_PLL2_Config>
 800487a:	4603      	mov	r3, r0
 800487c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004880:	e00a      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004888:	e006      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800488a:	bf00      	nop
 800488c:	e004      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800488e:	bf00      	nop
 8004890:	e002      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8004892:	bf00      	nop
 8004894:	e000      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8004896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004898:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10c      	bne.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80048a0:	4b22      	ldr	r3, [pc, #136]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80048a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048a6:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80048aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80048ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b0:	4a1e      	ldr	r2, [pc, #120]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80048b2:	430b      	orrs	r3, r1
 80048b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80048b8:	e003      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ba:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80048be:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80048ce:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048d0:	2300      	movs	r3, #0
 80048d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80048d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80048d8:	460b      	mov	r3, r1
 80048da:	4313      	orrs	r3, r2
 80048dc:	d03e      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80048de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80048e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80048e8:	d01b      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x306>
 80048ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80048ee:	d814      	bhi.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80048f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048f4:	d017      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80048f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048fa:	d80e      	bhi.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d017      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004904:	d109      	bne.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004906:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800490a:	3308      	adds	r3, #8
 800490c:	4618      	mov	r0, r3
 800490e:	f001 febb 	bl	8006688 <RCCEx_PLL2_Config>
 8004912:	4603      	mov	r3, r0
 8004914:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004918:	e00b      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004920:	e007      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8004922:	bf00      	nop
 8004924:	e005      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8004926:	bf00      	nop
 8004928:	e003      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x316>
 800492a:	bf00      	nop
 800492c:	44020c00 	.word	0x44020c00
        break;
 8004930:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004932:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10c      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800493a:	4ba5      	ldr	r3, [pc, #660]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800493c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004940:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004944:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800494a:	4aa1      	ldr	r2, [pc, #644]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800494c:	430b      	orrs	r3, r1
 800494e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004952:	e003      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004954:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004958:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800495c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004964:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004968:	673b      	str	r3, [r7, #112]	@ 0x70
 800496a:	2300      	movs	r3, #0
 800496c:	677b      	str	r3, [r7, #116]	@ 0x74
 800496e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004972:	460b      	mov	r3, r1
 8004974:	4313      	orrs	r3, r2
 8004976:	d03b      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004978:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800497c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800497e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004982:	d01b      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8004984:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004988:	d814      	bhi.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
 800498a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800498e:	d017      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004990:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004994:	d80e      	bhi.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8004996:	2b00      	cmp	r3, #0
 8004998:	d014      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800499a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800499e:	d109      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049a4:	3308      	adds	r3, #8
 80049a6:	4618      	mov	r0, r3
 80049a8:	f001 fe6e 	bl	8006688 <RCCEx_PLL2_Config>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80049b2:	e008      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80049ba:	e004      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80049bc:	bf00      	nop
 80049be:	e002      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80049c0:	bf00      	nop
 80049c2:	e000      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80049c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049c6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10c      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80049ce:	4b80      	ldr	r3, [pc, #512]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80049d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80049d4:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80049d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049de:	4a7c      	ldr	r2, [pc, #496]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80049e0:	430b      	orrs	r3, r1
 80049e2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80049e6:	e003      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80049ec:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80049f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80049fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049fe:	2300      	movs	r3, #0
 8004a00:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a02:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004a06:	460b      	mov	r3, r1
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	d033      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8004a0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a16:	d015      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004a18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a1c:	d80e      	bhi.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d012      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004a22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a26:	d109      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a2c:	3308      	adds	r3, #8
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f001 fe2a 	bl	8006688 <RCCEx_PLL2_Config>
 8004a34:	4603      	mov	r3, r0
 8004a36:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004a3a:	e006      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004a42:	e002      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8004a44:	bf00      	nop
 8004a46:	e000      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8004a48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a4a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10c      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004a52:	4b5f      	ldr	r3, [pc, #380]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004a54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a58:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8004a5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a62:	4a5b      	ldr	r2, [pc, #364]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004a64:	430b      	orrs	r3, r1
 8004a66:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004a6a:	e003      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a6c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004a70:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8004a74:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	6639      	str	r1, [r7, #96]	@ 0x60
 8004a80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a84:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a86:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	d033      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8004a90:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a9a:	d015      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8004a9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004aa0:	d80e      	bhi.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d012      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004aa6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004aaa:	d109      	bne.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004aac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ab0:	3308      	adds	r3, #8
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f001 fde8 	bl	8006688 <RCCEx_PLL2_Config>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8004abe:	e006      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004ac6:	e002      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8004ac8:	bf00      	nop
 8004aca:	e000      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8004acc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004ace:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10c      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8004ad6:	4b3e      	ldr	r3, [pc, #248]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004ad8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004adc:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004ae0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ae6:	4a3a      	ldr	r2, [pc, #232]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004aee:	e003      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004af4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004af8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b00:	2100      	movs	r1, #0
 8004b02:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004b04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b0a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4313      	orrs	r3, r2
 8004b12:	d00e      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004b14:	4b2e      	ldr	r3, [pc, #184]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	4a2d      	ldr	r2, [pc, #180]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004b1a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004b1e:	61d3      	str	r3, [r2, #28]
 8004b20:	4b2b      	ldr	r3, [pc, #172]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004b22:	69d9      	ldr	r1, [r3, #28]
 8004b24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b2c:	4a28      	ldr	r2, [pc, #160]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004b2e:	430b      	orrs	r3, r1
 8004b30:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b32:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004b3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b40:	2300      	movs	r3, #0
 8004b42:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b44:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	d046      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004b4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b54:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004b58:	d021      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004b5a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004b5e:	d81a      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004b60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b64:	d01d      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8004b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b6a:	d814      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004b6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b70:	d019      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8004b72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b76:	d80e      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d016      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8004b7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b80:	d109      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b86:	3308      	adds	r3, #8
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f001 fd7d 	bl	8006688 <RCCEx_PLL2_Config>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004b94:	e00a      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004b9c:	e006      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8004b9e:	bf00      	nop
 8004ba0:	e004      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8004ba2:	bf00      	nop
 8004ba4:	e002      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8004ba6:	bf00      	nop
 8004ba8:	e000      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8004baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bac:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10f      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004bb4:	4b06      	ldr	r3, [pc, #24]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004bb6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004bba:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004bbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc4:	4a02      	ldr	r2, [pc, #8]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004bc6:	430b      	orrs	r3, r1
 8004bc8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004bcc:	e006      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004bce:	bf00      	nop
 8004bd0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004bd8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004bdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004be8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bea:	2300      	movs	r3, #0
 8004bec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	d043      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004bf8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bfe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004c02:	d021      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8004c04:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004c08:	d81a      	bhi.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8004c0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c0e:	d01d      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x630>
 8004c10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c14:	d814      	bhi.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8004c16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c1a:	d019      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004c1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c20:	d80e      	bhi.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d016      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8004c26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c2a:	d109      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c30:	3308      	adds	r3, #8
 8004c32:	4618      	mov	r0, r3
 8004c34:	f001 fd28 	bl	8006688 <RCCEx_PLL2_Config>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004c3e:	e00a      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004c46:	e006      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8004c48:	bf00      	nop
 8004c4a:	e004      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8004c4c:	bf00      	nop
 8004c4e:	e002      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8004c50:	bf00      	nop
 8004c52:	e000      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8004c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c56:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10c      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004c5e:	4bb6      	ldr	r3, [pc, #728]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004c60:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004c64:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004c68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c6e:	4ab2      	ldr	r2, [pc, #712]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004c70:	430b      	orrs	r3, r1
 8004c72:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004c76:	e003      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c78:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004c7c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004c80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c88:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004c8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c8e:	2300      	movs	r3, #0
 8004c90:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c92:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004c96:	460b      	mov	r3, r1
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	d030      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004c9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ca0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ca2:	2b05      	cmp	r3, #5
 8004ca4:	d80f      	bhi.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d211      	bcs.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d911      	bls.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d109      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004cb6:	3308      	adds	r3, #8
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f001 fce5 	bl	8006688 <RCCEx_PLL2_Config>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004cc4:	e006      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004ccc:	e002      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8004cce:	bf00      	nop
 8004cd0:	e000      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8004cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cd4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10c      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004cdc:	4b96      	ldr	r3, [pc, #600]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004cde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ce2:	f023 0107 	bic.w	r1, r3, #7
 8004ce6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004cea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cec:	4a92      	ldr	r2, [pc, #584]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004cee:	430b      	orrs	r3, r1
 8004cf0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004cf4:	e003      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004cfa:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004cfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d06:	2100      	movs	r1, #0
 8004d08:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d10:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004d14:	460b      	mov	r3, r1
 8004d16:	4313      	orrs	r3, r2
 8004d18:	d022      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004d1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d005      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d005      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004d2e:	e002      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8004d30:	bf00      	nop
 8004d32:	e000      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8004d34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d36:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10c      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004d3e:	4b7e      	ldr	r3, [pc, #504]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004d40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d44:	f023 0108 	bic.w	r1, r3, #8
 8004d48:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d4e:	4a7a      	ldr	r2, [pc, #488]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004d50:	430b      	orrs	r3, r1
 8004d52:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004d56:	e003      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d58:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004d5c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d68:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004d6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d6e:	2300      	movs	r3, #0
 8004d70:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d72:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004d76:	460b      	mov	r3, r1
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f000 80b0 	beq.w	8004ede <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004d7e:	4b6f      	ldr	r3, [pc, #444]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8004d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d82:	4a6e      	ldr	r2, [pc, #440]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8004d84:	f043 0301 	orr.w	r3, r3, #1
 8004d88:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d8a:	f7fd f899 	bl	8001ec0 <HAL_GetTick>
 8004d8e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004d92:	e00b      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d94:	f7fd f894 	bl	8001ec0 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d903      	bls.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004daa:	e005      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004dac:	4b63      	ldr	r3, [pc, #396]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8004dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0ed      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8004db8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f040 808a 	bne.w	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004dc2:	4b5d      	ldr	r3, [pc, #372]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004dc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dcc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004dd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d022      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x802>
 8004dd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ddc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dde:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d01b      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004de6:	4b54      	ldr	r3, [pc, #336]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004de8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004df0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004df4:	4b50      	ldr	r3, [pc, #320]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004df6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dfa:	4a4f      	ldr	r2, [pc, #316]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004dfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e04:	4b4c      	ldr	r3, [pc, #304]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004e06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e0a:	4a4b      	ldr	r2, [pc, #300]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004e0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e10:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e14:	4a48      	ldr	r2, [pc, #288]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004e16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d019      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2a:	f7fd f849 	bl	8001ec0 <HAL_GetTick>
 8004e2e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e32:	e00d      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e34:	f7fd f844 	bl	8001ec0 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d903      	bls.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8004e4e:	e006      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e50:	4b39      	ldr	r3, [pc, #228]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004e52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0ea      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8004e5e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d132      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004e66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e74:	d10f      	bne.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8004e76:	4b30      	ldr	r3, [pc, #192]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004e7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e84:	091b      	lsrs	r3, r3, #4
 8004e86:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004e8a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004e8e:	4a2a      	ldr	r2, [pc, #168]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004e90:	430b      	orrs	r3, r1
 8004e92:	61d3      	str	r3, [r2, #28]
 8004e94:	e005      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x886>
 8004e96:	4b28      	ldr	r3, [pc, #160]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	4a27      	ldr	r2, [pc, #156]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004e9c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004ea0:	61d3      	str	r3, [r2, #28]
 8004ea2:	4b25      	ldr	r3, [pc, #148]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004ea4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ea8:	4a23      	ldr	r2, [pc, #140]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004eaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004eb2:	4b21      	ldr	r3, [pc, #132]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004eb4:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8004eb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ebc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ec2:	4a1d      	ldr	r2, [pc, #116]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004ec4:	430b      	orrs	r3, r1
 8004ec6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004eca:	e008      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ecc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004ed0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8004ed4:	e003      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004eda:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004ede:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee6:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004eea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eec:	2300      	movs	r3, #0
 8004eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ef0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	d038      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004efa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f00:	2b30      	cmp	r3, #48	@ 0x30
 8004f02:	d014      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x912>
 8004f04:	2b30      	cmp	r3, #48	@ 0x30
 8004f06:	d80e      	bhi.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8004f08:	2b20      	cmp	r3, #32
 8004f0a:	d012      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x916>
 8004f0c:	2b20      	cmp	r3, #32
 8004f0e:	d80a      	bhi.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d015      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004f14:	2b10      	cmp	r3, #16
 8004f16:	d106      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f18:	4b07      	ldr	r3, [pc, #28]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1c:	4a06      	ldr	r2, [pc, #24]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f22:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8004f24:	e00d      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004f2c:	e009      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8004f2e:	bf00      	nop
 8004f30:	e007      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8004f32:	bf00      	nop
 8004f34:	e005      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8004f36:	bf00      	nop
 8004f38:	44020c00 	.word	0x44020c00
 8004f3c:	44020800 	.word	0x44020800
        break;
 8004f40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f42:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10c      	bne.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004f4a:	4bb5      	ldr	r3, [pc, #724]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004f4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f50:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f5a:	49b1      	ldr	r1, [pc, #708]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8004f62:	e003      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f64:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004f68:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004f6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f74:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004f78:	623b      	str	r3, [r7, #32]
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f7e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004f82:	460b      	mov	r3, r1
 8004f84:	4313      	orrs	r3, r2
 8004f86:	d03c      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8004f88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d81d      	bhi.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8004f92:	a201      	add	r2, pc, #4	@ (adr r2, 8004f98 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8004f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f98:	08004fad 	.word	0x08004fad
 8004f9c:	08004fbb 	.word	0x08004fbb
 8004fa0:	08004fcf 	.word	0x08004fcf
 8004fa4:	08004fd7 	.word	0x08004fd7
 8004fa8:	08004fd7 	.word	0x08004fd7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fac:	4b9c      	ldr	r3, [pc, #624]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb0:	4a9b      	ldr	r2, [pc, #620]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004fb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fb6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004fb8:	e00e      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004fbe:	3308      	adds	r3, #8
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f001 fb61 	bl	8006688 <RCCEx_PLL2_Config>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004fcc:	e004      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004fd4:	e000      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8004fd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fd8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10c      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004fe0:	4b8f      	ldr	r3, [pc, #572]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fe6:	f023 0207 	bic.w	r2, r3, #7
 8004fea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004fee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ff0:	498b      	ldr	r1, [pc, #556]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004ff8:	e003      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004ffe:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005002:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800500e:	61bb      	str	r3, [r7, #24]
 8005010:	2300      	movs	r3, #0
 8005012:	61fb      	str	r3, [r7, #28]
 8005014:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005018:	460b      	mov	r3, r1
 800501a:	4313      	orrs	r3, r2
 800501c:	d03c      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800501e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005024:	2b20      	cmp	r3, #32
 8005026:	d01f      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005028:	2b20      	cmp	r3, #32
 800502a:	d819      	bhi.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 800502c:	2b18      	cmp	r3, #24
 800502e:	d01d      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8005030:	2b18      	cmp	r3, #24
 8005032:	d815      	bhi.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8005038:	2b08      	cmp	r3, #8
 800503a:	d007      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800503c:	e010      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800503e:	4b78      	ldr	r3, [pc, #480]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005042:	4a77      	ldr	r2, [pc, #476]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005048:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800504a:	e010      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800504c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005050:	3308      	adds	r3, #8
 8005052:	4618      	mov	r0, r3
 8005054:	f001 fb18 	bl	8006688 <RCCEx_PLL2_Config>
 8005058:	4603      	mov	r3, r0
 800505a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800505e:	e006      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005066:	e002      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8005068:	bf00      	nop
 800506a:	e000      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 800506c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800506e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10c      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005076:	4b6a      	ldr	r3, [pc, #424]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800507c:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005080:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005086:	4966      	ldr	r1, [pc, #408]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005088:	4313      	orrs	r3, r2
 800508a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800508e:	e003      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005090:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005094:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005098:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800509c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80050a4:	613b      	str	r3, [r7, #16]
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80050ae:	460b      	mov	r3, r1
 80050b0:	4313      	orrs	r3, r2
 80050b2:	d03e      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80050b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050be:	d020      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 80050c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050c4:	d819      	bhi.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0xade>
 80050c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80050c8:	d01d      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 80050ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80050cc:	d815      	bhi.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0xade>
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 80050d2:	2b40      	cmp	r3, #64	@ 0x40
 80050d4:	d007      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 80050d6:	e010      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050d8:	4b51      	ldr	r3, [pc, #324]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80050da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050dc:	4a50      	ldr	r2, [pc, #320]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80050de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050e2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80050e4:	e010      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050ea:	3308      	adds	r3, #8
 80050ec:	4618      	mov	r0, r3
 80050ee:	f001 facb 	bl	8006688 <RCCEx_PLL2_Config>
 80050f2:	4603      	mov	r3, r0
 80050f4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80050f8:	e006      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005100:	e002      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8005102:	bf00      	nop
 8005104:	e000      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8005106:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005108:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10c      	bne.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005110:	4b43      	ldr	r3, [pc, #268]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005116:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 800511a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800511e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005120:	493f      	ldr	r1, [pc, #252]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005122:	4313      	orrs	r3, r2
 8005124:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005128:	e003      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800512a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800512e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005132:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513a:	2100      	movs	r1, #0
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	f003 0304 	and.w	r3, r3, #4
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005148:	460b      	mov	r3, r1
 800514a:	4313      	orrs	r3, r2
 800514c:	d038      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800514e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005158:	d00e      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 800515a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800515e:	d815      	bhi.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8005160:	2b00      	cmp	r3, #0
 8005162:	d017      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8005164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005168:	d110      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800516a:	4b2d      	ldr	r3, [pc, #180]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800516c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516e:	4a2c      	ldr	r2, [pc, #176]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005174:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005176:	e00e      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005178:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800517c:	3308      	adds	r3, #8
 800517e:	4618      	mov	r0, r3
 8005180:	f001 fa82 	bl	8006688 <RCCEx_PLL2_Config>
 8005184:	4603      	mov	r3, r0
 8005186:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800518a:	e004      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005192:	e000      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8005194:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005196:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10c      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800519e:	4b20      	ldr	r3, [pc, #128]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80051a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80051a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ae:	491c      	ldr	r1, [pc, #112]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80051b6:	e003      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80051bc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	2100      	movs	r1, #0
 80051ca:	6039      	str	r1, [r7, #0]
 80051cc:	f003 0310 	and.w	r3, r3, #16
 80051d0:	607b      	str	r3, [r7, #4]
 80051d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80051d6:	460b      	mov	r3, r1
 80051d8:	4313      	orrs	r3, r2
 80051da:	d039      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80051dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051e2:	2b30      	cmp	r3, #48	@ 0x30
 80051e4:	d01e      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80051e6:	2b30      	cmp	r3, #48	@ 0x30
 80051e8:	d815      	bhi.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 80051ea:	2b10      	cmp	r3, #16
 80051ec:	d002      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 80051ee:	2b20      	cmp	r3, #32
 80051f0:	d007      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 80051f2:	e010      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80051f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f8:	4a09      	ldr	r2, [pc, #36]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80051fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051fe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005200:	e011      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005202:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005206:	3308      	adds	r3, #8
 8005208:	4618      	mov	r0, r3
 800520a:	f001 fa3d 	bl	8006688 <RCCEx_PLL2_Config>
 800520e:	4603      	mov	r3, r0
 8005210:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005214:	e007      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800521c:	e003      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 800521e:	bf00      	nop
 8005220:	44020c00 	.word	0x44020c00
        break;
 8005224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005226:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10c      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800522e:	4b0c      	ldr	r3, [pc, #48]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005230:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005234:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005238:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800523c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800523e:	4908      	ldr	r1, [pc, #32]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005240:	4313      	orrs	r3, r2
 8005242:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005246:	e003      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005248:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800524c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8005250:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8005254:	4618      	mov	r0, r3
 8005256:	37a8      	adds	r7, #168	@ 0xa8
 8005258:	46bd      	mov	sp, r7
 800525a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800525e:	bf00      	nop
 8005260:	44020c00 	.word	0x44020c00

08005264 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005264:	b480      	push	{r7}
 8005266:	b08b      	sub	sp, #44	@ 0x2c
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800526c:	4bad      	ldr	r3, [pc, #692]	@ (8005524 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800526e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005274:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005276:	4bab      	ldr	r3, [pc, #684]	@ (8005524 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005280:	4ba8      	ldr	r3, [pc, #672]	@ (8005524 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005284:	0a1b      	lsrs	r3, r3, #8
 8005286:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800528a:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800528c:	4ba5      	ldr	r3, [pc, #660]	@ (8005524 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800528e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005290:	f003 0310 	and.w	r3, r3, #16
 8005294:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005296:	4ba3      	ldr	r3, [pc, #652]	@ (8005524 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529a:	08db      	lsrs	r3, r3, #3
 800529c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	fb02 f303 	mul.w	r3, r2, r3
 80052a6:	ee07 3a90 	vmov	s15, r3
 80052aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ae:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 8126 	beq.w	8005506 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d053      	beq.n	8005368 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	2b03      	cmp	r3, #3
 80052c4:	d86f      	bhi.n	80053a6 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d003      	beq.n	80052d4 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d02b      	beq.n	800532a <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 80052d2:	e068      	b.n	80053a6 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80052d4:	4b93      	ldr	r3, [pc, #588]	@ (8005524 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	08db      	lsrs	r3, r3, #3
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	4a92      	ldr	r2, [pc, #584]	@ (8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80052e0:	fa22 f303 	lsr.w	r3, r2, r3
 80052e4:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	ee07 3a90 	vmov	s15, r3
 80052ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	ee07 3a90 	vmov	s15, r3
 80052f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	ee07 3a90 	vmov	s15, r3
 8005304:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005308:	ed97 6a04 	vldr	s12, [r7, #16]
 800530c:	eddf 5a87 	vldr	s11, [pc, #540]	@ 800552c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005310:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005314:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005318:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800531c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005324:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005328:	e068      	b.n	80053fc <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	ee07 3a90 	vmov	s15, r3
 8005330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005334:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005530 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005338:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	ee07 3a90 	vmov	s15, r3
 8005342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005346:	ed97 6a04 	vldr	s12, [r7, #16]
 800534a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800552c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800534e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800535a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800535e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005362:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005366:	e049      	b.n	80053fc <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	ee07 3a90 	vmov	s15, r3
 800536e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005372:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005534 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8005376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	ee07 3a90 	vmov	s15, r3
 8005380:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005384:	ed97 6a04 	vldr	s12, [r7, #16]
 8005388:	eddf 5a68 	vldr	s11, [pc, #416]	@ 800552c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800538c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005390:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005394:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005398:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800539c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80053a4:	e02a      	b.n	80053fc <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80053a6:	4b5f      	ldr	r3, [pc, #380]	@ (8005524 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	08db      	lsrs	r3, r3, #3
 80053ac:	f003 0303 	and.w	r3, r3, #3
 80053b0:	4a5d      	ldr	r2, [pc, #372]	@ (8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80053b2:	fa22 f303 	lsr.w	r3, r2, r3
 80053b6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	ee07 3a90 	vmov	s15, r3
 80053be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	ee07 3a90 	vmov	s15, r3
 80053c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	ee07 3a90 	vmov	s15, r3
 80053d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053da:	ed97 6a04 	vldr	s12, [r7, #16]
 80053de:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800552c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80053e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80053fa:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80053fc:	4b49      	ldr	r3, [pc, #292]	@ (8005524 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005404:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005408:	d121      	bne.n	800544e <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800540a:	4b46      	ldr	r3, [pc, #280]	@ (8005524 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800540c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d017      	beq.n	8005446 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005416:	4b43      	ldr	r3, [pc, #268]	@ (8005524 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800541a:	0a5b      	lsrs	r3, r3, #9
 800541c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005420:	ee07 3a90 	vmov	s15, r3
 8005424:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005428:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800542c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005430:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800543c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	e006      	b.n	8005454 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	e002      	b.n	8005454 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005454:	4b33      	ldr	r3, [pc, #204]	@ (8005524 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800545c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005460:	d121      	bne.n	80054a6 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005462:	4b30      	ldr	r3, [pc, #192]	@ (8005524 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d017      	beq.n	800549e <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800546e:	4b2d      	ldr	r3, [pc, #180]	@ (8005524 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005472:	0c1b      	lsrs	r3, r3, #16
 8005474:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005478:	ee07 3a90 	vmov	s15, r3
 800547c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005480:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005484:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005488:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800548c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005494:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	605a      	str	r2, [r3, #4]
 800549c:	e006      	b.n	80054ac <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	605a      	str	r2, [r3, #4]
 80054a4:	e002      	b.n	80054ac <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80054ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005524 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054b8:	d121      	bne.n	80054fe <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80054ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005524 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80054bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d017      	beq.n	80054f6 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80054c6:	4b17      	ldr	r3, [pc, #92]	@ (8005524 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80054c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ca:	0e1b      	lsrs	r3, r3, #24
 80054cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054d0:	ee07 3a90 	vmov	s15, r3
 80054d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80054d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054dc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80054e0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80054e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ec:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80054f4:	e010      	b.n	8005518 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	609a      	str	r2, [r3, #8]
}
 80054fc:	e00c      	b.n	8005518 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	609a      	str	r2, [r3, #8]
}
 8005504:	e008      	b.n	8005518 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	609a      	str	r2, [r3, #8]
}
 8005518:	bf00      	nop
 800551a:	372c      	adds	r7, #44	@ 0x2c
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	44020c00 	.word	0x44020c00
 8005528:	03d09000 	.word	0x03d09000
 800552c:	46000000 	.word	0x46000000
 8005530:	4a742400 	.word	0x4a742400
 8005534:	4bbebc20 	.word	0x4bbebc20

08005538 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005538:	b480      	push	{r7}
 800553a:	b08b      	sub	sp, #44	@ 0x2c
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005540:	4bad      	ldr	r3, [pc, #692]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005548:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800554a:	4bab      	ldr	r3, [pc, #684]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800554c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554e:	f003 0303 	and.w	r3, r3, #3
 8005552:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005554:	4ba8      	ldr	r3, [pc, #672]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005558:	0a1b      	lsrs	r3, r3, #8
 800555a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800555e:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005560:	4ba5      	ldr	r3, [pc, #660]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005564:	f003 0310 	and.w	r3, r3, #16
 8005568:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800556a:	4ba3      	ldr	r3, [pc, #652]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800556c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556e:	08db      	lsrs	r3, r3, #3
 8005570:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	fb02 f303 	mul.w	r3, r2, r3
 800557a:	ee07 3a90 	vmov	s15, r3
 800557e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005582:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 8126 	beq.w	80057da <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	2b03      	cmp	r3, #3
 8005592:	d053      	beq.n	800563c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	2b03      	cmp	r3, #3
 8005598:	d86f      	bhi.n	800567a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d003      	beq.n	80055a8 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d02b      	beq.n	80055fe <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80055a6:	e068      	b.n	800567a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80055a8:	4b93      	ldr	r3, [pc, #588]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	08db      	lsrs	r3, r3, #3
 80055ae:	f003 0303 	and.w	r3, r3, #3
 80055b2:	4a92      	ldr	r2, [pc, #584]	@ (80057fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80055b4:	fa22 f303 	lsr.w	r3, r2, r3
 80055b8:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	ee07 3a90 	vmov	s15, r3
 80055c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	ee07 3a90 	vmov	s15, r3
 80055ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	ee07 3a90 	vmov	s15, r3
 80055d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055dc:	ed97 6a04 	vldr	s12, [r7, #16]
 80055e0:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80055e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055f8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80055fc:	e068      	b.n	80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	ee07 3a90 	vmov	s15, r3
 8005604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005608:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005804 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800560c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	ee07 3a90 	vmov	s15, r3
 8005616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800561a:	ed97 6a04 	vldr	s12, [r7, #16]
 800561e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800562a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800562e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005636:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800563a:	e049      	b.n	80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	ee07 3a90 	vmov	s15, r3
 8005642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005646:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005808 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800564a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	ee07 3a90 	vmov	s15, r3
 8005654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005658:	ed97 6a04 	vldr	s12, [r7, #16]
 800565c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005660:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005664:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005668:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800566c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005674:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005678:	e02a      	b.n	80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800567a:	4b5f      	ldr	r3, [pc, #380]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	08db      	lsrs	r3, r3, #3
 8005680:	f003 0303 	and.w	r3, r3, #3
 8005684:	4a5d      	ldr	r2, [pc, #372]	@ (80057fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005686:	fa22 f303 	lsr.w	r3, r2, r3
 800568a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	ee07 3a90 	vmov	s15, r3
 8005692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	ee07 3a90 	vmov	s15, r3
 800569c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	ee07 3a90 	vmov	s15, r3
 80056aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ae:	ed97 6a04 	vldr	s12, [r7, #16]
 80056b2:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80056b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80056ce:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80056d0:	4b49      	ldr	r3, [pc, #292]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056dc:	d121      	bne.n	8005722 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80056de:	4b46      	ldr	r3, [pc, #280]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80056e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d017      	beq.n	800571a <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80056ea:	4b43      	ldr	r3, [pc, #268]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80056ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ee:	0a5b      	lsrs	r3, r3, #9
 80056f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056f4:	ee07 3a90 	vmov	s15, r3
 80056f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80056fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005700:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005704:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800570c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005710:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	e006      	b.n	8005728 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	e002      	b.n	8005728 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005728:	4b33      	ldr	r3, [pc, #204]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005730:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005734:	d121      	bne.n	800577a <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005736:	4b30      	ldr	r3, [pc, #192]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d017      	beq.n	8005772 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005742:	4b2d      	ldr	r3, [pc, #180]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005746:	0c1b      	lsrs	r3, r3, #16
 8005748:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800574c:	ee07 3a90 	vmov	s15, r3
 8005750:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005754:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005758:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800575c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005768:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	605a      	str	r2, [r3, #4]
 8005770:	e006      	b.n	8005780 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	605a      	str	r2, [r3, #4]
 8005778:	e002      	b.n	8005780 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005780:	4b1d      	ldr	r3, [pc, #116]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005788:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800578c:	d121      	bne.n	80057d2 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800578e:	4b1a      	ldr	r3, [pc, #104]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005792:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d017      	beq.n	80057ca <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800579a:	4b17      	ldr	r3, [pc, #92]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800579c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800579e:	0e1b      	lsrs	r3, r3, #24
 80057a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057a4:	ee07 3a90 	vmov	s15, r3
 80057a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80057ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057b0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80057b4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80057b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057c0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80057c8:	e010      	b.n	80057ec <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	609a      	str	r2, [r3, #8]
}
 80057d0:	e00c      	b.n	80057ec <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	609a      	str	r2, [r3, #8]
}
 80057d8:	e008      	b.n	80057ec <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	609a      	str	r2, [r3, #8]
}
 80057ec:	bf00      	nop
 80057ee:	372c      	adds	r7, #44	@ 0x2c
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	44020c00 	.word	0x44020c00
 80057fc:	03d09000 	.word	0x03d09000
 8005800:	46000000 	.word	0x46000000
 8005804:	4a742400 	.word	0x4a742400
 8005808:	4bbebc20 	.word	0x4bbebc20

0800580c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08c      	sub	sp, #48	@ 0x30
 8005810:	af00      	add	r7, sp, #0
 8005812:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005816:	e9d7 2300 	ldrd	r2, r3, [r7]
 800581a:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800581e:	430b      	orrs	r3, r1
 8005820:	d14b      	bne.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005822:	4bc4      	ldr	r3, [pc, #784]	@ (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005828:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800582c:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800582e:	4bc1      	ldr	r3, [pc, #772]	@ (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005830:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b02      	cmp	r3, #2
 800583a:	d108      	bne.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800583c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005842:	d104      	bne.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005844:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005848:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800584a:	f000 bf14 	b.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800584e:	4bb9      	ldr	r3, [pc, #740]	@ (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005850:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005854:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005858:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800585c:	d108      	bne.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800585e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005864:	d104      	bne.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8005866:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800586a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800586c:	f000 bf03 	b.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8005870:	4bb0      	ldr	r3, [pc, #704]	@ (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005878:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800587c:	d119      	bne.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800587e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005880:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005884:	d115      	bne.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005886:	4bab      	ldr	r3, [pc, #684]	@ (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800588e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005892:	d30a      	bcc.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005894:	4ba7      	ldr	r3, [pc, #668]	@ (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	0a1b      	lsrs	r3, r3, #8
 800589a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800589e:	4aa6      	ldr	r2, [pc, #664]	@ (8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80058a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80058a6:	f000 bee6 	b.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 80058aa:	2300      	movs	r3, #0
 80058ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80058ae:	f000 bee2 	b.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058b6:	f000 bede 	b.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80058ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058be:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 80058c2:	ea52 0301 	orrs.w	r3, r2, r1
 80058c6:	f000 838e 	beq.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 80058ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058ce:	2a01      	cmp	r2, #1
 80058d0:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 80058d4:	f080 86cc 	bcs.w	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80058d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058dc:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 80058e0:	ea52 0301 	orrs.w	r3, r2, r1
 80058e4:	f000 82aa 	beq.w	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80058e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058ec:	2a01      	cmp	r2, #1
 80058ee:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 80058f2:	f080 86bd 	bcs.w	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80058f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058fa:	f1a3 0110 	sub.w	r1, r3, #16
 80058fe:	ea52 0301 	orrs.w	r3, r2, r1
 8005902:	f000 8681 	beq.w	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8005906:	e9d7 2300 	ldrd	r2, r3, [r7]
 800590a:	2a01      	cmp	r2, #1
 800590c:	f173 0310 	sbcs.w	r3, r3, #16
 8005910:	f080 86ae 	bcs.w	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005914:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005918:	1f19      	subs	r1, r3, #4
 800591a:	ea52 0301 	orrs.w	r3, r2, r1
 800591e:	f000 84b1 	beq.w	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8005922:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005926:	2a01      	cmp	r2, #1
 8005928:	f173 0304 	sbcs.w	r3, r3, #4
 800592c:	f080 86a0 	bcs.w	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005934:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8005938:	430b      	orrs	r3, r1
 800593a:	f000 85aa 	beq.w	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 800593e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005942:	497e      	ldr	r1, [pc, #504]	@ (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005944:	428a      	cmp	r2, r1
 8005946:	f173 0300 	sbcs.w	r3, r3, #0
 800594a:	f080 8691 	bcs.w	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800594e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005952:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8005956:	430b      	orrs	r3, r1
 8005958:	f000 8532 	beq.w	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 800595c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005960:	4977      	ldr	r1, [pc, #476]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8005962:	428a      	cmp	r2, r1
 8005964:	f173 0300 	sbcs.w	r3, r3, #0
 8005968:	f080 8682 	bcs.w	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800596c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005970:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8005974:	430b      	orrs	r3, r1
 8005976:	f000 84bc 	beq.w	80062f2 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 800597a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800597e:	4971      	ldr	r1, [pc, #452]	@ (8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8005980:	428a      	cmp	r2, r1
 8005982:	f173 0300 	sbcs.w	r3, r3, #0
 8005986:	f080 8673 	bcs.w	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800598a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800598e:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8005992:	430b      	orrs	r3, r1
 8005994:	f000 85f2 	beq.w	800657c <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8005998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800599c:	496a      	ldr	r1, [pc, #424]	@ (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 800599e:	428a      	cmp	r2, r1
 80059a0:	f173 0300 	sbcs.w	r3, r3, #0
 80059a4:	f080 8664 	bcs.w	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80059a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059ac:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80059b0:	430b      	orrs	r3, r1
 80059b2:	f000 81e5 	beq.w	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 80059b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059ba:	4964      	ldr	r1, [pc, #400]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 80059bc:	428a      	cmp	r2, r1
 80059be:	f173 0300 	sbcs.w	r3, r3, #0
 80059c2:	f080 8655 	bcs.w	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80059c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059ca:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80059ce:	430b      	orrs	r3, r1
 80059d0:	f000 83cc 	beq.w	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80059d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059d8:	495d      	ldr	r1, [pc, #372]	@ (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 80059da:	428a      	cmp	r2, r1
 80059dc:	f173 0300 	sbcs.w	r3, r3, #0
 80059e0:	f080 8646 	bcs.w	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80059e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059e8:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80059ec:	430b      	orrs	r3, r1
 80059ee:	f000 8331 	beq.w	8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 80059f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059f6:	4957      	ldr	r1, [pc, #348]	@ (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 80059f8:	428a      	cmp	r2, r1
 80059fa:	f173 0300 	sbcs.w	r3, r3, #0
 80059fe:	f080 8637 	bcs.w	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005a02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a06:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005a0a:	430b      	orrs	r3, r1
 8005a0c:	f000 82bb 	beq.w	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8005a10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a14:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8005a18:	f173 0300 	sbcs.w	r3, r3, #0
 8005a1c:	f080 8628 	bcs.w	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a24:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005a28:	430b      	orrs	r3, r1
 8005a2a:	f000 826d 	beq.w	8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 8005a2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a32:	f244 0101 	movw	r1, #16385	@ 0x4001
 8005a36:	428a      	cmp	r2, r1
 8005a38:	f173 0300 	sbcs.w	r3, r3, #0
 8005a3c:	f080 8618 	bcs.w	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005a40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a44:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005a48:	430b      	orrs	r3, r1
 8005a4a:	f000 821e 	beq.w	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8005a4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a52:	f242 0101 	movw	r1, #8193	@ 0x2001
 8005a56:	428a      	cmp	r2, r1
 8005a58:	f173 0300 	sbcs.w	r3, r3, #0
 8005a5c:	f080 8608 	bcs.w	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005a60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a64:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005a68:	430b      	orrs	r3, r1
 8005a6a:	f000 8137 	beq.w	8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8005a6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a72:	f241 0101 	movw	r1, #4097	@ 0x1001
 8005a76:	428a      	cmp	r2, r1
 8005a78:	f173 0300 	sbcs.w	r3, r3, #0
 8005a7c:	f080 85f8 	bcs.w	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a84:	1f11      	subs	r1, r2, #4
 8005a86:	430b      	orrs	r3, r1
 8005a88:	f000 80d2 	beq.w	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8005a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a90:	2a05      	cmp	r2, #5
 8005a92:	f173 0300 	sbcs.w	r3, r3, #0
 8005a96:	f080 85eb 	bcs.w	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a9e:	1e51      	subs	r1, r2, #1
 8005aa0:	430b      	orrs	r3, r1
 8005aa2:	d006      	beq.n	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8005aa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005aa8:	1e91      	subs	r1, r2, #2
 8005aaa:	430b      	orrs	r3, r1
 8005aac:	d06c      	beq.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8005aae:	f000 bddf 	b.w	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005ab2:	4b20      	ldr	r3, [pc, #128]	@ (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005ab4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005ab8:	f003 0307 	and.w	r3, r3, #7
 8005abc:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d104      	bne.n	8005ace <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005ac4:	f7fe fd7e 	bl	80045c4 <HAL_RCC_GetPCLK2Freq>
 8005ac8:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005aca:	f000 bdd4 	b.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8005ace:	4b19      	ldr	r3, [pc, #100]	@ (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ad6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ada:	d10a      	bne.n	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8005adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d107      	bne.n	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ae2:	f107 030c 	add.w	r3, r7, #12
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7ff fd26 	bl	8005538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005af0:	e048      	b.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005af2:	4b10      	ldr	r3, [pc, #64]	@ (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d10c      	bne.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8005afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b00:	2b03      	cmp	r3, #3
 8005b02:	d109      	bne.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005b04:	4b0b      	ldr	r3, [pc, #44]	@ (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	08db      	lsrs	r3, r3, #3
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	4a12      	ldr	r2, [pc, #72]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005b10:	fa22 f303 	lsr.w	r3, r2, r3
 8005b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b16:	e035      	b.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8005b18:	4b06      	ldr	r3, [pc, #24]	@ (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b24:	d11c      	bne.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8005b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b28:	2b04      	cmp	r3, #4
 8005b2a:	d119      	bne.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8005b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8005b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b30:	e028      	b.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8005b32:	bf00      	nop
 8005b34:	44020c00 	.word	0x44020c00
 8005b38:	017d7840 	.word	0x017d7840
 8005b3c:	20000001 	.word	0x20000001
 8005b40:	10000001 	.word	0x10000001
 8005b44:	08000001 	.word	0x08000001
 8005b48:	04000001 	.word	0x04000001
 8005b4c:	00200001 	.word	0x00200001
 8005b50:	00040001 	.word	0x00040001
 8005b54:	00020001 	.word	0x00020001
 8005b58:	03d09000 	.word	0x03d09000
 8005b5c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005b60:	4b9f      	ldr	r3, [pc, #636]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005b62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d106      	bne.n	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8005b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b70:	2b05      	cmp	r3, #5
 8005b72:	d103      	bne.n	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 8005b74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b7a:	e003      	b.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005b80:	f000 bd79 	b.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005b84:	f000 bd77 	b.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005b88:	4b95      	ldr	r3, [pc, #596]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005b8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005b8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b92:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d104      	bne.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b9a:	f7fe fcfd 	bl	8004598 <HAL_RCC_GetPCLK1Freq>
 8005b9e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8005ba0:	f000 bd69 	b.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8005ba4:	4b8e      	ldr	r3, [pc, #568]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bb0:	d10a      	bne.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8005bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d107      	bne.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bb8:	f107 030c 	add.w	r3, r7, #12
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7ff fcbb 	bl	8005538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bc6:	e031      	b.n	8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005bc8:	4b85      	ldr	r3, [pc, #532]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d10c      	bne.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd6:	2b18      	cmp	r3, #24
 8005bd8:	d109      	bne.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005bda:	4b81      	ldr	r3, [pc, #516]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	08db      	lsrs	r3, r3, #3
 8005be0:	f003 0303 	and.w	r3, r3, #3
 8005be4:	4a7f      	ldr	r2, [pc, #508]	@ (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8005be6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bec:	e01e      	b.n	8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8005bee:	4b7c      	ldr	r3, [pc, #496]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bfa:	d105      	bne.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8005bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bfe:	2b20      	cmp	r3, #32
 8005c00:	d102      	bne.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8005c02:	4b79      	ldr	r3, [pc, #484]	@ (8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8005c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c06:	e011      	b.n	8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005c08:	4b75      	ldr	r3, [pc, #468]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005c0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d106      	bne.n	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8005c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c18:	2b28      	cmp	r3, #40	@ 0x28
 8005c1a:	d103      	bne.n	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8005c1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c22:	e003      	b.n	8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005c28:	f000 bd25 	b.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005c2c:	f000 bd23 	b.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005c30:	4b6b      	ldr	r3, [pc, #428]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005c32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005c36:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005c3a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d104      	bne.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c42:	f7fe fca9 	bl	8004598 <HAL_RCC_GetPCLK1Freq>
 8005c46:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8005c48:	f000 bd15 	b.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8005c4c:	4b64      	ldr	r3, [pc, #400]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c58:	d10a      	bne.n	8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8005c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5c:	2b40      	cmp	r3, #64	@ 0x40
 8005c5e:	d107      	bne.n	8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c60:	f107 030c 	add.w	r3, r7, #12
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff fc67 	bl	8005538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c6e:	e033      	b.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005c70:	4b5b      	ldr	r3, [pc, #364]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d10c      	bne.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c80:	d109      	bne.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005c82:	4b57      	ldr	r3, [pc, #348]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	08db      	lsrs	r3, r3, #3
 8005c88:	f003 0303 	and.w	r3, r3, #3
 8005c8c:	4a55      	ldr	r2, [pc, #340]	@ (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8005c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c94:	e020      	b.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8005c96:	4b52      	ldr	r3, [pc, #328]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ca2:	d106      	bne.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8005ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005caa:	d102      	bne.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8005cac:	4b4e      	ldr	r3, [pc, #312]	@ (8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8005cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cb0:	e012      	b.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005cb2:	4b4b      	ldr	r3, [pc, #300]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005cb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d107      	bne.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8005cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005cc6:	d103      	bne.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8005cc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cce:	e003      	b.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005cd4:	f000 bccf 	b.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005cd8:	f000 bccd 	b.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005cdc:	4b40      	ldr	r3, [pc, #256]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ce2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005ce6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d104      	bne.n	8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005cee:	f7fe fc7f 	bl	80045f0 <HAL_RCC_GetPCLK3Freq>
 8005cf2:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005cf4:	f000 bcbf 	b.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8005cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005cfe:	d108      	bne.n	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d00:	f107 030c 	add.w	r3, r7, #12
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7ff fc17 	bl	8005538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005d0e:	f000 bcb2 	b.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005d12:	4b33      	ldr	r3, [pc, #204]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d10d      	bne.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8005d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d24:	d109      	bne.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d26:	4b2e      	ldr	r3, [pc, #184]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	08db      	lsrs	r3, r3, #3
 8005d2c:	f003 0303 	and.w	r3, r3, #3
 8005d30:	4a2c      	ldr	r2, [pc, #176]	@ (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8005d32:	fa22 f303 	lsr.w	r3, r2, r3
 8005d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d38:	e020      	b.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8005d3a:	4b29      	ldr	r3, [pc, #164]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d46:	d106      	bne.n	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8005d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d4e:	d102      	bne.n	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8005d50:	4b25      	ldr	r3, [pc, #148]	@ (8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8005d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d54:	e012      	b.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005d56:	4b22      	ldr	r3, [pc, #136]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005d58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d107      	bne.n	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8005d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d66:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005d6a:	d103      	bne.n	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8005d6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d72:	e003      	b.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005d78:	f000 bc7d 	b.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005d7c:	f000 bc7b 	b.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8005d80:	4b17      	ldr	r3, [pc, #92]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005d82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d86:	f003 0307 	and.w	r3, r3, #7
 8005d8a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d104      	bne.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8005d92:	f7fe fbe5 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 8005d96:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8005d98:	f000 bc6d 	b.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8005d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d104      	bne.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005da2:	f7fe fab1 	bl	8004308 <HAL_RCC_GetSysClockFreq>
 8005da6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8005da8:	f000 bc65 	b.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8005dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d108      	bne.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005db2:	f107 030c 	add.w	r3, r7, #12
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff fbbe 	bl	8005538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005dc0:	f000 bc59 	b.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005dc4:	4b06      	ldr	r3, [pc, #24]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dd0:	d10e      	bne.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8005dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd4:	2b03      	cmp	r3, #3
 8005dd6:	d10b      	bne.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8005dd8:	4b04      	ldr	r3, [pc, #16]	@ (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8005dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ddc:	e02c      	b.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8005dde:	bf00      	nop
 8005de0:	44020c00 	.word	0x44020c00
 8005de4:	03d09000 	.word	0x03d09000
 8005de8:	003d0900 	.word	0x003d0900
 8005dec:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005df0:	4b95      	ldr	r3, [pc, #596]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d10c      	bne.n	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8005dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d109      	bne.n	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e02:	4b91      	ldr	r3, [pc, #580]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	08db      	lsrs	r3, r3, #3
 8005e08:	f003 0303 	and.w	r3, r3, #3
 8005e0c:	4a8f      	ldr	r2, [pc, #572]	@ (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e14:	e010      	b.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8005e16:	4b8c      	ldr	r3, [pc, #560]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e22:	d105      	bne.n	8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8005e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e26:	2b05      	cmp	r3, #5
 8005e28:	d102      	bne.n	8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8005e2a:	4b89      	ldr	r3, [pc, #548]	@ (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e2e:	e003      	b.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005e34:	f000 bc1f 	b.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005e38:	f000 bc1d 	b.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8005e3c:	4b82      	ldr	r3, [pc, #520]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005e3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e42:	f003 0308 	and.w	r3, r3, #8
 8005e46:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8005e48:	4b7f      	ldr	r3, [pc, #508]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005e4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d106      	bne.n	8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8005e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d103      	bne.n	8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8005e5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e62:	e011      	b.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8005e64:	4b78      	ldr	r3, [pc, #480]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005e66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e72:	d106      	bne.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8005e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e76:	2b08      	cmp	r3, #8
 8005e78:	d103      	bne.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8005e7a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e80:	e002      	b.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8005e86:	e3f6      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005e88:	e3f5      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005e8a:	4b6f      	ldr	r3, [pc, #444]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005e8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e94:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d103      	bne.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e9c:	f7fe fb7c 	bl	8004598 <HAL_RCC_GetPCLK1Freq>
 8005ea0:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005ea2:	e3e8      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8005ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eaa:	d107      	bne.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005eac:	f107 030c 	add.w	r3, r7, #12
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7ff fb41 	bl	8005538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005eba:	e3dc      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005ebc:	4b62      	ldr	r3, [pc, #392]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d10d      	bne.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8005ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ece:	d109      	bne.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ed0:	4b5d      	ldr	r3, [pc, #372]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	08db      	lsrs	r3, r3, #3
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	4a5c      	ldr	r2, [pc, #368]	@ (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005edc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ee2:	e010      	b.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8005ee4:	4b58      	ldr	r3, [pc, #352]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005eec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ef0:	d106      	bne.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8005ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ef8:	d102      	bne.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8005efa:	4b55      	ldr	r3, [pc, #340]	@ (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005efe:	e002      	b.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005f04:	e3b7      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005f06:	e3b6      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005f08:	4b4f      	ldr	r3, [pc, #316]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005f0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f0e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005f12:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d103      	bne.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f1a:	f7fe fb3d 	bl	8004598 <HAL_RCC_GetPCLK1Freq>
 8005f1e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8005f20:	e3a9      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8005f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f28:	d107      	bne.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f2a:	f107 030c 	add.w	r3, r7, #12
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7ff fb02 	bl	8005538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005f38:	e39d      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005f3a:	4b43      	ldr	r3, [pc, #268]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d10d      	bne.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8005f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f48:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005f4c:	d109      	bne.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f4e:	4b3e      	ldr	r3, [pc, #248]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	08db      	lsrs	r3, r3, #3
 8005f54:	f003 0303 	and.w	r3, r3, #3
 8005f58:	4a3c      	ldr	r2, [pc, #240]	@ (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f60:	e010      	b.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8005f62:	4b39      	ldr	r3, [pc, #228]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f6e:	d106      	bne.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8005f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f72:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005f76:	d102      	bne.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8005f78:	4b35      	ldr	r3, [pc, #212]	@ (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f7c:	e002      	b.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005f82:	e378      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005f84:	e377      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8005f86:	4b30      	ldr	r3, [pc, #192]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005f88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f8c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005f90:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8005f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d103      	bne.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f98:	f7fe fafe 	bl	8004598 <HAL_RCC_GetPCLK1Freq>
 8005f9c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005f9e:	e36a      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8005fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fa6:	d107      	bne.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fa8:	f107 030c 	add.w	r3, r7, #12
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7ff fac3 	bl	8005538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005fb6:	e35e      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8005fb8:	4b23      	ldr	r3, [pc, #140]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d10d      	bne.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8005fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fca:	d109      	bne.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005fcc:	4b1e      	ldr	r3, [pc, #120]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	08db      	lsrs	r3, r3, #3
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	4a1d      	ldr	r2, [pc, #116]	@ (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005fde:	e34a      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005fe4:	e347      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8005fe6:	4b18      	ldr	r3, [pc, #96]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005fe8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005fec:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8005ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d103      	bne.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005ff8:	f7fe fafa 	bl	80045f0 <HAL_RCC_GetPCLK3Freq>
 8005ffc:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8005ffe:	e33a      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8006000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006002:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006006:	d107      	bne.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006008:	f107 030c 	add.w	r3, r7, #12
 800600c:	4618      	mov	r0, r3
 800600e:	f7ff fa93 	bl	8005538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006016:	e32e      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8006018:	4b0b      	ldr	r3, [pc, #44]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b02      	cmp	r3, #2
 8006022:	d10d      	bne.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8006024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006026:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800602a:	d109      	bne.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800602c:	4b06      	ldr	r3, [pc, #24]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	08db      	lsrs	r3, r3, #3
 8006032:	f003 0303 	and.w	r3, r3, #3
 8006036:	4a05      	ldr	r2, [pc, #20]	@ (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006038:	fa22 f303 	lsr.w	r3, r2, r3
 800603c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800603e:	e31a      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8006040:	2300      	movs	r3, #0
 8006042:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006044:	e317      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006046:	bf00      	nop
 8006048:	44020c00 	.word	0x44020c00
 800604c:	03d09000 	.word	0x03d09000
 8006050:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006054:	4b9b      	ldr	r3, [pc, #620]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006056:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800605a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800605e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006062:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006066:	d044      	beq.n	80060f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800606a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800606e:	d879      	bhi.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006076:	d02d      	beq.n	80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8006078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800607e:	d871      	bhi.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006082:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006086:	d017      	beq.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8006088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800608e:	d869      	bhi.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006092:	2b00      	cmp	r3, #0
 8006094:	d004      	beq.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8006096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006098:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800609c:	d004      	beq.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 800609e:	e061      	b.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80060a0:	f7fe faa6 	bl	80045f0 <HAL_RCC_GetPCLK3Freq>
 80060a4:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 80060a6:	e060      	b.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060a8:	f107 030c 	add.w	r3, r7, #12
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7ff fa43 	bl	8005538 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80060b6:	e058      	b.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80060b8:	4b82      	ldr	r3, [pc, #520]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80060ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d103      	bne.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 80060c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 80060cc:	e04d      	b.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 80060ce:	2300      	movs	r3, #0
 80060d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80060d2:	e04a      	b.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80060d4:	4b7b      	ldr	r3, [pc, #492]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80060d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060e2:	d103      	bne.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 80060e4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80060e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 80060ea:	e03e      	b.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 80060ec:	2300      	movs	r3, #0
 80060ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80060f0:	e03b      	b.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80060f2:	4b74      	ldr	r3, [pc, #464]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80060f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80060f8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80060fc:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80060fe:	4b71      	ldr	r3, [pc, #452]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	2b02      	cmp	r3, #2
 8006108:	d10c      	bne.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800610a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610c:	2b00      	cmp	r3, #0
 800610e:	d109      	bne.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006110:	4b6c      	ldr	r3, [pc, #432]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	08db      	lsrs	r3, r3, #3
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	4a6b      	ldr	r2, [pc, #428]	@ (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 800611c:	fa22 f303 	lsr.w	r3, r2, r3
 8006120:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006122:	e01e      	b.n	8006162 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006124:	4b67      	ldr	r3, [pc, #412]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800612c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006130:	d106      	bne.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8006132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006134:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006138:	d102      	bne.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800613a:	4b64      	ldr	r3, [pc, #400]	@ (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 800613c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800613e:	e010      	b.n	8006162 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006140:	4b60      	ldr	r3, [pc, #384]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006148:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800614c:	d106      	bne.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 800614e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006150:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006154:	d102      	bne.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006156:	4b5e      	ldr	r3, [pc, #376]	@ (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8006158:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800615a:	e002      	b.n	8006162 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800615c:	2300      	movs	r3, #0
 800615e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006160:	e003      	b.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8006162:	e002      	b.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006168:	bf00      	nop
          }
        }
        break;
 800616a:	e284      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800616c:	4b55      	ldr	r3, [pc, #340]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800616e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006172:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006176:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800617a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800617e:	d044      	beq.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8006180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006182:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006186:	d879      	bhi.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800618e:	d02d      	beq.n	80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8006190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006192:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006196:	d871      	bhi.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800619e:	d017      	beq.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 80061a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80061a6:	d869      	bhi.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80061a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d004      	beq.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 80061ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061b4:	d004      	beq.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80061b6:	e061      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80061b8:	f7fe f9ee 	bl	8004598 <HAL_RCC_GetPCLK1Freq>
 80061bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 80061be:	e060      	b.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061c0:	f107 030c 	add.w	r3, r7, #12
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff f9b7 	bl	8005538 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80061ce:	e058      	b.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80061d0:	4b3c      	ldr	r3, [pc, #240]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80061d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d103      	bne.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 80061de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 80061e4:	e04d      	b.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 80061e6:	2300      	movs	r3, #0
 80061e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80061ea:	e04a      	b.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80061ec:	4b35      	ldr	r3, [pc, #212]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80061ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061fa:	d103      	bne.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 80061fc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006200:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8006202:	e03e      	b.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8006204:	2300      	movs	r3, #0
 8006206:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006208:	e03b      	b.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800620a:	4b2e      	ldr	r3, [pc, #184]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800620c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006210:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006214:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006216:	4b2b      	ldr	r3, [pc, #172]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b02      	cmp	r3, #2
 8006220:	d10c      	bne.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	2b00      	cmp	r3, #0
 8006226:	d109      	bne.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006228:	4b26      	ldr	r3, [pc, #152]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	08db      	lsrs	r3, r3, #3
 800622e:	f003 0303 	and.w	r3, r3, #3
 8006232:	4a25      	ldr	r2, [pc, #148]	@ (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8006234:	fa22 f303 	lsr.w	r3, r2, r3
 8006238:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800623a:	e01e      	b.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800623c:	4b21      	ldr	r3, [pc, #132]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006248:	d106      	bne.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800624a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006250:	d102      	bne.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006252:	4b1e      	ldr	r3, [pc, #120]	@ (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8006254:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006256:	e010      	b.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006258:	4b1a      	ldr	r3, [pc, #104]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006260:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006264:	d106      	bne.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8006266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006268:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800626c:	d102      	bne.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800626e:	4b18      	ldr	r3, [pc, #96]	@ (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8006270:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006272:	e002      	b.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006274:	2300      	movs	r3, #0
 8006276:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006278:	e003      	b.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800627a:	e002      	b.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006280:	bf00      	nop
          }
        }
        break;
 8006282:	e1f8      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006284:	4b0f      	ldr	r3, [pc, #60]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006286:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800628a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800628e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8006290:	4b0c      	ldr	r3, [pc, #48]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006298:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800629c:	d105      	bne.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 800629e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d102      	bne.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 80062a4:	4b0a      	ldr	r3, [pc, #40]	@ (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80062a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80062a8:	e1e5      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80062aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062b0:	d110      	bne.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062b2:	f107 0318 	add.w	r3, r7, #24
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fe ffd4 	bl	8005264 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80062c0:	e1d9      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80062c2:	bf00      	nop
 80062c4:	44020c00 	.word	0x44020c00
 80062c8:	03d09000 	.word	0x03d09000
 80062cc:	003d0900 	.word	0x003d0900
 80062d0:	017d7840 	.word	0x017d7840
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80062d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062da:	d107      	bne.n	80062ec <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062dc:	f107 030c 	add.w	r3, r7, #12
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7ff f929 	bl	8005538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80062ea:	e1c4      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 80062ec:	2300      	movs	r3, #0
 80062ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80062f0:	e1c1      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80062f2:	4b9d      	ldr	r3, [pc, #628]	@ (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80062f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062f8:	f003 0307 	and.w	r3, r3, #7
 80062fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006300:	2b04      	cmp	r3, #4
 8006302:	d859      	bhi.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8006304:	a201      	add	r2, pc, #4	@ (adr r2, 800630c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630a:	bf00      	nop
 800630c:	08006321 	.word	0x08006321
 8006310:	08006331 	.word	0x08006331
 8006314:	080063b9 	.word	0x080063b9
 8006318:	08006341 	.word	0x08006341
 800631c:	08006347 	.word	0x08006347
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006320:	f107 0318 	add.w	r3, r7, #24
 8006324:	4618      	mov	r0, r3
 8006326:	f7fe ff9d 	bl	8005264 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800632e:	e046      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006330:	f107 030c 	add.w	r3, r7, #12
 8006334:	4618      	mov	r0, r3
 8006336:	f7ff f8ff 	bl	8005538 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800633e:	e03e      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006340:	4b8a      	ldr	r3, [pc, #552]	@ (800656c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006342:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006344:	e03b      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006346:	4b88      	ldr	r3, [pc, #544]	@ (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006348:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800634c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006350:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006352:	4b85      	ldr	r3, [pc, #532]	@ (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b02      	cmp	r3, #2
 800635c:	d10c      	bne.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800635e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006360:	2b00      	cmp	r3, #0
 8006362:	d109      	bne.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006364:	4b80      	ldr	r3, [pc, #512]	@ (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	08db      	lsrs	r3, r3, #3
 800636a:	f003 0303 	and.w	r3, r3, #3
 800636e:	4a80      	ldr	r2, [pc, #512]	@ (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006370:	fa22 f303 	lsr.w	r3, r2, r3
 8006374:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006376:	e01e      	b.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006378:	4b7b      	ldr	r3, [pc, #492]	@ (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006384:	d106      	bne.n	8006394 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8006386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800638c:	d102      	bne.n	8006394 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800638e:	4b79      	ldr	r3, [pc, #484]	@ (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8006390:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006392:	e010      	b.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006394:	4b74      	ldr	r3, [pc, #464]	@ (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800639c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063a0:	d106      	bne.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 80063a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063a8:	d102      	bne.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80063aa:	4b73      	ldr	r3, [pc, #460]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80063ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063ae:	e002      	b.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80063b0:	2300      	movs	r3, #0
 80063b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80063b4:	e003      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 80063b6:	e002      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 80063b8:	2300      	movs	r3, #0
 80063ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80063bc:	bf00      	nop
          }
        }
        break;
 80063be:	e15a      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80063c0:	4b69      	ldr	r3, [pc, #420]	@ (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80063c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80063c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ce:	2b20      	cmp	r3, #32
 80063d0:	d022      	beq.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 80063d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d4:	2b20      	cmp	r3, #32
 80063d6:	d858      	bhi.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 80063d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063da:	2b18      	cmp	r3, #24
 80063dc:	d019      	beq.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 80063de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e0:	2b18      	cmp	r3, #24
 80063e2:	d852      	bhi.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 80063e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 80063ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d008      	beq.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 80063f0:	e04b      	b.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063f2:	f107 0318 	add.w	r3, r7, #24
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fe ff34 	bl	8005264 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006400:	e046      	b.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006402:	f107 030c 	add.w	r3, r7, #12
 8006406:	4618      	mov	r0, r3
 8006408:	f7ff f896 	bl	8005538 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006410:	e03e      	b.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006412:	4b56      	ldr	r3, [pc, #344]	@ (800656c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006414:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006416:	e03b      	b.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006418:	4b53      	ldr	r3, [pc, #332]	@ (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800641a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800641e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006422:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006424:	4b50      	ldr	r3, [pc, #320]	@ (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	2b02      	cmp	r3, #2
 800642e:	d10c      	bne.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8006430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006432:	2b00      	cmp	r3, #0
 8006434:	d109      	bne.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006436:	4b4c      	ldr	r3, [pc, #304]	@ (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	08db      	lsrs	r3, r3, #3
 800643c:	f003 0303 	and.w	r3, r3, #3
 8006440:	4a4b      	ldr	r2, [pc, #300]	@ (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006442:	fa22 f303 	lsr.w	r3, r2, r3
 8006446:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006448:	e01e      	b.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800644a:	4b47      	ldr	r3, [pc, #284]	@ (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006452:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006456:	d106      	bne.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8006458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800645e:	d102      	bne.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006460:	4b44      	ldr	r3, [pc, #272]	@ (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8006462:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006464:	e010      	b.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006466:	4b40      	ldr	r3, [pc, #256]	@ (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800646e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006472:	d106      	bne.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8006474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006476:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800647a:	d102      	bne.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800647c:	4b3e      	ldr	r3, [pc, #248]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 800647e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006480:	e002      	b.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006482:	2300      	movs	r3, #0
 8006484:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006486:	e003      	b.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8006488:	e002      	b.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 800648a:	2300      	movs	r3, #0
 800648c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800648e:	bf00      	nop
          }
        }
        break;
 8006490:	e0f1      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006492:	4b35      	ldr	r3, [pc, #212]	@ (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006498:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800649c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800649e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064a4:	d023      	beq.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 80064a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064ac:	d858      	bhi.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 80064ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b0:	2bc0      	cmp	r3, #192	@ 0xc0
 80064b2:	d019      	beq.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 80064b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80064b8:	d852      	bhi.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 80064ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 80064c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c2:	2b40      	cmp	r3, #64	@ 0x40
 80064c4:	d008      	beq.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 80064c6:	e04b      	b.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064c8:	f107 0318 	add.w	r3, r7, #24
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fe fec9 	bl	8005264 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80064d6:	e046      	b.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064d8:	f107 030c 	add.w	r3, r7, #12
 80064dc:	4618      	mov	r0, r3
 80064de:	f7ff f82b 	bl	8005538 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80064e6:	e03e      	b.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80064e8:	4b20      	ldr	r3, [pc, #128]	@ (800656c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80064ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80064ec:	e03b      	b.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80064f4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80064f8:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064fa:	4b1b      	ldr	r3, [pc, #108]	@ (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b02      	cmp	r3, #2
 8006504:	d10c      	bne.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8006506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006508:	2b00      	cmp	r3, #0
 800650a:	d109      	bne.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800650c:	4b16      	ldr	r3, [pc, #88]	@ (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	08db      	lsrs	r3, r3, #3
 8006512:	f003 0303 	and.w	r3, r3, #3
 8006516:	4a16      	ldr	r2, [pc, #88]	@ (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006518:	fa22 f303 	lsr.w	r3, r2, r3
 800651c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800651e:	e01e      	b.n	800655e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006520:	4b11      	ldr	r3, [pc, #68]	@ (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800652c:	d106      	bne.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 800652e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006530:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006534:	d102      	bne.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006536:	4b0f      	ldr	r3, [pc, #60]	@ (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8006538:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800653a:	e010      	b.n	800655e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800653c:	4b0a      	ldr	r3, [pc, #40]	@ (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006544:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006548:	d106      	bne.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 800654a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006550:	d102      	bne.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006552:	4b09      	ldr	r3, [pc, #36]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8006554:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006556:	e002      	b.n	800655e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006558:	2300      	movs	r3, #0
 800655a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 800655c:	e003      	b.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 800655e:	e002      	b.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8006560:	2300      	movs	r3, #0
 8006562:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006564:	bf00      	nop
          }
        }
        break;
 8006566:	e086      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006568:	44020c00 	.word	0x44020c00
 800656c:	00bb8000 	.word	0x00bb8000
 8006570:	03d09000 	.word	0x03d09000
 8006574:	003d0900 	.word	0x003d0900
 8006578:	017d7840 	.word	0x017d7840
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800657c:	4b40      	ldr	r3, [pc, #256]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800657e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006582:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006586:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006588:	4b3d      	ldr	r3, [pc, #244]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006590:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006594:	d105      	bne.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 8006596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006598:	2b00      	cmp	r3, #0
 800659a:	d102      	bne.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 800659c:	4b39      	ldr	r3, [pc, #228]	@ (8006684 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 800659e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065a0:	e031      	b.n	8006606 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80065a2:	4b37      	ldr	r3, [pc, #220]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065ae:	d10a      	bne.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 80065b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b2:	2b10      	cmp	r3, #16
 80065b4:	d107      	bne.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065b6:	f107 0318 	add.w	r3, r7, #24
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fe fe52 	bl	8005264 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065c4:	e01f      	b.n	8006606 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80065c6:	4b2e      	ldr	r3, [pc, #184]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80065c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d106      	bne.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 80065d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d6:	2b20      	cmp	r3, #32
 80065d8:	d103      	bne.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 80065da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065e0:	e011      	b.n	8006606 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80065e2:	4b27      	ldr	r3, [pc, #156]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80065e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065f0:	d106      	bne.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 80065f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f4:	2b30      	cmp	r3, #48	@ 0x30
 80065f6:	d103      	bne.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 80065f8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80065fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065fe:	e002      	b.n	8006606 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8006604:	e037      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006606:	e036      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8006608:	4b1d      	ldr	r3, [pc, #116]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800660a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800660e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006612:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8006614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006616:	2b10      	cmp	r3, #16
 8006618:	d107      	bne.n	800662a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800661a:	f107 0318 	add.w	r3, r7, #24
 800661e:	4618      	mov	r0, r3
 8006620:	f7fe fe20 	bl	8005264 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8006628:	e025      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 800662a:	4b15      	ldr	r3, [pc, #84]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006632:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006636:	d10a      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8006638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663a:	2b20      	cmp	r3, #32
 800663c:	d107      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800663e:	f107 030c 	add.w	r3, r7, #12
 8006642:	4618      	mov	r0, r3
 8006644:	f7fe ff78 	bl	8005538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800664c:	e00f      	b.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800664e:	4b0c      	ldr	r3, [pc, #48]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006656:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800665a:	d105      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 800665c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800665e:	2b30      	cmp	r3, #48	@ 0x30
 8006660:	d102      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 8006662:	4b08      	ldr	r3, [pc, #32]	@ (8006684 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8006664:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006666:	e002      	b.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8006668:	2300      	movs	r3, #0
 800666a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 800666c:	e003      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800666e:	e002      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006674:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 8006676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006678:	4618      	mov	r0, r3
 800667a:	3730      	adds	r7, #48	@ 0x30
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	44020c00 	.word	0x44020c00
 8006684:	02dc6c00 	.word	0x02dc6c00

08006688 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8006690:	4b48      	ldr	r3, [pc, #288]	@ (80067b4 <RCCEx_PLL2_Config+0x12c>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a47      	ldr	r2, [pc, #284]	@ (80067b4 <RCCEx_PLL2_Config+0x12c>)
 8006696:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800669a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800669c:	f7fb fc10 	bl	8001ec0 <HAL_GetTick>
 80066a0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80066a2:	e008      	b.n	80066b6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80066a4:	f7fb fc0c 	bl	8001ec0 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d901      	bls.n	80066b6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e07a      	b.n	80067ac <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80066b6:	4b3f      	ldr	r3, [pc, #252]	@ (80067b4 <RCCEx_PLL2_Config+0x12c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1f0      	bne.n	80066a4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80066c2:	4b3c      	ldr	r3, [pc, #240]	@ (80067b4 <RCCEx_PLL2_Config+0x12c>)
 80066c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80066ca:	f023 0303 	bic.w	r3, r3, #3
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	6811      	ldr	r1, [r2, #0]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	6852      	ldr	r2, [r2, #4]
 80066d6:	0212      	lsls	r2, r2, #8
 80066d8:	430a      	orrs	r2, r1
 80066da:	4936      	ldr	r1, [pc, #216]	@ (80067b4 <RCCEx_PLL2_Config+0x12c>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	3b01      	subs	r3, #1
 80066e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	3b01      	subs	r3, #1
 80066f0:	025b      	lsls	r3, r3, #9
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	431a      	orrs	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	041b      	lsls	r3, r3, #16
 80066fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006702:	431a      	orrs	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	3b01      	subs	r3, #1
 800670a:	061b      	lsls	r3, r3, #24
 800670c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006710:	4928      	ldr	r1, [pc, #160]	@ (80067b4 <RCCEx_PLL2_Config+0x12c>)
 8006712:	4313      	orrs	r3, r2
 8006714:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006716:	4b27      	ldr	r3, [pc, #156]	@ (80067b4 <RCCEx_PLL2_Config+0x12c>)
 8006718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800671a:	f023 020c 	bic.w	r2, r3, #12
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	4924      	ldr	r1, [pc, #144]	@ (80067b4 <RCCEx_PLL2_Config+0x12c>)
 8006724:	4313      	orrs	r3, r2
 8006726:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8006728:	4b22      	ldr	r3, [pc, #136]	@ (80067b4 <RCCEx_PLL2_Config+0x12c>)
 800672a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800672c:	f023 0220 	bic.w	r2, r3, #32
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	69db      	ldr	r3, [r3, #28]
 8006734:	491f      	ldr	r1, [pc, #124]	@ (80067b4 <RCCEx_PLL2_Config+0x12c>)
 8006736:	4313      	orrs	r3, r2
 8006738:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800673a:	4b1e      	ldr	r3, [pc, #120]	@ (80067b4 <RCCEx_PLL2_Config+0x12c>)
 800673c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006742:	491c      	ldr	r1, [pc, #112]	@ (80067b4 <RCCEx_PLL2_Config+0x12c>)
 8006744:	4313      	orrs	r3, r2
 8006746:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8006748:	4b1a      	ldr	r3, [pc, #104]	@ (80067b4 <RCCEx_PLL2_Config+0x12c>)
 800674a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674c:	4a19      	ldr	r2, [pc, #100]	@ (80067b4 <RCCEx_PLL2_Config+0x12c>)
 800674e:	f023 0310 	bic.w	r3, r3, #16
 8006752:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8006754:	4b17      	ldr	r3, [pc, #92]	@ (80067b4 <RCCEx_PLL2_Config+0x12c>)
 8006756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006758:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800675c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	6a12      	ldr	r2, [r2, #32]
 8006764:	00d2      	lsls	r2, r2, #3
 8006766:	4913      	ldr	r1, [pc, #76]	@ (80067b4 <RCCEx_PLL2_Config+0x12c>)
 8006768:	4313      	orrs	r3, r2
 800676a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800676c:	4b11      	ldr	r3, [pc, #68]	@ (80067b4 <RCCEx_PLL2_Config+0x12c>)
 800676e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006770:	4a10      	ldr	r2, [pc, #64]	@ (80067b4 <RCCEx_PLL2_Config+0x12c>)
 8006772:	f043 0310 	orr.w	r3, r3, #16
 8006776:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8006778:	4b0e      	ldr	r3, [pc, #56]	@ (80067b4 <RCCEx_PLL2_Config+0x12c>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a0d      	ldr	r2, [pc, #52]	@ (80067b4 <RCCEx_PLL2_Config+0x12c>)
 800677e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006782:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006784:	f7fb fb9c 	bl	8001ec0 <HAL_GetTick>
 8006788:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800678a:	e008      	b.n	800679e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800678c:	f7fb fb98 	bl	8001ec0 <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	2b02      	cmp	r3, #2
 8006798:	d901      	bls.n	800679e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e006      	b.n	80067ac <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800679e:	4b05      	ldr	r3, [pc, #20]	@ (80067b4 <RCCEx_PLL2_Config+0x12c>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d0f0      	beq.n	800678c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80067aa:	2300      	movs	r3, #0

}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	44020c00 	.word	0x44020c00

080067b8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e0e7      	b.n	800699a <HAL_SPI_Init+0x1e2>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d105      	bne.n	80067e4 <HAL_SPI_Init+0x2c>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	2b0f      	cmp	r3, #15
 80067de:	d901      	bls.n	80067e4 <HAL_SPI_Init+0x2c>
  {
    return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e0da      	b.n	800699a <HAL_SPI_Init+0x1e2>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f8e3 	bl	80069b0 <SPI_GetPacketSize>
 80067ea:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d102      	bne.n	80067fa <HAL_SPI_Init+0x42>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b08      	cmp	r3, #8
 80067f8:	d811      	bhi.n	800681e <HAL_SPI_Init+0x66>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80067fe:	4a69      	ldr	r2, [pc, #420]	@ (80069a4 <HAL_SPI_Init+0x1ec>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d009      	beq.n	8006818 <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a67      	ldr	r2, [pc, #412]	@ (80069a8 <HAL_SPI_Init+0x1f0>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d004      	beq.n	8006818 <HAL_SPI_Init+0x60>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a66      	ldr	r2, [pc, #408]	@ (80069ac <HAL_SPI_Init+0x1f4>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d104      	bne.n	8006822 <HAL_SPI_Init+0x6a>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2b10      	cmp	r3, #16
 800681c:	d901      	bls.n	8006822 <HAL_SPI_Init+0x6a>
  {
    return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e0bb      	b.n	800699a <HAL_SPI_Init+0x1e2>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d106      	bne.n	800683c <HAL_SPI_Init+0x84>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7fa ffa6 	bl	8001788 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f022 0201 	bic.w	r2, r2, #1
 8006852:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800685e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006868:	d119      	bne.n	800689e <HAL_SPI_Init+0xe6>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006872:	d103      	bne.n	800687c <HAL_SPI_Init+0xc4>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006878:	2b00      	cmp	r3, #0
 800687a:	d008      	beq.n	800688e <HAL_SPI_Init+0xd6>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10c      	bne.n	800689e <HAL_SPI_Init+0xe6>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006888:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800688c:	d107      	bne.n	800689e <HAL_SPI_Init+0xe6>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800689c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00f      	beq.n	80068ca <HAL_SPI_Init+0x112>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	2b06      	cmp	r3, #6
 80068b0:	d90b      	bls.n	80068ca <HAL_SPI_Init+0x112>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	e007      	b.n	80068da <HAL_SPI_Init+0x122>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80068d8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	69da      	ldr	r2, [r3, #28]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e2:	431a      	orrs	r2, r3
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	431a      	orrs	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ec:	ea42 0103 	orr.w	r1, r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68da      	ldr	r2, [r3, #12]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006904:	431a      	orrs	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800690a:	431a      	orrs	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	431a      	orrs	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	431a      	orrs	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	431a      	orrs	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	431a      	orrs	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	431a      	orrs	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800692e:	431a      	orrs	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	431a      	orrs	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800693a:	431a      	orrs	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006940:	431a      	orrs	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006946:	ea42 0103 	orr.w	r1, r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 0201 	bic.w	r2, r2, #1
 8006964:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00a      	beq.n	8006988 <HAL_SPI_Init+0x1d0>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	40013000 	.word	0x40013000
 80069a8:	40003800 	.word	0x40003800
 80069ac:	40003c00 	.word	0x40003c00

080069b0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069bc:	095b      	lsrs	r3, r3, #5
 80069be:	3301      	adds	r3, #1
 80069c0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	3301      	adds	r3, #1
 80069c8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	3307      	adds	r3, #7
 80069ce:	08db      	lsrs	r3, r3, #3
 80069d0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	fb02 f303 	mul.w	r3, r2, r3
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b082      	sub	sp, #8
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e042      	b.n	8006a7e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d106      	bne.n	8006a10 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7fa ff3a 	bl	8001884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2224      	movs	r2, #36	@ 0x24
 8006a14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f022 0201 	bic.w	r2, r2, #1
 8006a26:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d002      	beq.n	8006a36 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fb1b 	bl	800706c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f99a 	bl	8006d70 <UART_SetConfig>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d101      	bne.n	8006a46 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e01b      	b.n	8006a7e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689a      	ldr	r2, [r3, #8]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f042 0201 	orr.w	r2, r2, #1
 8006a74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fb9a 	bl	80071b0 <UART_CheckIdleState>
 8006a7c:	4603      	mov	r3, r0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b08a      	sub	sp, #40	@ 0x28
 8006a8a:	af02      	add	r7, sp, #8
 8006a8c:	60f8      	str	r0, [r7, #12]
 8006a8e:	60b9      	str	r1, [r7, #8]
 8006a90:	603b      	str	r3, [r7, #0]
 8006a92:	4613      	mov	r3, r2
 8006a94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a9c:	2b20      	cmp	r3, #32
 8006a9e:	f040 808b 	bne.w	8006bb8 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d002      	beq.n	8006aae <HAL_UART_Transmit+0x28>
 8006aa8:	88fb      	ldrh	r3, [r7, #6]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e083      	b.n	8006bba <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006abc:	2b80      	cmp	r3, #128	@ 0x80
 8006abe:	d107      	bne.n	8006ad0 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ace:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2221      	movs	r2, #33	@ 0x21
 8006adc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ae0:	f7fb f9ee 	bl	8001ec0 <HAL_GetTick>
 8006ae4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	88fa      	ldrh	r2, [r7, #6]
 8006aea:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	88fa      	ldrh	r2, [r7, #6]
 8006af2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006afe:	d108      	bne.n	8006b12 <HAL_UART_Transmit+0x8c>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d104      	bne.n	8006b12 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	61bb      	str	r3, [r7, #24]
 8006b10:	e003      	b.n	8006b1a <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b16:	2300      	movs	r3, #0
 8006b18:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b1a:	e030      	b.n	8006b7e <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	2200      	movs	r2, #0
 8006b24:	2180      	movs	r1, #128	@ 0x80
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f000 fbec 	bl	8007304 <UART_WaitOnFlagUntilTimeout>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d005      	beq.n	8006b3e <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2220      	movs	r2, #32
 8006b36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e03d      	b.n	8006bba <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10b      	bne.n	8006b5c <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	881b      	ldrh	r3, [r3, #0]
 8006b48:	461a      	mov	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b52:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	3302      	adds	r3, #2
 8006b58:	61bb      	str	r3, [r7, #24]
 8006b5a:	e007      	b.n	8006b6c <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	781a      	ldrb	r2, [r3, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	3b01      	subs	r3, #1
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1c8      	bne.n	8006b1c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	2200      	movs	r2, #0
 8006b92:	2140      	movs	r1, #64	@ 0x40
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 fbb5 	bl	8007304 <UART_WaitOnFlagUntilTimeout>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d005      	beq.n	8006bac <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e006      	b.n	8006bba <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	e000      	b.n	8006bba <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8006bb8:	2302      	movs	r3, #2
  }
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3720      	adds	r7, #32
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b08a      	sub	sp, #40	@ 0x28
 8006bc6:	af02      	add	r7, sp, #8
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	60b9      	str	r1, [r7, #8]
 8006bcc:	603b      	str	r3, [r7, #0]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bd8:	2b20      	cmp	r3, #32
 8006bda:	f040 80c4 	bne.w	8006d66 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <HAL_UART_Receive+0x28>
 8006be4:	88fb      	ldrh	r3, [r7, #6]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e0bc      	b.n	8006d68 <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf8:	2b40      	cmp	r3, #64	@ 0x40
 8006bfa:	d107      	bne.n	8006c0c <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689a      	ldr	r2, [r3, #8]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c0a:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2222      	movs	r2, #34	@ 0x22
 8006c18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c22:	f7fb f94d 	bl	8001ec0 <HAL_GetTick>
 8006c26:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	88fa      	ldrh	r2, [r7, #6]
 8006c2c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	88fa      	ldrh	r2, [r7, #6]
 8006c34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c40:	d10e      	bne.n	8006c60 <HAL_UART_Receive+0x9e>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d105      	bne.n	8006c56 <HAL_UART_Receive+0x94>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006c50:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006c54:	e02d      	b.n	8006cb2 <HAL_UART_Receive+0xf0>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	22ff      	movs	r2, #255	@ 0xff
 8006c5a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006c5e:	e028      	b.n	8006cb2 <HAL_UART_Receive+0xf0>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10d      	bne.n	8006c84 <HAL_UART_Receive+0xc2>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d104      	bne.n	8006c7a <HAL_UART_Receive+0xb8>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	22ff      	movs	r2, #255	@ 0xff
 8006c74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006c78:	e01b      	b.n	8006cb2 <HAL_UART_Receive+0xf0>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	227f      	movs	r2, #127	@ 0x7f
 8006c7e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006c82:	e016      	b.n	8006cb2 <HAL_UART_Receive+0xf0>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c8c:	d10d      	bne.n	8006caa <HAL_UART_Receive+0xe8>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d104      	bne.n	8006ca0 <HAL_UART_Receive+0xde>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	227f      	movs	r2, #127	@ 0x7f
 8006c9a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006c9e:	e008      	b.n	8006cb2 <HAL_UART_Receive+0xf0>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	223f      	movs	r2, #63	@ 0x3f
 8006ca4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006ca8:	e003      	b.n	8006cb2 <HAL_UART_Receive+0xf0>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006cb8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cc2:	d108      	bne.n	8006cd6 <HAL_UART_Receive+0x114>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d104      	bne.n	8006cd6 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	61bb      	str	r3, [r7, #24]
 8006cd4:	e003      	b.n	8006cde <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006cde:	e036      	b.n	8006d4e <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	2120      	movs	r1, #32
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f000 fb0a 	bl	8007304 <UART_WaitOnFlagUntilTimeout>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d005      	beq.n	8006d02 <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e032      	b.n	8006d68 <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10c      	bne.n	8006d22 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	8a7b      	ldrh	r3, [r7, #18]
 8006d12:	4013      	ands	r3, r2
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	3302      	adds	r3, #2
 8006d1e:	61bb      	str	r3, [r7, #24]
 8006d20:	e00c      	b.n	8006d3c <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	8a7b      	ldrh	r3, [r7, #18]
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	4013      	ands	r3, r2
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	3b01      	subs	r3, #1
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1c2      	bne.n	8006ce0 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	e000      	b.n	8006d68 <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 8006d66:	2302      	movs	r3, #2
  }
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3720      	adds	r7, #32
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d74:	b094      	sub	sp, #80	@ 0x50
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d82:	689a      	ldr	r2, [r3, #8]
 8006d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	431a      	orrs	r2, r3
 8006d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d92:	69db      	ldr	r3, [r3, #28]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	498a      	ldr	r1, [pc, #552]	@ (8006fc8 <UART_SetConfig+0x258>)
 8006da0:	4019      	ands	r1, r3
 8006da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006da8:	430b      	orrs	r3, r1
 8006daa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db8:	68d9      	ldr	r1, [r3, #12]
 8006dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	ea40 0301 	orr.w	r3, r0, r1
 8006dc2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	4b7f      	ldr	r3, [pc, #508]	@ (8006fcc <UART_SetConfig+0x25c>)
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d004      	beq.n	8006dde <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd6:	6a1a      	ldr	r2, [r3, #32]
 8006dd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8006de8:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8006dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006df2:	430b      	orrs	r3, r1
 8006df4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfc:	f023 000f 	bic.w	r0, r3, #15
 8006e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e02:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	ea40 0301 	orr.w	r3, r0, r1
 8006e0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	4b6f      	ldr	r3, [pc, #444]	@ (8006fd0 <UART_SetConfig+0x260>)
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d102      	bne.n	8006e1e <UART_SetConfig+0xae>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e1c:	e01a      	b.n	8006e54 <UART_SetConfig+0xe4>
 8006e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	4b6c      	ldr	r3, [pc, #432]	@ (8006fd4 <UART_SetConfig+0x264>)
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d102      	bne.n	8006e2e <UART_SetConfig+0xbe>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e2c:	e012      	b.n	8006e54 <UART_SetConfig+0xe4>
 8006e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	4b69      	ldr	r3, [pc, #420]	@ (8006fd8 <UART_SetConfig+0x268>)
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d102      	bne.n	8006e3e <UART_SetConfig+0xce>
 8006e38:	2304      	movs	r3, #4
 8006e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e3c:	e00a      	b.n	8006e54 <UART_SetConfig+0xe4>
 8006e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	4b62      	ldr	r3, [pc, #392]	@ (8006fcc <UART_SetConfig+0x25c>)
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d103      	bne.n	8006e50 <UART_SetConfig+0xe0>
 8006e48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e4e:	e001      	b.n	8006e54 <UART_SetConfig+0xe4>
 8006e50:	2300      	movs	r3, #0
 8006e52:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	4b5c      	ldr	r3, [pc, #368]	@ (8006fcc <UART_SetConfig+0x25c>)
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d171      	bne.n	8006f42 <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e60:	2200      	movs	r2, #0
 8006e62:	623b      	str	r3, [r7, #32]
 8006e64:	627a      	str	r2, [r7, #36]	@ 0x24
 8006e66:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006e6a:	f7fe fccf 	bl	800580c <HAL_RCCEx_GetPeriphCLKFreq>
 8006e6e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 80e2 	beq.w	800703c <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7c:	4a57      	ldr	r2, [pc, #348]	@ (8006fdc <UART_SetConfig+0x26c>)
 8006e7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e82:	461a      	mov	r2, r3
 8006e84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e86:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e8a:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	4613      	mov	r3, r2
 8006e92:	005b      	lsls	r3, r3, #1
 8006e94:	4413      	add	r3, r2
 8006e96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d305      	bcc.n	8006ea8 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ea2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d903      	bls.n	8006eb0 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006eae:	e0c5      	b.n	800703c <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006eb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	61bb      	str	r3, [r7, #24]
 8006eb6:	61fa      	str	r2, [r7, #28]
 8006eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ebc:	4a47      	ldr	r2, [pc, #284]	@ (8006fdc <UART_SetConfig+0x26c>)
 8006ebe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	613b      	str	r3, [r7, #16]
 8006ec8:	617a      	str	r2, [r7, #20]
 8006eca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006ece:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006ed2:	f7f9 feed 	bl	8000cb0 <__aeabi_uldivmod>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	4610      	mov	r0, r2
 8006edc:	4619      	mov	r1, r3
 8006ede:	f04f 0200 	mov.w	r2, #0
 8006ee2:	f04f 0300 	mov.w	r3, #0
 8006ee6:	020b      	lsls	r3, r1, #8
 8006ee8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006eec:	0202      	lsls	r2, r0, #8
 8006eee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ef0:	6849      	ldr	r1, [r1, #4]
 8006ef2:	0849      	lsrs	r1, r1, #1
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	460c      	mov	r4, r1
 8006ef8:	4605      	mov	r5, r0
 8006efa:	eb12 0804 	adds.w	r8, r2, r4
 8006efe:	eb43 0905 	adc.w	r9, r3, r5
 8006f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	60bb      	str	r3, [r7, #8]
 8006f0a:	60fa      	str	r2, [r7, #12]
 8006f0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f10:	4640      	mov	r0, r8
 8006f12:	4649      	mov	r1, r9
 8006f14:	f7f9 fecc 	bl	8000cb0 <__aeabi_uldivmod>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f26:	d308      	bcc.n	8006f3a <UART_SetConfig+0x1ca>
 8006f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f2e:	d204      	bcs.n	8006f3a <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8006f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006f36:	60da      	str	r2, [r3, #12]
 8006f38:	e080      	b.n	800703c <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006f40:	e07c      	b.n	800703c <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f4a:	d149      	bne.n	8006fe0 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006f4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f4e:	2200      	movs	r2, #0
 8006f50:	603b      	str	r3, [r7, #0]
 8006f52:	607a      	str	r2, [r7, #4]
 8006f54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f58:	f7fe fc58 	bl	800580c <HAL_RCCEx_GetPeriphCLKFreq>
 8006f5c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d06b      	beq.n	800703c <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f68:	4a1c      	ldr	r2, [pc, #112]	@ (8006fdc <UART_SetConfig+0x26c>)
 8006f6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f72:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f76:	005a      	lsls	r2, r3, #1
 8006f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	085b      	lsrs	r3, r3, #1
 8006f7e:	441a      	add	r2, r3
 8006f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f8c:	2b0f      	cmp	r3, #15
 8006f8e:	d916      	bls.n	8006fbe <UART_SetConfig+0x24e>
 8006f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f96:	d212      	bcs.n	8006fbe <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	f023 030f 	bic.w	r3, r3, #15
 8006fa0:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fa4:	085b      	lsrs	r3, r3, #1
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8006fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8006fba:	60da      	str	r2, [r3, #12]
 8006fbc:	e03e      	b.n	800703c <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006fc4:	e03a      	b.n	800703c <UART_SetConfig+0x2cc>
 8006fc6:	bf00      	nop
 8006fc8:	cfff69f3 	.word	0xcfff69f3
 8006fcc:	44002400 	.word	0x44002400
 8006fd0:	40013800 	.word	0x40013800
 8006fd4:	40004400 	.word	0x40004400
 8006fd8:	40004800 	.word	0x40004800
 8006fdc:	0800bec0 	.word	0x0800bec0
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006fe0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	469a      	mov	sl, r3
 8006fe6:	4693      	mov	fp, r2
 8006fe8:	4650      	mov	r0, sl
 8006fea:	4659      	mov	r1, fp
 8006fec:	f7fe fc0e 	bl	800580c <HAL_RCCEx_GetPeriphCLKFreq>
 8006ff0:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8006ff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d021      	beq.n	800703c <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ffc:	4a1a      	ldr	r2, [pc, #104]	@ (8007068 <UART_SetConfig+0x2f8>)
 8006ffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007002:	461a      	mov	r2, r3
 8007004:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007006:	fbb3 f2f2 	udiv	r2, r3, r2
 800700a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	085b      	lsrs	r3, r3, #1
 8007010:	441a      	add	r2, r3
 8007012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	fbb2 f3f3 	udiv	r3, r2, r3
 800701a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800701c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800701e:	2b0f      	cmp	r3, #15
 8007020:	d909      	bls.n	8007036 <UART_SetConfig+0x2c6>
 8007022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007028:	d205      	bcs.n	8007036 <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800702a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800702c:	b29a      	uxth	r2, r3
 800702e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	60da      	str	r2, [r3, #12]
 8007034:	e002      	b.n	800703c <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800703c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800703e:	2201      	movs	r2, #1
 8007040:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007046:	2201      	movs	r2, #1
 8007048:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800704c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800704e:	2200      	movs	r2, #0
 8007050:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007054:	2200      	movs	r2, #0
 8007056:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007058:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800705c:	4618      	mov	r0, r3
 800705e:	3750      	adds	r7, #80	@ 0x50
 8007060:	46bd      	mov	sp, r7
 8007062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007066:	bf00      	nop
 8007068:	0800bec0 	.word	0x0800bec0

0800706c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007078:	f003 0308 	and.w	r3, r3, #8
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00a      	beq.n	8007096 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	430a      	orrs	r2, r1
 8007094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00a      	beq.n	80070b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	430a      	orrs	r2, r1
 80070b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070bc:	f003 0302 	and.w	r3, r3, #2
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00a      	beq.n	80070da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070de:	f003 0304 	and.w	r3, r3, #4
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00a      	beq.n	80070fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	430a      	orrs	r2, r1
 80070fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007100:	f003 0310 	and.w	r3, r3, #16
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00a      	beq.n	800711e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	430a      	orrs	r2, r1
 800711c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007122:	f003 0320 	and.w	r3, r3, #32
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007148:	2b00      	cmp	r3, #0
 800714a:	d01a      	beq.n	8007182 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	430a      	orrs	r2, r1
 8007160:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007166:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800716a:	d10a      	bne.n	8007182 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00a      	beq.n	80071a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	605a      	str	r2, [r3, #4]
  }
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b098      	sub	sp, #96	@ 0x60
 80071b4:	af02      	add	r7, sp, #8
 80071b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071c0:	f7fa fe7e 	bl	8001ec0 <HAL_GetTick>
 80071c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0308 	and.w	r3, r3, #8
 80071d0:	2b08      	cmp	r3, #8
 80071d2:	d12f      	bne.n	8007234 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071dc:	2200      	movs	r2, #0
 80071de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f88e 	bl	8007304 <UART_WaitOnFlagUntilTimeout>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d022      	beq.n	8007234 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f6:	e853 3f00 	ldrex	r3, [r3]
 80071fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007202:	653b      	str	r3, [r7, #80]	@ 0x50
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	461a      	mov	r2, r3
 800720a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800720c:	647b      	str	r3, [r7, #68]	@ 0x44
 800720e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007210:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007212:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007214:	e841 2300 	strex	r3, r2, [r1]
 8007218:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800721a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e6      	bne.n	80071ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2220      	movs	r2, #32
 8007224:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e063      	b.n	80072fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0304 	and.w	r3, r3, #4
 800723e:	2b04      	cmp	r3, #4
 8007240:	d149      	bne.n	80072d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007242:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800724a:	2200      	movs	r2, #0
 800724c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 f857 	bl	8007304 <UART_WaitOnFlagUntilTimeout>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d03c      	beq.n	80072d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007264:	e853 3f00 	ldrex	r3, [r3]
 8007268:	623b      	str	r3, [r7, #32]
   return(result);
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007270:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	461a      	mov	r2, r3
 8007278:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800727a:	633b      	str	r3, [r7, #48]	@ 0x30
 800727c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007282:	e841 2300 	strex	r3, r2, [r1]
 8007286:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1e6      	bne.n	800725c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3308      	adds	r3, #8
 8007294:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	e853 3f00 	ldrex	r3, [r3]
 800729c:	60fb      	str	r3, [r7, #12]
   return(result);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f023 0301 	bic.w	r3, r3, #1
 80072a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3308      	adds	r3, #8
 80072ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072ae:	61fa      	str	r2, [r7, #28]
 80072b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b2:	69b9      	ldr	r1, [r7, #24]
 80072b4:	69fa      	ldr	r2, [r7, #28]
 80072b6:	e841 2300 	strex	r3, r2, [r1]
 80072ba:	617b      	str	r3, [r7, #20]
   return(result);
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1e5      	bne.n	800728e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e012      	b.n	80072fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2220      	movs	r2, #32
 80072da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3758      	adds	r7, #88	@ 0x58
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	603b      	str	r3, [r7, #0]
 8007310:	4613      	mov	r3, r2
 8007312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007314:	e04f      	b.n	80073b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731c:	d04b      	beq.n	80073b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800731e:	f7fa fdcf 	bl	8001ec0 <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	69ba      	ldr	r2, [r7, #24]
 800732a:	429a      	cmp	r2, r3
 800732c:	d302      	bcc.n	8007334 <UART_WaitOnFlagUntilTimeout+0x30>
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d101      	bne.n	8007338 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e04e      	b.n	80073d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0304 	and.w	r3, r3, #4
 8007342:	2b00      	cmp	r3, #0
 8007344:	d037      	beq.n	80073b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2b80      	cmp	r3, #128	@ 0x80
 800734a:	d034      	beq.n	80073b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	2b40      	cmp	r3, #64	@ 0x40
 8007350:	d031      	beq.n	80073b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	69db      	ldr	r3, [r3, #28]
 8007358:	f003 0308 	and.w	r3, r3, #8
 800735c:	2b08      	cmp	r3, #8
 800735e:	d110      	bne.n	8007382 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2208      	movs	r2, #8
 8007366:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f000 f838 	bl	80073de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2208      	movs	r2, #8
 8007372:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e029      	b.n	80073d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	69db      	ldr	r3, [r3, #28]
 8007388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800738c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007390:	d111      	bne.n	80073b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800739a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 f81e 	bl	80073de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2220      	movs	r2, #32
 80073a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e00f      	b.n	80073d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	69da      	ldr	r2, [r3, #28]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	4013      	ands	r3, r2
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	bf0c      	ite	eq
 80073c6:	2301      	moveq	r3, #1
 80073c8:	2300      	movne	r3, #0
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	461a      	mov	r2, r3
 80073ce:	79fb      	ldrb	r3, [r7, #7]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d0a0      	beq.n	8007316 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073de:	b480      	push	{r7}
 80073e0:	b095      	sub	sp, #84	@ 0x54
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ee:	e853 3f00 	ldrex	r3, [r3]
 80073f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	461a      	mov	r2, r3
 8007402:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007404:	643b      	str	r3, [r7, #64]	@ 0x40
 8007406:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007408:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800740a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800740c:	e841 2300 	strex	r3, r2, [r1]
 8007410:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1e6      	bne.n	80073e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3308      	adds	r3, #8
 800741e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007420:	6a3b      	ldr	r3, [r7, #32]
 8007422:	e853 3f00 	ldrex	r3, [r3]
 8007426:	61fb      	str	r3, [r7, #28]
   return(result);
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800742e:	f023 0301 	bic.w	r3, r3, #1
 8007432:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3308      	adds	r3, #8
 800743a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800743c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800743e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007440:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007442:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007444:	e841 2300 	strex	r3, r2, [r1]
 8007448:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800744a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1e3      	bne.n	8007418 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007454:	2b01      	cmp	r3, #1
 8007456:	d118      	bne.n	800748a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	60bb      	str	r3, [r7, #8]
   return(result);
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	f023 0310 	bic.w	r3, r3, #16
 800746c:	647b      	str	r3, [r7, #68]	@ 0x44
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	461a      	mov	r2, r3
 8007474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007476:	61bb      	str	r3, [r7, #24]
 8007478:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	6979      	ldr	r1, [r7, #20]
 800747c:	69ba      	ldr	r2, [r7, #24]
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	613b      	str	r3, [r7, #16]
   return(result);
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e6      	bne.n	8007458 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2220      	movs	r2, #32
 800748e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800749e:	bf00      	nop
 80074a0:	3754      	adds	r7, #84	@ 0x54
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b085      	sub	sp, #20
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d101      	bne.n	80074c0 <HAL_UARTEx_DisableFifoMode+0x16>
 80074bc:	2302      	movs	r3, #2
 80074be:	e027      	b.n	8007510 <HAL_UARTEx_DisableFifoMode+0x66>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2224      	movs	r2, #36	@ 0x24
 80074cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f022 0201 	bic.w	r2, r2, #1
 80074e6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80074ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2220      	movs	r2, #32
 8007502:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3714      	adds	r7, #20
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800752c:	2b01      	cmp	r3, #1
 800752e:	d101      	bne.n	8007534 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007530:	2302      	movs	r3, #2
 8007532:	e02d      	b.n	8007590 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2224      	movs	r2, #36	@ 0x24
 8007540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f022 0201 	bic.w	r2, r2, #1
 800755a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	430a      	orrs	r2, r1
 800756e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f84f 	bl	8007614 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2220      	movs	r2, #32
 8007582:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d101      	bne.n	80075b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80075ac:	2302      	movs	r3, #2
 80075ae:	e02d      	b.n	800760c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2224      	movs	r2, #36	@ 0x24
 80075bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 0201 	bic.w	r2, r2, #1
 80075d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	430a      	orrs	r2, r1
 80075ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 f811 	bl	8007614 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2220      	movs	r2, #32
 80075fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007620:	2b00      	cmp	r3, #0
 8007622:	d108      	bne.n	8007636 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007634:	e031      	b.n	800769a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007636:	2308      	movs	r3, #8
 8007638:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800763a:	2308      	movs	r3, #8
 800763c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	0e5b      	lsrs	r3, r3, #25
 8007646:	b2db      	uxtb	r3, r3
 8007648:	f003 0307 	and.w	r3, r3, #7
 800764c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	0f5b      	lsrs	r3, r3, #29
 8007656:	b2db      	uxtb	r3, r3
 8007658:	f003 0307 	and.w	r3, r3, #7
 800765c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800765e:	7bbb      	ldrb	r3, [r7, #14]
 8007660:	7b3a      	ldrb	r2, [r7, #12]
 8007662:	4911      	ldr	r1, [pc, #68]	@ (80076a8 <UARTEx_SetNbDataToProcess+0x94>)
 8007664:	5c8a      	ldrb	r2, [r1, r2]
 8007666:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800766a:	7b3a      	ldrb	r2, [r7, #12]
 800766c:	490f      	ldr	r1, [pc, #60]	@ (80076ac <UARTEx_SetNbDataToProcess+0x98>)
 800766e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007670:	fb93 f3f2 	sdiv	r3, r3, r2
 8007674:	b29a      	uxth	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800767c:	7bfb      	ldrb	r3, [r7, #15]
 800767e:	7b7a      	ldrb	r2, [r7, #13]
 8007680:	4909      	ldr	r1, [pc, #36]	@ (80076a8 <UARTEx_SetNbDataToProcess+0x94>)
 8007682:	5c8a      	ldrb	r2, [r1, r2]
 8007684:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007688:	7b7a      	ldrb	r2, [r7, #13]
 800768a:	4908      	ldr	r1, [pc, #32]	@ (80076ac <UARTEx_SetNbDataToProcess+0x98>)
 800768c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800768e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007692:	b29a      	uxth	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800769a:	bf00      	nop
 800769c:	3714      	adds	r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	0800bed8 	.word	0x0800bed8
 80076ac:	0800bee0 	.word	0x0800bee0

080076b0 <__cvt>:
 80076b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076b4:	ec57 6b10 	vmov	r6, r7, d0
 80076b8:	2f00      	cmp	r7, #0
 80076ba:	460c      	mov	r4, r1
 80076bc:	4619      	mov	r1, r3
 80076be:	463b      	mov	r3, r7
 80076c0:	bfb4      	ite	lt
 80076c2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80076c6:	2300      	movge	r3, #0
 80076c8:	4691      	mov	r9, r2
 80076ca:	bfbf      	itttt	lt
 80076cc:	4632      	movlt	r2, r6
 80076ce:	461f      	movlt	r7, r3
 80076d0:	232d      	movlt	r3, #45	@ 0x2d
 80076d2:	4616      	movlt	r6, r2
 80076d4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80076d8:	700b      	strb	r3, [r1, #0]
 80076da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076dc:	f023 0820 	bic.w	r8, r3, #32
 80076e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80076e4:	d005      	beq.n	80076f2 <__cvt+0x42>
 80076e6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80076ea:	d100      	bne.n	80076ee <__cvt+0x3e>
 80076ec:	3401      	adds	r4, #1
 80076ee:	2102      	movs	r1, #2
 80076f0:	e000      	b.n	80076f4 <__cvt+0x44>
 80076f2:	2103      	movs	r1, #3
 80076f4:	ab03      	add	r3, sp, #12
 80076f6:	4622      	mov	r2, r4
 80076f8:	9301      	str	r3, [sp, #4]
 80076fa:	ab02      	add	r3, sp, #8
 80076fc:	ec47 6b10 	vmov	d0, r6, r7
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	4653      	mov	r3, sl
 8007704:	f001 f97c 	bl	8008a00 <_dtoa_r>
 8007708:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800770c:	4605      	mov	r5, r0
 800770e:	d119      	bne.n	8007744 <__cvt+0x94>
 8007710:	f019 0f01 	tst.w	r9, #1
 8007714:	d00e      	beq.n	8007734 <__cvt+0x84>
 8007716:	eb00 0904 	add.w	r9, r0, r4
 800771a:	2200      	movs	r2, #0
 800771c:	2300      	movs	r3, #0
 800771e:	4630      	mov	r0, r6
 8007720:	4639      	mov	r1, r7
 8007722:	f7f9 f9e5 	bl	8000af0 <__aeabi_dcmpeq>
 8007726:	b108      	cbz	r0, 800772c <__cvt+0x7c>
 8007728:	f8cd 900c 	str.w	r9, [sp, #12]
 800772c:	2230      	movs	r2, #48	@ 0x30
 800772e:	9b03      	ldr	r3, [sp, #12]
 8007730:	454b      	cmp	r3, r9
 8007732:	d31e      	bcc.n	8007772 <__cvt+0xc2>
 8007734:	9b03      	ldr	r3, [sp, #12]
 8007736:	4628      	mov	r0, r5
 8007738:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800773a:	1b5b      	subs	r3, r3, r5
 800773c:	6013      	str	r3, [r2, #0]
 800773e:	b004      	add	sp, #16
 8007740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007744:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007748:	eb00 0904 	add.w	r9, r0, r4
 800774c:	d1e5      	bne.n	800771a <__cvt+0x6a>
 800774e:	7803      	ldrb	r3, [r0, #0]
 8007750:	2b30      	cmp	r3, #48	@ 0x30
 8007752:	d10a      	bne.n	800776a <__cvt+0xba>
 8007754:	2200      	movs	r2, #0
 8007756:	2300      	movs	r3, #0
 8007758:	4630      	mov	r0, r6
 800775a:	4639      	mov	r1, r7
 800775c:	f7f9 f9c8 	bl	8000af0 <__aeabi_dcmpeq>
 8007760:	b918      	cbnz	r0, 800776a <__cvt+0xba>
 8007762:	f1c4 0401 	rsb	r4, r4, #1
 8007766:	f8ca 4000 	str.w	r4, [sl]
 800776a:	f8da 3000 	ldr.w	r3, [sl]
 800776e:	4499      	add	r9, r3
 8007770:	e7d3      	b.n	800771a <__cvt+0x6a>
 8007772:	1c59      	adds	r1, r3, #1
 8007774:	9103      	str	r1, [sp, #12]
 8007776:	701a      	strb	r2, [r3, #0]
 8007778:	e7d9      	b.n	800772e <__cvt+0x7e>

0800777a <__exponent>:
 800777a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800777c:	2900      	cmp	r1, #0
 800777e:	7002      	strb	r2, [r0, #0]
 8007780:	bfba      	itte	lt
 8007782:	4249      	neglt	r1, r1
 8007784:	232d      	movlt	r3, #45	@ 0x2d
 8007786:	232b      	movge	r3, #43	@ 0x2b
 8007788:	2909      	cmp	r1, #9
 800778a:	7043      	strb	r3, [r0, #1]
 800778c:	dd28      	ble.n	80077e0 <__exponent+0x66>
 800778e:	f10d 0307 	add.w	r3, sp, #7
 8007792:	270a      	movs	r7, #10
 8007794:	461d      	mov	r5, r3
 8007796:	461a      	mov	r2, r3
 8007798:	3b01      	subs	r3, #1
 800779a:	fbb1 f6f7 	udiv	r6, r1, r7
 800779e:	fb07 1416 	mls	r4, r7, r6, r1
 80077a2:	3430      	adds	r4, #48	@ 0x30
 80077a4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80077a8:	460c      	mov	r4, r1
 80077aa:	4631      	mov	r1, r6
 80077ac:	2c63      	cmp	r4, #99	@ 0x63
 80077ae:	dcf2      	bgt.n	8007796 <__exponent+0x1c>
 80077b0:	3130      	adds	r1, #48	@ 0x30
 80077b2:	1e94      	subs	r4, r2, #2
 80077b4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80077b8:	1c41      	adds	r1, r0, #1
 80077ba:	4623      	mov	r3, r4
 80077bc:	42ab      	cmp	r3, r5
 80077be:	d30a      	bcc.n	80077d6 <__exponent+0x5c>
 80077c0:	f10d 0309 	add.w	r3, sp, #9
 80077c4:	1a9b      	subs	r3, r3, r2
 80077c6:	42ac      	cmp	r4, r5
 80077c8:	bf88      	it	hi
 80077ca:	2300      	movhi	r3, #0
 80077cc:	3302      	adds	r3, #2
 80077ce:	4403      	add	r3, r0
 80077d0:	1a18      	subs	r0, r3, r0
 80077d2:	b003      	add	sp, #12
 80077d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077d6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80077da:	f801 6f01 	strb.w	r6, [r1, #1]!
 80077de:	e7ed      	b.n	80077bc <__exponent+0x42>
 80077e0:	2330      	movs	r3, #48	@ 0x30
 80077e2:	3130      	adds	r1, #48	@ 0x30
 80077e4:	7083      	strb	r3, [r0, #2]
 80077e6:	1d03      	adds	r3, r0, #4
 80077e8:	70c1      	strb	r1, [r0, #3]
 80077ea:	e7f1      	b.n	80077d0 <__exponent+0x56>

080077ec <_printf_float>:
 80077ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f0:	b08d      	sub	sp, #52	@ 0x34
 80077f2:	460c      	mov	r4, r1
 80077f4:	4616      	mov	r6, r2
 80077f6:	461f      	mov	r7, r3
 80077f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80077fc:	4605      	mov	r5, r0
 80077fe:	f000 ffe3 	bl	80087c8 <_localeconv_r>
 8007802:	6803      	ldr	r3, [r0, #0]
 8007804:	4618      	mov	r0, r3
 8007806:	9304      	str	r3, [sp, #16]
 8007808:	f7f8 fd46 	bl	8000298 <strlen>
 800780c:	2300      	movs	r3, #0
 800780e:	9005      	str	r0, [sp, #20]
 8007810:	930a      	str	r3, [sp, #40]	@ 0x28
 8007812:	f8d8 3000 	ldr.w	r3, [r8]
 8007816:	f894 a018 	ldrb.w	sl, [r4, #24]
 800781a:	3307      	adds	r3, #7
 800781c:	f8d4 b000 	ldr.w	fp, [r4]
 8007820:	f023 0307 	bic.w	r3, r3, #7
 8007824:	f103 0208 	add.w	r2, r3, #8
 8007828:	f8c8 2000 	str.w	r2, [r8]
 800782c:	f04f 32ff 	mov.w	r2, #4294967295
 8007830:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007834:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007838:	f8cd 8018 	str.w	r8, [sp, #24]
 800783c:	9307      	str	r3, [sp, #28]
 800783e:	4b9d      	ldr	r3, [pc, #628]	@ (8007ab4 <_printf_float+0x2c8>)
 8007840:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007844:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007848:	f7f9 f984 	bl	8000b54 <__aeabi_dcmpun>
 800784c:	bb70      	cbnz	r0, 80078ac <_printf_float+0xc0>
 800784e:	f04f 32ff 	mov.w	r2, #4294967295
 8007852:	4b98      	ldr	r3, [pc, #608]	@ (8007ab4 <_printf_float+0x2c8>)
 8007854:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007858:	f7f9 f95e 	bl	8000b18 <__aeabi_dcmple>
 800785c:	bb30      	cbnz	r0, 80078ac <_printf_float+0xc0>
 800785e:	2200      	movs	r2, #0
 8007860:	2300      	movs	r3, #0
 8007862:	4640      	mov	r0, r8
 8007864:	4649      	mov	r1, r9
 8007866:	f7f9 f94d 	bl	8000b04 <__aeabi_dcmplt>
 800786a:	b110      	cbz	r0, 8007872 <_printf_float+0x86>
 800786c:	232d      	movs	r3, #45	@ 0x2d
 800786e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007872:	4a91      	ldr	r2, [pc, #580]	@ (8007ab8 <_printf_float+0x2cc>)
 8007874:	4b91      	ldr	r3, [pc, #580]	@ (8007abc <_printf_float+0x2d0>)
 8007876:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800787a:	bf94      	ite	ls
 800787c:	4690      	movls	r8, r2
 800787e:	4698      	movhi	r8, r3
 8007880:	2303      	movs	r3, #3
 8007882:	f04f 0900 	mov.w	r9, #0
 8007886:	6123      	str	r3, [r4, #16]
 8007888:	f02b 0304 	bic.w	r3, fp, #4
 800788c:	6023      	str	r3, [r4, #0]
 800788e:	4633      	mov	r3, r6
 8007890:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007892:	4621      	mov	r1, r4
 8007894:	4628      	mov	r0, r5
 8007896:	9700      	str	r7, [sp, #0]
 8007898:	f000 f9d2 	bl	8007c40 <_printf_common>
 800789c:	3001      	adds	r0, #1
 800789e:	f040 808d 	bne.w	80079bc <_printf_float+0x1d0>
 80078a2:	f04f 30ff 	mov.w	r0, #4294967295
 80078a6:	b00d      	add	sp, #52	@ 0x34
 80078a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ac:	4642      	mov	r2, r8
 80078ae:	464b      	mov	r3, r9
 80078b0:	4640      	mov	r0, r8
 80078b2:	4649      	mov	r1, r9
 80078b4:	f7f9 f94e 	bl	8000b54 <__aeabi_dcmpun>
 80078b8:	b140      	cbz	r0, 80078cc <_printf_float+0xe0>
 80078ba:	464b      	mov	r3, r9
 80078bc:	4a80      	ldr	r2, [pc, #512]	@ (8007ac0 <_printf_float+0x2d4>)
 80078be:	2b00      	cmp	r3, #0
 80078c0:	bfbc      	itt	lt
 80078c2:	232d      	movlt	r3, #45	@ 0x2d
 80078c4:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80078c8:	4b7e      	ldr	r3, [pc, #504]	@ (8007ac4 <_printf_float+0x2d8>)
 80078ca:	e7d4      	b.n	8007876 <_printf_float+0x8a>
 80078cc:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80078d0:	6863      	ldr	r3, [r4, #4]
 80078d2:	9206      	str	r2, [sp, #24]
 80078d4:	1c5a      	adds	r2, r3, #1
 80078d6:	d13b      	bne.n	8007950 <_printf_float+0x164>
 80078d8:	2306      	movs	r3, #6
 80078da:	6063      	str	r3, [r4, #4]
 80078dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80078e0:	2300      	movs	r3, #0
 80078e2:	4628      	mov	r0, r5
 80078e4:	6022      	str	r2, [r4, #0]
 80078e6:	9303      	str	r3, [sp, #12]
 80078e8:	ab0a      	add	r3, sp, #40	@ 0x28
 80078ea:	e9cd a301 	strd	sl, r3, [sp, #4]
 80078ee:	ab09      	add	r3, sp, #36	@ 0x24
 80078f0:	ec49 8b10 	vmov	d0, r8, r9
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80078fa:	6861      	ldr	r1, [r4, #4]
 80078fc:	f7ff fed8 	bl	80076b0 <__cvt>
 8007900:	9b06      	ldr	r3, [sp, #24]
 8007902:	4680      	mov	r8, r0
 8007904:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007906:	2b47      	cmp	r3, #71	@ 0x47
 8007908:	d129      	bne.n	800795e <_printf_float+0x172>
 800790a:	1cc8      	adds	r0, r1, #3
 800790c:	db02      	blt.n	8007914 <_printf_float+0x128>
 800790e:	6863      	ldr	r3, [r4, #4]
 8007910:	4299      	cmp	r1, r3
 8007912:	dd41      	ble.n	8007998 <_printf_float+0x1ac>
 8007914:	f1aa 0a02 	sub.w	sl, sl, #2
 8007918:	fa5f fa8a 	uxtb.w	sl, sl
 800791c:	3901      	subs	r1, #1
 800791e:	4652      	mov	r2, sl
 8007920:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007924:	9109      	str	r1, [sp, #36]	@ 0x24
 8007926:	f7ff ff28 	bl	800777a <__exponent>
 800792a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800792c:	4681      	mov	r9, r0
 800792e:	1813      	adds	r3, r2, r0
 8007930:	2a01      	cmp	r2, #1
 8007932:	6123      	str	r3, [r4, #16]
 8007934:	dc02      	bgt.n	800793c <_printf_float+0x150>
 8007936:	6822      	ldr	r2, [r4, #0]
 8007938:	07d2      	lsls	r2, r2, #31
 800793a:	d501      	bpl.n	8007940 <_printf_float+0x154>
 800793c:	3301      	adds	r3, #1
 800793e:	6123      	str	r3, [r4, #16]
 8007940:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007944:	2b00      	cmp	r3, #0
 8007946:	d0a2      	beq.n	800788e <_printf_float+0xa2>
 8007948:	232d      	movs	r3, #45	@ 0x2d
 800794a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800794e:	e79e      	b.n	800788e <_printf_float+0xa2>
 8007950:	9a06      	ldr	r2, [sp, #24]
 8007952:	2a47      	cmp	r2, #71	@ 0x47
 8007954:	d1c2      	bne.n	80078dc <_printf_float+0xf0>
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1c0      	bne.n	80078dc <_printf_float+0xf0>
 800795a:	2301      	movs	r3, #1
 800795c:	e7bd      	b.n	80078da <_printf_float+0xee>
 800795e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007962:	d9db      	bls.n	800791c <_printf_float+0x130>
 8007964:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007968:	d118      	bne.n	800799c <_printf_float+0x1b0>
 800796a:	2900      	cmp	r1, #0
 800796c:	6863      	ldr	r3, [r4, #4]
 800796e:	dd0b      	ble.n	8007988 <_printf_float+0x19c>
 8007970:	6121      	str	r1, [r4, #16]
 8007972:	b913      	cbnz	r3, 800797a <_printf_float+0x18e>
 8007974:	6822      	ldr	r2, [r4, #0]
 8007976:	07d0      	lsls	r0, r2, #31
 8007978:	d502      	bpl.n	8007980 <_printf_float+0x194>
 800797a:	3301      	adds	r3, #1
 800797c:	440b      	add	r3, r1
 800797e:	6123      	str	r3, [r4, #16]
 8007980:	f04f 0900 	mov.w	r9, #0
 8007984:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007986:	e7db      	b.n	8007940 <_printf_float+0x154>
 8007988:	b913      	cbnz	r3, 8007990 <_printf_float+0x1a4>
 800798a:	6822      	ldr	r2, [r4, #0]
 800798c:	07d2      	lsls	r2, r2, #31
 800798e:	d501      	bpl.n	8007994 <_printf_float+0x1a8>
 8007990:	3302      	adds	r3, #2
 8007992:	e7f4      	b.n	800797e <_printf_float+0x192>
 8007994:	2301      	movs	r3, #1
 8007996:	e7f2      	b.n	800797e <_printf_float+0x192>
 8007998:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800799c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800799e:	4299      	cmp	r1, r3
 80079a0:	db05      	blt.n	80079ae <_printf_float+0x1c2>
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	6121      	str	r1, [r4, #16]
 80079a6:	07d8      	lsls	r0, r3, #31
 80079a8:	d5ea      	bpl.n	8007980 <_printf_float+0x194>
 80079aa:	1c4b      	adds	r3, r1, #1
 80079ac:	e7e7      	b.n	800797e <_printf_float+0x192>
 80079ae:	2900      	cmp	r1, #0
 80079b0:	bfd4      	ite	le
 80079b2:	f1c1 0202 	rsble	r2, r1, #2
 80079b6:	2201      	movgt	r2, #1
 80079b8:	4413      	add	r3, r2
 80079ba:	e7e0      	b.n	800797e <_printf_float+0x192>
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	055a      	lsls	r2, r3, #21
 80079c0:	d407      	bmi.n	80079d2 <_printf_float+0x1e6>
 80079c2:	6923      	ldr	r3, [r4, #16]
 80079c4:	4642      	mov	r2, r8
 80079c6:	4631      	mov	r1, r6
 80079c8:	4628      	mov	r0, r5
 80079ca:	47b8      	blx	r7
 80079cc:	3001      	adds	r0, #1
 80079ce:	d12b      	bne.n	8007a28 <_printf_float+0x23c>
 80079d0:	e767      	b.n	80078a2 <_printf_float+0xb6>
 80079d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80079d6:	f240 80dd 	bls.w	8007b94 <_printf_float+0x3a8>
 80079da:	2200      	movs	r2, #0
 80079dc:	2300      	movs	r3, #0
 80079de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80079e2:	f7f9 f885 	bl	8000af0 <__aeabi_dcmpeq>
 80079e6:	2800      	cmp	r0, #0
 80079e8:	d033      	beq.n	8007a52 <_printf_float+0x266>
 80079ea:	2301      	movs	r3, #1
 80079ec:	4a36      	ldr	r2, [pc, #216]	@ (8007ac8 <_printf_float+0x2dc>)
 80079ee:	4631      	mov	r1, r6
 80079f0:	4628      	mov	r0, r5
 80079f2:	47b8      	blx	r7
 80079f4:	3001      	adds	r0, #1
 80079f6:	f43f af54 	beq.w	80078a2 <_printf_float+0xb6>
 80079fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80079fe:	4543      	cmp	r3, r8
 8007a00:	db02      	blt.n	8007a08 <_printf_float+0x21c>
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	07d8      	lsls	r0, r3, #31
 8007a06:	d50f      	bpl.n	8007a28 <_printf_float+0x23c>
 8007a08:	4631      	mov	r1, r6
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a10:	47b8      	blx	r7
 8007a12:	3001      	adds	r0, #1
 8007a14:	f43f af45 	beq.w	80078a2 <_printf_float+0xb6>
 8007a18:	f04f 0900 	mov.w	r9, #0
 8007a1c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a20:	f104 0a1a 	add.w	sl, r4, #26
 8007a24:	45c8      	cmp	r8, r9
 8007a26:	dc09      	bgt.n	8007a3c <_printf_float+0x250>
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	079b      	lsls	r3, r3, #30
 8007a2c:	f100 8103 	bmi.w	8007c36 <_printf_float+0x44a>
 8007a30:	68e0      	ldr	r0, [r4, #12]
 8007a32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a34:	4298      	cmp	r0, r3
 8007a36:	bfb8      	it	lt
 8007a38:	4618      	movlt	r0, r3
 8007a3a:	e734      	b.n	80078a6 <_printf_float+0xba>
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	4652      	mov	r2, sl
 8007a40:	4631      	mov	r1, r6
 8007a42:	4628      	mov	r0, r5
 8007a44:	47b8      	blx	r7
 8007a46:	3001      	adds	r0, #1
 8007a48:	f43f af2b 	beq.w	80078a2 <_printf_float+0xb6>
 8007a4c:	f109 0901 	add.w	r9, r9, #1
 8007a50:	e7e8      	b.n	8007a24 <_printf_float+0x238>
 8007a52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	dc39      	bgt.n	8007acc <_printf_float+0x2e0>
 8007a58:	2301      	movs	r3, #1
 8007a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ac8 <_printf_float+0x2dc>)
 8007a5c:	4631      	mov	r1, r6
 8007a5e:	4628      	mov	r0, r5
 8007a60:	47b8      	blx	r7
 8007a62:	3001      	adds	r0, #1
 8007a64:	f43f af1d 	beq.w	80078a2 <_printf_float+0xb6>
 8007a68:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007a6c:	ea59 0303 	orrs.w	r3, r9, r3
 8007a70:	d102      	bne.n	8007a78 <_printf_float+0x28c>
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	07d9      	lsls	r1, r3, #31
 8007a76:	d5d7      	bpl.n	8007a28 <_printf_float+0x23c>
 8007a78:	4631      	mov	r1, r6
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a80:	47b8      	blx	r7
 8007a82:	3001      	adds	r0, #1
 8007a84:	f43f af0d 	beq.w	80078a2 <_printf_float+0xb6>
 8007a88:	f04f 0a00 	mov.w	sl, #0
 8007a8c:	f104 0b1a 	add.w	fp, r4, #26
 8007a90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a92:	425b      	negs	r3, r3
 8007a94:	4553      	cmp	r3, sl
 8007a96:	dc01      	bgt.n	8007a9c <_printf_float+0x2b0>
 8007a98:	464b      	mov	r3, r9
 8007a9a:	e793      	b.n	80079c4 <_printf_float+0x1d8>
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	465a      	mov	r2, fp
 8007aa0:	4631      	mov	r1, r6
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	47b8      	blx	r7
 8007aa6:	3001      	adds	r0, #1
 8007aa8:	f43f aefb 	beq.w	80078a2 <_printf_float+0xb6>
 8007aac:	f10a 0a01 	add.w	sl, sl, #1
 8007ab0:	e7ee      	b.n	8007a90 <_printf_float+0x2a4>
 8007ab2:	bf00      	nop
 8007ab4:	7fefffff 	.word	0x7fefffff
 8007ab8:	0800bee8 	.word	0x0800bee8
 8007abc:	0800beec 	.word	0x0800beec
 8007ac0:	0800bef0 	.word	0x0800bef0
 8007ac4:	0800bef4 	.word	0x0800bef4
 8007ac8:	0800bef8 	.word	0x0800bef8
 8007acc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007ace:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007ad2:	4553      	cmp	r3, sl
 8007ad4:	bfa8      	it	ge
 8007ad6:	4653      	movge	r3, sl
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	4699      	mov	r9, r3
 8007adc:	dc36      	bgt.n	8007b4c <_printf_float+0x360>
 8007ade:	f04f 0b00 	mov.w	fp, #0
 8007ae2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ae6:	f104 021a 	add.w	r2, r4, #26
 8007aea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007aec:	9306      	str	r3, [sp, #24]
 8007aee:	eba3 0309 	sub.w	r3, r3, r9
 8007af2:	455b      	cmp	r3, fp
 8007af4:	dc31      	bgt.n	8007b5a <_printf_float+0x36e>
 8007af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007af8:	459a      	cmp	sl, r3
 8007afa:	dc3a      	bgt.n	8007b72 <_printf_float+0x386>
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	07da      	lsls	r2, r3, #31
 8007b00:	d437      	bmi.n	8007b72 <_printf_float+0x386>
 8007b02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b04:	ebaa 0903 	sub.w	r9, sl, r3
 8007b08:	9b06      	ldr	r3, [sp, #24]
 8007b0a:	ebaa 0303 	sub.w	r3, sl, r3
 8007b0e:	4599      	cmp	r9, r3
 8007b10:	bfa8      	it	ge
 8007b12:	4699      	movge	r9, r3
 8007b14:	f1b9 0f00 	cmp.w	r9, #0
 8007b18:	dc33      	bgt.n	8007b82 <_printf_float+0x396>
 8007b1a:	f04f 0800 	mov.w	r8, #0
 8007b1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b22:	f104 0b1a 	add.w	fp, r4, #26
 8007b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b28:	ebaa 0303 	sub.w	r3, sl, r3
 8007b2c:	eba3 0309 	sub.w	r3, r3, r9
 8007b30:	4543      	cmp	r3, r8
 8007b32:	f77f af79 	ble.w	8007a28 <_printf_float+0x23c>
 8007b36:	2301      	movs	r3, #1
 8007b38:	465a      	mov	r2, fp
 8007b3a:	4631      	mov	r1, r6
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	47b8      	blx	r7
 8007b40:	3001      	adds	r0, #1
 8007b42:	f43f aeae 	beq.w	80078a2 <_printf_float+0xb6>
 8007b46:	f108 0801 	add.w	r8, r8, #1
 8007b4a:	e7ec      	b.n	8007b26 <_printf_float+0x33a>
 8007b4c:	4642      	mov	r2, r8
 8007b4e:	4631      	mov	r1, r6
 8007b50:	4628      	mov	r0, r5
 8007b52:	47b8      	blx	r7
 8007b54:	3001      	adds	r0, #1
 8007b56:	d1c2      	bne.n	8007ade <_printf_float+0x2f2>
 8007b58:	e6a3      	b.n	80078a2 <_printf_float+0xb6>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	4631      	mov	r1, r6
 8007b5e:	4628      	mov	r0, r5
 8007b60:	9206      	str	r2, [sp, #24]
 8007b62:	47b8      	blx	r7
 8007b64:	3001      	adds	r0, #1
 8007b66:	f43f ae9c 	beq.w	80078a2 <_printf_float+0xb6>
 8007b6a:	f10b 0b01 	add.w	fp, fp, #1
 8007b6e:	9a06      	ldr	r2, [sp, #24]
 8007b70:	e7bb      	b.n	8007aea <_printf_float+0x2fe>
 8007b72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b76:	4631      	mov	r1, r6
 8007b78:	4628      	mov	r0, r5
 8007b7a:	47b8      	blx	r7
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	d1c0      	bne.n	8007b02 <_printf_float+0x316>
 8007b80:	e68f      	b.n	80078a2 <_printf_float+0xb6>
 8007b82:	9a06      	ldr	r2, [sp, #24]
 8007b84:	464b      	mov	r3, r9
 8007b86:	4631      	mov	r1, r6
 8007b88:	4628      	mov	r0, r5
 8007b8a:	4442      	add	r2, r8
 8007b8c:	47b8      	blx	r7
 8007b8e:	3001      	adds	r0, #1
 8007b90:	d1c3      	bne.n	8007b1a <_printf_float+0x32e>
 8007b92:	e686      	b.n	80078a2 <_printf_float+0xb6>
 8007b94:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b98:	f1ba 0f01 	cmp.w	sl, #1
 8007b9c:	dc01      	bgt.n	8007ba2 <_printf_float+0x3b6>
 8007b9e:	07db      	lsls	r3, r3, #31
 8007ba0:	d536      	bpl.n	8007c10 <_printf_float+0x424>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	4642      	mov	r2, r8
 8007ba6:	4631      	mov	r1, r6
 8007ba8:	4628      	mov	r0, r5
 8007baa:	47b8      	blx	r7
 8007bac:	3001      	adds	r0, #1
 8007bae:	f43f ae78 	beq.w	80078a2 <_printf_float+0xb6>
 8007bb2:	4631      	mov	r1, r6
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bba:	47b8      	blx	r7
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	f43f ae70 	beq.w	80078a2 <_printf_float+0xb6>
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007bce:	f7f8 ff8f 	bl	8000af0 <__aeabi_dcmpeq>
 8007bd2:	b9c0      	cbnz	r0, 8007c06 <_printf_float+0x41a>
 8007bd4:	4653      	mov	r3, sl
 8007bd6:	f108 0201 	add.w	r2, r8, #1
 8007bda:	4631      	mov	r1, r6
 8007bdc:	4628      	mov	r0, r5
 8007bde:	47b8      	blx	r7
 8007be0:	3001      	adds	r0, #1
 8007be2:	d10c      	bne.n	8007bfe <_printf_float+0x412>
 8007be4:	e65d      	b.n	80078a2 <_printf_float+0xb6>
 8007be6:	2301      	movs	r3, #1
 8007be8:	465a      	mov	r2, fp
 8007bea:	4631      	mov	r1, r6
 8007bec:	4628      	mov	r0, r5
 8007bee:	47b8      	blx	r7
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	f43f ae56 	beq.w	80078a2 <_printf_float+0xb6>
 8007bf6:	f108 0801 	add.w	r8, r8, #1
 8007bfa:	45d0      	cmp	r8, sl
 8007bfc:	dbf3      	blt.n	8007be6 <_printf_float+0x3fa>
 8007bfe:	464b      	mov	r3, r9
 8007c00:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007c04:	e6df      	b.n	80079c6 <_printf_float+0x1da>
 8007c06:	f04f 0800 	mov.w	r8, #0
 8007c0a:	f104 0b1a 	add.w	fp, r4, #26
 8007c0e:	e7f4      	b.n	8007bfa <_printf_float+0x40e>
 8007c10:	2301      	movs	r3, #1
 8007c12:	4642      	mov	r2, r8
 8007c14:	e7e1      	b.n	8007bda <_printf_float+0x3ee>
 8007c16:	2301      	movs	r3, #1
 8007c18:	464a      	mov	r2, r9
 8007c1a:	4631      	mov	r1, r6
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	47b8      	blx	r7
 8007c20:	3001      	adds	r0, #1
 8007c22:	f43f ae3e 	beq.w	80078a2 <_printf_float+0xb6>
 8007c26:	f108 0801 	add.w	r8, r8, #1
 8007c2a:	68e3      	ldr	r3, [r4, #12]
 8007c2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c2e:	1a5b      	subs	r3, r3, r1
 8007c30:	4543      	cmp	r3, r8
 8007c32:	dcf0      	bgt.n	8007c16 <_printf_float+0x42a>
 8007c34:	e6fc      	b.n	8007a30 <_printf_float+0x244>
 8007c36:	f04f 0800 	mov.w	r8, #0
 8007c3a:	f104 0919 	add.w	r9, r4, #25
 8007c3e:	e7f4      	b.n	8007c2a <_printf_float+0x43e>

08007c40 <_printf_common>:
 8007c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c44:	4616      	mov	r6, r2
 8007c46:	4698      	mov	r8, r3
 8007c48:	688a      	ldr	r2, [r1, #8]
 8007c4a:	4607      	mov	r7, r0
 8007c4c:	690b      	ldr	r3, [r1, #16]
 8007c4e:	460c      	mov	r4, r1
 8007c50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c54:	4293      	cmp	r3, r2
 8007c56:	bfb8      	it	lt
 8007c58:	4613      	movlt	r3, r2
 8007c5a:	6033      	str	r3, [r6, #0]
 8007c5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c60:	b10a      	cbz	r2, 8007c66 <_printf_common+0x26>
 8007c62:	3301      	adds	r3, #1
 8007c64:	6033      	str	r3, [r6, #0]
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	0699      	lsls	r1, r3, #26
 8007c6a:	bf42      	ittt	mi
 8007c6c:	6833      	ldrmi	r3, [r6, #0]
 8007c6e:	3302      	addmi	r3, #2
 8007c70:	6033      	strmi	r3, [r6, #0]
 8007c72:	6825      	ldr	r5, [r4, #0]
 8007c74:	f015 0506 	ands.w	r5, r5, #6
 8007c78:	d106      	bne.n	8007c88 <_printf_common+0x48>
 8007c7a:	f104 0a19 	add.w	sl, r4, #25
 8007c7e:	68e3      	ldr	r3, [r4, #12]
 8007c80:	6832      	ldr	r2, [r6, #0]
 8007c82:	1a9b      	subs	r3, r3, r2
 8007c84:	42ab      	cmp	r3, r5
 8007c86:	dc2b      	bgt.n	8007ce0 <_printf_common+0xa0>
 8007c88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c8c:	6822      	ldr	r2, [r4, #0]
 8007c8e:	3b00      	subs	r3, #0
 8007c90:	bf18      	it	ne
 8007c92:	2301      	movne	r3, #1
 8007c94:	0692      	lsls	r2, r2, #26
 8007c96:	d430      	bmi.n	8007cfa <_printf_common+0xba>
 8007c98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c9c:	4641      	mov	r1, r8
 8007c9e:	4638      	mov	r0, r7
 8007ca0:	47c8      	blx	r9
 8007ca2:	3001      	adds	r0, #1
 8007ca4:	d023      	beq.n	8007cee <_printf_common+0xae>
 8007ca6:	6823      	ldr	r3, [r4, #0]
 8007ca8:	341a      	adds	r4, #26
 8007caa:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8007cae:	f003 0306 	and.w	r3, r3, #6
 8007cb2:	2b04      	cmp	r3, #4
 8007cb4:	bf0a      	itet	eq
 8007cb6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8007cba:	2500      	movne	r5, #0
 8007cbc:	6833      	ldreq	r3, [r6, #0]
 8007cbe:	f04f 0600 	mov.w	r6, #0
 8007cc2:	bf08      	it	eq
 8007cc4:	1aed      	subeq	r5, r5, r3
 8007cc6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007cca:	bf08      	it	eq
 8007ccc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	bfc4      	itt	gt
 8007cd4:	1a9b      	subgt	r3, r3, r2
 8007cd6:	18ed      	addgt	r5, r5, r3
 8007cd8:	42b5      	cmp	r5, r6
 8007cda:	d11a      	bne.n	8007d12 <_printf_common+0xd2>
 8007cdc:	2000      	movs	r0, #0
 8007cde:	e008      	b.n	8007cf2 <_printf_common+0xb2>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	4652      	mov	r2, sl
 8007ce4:	4641      	mov	r1, r8
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	47c8      	blx	r9
 8007cea:	3001      	adds	r0, #1
 8007cec:	d103      	bne.n	8007cf6 <_printf_common+0xb6>
 8007cee:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cf6:	3501      	adds	r5, #1
 8007cf8:	e7c1      	b.n	8007c7e <_printf_common+0x3e>
 8007cfa:	18e1      	adds	r1, r4, r3
 8007cfc:	1c5a      	adds	r2, r3, #1
 8007cfe:	2030      	movs	r0, #48	@ 0x30
 8007d00:	3302      	adds	r3, #2
 8007d02:	4422      	add	r2, r4
 8007d04:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d10:	e7c2      	b.n	8007c98 <_printf_common+0x58>
 8007d12:	2301      	movs	r3, #1
 8007d14:	4622      	mov	r2, r4
 8007d16:	4641      	mov	r1, r8
 8007d18:	4638      	mov	r0, r7
 8007d1a:	47c8      	blx	r9
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	d0e6      	beq.n	8007cee <_printf_common+0xae>
 8007d20:	3601      	adds	r6, #1
 8007d22:	e7d9      	b.n	8007cd8 <_printf_common+0x98>

08007d24 <_printf_i>:
 8007d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d28:	7e0f      	ldrb	r7, [r1, #24]
 8007d2a:	4691      	mov	r9, r2
 8007d2c:	4680      	mov	r8, r0
 8007d2e:	460c      	mov	r4, r1
 8007d30:	2f78      	cmp	r7, #120	@ 0x78
 8007d32:	469a      	mov	sl, r3
 8007d34:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d3a:	d807      	bhi.n	8007d4c <_printf_i+0x28>
 8007d3c:	2f62      	cmp	r7, #98	@ 0x62
 8007d3e:	d80a      	bhi.n	8007d56 <_printf_i+0x32>
 8007d40:	2f00      	cmp	r7, #0
 8007d42:	f000 80d2 	beq.w	8007eea <_printf_i+0x1c6>
 8007d46:	2f58      	cmp	r7, #88	@ 0x58
 8007d48:	f000 80b9 	beq.w	8007ebe <_printf_i+0x19a>
 8007d4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d54:	e03a      	b.n	8007dcc <_printf_i+0xa8>
 8007d56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d5a:	2b15      	cmp	r3, #21
 8007d5c:	d8f6      	bhi.n	8007d4c <_printf_i+0x28>
 8007d5e:	a101      	add	r1, pc, #4	@ (adr r1, 8007d64 <_printf_i+0x40>)
 8007d60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d64:	08007dbd 	.word	0x08007dbd
 8007d68:	08007dd1 	.word	0x08007dd1
 8007d6c:	08007d4d 	.word	0x08007d4d
 8007d70:	08007d4d 	.word	0x08007d4d
 8007d74:	08007d4d 	.word	0x08007d4d
 8007d78:	08007d4d 	.word	0x08007d4d
 8007d7c:	08007dd1 	.word	0x08007dd1
 8007d80:	08007d4d 	.word	0x08007d4d
 8007d84:	08007d4d 	.word	0x08007d4d
 8007d88:	08007d4d 	.word	0x08007d4d
 8007d8c:	08007d4d 	.word	0x08007d4d
 8007d90:	08007ed1 	.word	0x08007ed1
 8007d94:	08007dfb 	.word	0x08007dfb
 8007d98:	08007e8b 	.word	0x08007e8b
 8007d9c:	08007d4d 	.word	0x08007d4d
 8007da0:	08007d4d 	.word	0x08007d4d
 8007da4:	08007ef3 	.word	0x08007ef3
 8007da8:	08007d4d 	.word	0x08007d4d
 8007dac:	08007dfb 	.word	0x08007dfb
 8007db0:	08007d4d 	.word	0x08007d4d
 8007db4:	08007d4d 	.word	0x08007d4d
 8007db8:	08007e93 	.word	0x08007e93
 8007dbc:	6833      	ldr	r3, [r6, #0]
 8007dbe:	1d1a      	adds	r2, r3, #4
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6032      	str	r2, [r6, #0]
 8007dc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007dc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e09d      	b.n	8007f0c <_printf_i+0x1e8>
 8007dd0:	6833      	ldr	r3, [r6, #0]
 8007dd2:	6820      	ldr	r0, [r4, #0]
 8007dd4:	1d19      	adds	r1, r3, #4
 8007dd6:	6031      	str	r1, [r6, #0]
 8007dd8:	0606      	lsls	r6, r0, #24
 8007dda:	d501      	bpl.n	8007de0 <_printf_i+0xbc>
 8007ddc:	681d      	ldr	r5, [r3, #0]
 8007dde:	e003      	b.n	8007de8 <_printf_i+0xc4>
 8007de0:	0645      	lsls	r5, r0, #25
 8007de2:	d5fb      	bpl.n	8007ddc <_printf_i+0xb8>
 8007de4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007de8:	2d00      	cmp	r5, #0
 8007dea:	da03      	bge.n	8007df4 <_printf_i+0xd0>
 8007dec:	232d      	movs	r3, #45	@ 0x2d
 8007dee:	426d      	negs	r5, r5
 8007df0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007df4:	4859      	ldr	r0, [pc, #356]	@ (8007f5c <_printf_i+0x238>)
 8007df6:	230a      	movs	r3, #10
 8007df8:	e011      	b.n	8007e1e <_printf_i+0xfa>
 8007dfa:	6821      	ldr	r1, [r4, #0]
 8007dfc:	6833      	ldr	r3, [r6, #0]
 8007dfe:	0608      	lsls	r0, r1, #24
 8007e00:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e04:	d402      	bmi.n	8007e0c <_printf_i+0xe8>
 8007e06:	0649      	lsls	r1, r1, #25
 8007e08:	bf48      	it	mi
 8007e0a:	b2ad      	uxthmi	r5, r5
 8007e0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e0e:	6033      	str	r3, [r6, #0]
 8007e10:	4852      	ldr	r0, [pc, #328]	@ (8007f5c <_printf_i+0x238>)
 8007e12:	bf14      	ite	ne
 8007e14:	230a      	movne	r3, #10
 8007e16:	2308      	moveq	r3, #8
 8007e18:	2100      	movs	r1, #0
 8007e1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e1e:	6866      	ldr	r6, [r4, #4]
 8007e20:	2e00      	cmp	r6, #0
 8007e22:	60a6      	str	r6, [r4, #8]
 8007e24:	bfa2      	ittt	ge
 8007e26:	6821      	ldrge	r1, [r4, #0]
 8007e28:	f021 0104 	bicge.w	r1, r1, #4
 8007e2c:	6021      	strge	r1, [r4, #0]
 8007e2e:	b90d      	cbnz	r5, 8007e34 <_printf_i+0x110>
 8007e30:	2e00      	cmp	r6, #0
 8007e32:	d04b      	beq.n	8007ecc <_printf_i+0x1a8>
 8007e34:	4616      	mov	r6, r2
 8007e36:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e3a:	fb03 5711 	mls	r7, r3, r1, r5
 8007e3e:	5dc7      	ldrb	r7, [r0, r7]
 8007e40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e44:	462f      	mov	r7, r5
 8007e46:	460d      	mov	r5, r1
 8007e48:	42bb      	cmp	r3, r7
 8007e4a:	d9f4      	bls.n	8007e36 <_printf_i+0x112>
 8007e4c:	2b08      	cmp	r3, #8
 8007e4e:	d10b      	bne.n	8007e68 <_printf_i+0x144>
 8007e50:	6823      	ldr	r3, [r4, #0]
 8007e52:	07df      	lsls	r7, r3, #31
 8007e54:	d508      	bpl.n	8007e68 <_printf_i+0x144>
 8007e56:	6923      	ldr	r3, [r4, #16]
 8007e58:	6861      	ldr	r1, [r4, #4]
 8007e5a:	4299      	cmp	r1, r3
 8007e5c:	bfde      	ittt	le
 8007e5e:	2330      	movle	r3, #48	@ 0x30
 8007e60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e68:	1b92      	subs	r2, r2, r6
 8007e6a:	6122      	str	r2, [r4, #16]
 8007e6c:	464b      	mov	r3, r9
 8007e6e:	aa03      	add	r2, sp, #12
 8007e70:	4621      	mov	r1, r4
 8007e72:	4640      	mov	r0, r8
 8007e74:	f8cd a000 	str.w	sl, [sp]
 8007e78:	f7ff fee2 	bl	8007c40 <_printf_common>
 8007e7c:	3001      	adds	r0, #1
 8007e7e:	d14a      	bne.n	8007f16 <_printf_i+0x1f2>
 8007e80:	f04f 30ff 	mov.w	r0, #4294967295
 8007e84:	b004      	add	sp, #16
 8007e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e8a:	6823      	ldr	r3, [r4, #0]
 8007e8c:	f043 0320 	orr.w	r3, r3, #32
 8007e90:	6023      	str	r3, [r4, #0]
 8007e92:	2778      	movs	r7, #120	@ 0x78
 8007e94:	4832      	ldr	r0, [pc, #200]	@ (8007f60 <_printf_i+0x23c>)
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e9c:	061f      	lsls	r7, r3, #24
 8007e9e:	6831      	ldr	r1, [r6, #0]
 8007ea0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ea4:	d402      	bmi.n	8007eac <_printf_i+0x188>
 8007ea6:	065f      	lsls	r7, r3, #25
 8007ea8:	bf48      	it	mi
 8007eaa:	b2ad      	uxthmi	r5, r5
 8007eac:	6031      	str	r1, [r6, #0]
 8007eae:	07d9      	lsls	r1, r3, #31
 8007eb0:	bf44      	itt	mi
 8007eb2:	f043 0320 	orrmi.w	r3, r3, #32
 8007eb6:	6023      	strmi	r3, [r4, #0]
 8007eb8:	b11d      	cbz	r5, 8007ec2 <_printf_i+0x19e>
 8007eba:	2310      	movs	r3, #16
 8007ebc:	e7ac      	b.n	8007e18 <_printf_i+0xf4>
 8007ebe:	4827      	ldr	r0, [pc, #156]	@ (8007f5c <_printf_i+0x238>)
 8007ec0:	e7e9      	b.n	8007e96 <_printf_i+0x172>
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	f023 0320 	bic.w	r3, r3, #32
 8007ec8:	6023      	str	r3, [r4, #0]
 8007eca:	e7f6      	b.n	8007eba <_printf_i+0x196>
 8007ecc:	4616      	mov	r6, r2
 8007ece:	e7bd      	b.n	8007e4c <_printf_i+0x128>
 8007ed0:	6833      	ldr	r3, [r6, #0]
 8007ed2:	6825      	ldr	r5, [r4, #0]
 8007ed4:	1d18      	adds	r0, r3, #4
 8007ed6:	6961      	ldr	r1, [r4, #20]
 8007ed8:	6030      	str	r0, [r6, #0]
 8007eda:	062e      	lsls	r6, r5, #24
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	d501      	bpl.n	8007ee4 <_printf_i+0x1c0>
 8007ee0:	6019      	str	r1, [r3, #0]
 8007ee2:	e002      	b.n	8007eea <_printf_i+0x1c6>
 8007ee4:	0668      	lsls	r0, r5, #25
 8007ee6:	d5fb      	bpl.n	8007ee0 <_printf_i+0x1bc>
 8007ee8:	8019      	strh	r1, [r3, #0]
 8007eea:	2300      	movs	r3, #0
 8007eec:	4616      	mov	r6, r2
 8007eee:	6123      	str	r3, [r4, #16]
 8007ef0:	e7bc      	b.n	8007e6c <_printf_i+0x148>
 8007ef2:	6833      	ldr	r3, [r6, #0]
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	1d1a      	adds	r2, r3, #4
 8007ef8:	6032      	str	r2, [r6, #0]
 8007efa:	681e      	ldr	r6, [r3, #0]
 8007efc:	6862      	ldr	r2, [r4, #4]
 8007efe:	4630      	mov	r0, r6
 8007f00:	f000 fcd9 	bl	80088b6 <memchr>
 8007f04:	b108      	cbz	r0, 8007f0a <_printf_i+0x1e6>
 8007f06:	1b80      	subs	r0, r0, r6
 8007f08:	6060      	str	r0, [r4, #4]
 8007f0a:	6863      	ldr	r3, [r4, #4]
 8007f0c:	6123      	str	r3, [r4, #16]
 8007f0e:	2300      	movs	r3, #0
 8007f10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f14:	e7aa      	b.n	8007e6c <_printf_i+0x148>
 8007f16:	6923      	ldr	r3, [r4, #16]
 8007f18:	4632      	mov	r2, r6
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	4640      	mov	r0, r8
 8007f1e:	47d0      	blx	sl
 8007f20:	3001      	adds	r0, #1
 8007f22:	d0ad      	beq.n	8007e80 <_printf_i+0x15c>
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	079b      	lsls	r3, r3, #30
 8007f28:	d413      	bmi.n	8007f52 <_printf_i+0x22e>
 8007f2a:	68e0      	ldr	r0, [r4, #12]
 8007f2c:	9b03      	ldr	r3, [sp, #12]
 8007f2e:	4298      	cmp	r0, r3
 8007f30:	bfb8      	it	lt
 8007f32:	4618      	movlt	r0, r3
 8007f34:	e7a6      	b.n	8007e84 <_printf_i+0x160>
 8007f36:	2301      	movs	r3, #1
 8007f38:	4632      	mov	r2, r6
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	4640      	mov	r0, r8
 8007f3e:	47d0      	blx	sl
 8007f40:	3001      	adds	r0, #1
 8007f42:	d09d      	beq.n	8007e80 <_printf_i+0x15c>
 8007f44:	3501      	adds	r5, #1
 8007f46:	68e3      	ldr	r3, [r4, #12]
 8007f48:	9903      	ldr	r1, [sp, #12]
 8007f4a:	1a5b      	subs	r3, r3, r1
 8007f4c:	42ab      	cmp	r3, r5
 8007f4e:	dcf2      	bgt.n	8007f36 <_printf_i+0x212>
 8007f50:	e7eb      	b.n	8007f2a <_printf_i+0x206>
 8007f52:	2500      	movs	r5, #0
 8007f54:	f104 0619 	add.w	r6, r4, #25
 8007f58:	e7f5      	b.n	8007f46 <_printf_i+0x222>
 8007f5a:	bf00      	nop
 8007f5c:	0800befa 	.word	0x0800befa
 8007f60:	0800bf0b 	.word	0x0800bf0b

08007f64 <_scanf_float>:
 8007f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f68:	b087      	sub	sp, #28
 8007f6a:	4617      	mov	r7, r2
 8007f6c:	4680      	mov	r8, r0
 8007f6e:	460c      	mov	r4, r1
 8007f70:	9303      	str	r3, [sp, #12]
 8007f72:	688b      	ldr	r3, [r1, #8]
 8007f74:	1e5a      	subs	r2, r3, #1
 8007f76:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007f7a:	460a      	mov	r2, r1
 8007f7c:	bf89      	itett	hi
 8007f7e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007f82:	f04f 0b00 	movls.w	fp, #0
 8007f86:	eb03 0b05 	addhi.w	fp, r3, r5
 8007f8a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007f8e:	f04f 0500 	mov.w	r5, #0
 8007f92:	bf88      	it	hi
 8007f94:	608b      	strhi	r3, [r1, #8]
 8007f96:	680b      	ldr	r3, [r1, #0]
 8007f98:	46aa      	mov	sl, r5
 8007f9a:	46a9      	mov	r9, r5
 8007f9c:	9502      	str	r5, [sp, #8]
 8007f9e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007fa2:	f842 3b1c 	str.w	r3, [r2], #28
 8007fa6:	4616      	mov	r6, r2
 8007fa8:	9201      	str	r2, [sp, #4]
 8007faa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007fae:	68a2      	ldr	r2, [r4, #8]
 8007fb0:	b152      	cbz	r2, 8007fc8 <_scanf_float+0x64>
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	2b4e      	cmp	r3, #78	@ 0x4e
 8007fb8:	d864      	bhi.n	8008084 <_scanf_float+0x120>
 8007fba:	2b40      	cmp	r3, #64	@ 0x40
 8007fbc:	d83c      	bhi.n	8008038 <_scanf_float+0xd4>
 8007fbe:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007fc2:	b2c8      	uxtb	r0, r1
 8007fc4:	280e      	cmp	r0, #14
 8007fc6:	d93a      	bls.n	800803e <_scanf_float+0xda>
 8007fc8:	f1b9 0f00 	cmp.w	r9, #0
 8007fcc:	d003      	beq.n	8007fd6 <_scanf_float+0x72>
 8007fce:	6823      	ldr	r3, [r4, #0]
 8007fd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fd4:	6023      	str	r3, [r4, #0]
 8007fd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fda:	f1ba 0f01 	cmp.w	sl, #1
 8007fde:	f200 8117 	bhi.w	8008210 <_scanf_float+0x2ac>
 8007fe2:	9b01      	ldr	r3, [sp, #4]
 8007fe4:	429e      	cmp	r6, r3
 8007fe6:	f200 8108 	bhi.w	80081fa <_scanf_float+0x296>
 8007fea:	2001      	movs	r0, #1
 8007fec:	b007      	add	sp, #28
 8007fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007ff6:	2a0d      	cmp	r2, #13
 8007ff8:	d8e6      	bhi.n	8007fc8 <_scanf_float+0x64>
 8007ffa:	a101      	add	r1, pc, #4	@ (adr r1, 8008000 <_scanf_float+0x9c>)
 8007ffc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008000:	08008147 	.word	0x08008147
 8008004:	08007fc9 	.word	0x08007fc9
 8008008:	08007fc9 	.word	0x08007fc9
 800800c:	08007fc9 	.word	0x08007fc9
 8008010:	080081a7 	.word	0x080081a7
 8008014:	0800817f 	.word	0x0800817f
 8008018:	08007fc9 	.word	0x08007fc9
 800801c:	08007fc9 	.word	0x08007fc9
 8008020:	08008155 	.word	0x08008155
 8008024:	08007fc9 	.word	0x08007fc9
 8008028:	08007fc9 	.word	0x08007fc9
 800802c:	08007fc9 	.word	0x08007fc9
 8008030:	08007fc9 	.word	0x08007fc9
 8008034:	0800810d 	.word	0x0800810d
 8008038:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800803c:	e7db      	b.n	8007ff6 <_scanf_float+0x92>
 800803e:	290e      	cmp	r1, #14
 8008040:	d8c2      	bhi.n	8007fc8 <_scanf_float+0x64>
 8008042:	a001      	add	r0, pc, #4	@ (adr r0, 8008048 <_scanf_float+0xe4>)
 8008044:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008048:	080080fd 	.word	0x080080fd
 800804c:	08007fc9 	.word	0x08007fc9
 8008050:	080080fd 	.word	0x080080fd
 8008054:	08008193 	.word	0x08008193
 8008058:	08007fc9 	.word	0x08007fc9
 800805c:	080080a5 	.word	0x080080a5
 8008060:	080080e3 	.word	0x080080e3
 8008064:	080080e3 	.word	0x080080e3
 8008068:	080080e3 	.word	0x080080e3
 800806c:	080080e3 	.word	0x080080e3
 8008070:	080080e3 	.word	0x080080e3
 8008074:	080080e3 	.word	0x080080e3
 8008078:	080080e3 	.word	0x080080e3
 800807c:	080080e3 	.word	0x080080e3
 8008080:	080080e3 	.word	0x080080e3
 8008084:	2b6e      	cmp	r3, #110	@ 0x6e
 8008086:	d809      	bhi.n	800809c <_scanf_float+0x138>
 8008088:	2b60      	cmp	r3, #96	@ 0x60
 800808a:	d8b2      	bhi.n	8007ff2 <_scanf_float+0x8e>
 800808c:	2b54      	cmp	r3, #84	@ 0x54
 800808e:	d07b      	beq.n	8008188 <_scanf_float+0x224>
 8008090:	2b59      	cmp	r3, #89	@ 0x59
 8008092:	d199      	bne.n	8007fc8 <_scanf_float+0x64>
 8008094:	2d07      	cmp	r5, #7
 8008096:	d197      	bne.n	8007fc8 <_scanf_float+0x64>
 8008098:	2508      	movs	r5, #8
 800809a:	e02c      	b.n	80080f6 <_scanf_float+0x192>
 800809c:	2b74      	cmp	r3, #116	@ 0x74
 800809e:	d073      	beq.n	8008188 <_scanf_float+0x224>
 80080a0:	2b79      	cmp	r3, #121	@ 0x79
 80080a2:	e7f6      	b.n	8008092 <_scanf_float+0x12e>
 80080a4:	6821      	ldr	r1, [r4, #0]
 80080a6:	05c8      	lsls	r0, r1, #23
 80080a8:	d51b      	bpl.n	80080e2 <_scanf_float+0x17e>
 80080aa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80080ae:	f109 0901 	add.w	r9, r9, #1
 80080b2:	6021      	str	r1, [r4, #0]
 80080b4:	f1bb 0f00 	cmp.w	fp, #0
 80080b8:	d003      	beq.n	80080c2 <_scanf_float+0x15e>
 80080ba:	3201      	adds	r2, #1
 80080bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80080c0:	60a2      	str	r2, [r4, #8]
 80080c2:	68a3      	ldr	r3, [r4, #8]
 80080c4:	3b01      	subs	r3, #1
 80080c6:	60a3      	str	r3, [r4, #8]
 80080c8:	6923      	ldr	r3, [r4, #16]
 80080ca:	3301      	adds	r3, #1
 80080cc:	6123      	str	r3, [r4, #16]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	3b01      	subs	r3, #1
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	607b      	str	r3, [r7, #4]
 80080d6:	f340 8087 	ble.w	80081e8 <_scanf_float+0x284>
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	3301      	adds	r3, #1
 80080de:	603b      	str	r3, [r7, #0]
 80080e0:	e765      	b.n	8007fae <_scanf_float+0x4a>
 80080e2:	eb1a 0105 	adds.w	r1, sl, r5
 80080e6:	f47f af6f 	bne.w	8007fc8 <_scanf_float+0x64>
 80080ea:	6822      	ldr	r2, [r4, #0]
 80080ec:	460d      	mov	r5, r1
 80080ee:	468a      	mov	sl, r1
 80080f0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80080f4:	6022      	str	r2, [r4, #0]
 80080f6:	f806 3b01 	strb.w	r3, [r6], #1
 80080fa:	e7e2      	b.n	80080c2 <_scanf_float+0x15e>
 80080fc:	6822      	ldr	r2, [r4, #0]
 80080fe:	0610      	lsls	r0, r2, #24
 8008100:	f57f af62 	bpl.w	8007fc8 <_scanf_float+0x64>
 8008104:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008108:	6022      	str	r2, [r4, #0]
 800810a:	e7f4      	b.n	80080f6 <_scanf_float+0x192>
 800810c:	f1ba 0f00 	cmp.w	sl, #0
 8008110:	d10e      	bne.n	8008130 <_scanf_float+0x1cc>
 8008112:	f1b9 0f00 	cmp.w	r9, #0
 8008116:	d10e      	bne.n	8008136 <_scanf_float+0x1d2>
 8008118:	6822      	ldr	r2, [r4, #0]
 800811a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800811e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008122:	d108      	bne.n	8008136 <_scanf_float+0x1d2>
 8008124:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008128:	f04f 0a01 	mov.w	sl, #1
 800812c:	6022      	str	r2, [r4, #0]
 800812e:	e7e2      	b.n	80080f6 <_scanf_float+0x192>
 8008130:	f1ba 0f02 	cmp.w	sl, #2
 8008134:	d055      	beq.n	80081e2 <_scanf_float+0x27e>
 8008136:	2d01      	cmp	r5, #1
 8008138:	d002      	beq.n	8008140 <_scanf_float+0x1dc>
 800813a:	2d04      	cmp	r5, #4
 800813c:	f47f af44 	bne.w	8007fc8 <_scanf_float+0x64>
 8008140:	3501      	adds	r5, #1
 8008142:	b2ed      	uxtb	r5, r5
 8008144:	e7d7      	b.n	80080f6 <_scanf_float+0x192>
 8008146:	f1ba 0f01 	cmp.w	sl, #1
 800814a:	f47f af3d 	bne.w	8007fc8 <_scanf_float+0x64>
 800814e:	f04f 0a02 	mov.w	sl, #2
 8008152:	e7d0      	b.n	80080f6 <_scanf_float+0x192>
 8008154:	b97d      	cbnz	r5, 8008176 <_scanf_float+0x212>
 8008156:	f1b9 0f00 	cmp.w	r9, #0
 800815a:	f47f af38 	bne.w	8007fce <_scanf_float+0x6a>
 800815e:	6822      	ldr	r2, [r4, #0]
 8008160:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008164:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008168:	f040 8107 	bne.w	800837a <_scanf_float+0x416>
 800816c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008170:	2501      	movs	r5, #1
 8008172:	6022      	str	r2, [r4, #0]
 8008174:	e7bf      	b.n	80080f6 <_scanf_float+0x192>
 8008176:	2d03      	cmp	r5, #3
 8008178:	d0e2      	beq.n	8008140 <_scanf_float+0x1dc>
 800817a:	2d05      	cmp	r5, #5
 800817c:	e7de      	b.n	800813c <_scanf_float+0x1d8>
 800817e:	2d02      	cmp	r5, #2
 8008180:	f47f af22 	bne.w	8007fc8 <_scanf_float+0x64>
 8008184:	2503      	movs	r5, #3
 8008186:	e7b6      	b.n	80080f6 <_scanf_float+0x192>
 8008188:	2d06      	cmp	r5, #6
 800818a:	f47f af1d 	bne.w	8007fc8 <_scanf_float+0x64>
 800818e:	2507      	movs	r5, #7
 8008190:	e7b1      	b.n	80080f6 <_scanf_float+0x192>
 8008192:	6822      	ldr	r2, [r4, #0]
 8008194:	0591      	lsls	r1, r2, #22
 8008196:	f57f af17 	bpl.w	8007fc8 <_scanf_float+0x64>
 800819a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800819e:	f8cd 9008 	str.w	r9, [sp, #8]
 80081a2:	6022      	str	r2, [r4, #0]
 80081a4:	e7a7      	b.n	80080f6 <_scanf_float+0x192>
 80081a6:	6822      	ldr	r2, [r4, #0]
 80081a8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80081ac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80081b0:	d006      	beq.n	80081c0 <_scanf_float+0x25c>
 80081b2:	0550      	lsls	r0, r2, #21
 80081b4:	f57f af08 	bpl.w	8007fc8 <_scanf_float+0x64>
 80081b8:	f1b9 0f00 	cmp.w	r9, #0
 80081bc:	f000 80dd 	beq.w	800837a <_scanf_float+0x416>
 80081c0:	0591      	lsls	r1, r2, #22
 80081c2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80081c6:	bf58      	it	pl
 80081c8:	9902      	ldrpl	r1, [sp, #8]
 80081ca:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80081ce:	bf58      	it	pl
 80081d0:	eba9 0101 	subpl.w	r1, r9, r1
 80081d4:	6022      	str	r2, [r4, #0]
 80081d6:	f04f 0900 	mov.w	r9, #0
 80081da:	bf58      	it	pl
 80081dc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80081e0:	e789      	b.n	80080f6 <_scanf_float+0x192>
 80081e2:	f04f 0a03 	mov.w	sl, #3
 80081e6:	e786      	b.n	80080f6 <_scanf_float+0x192>
 80081e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80081ec:	4639      	mov	r1, r7
 80081ee:	4640      	mov	r0, r8
 80081f0:	4798      	blx	r3
 80081f2:	2800      	cmp	r0, #0
 80081f4:	f43f aedb 	beq.w	8007fae <_scanf_float+0x4a>
 80081f8:	e6e6      	b.n	8007fc8 <_scanf_float+0x64>
 80081fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80081fe:	463a      	mov	r2, r7
 8008200:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008204:	4640      	mov	r0, r8
 8008206:	4798      	blx	r3
 8008208:	6923      	ldr	r3, [r4, #16]
 800820a:	3b01      	subs	r3, #1
 800820c:	6123      	str	r3, [r4, #16]
 800820e:	e6e8      	b.n	8007fe2 <_scanf_float+0x7e>
 8008210:	1e6b      	subs	r3, r5, #1
 8008212:	2b06      	cmp	r3, #6
 8008214:	d824      	bhi.n	8008260 <_scanf_float+0x2fc>
 8008216:	2d02      	cmp	r5, #2
 8008218:	d836      	bhi.n	8008288 <_scanf_float+0x324>
 800821a:	9b01      	ldr	r3, [sp, #4]
 800821c:	429e      	cmp	r6, r3
 800821e:	f67f aee4 	bls.w	8007fea <_scanf_float+0x86>
 8008222:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008226:	463a      	mov	r2, r7
 8008228:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800822c:	4640      	mov	r0, r8
 800822e:	4798      	blx	r3
 8008230:	6923      	ldr	r3, [r4, #16]
 8008232:	3b01      	subs	r3, #1
 8008234:	6123      	str	r3, [r4, #16]
 8008236:	e7f0      	b.n	800821a <_scanf_float+0x2b6>
 8008238:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800823c:	463a      	mov	r2, r7
 800823e:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008242:	4640      	mov	r0, r8
 8008244:	4798      	blx	r3
 8008246:	6923      	ldr	r3, [r4, #16]
 8008248:	3b01      	subs	r3, #1
 800824a:	6123      	str	r3, [r4, #16]
 800824c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008250:	fa5f fa8a 	uxtb.w	sl, sl
 8008254:	f1ba 0f02 	cmp.w	sl, #2
 8008258:	d1ee      	bne.n	8008238 <_scanf_float+0x2d4>
 800825a:	3d03      	subs	r5, #3
 800825c:	b2ed      	uxtb	r5, r5
 800825e:	1b76      	subs	r6, r6, r5
 8008260:	6823      	ldr	r3, [r4, #0]
 8008262:	05da      	lsls	r2, r3, #23
 8008264:	d52f      	bpl.n	80082c6 <_scanf_float+0x362>
 8008266:	055b      	lsls	r3, r3, #21
 8008268:	d511      	bpl.n	800828e <_scanf_float+0x32a>
 800826a:	9b01      	ldr	r3, [sp, #4]
 800826c:	429e      	cmp	r6, r3
 800826e:	f67f aebc 	bls.w	8007fea <_scanf_float+0x86>
 8008272:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008276:	463a      	mov	r2, r7
 8008278:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800827c:	4640      	mov	r0, r8
 800827e:	4798      	blx	r3
 8008280:	6923      	ldr	r3, [r4, #16]
 8008282:	3b01      	subs	r3, #1
 8008284:	6123      	str	r3, [r4, #16]
 8008286:	e7f0      	b.n	800826a <_scanf_float+0x306>
 8008288:	46aa      	mov	sl, r5
 800828a:	46b3      	mov	fp, r6
 800828c:	e7de      	b.n	800824c <_scanf_float+0x2e8>
 800828e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008292:	1e75      	subs	r5, r6, #1
 8008294:	6923      	ldr	r3, [r4, #16]
 8008296:	2965      	cmp	r1, #101	@ 0x65
 8008298:	f103 33ff 	add.w	r3, r3, #4294967295
 800829c:	6123      	str	r3, [r4, #16]
 800829e:	d00c      	beq.n	80082ba <_scanf_float+0x356>
 80082a0:	2945      	cmp	r1, #69	@ 0x45
 80082a2:	d00a      	beq.n	80082ba <_scanf_float+0x356>
 80082a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082a8:	463a      	mov	r2, r7
 80082aa:	4640      	mov	r0, r8
 80082ac:	1eb5      	subs	r5, r6, #2
 80082ae:	4798      	blx	r3
 80082b0:	6923      	ldr	r3, [r4, #16]
 80082b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80082b6:	3b01      	subs	r3, #1
 80082b8:	6123      	str	r3, [r4, #16]
 80082ba:	462e      	mov	r6, r5
 80082bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082c0:	463a      	mov	r2, r7
 80082c2:	4640      	mov	r0, r8
 80082c4:	4798      	blx	r3
 80082c6:	6822      	ldr	r2, [r4, #0]
 80082c8:	f012 0210 	ands.w	r2, r2, #16
 80082cc:	d001      	beq.n	80082d2 <_scanf_float+0x36e>
 80082ce:	2000      	movs	r0, #0
 80082d0:	e68c      	b.n	8007fec <_scanf_float+0x88>
 80082d2:	7032      	strb	r2, [r6, #0]
 80082d4:	6823      	ldr	r3, [r4, #0]
 80082d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80082da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082de:	d11c      	bne.n	800831a <_scanf_float+0x3b6>
 80082e0:	9b02      	ldr	r3, [sp, #8]
 80082e2:	454b      	cmp	r3, r9
 80082e4:	eba3 0209 	sub.w	r2, r3, r9
 80082e8:	d123      	bne.n	8008332 <_scanf_float+0x3ce>
 80082ea:	2200      	movs	r2, #0
 80082ec:	9901      	ldr	r1, [sp, #4]
 80082ee:	4640      	mov	r0, r8
 80082f0:	f002 fd0a 	bl	800ad08 <_strtod_r>
 80082f4:	6821      	ldr	r1, [r4, #0]
 80082f6:	9b03      	ldr	r3, [sp, #12]
 80082f8:	f011 0f02 	tst.w	r1, #2
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	ec57 6b10 	vmov	r6, r7, d0
 8008302:	f103 0204 	add.w	r2, r3, #4
 8008306:	d01f      	beq.n	8008348 <_scanf_float+0x3e4>
 8008308:	9903      	ldr	r1, [sp, #12]
 800830a:	600a      	str	r2, [r1, #0]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	e9c3 6700 	strd	r6, r7, [r3]
 8008312:	68e3      	ldr	r3, [r4, #12]
 8008314:	3301      	adds	r3, #1
 8008316:	60e3      	str	r3, [r4, #12]
 8008318:	e7d9      	b.n	80082ce <_scanf_float+0x36a>
 800831a:	9b04      	ldr	r3, [sp, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d0e4      	beq.n	80082ea <_scanf_float+0x386>
 8008320:	9905      	ldr	r1, [sp, #20]
 8008322:	230a      	movs	r3, #10
 8008324:	4640      	mov	r0, r8
 8008326:	3101      	adds	r1, #1
 8008328:	f002 fd6e 	bl	800ae08 <_strtol_r>
 800832c:	9b04      	ldr	r3, [sp, #16]
 800832e:	9e05      	ldr	r6, [sp, #20]
 8008330:	1ac2      	subs	r2, r0, r3
 8008332:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008336:	4912      	ldr	r1, [pc, #72]	@ (8008380 <_scanf_float+0x41c>)
 8008338:	429e      	cmp	r6, r3
 800833a:	bf28      	it	cs
 800833c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008340:	4630      	mov	r0, r6
 8008342:	f000 f941 	bl	80085c8 <siprintf>
 8008346:	e7d0      	b.n	80082ea <_scanf_float+0x386>
 8008348:	f011 0f04 	tst.w	r1, #4
 800834c:	9903      	ldr	r1, [sp, #12]
 800834e:	600a      	str	r2, [r1, #0]
 8008350:	d1dc      	bne.n	800830c <_scanf_float+0x3a8>
 8008352:	681d      	ldr	r5, [r3, #0]
 8008354:	4632      	mov	r2, r6
 8008356:	463b      	mov	r3, r7
 8008358:	4630      	mov	r0, r6
 800835a:	4639      	mov	r1, r7
 800835c:	f7f8 fbfa 	bl	8000b54 <__aeabi_dcmpun>
 8008360:	b128      	cbz	r0, 800836e <_scanf_float+0x40a>
 8008362:	4808      	ldr	r0, [pc, #32]	@ (8008384 <_scanf_float+0x420>)
 8008364:	f000 fab6 	bl	80088d4 <nanf>
 8008368:	ed85 0a00 	vstr	s0, [r5]
 800836c:	e7d1      	b.n	8008312 <_scanf_float+0x3ae>
 800836e:	4630      	mov	r0, r6
 8008370:	4639      	mov	r1, r7
 8008372:	f7f8 fc4d 	bl	8000c10 <__aeabi_d2f>
 8008376:	6028      	str	r0, [r5, #0]
 8008378:	e7cb      	b.n	8008312 <_scanf_float+0x3ae>
 800837a:	f04f 0900 	mov.w	r9, #0
 800837e:	e62a      	b.n	8007fd6 <_scanf_float+0x72>
 8008380:	0800bf1c 	.word	0x0800bf1c
 8008384:	0800c2b5 	.word	0x0800c2b5

08008388 <std>:
 8008388:	2300      	movs	r3, #0
 800838a:	b510      	push	{r4, lr}
 800838c:	4604      	mov	r4, r0
 800838e:	6083      	str	r3, [r0, #8]
 8008390:	8181      	strh	r1, [r0, #12]
 8008392:	4619      	mov	r1, r3
 8008394:	6643      	str	r3, [r0, #100]	@ 0x64
 8008396:	81c2      	strh	r2, [r0, #14]
 8008398:	2208      	movs	r2, #8
 800839a:	6183      	str	r3, [r0, #24]
 800839c:	e9c0 3300 	strd	r3, r3, [r0]
 80083a0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083a4:	305c      	adds	r0, #92	@ 0x5c
 80083a6:	f000 fa07 	bl	80087b8 <memset>
 80083aa:	4b0d      	ldr	r3, [pc, #52]	@ (80083e0 <std+0x58>)
 80083ac:	6224      	str	r4, [r4, #32]
 80083ae:	6263      	str	r3, [r4, #36]	@ 0x24
 80083b0:	4b0c      	ldr	r3, [pc, #48]	@ (80083e4 <std+0x5c>)
 80083b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80083b4:	4b0c      	ldr	r3, [pc, #48]	@ (80083e8 <std+0x60>)
 80083b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80083b8:	4b0c      	ldr	r3, [pc, #48]	@ (80083ec <std+0x64>)
 80083ba:	6323      	str	r3, [r4, #48]	@ 0x30
 80083bc:	4b0c      	ldr	r3, [pc, #48]	@ (80083f0 <std+0x68>)
 80083be:	429c      	cmp	r4, r3
 80083c0:	d006      	beq.n	80083d0 <std+0x48>
 80083c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80083c6:	4294      	cmp	r4, r2
 80083c8:	d002      	beq.n	80083d0 <std+0x48>
 80083ca:	33d0      	adds	r3, #208	@ 0xd0
 80083cc:	429c      	cmp	r4, r3
 80083ce:	d105      	bne.n	80083dc <std+0x54>
 80083d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80083d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083d8:	f000 ba6a 	b.w	80088b0 <__retarget_lock_init_recursive>
 80083dc:	bd10      	pop	{r4, pc}
 80083de:	bf00      	nop
 80083e0:	08008609 	.word	0x08008609
 80083e4:	0800862b 	.word	0x0800862b
 80083e8:	08008663 	.word	0x08008663
 80083ec:	08008687 	.word	0x08008687
 80083f0:	2000050c 	.word	0x2000050c

080083f4 <stdio_exit_handler>:
 80083f4:	4a02      	ldr	r2, [pc, #8]	@ (8008400 <stdio_exit_handler+0xc>)
 80083f6:	4903      	ldr	r1, [pc, #12]	@ (8008404 <stdio_exit_handler+0x10>)
 80083f8:	4803      	ldr	r0, [pc, #12]	@ (8008408 <stdio_exit_handler+0x14>)
 80083fa:	f000 b869 	b.w	80084d0 <_fwalk_sglue>
 80083fe:	bf00      	nop
 8008400:	2000000c 	.word	0x2000000c
 8008404:	0800b1c5 	.word	0x0800b1c5
 8008408:	2000001c 	.word	0x2000001c

0800840c <cleanup_stdio>:
 800840c:	6841      	ldr	r1, [r0, #4]
 800840e:	4b0c      	ldr	r3, [pc, #48]	@ (8008440 <cleanup_stdio+0x34>)
 8008410:	4299      	cmp	r1, r3
 8008412:	b510      	push	{r4, lr}
 8008414:	4604      	mov	r4, r0
 8008416:	d001      	beq.n	800841c <cleanup_stdio+0x10>
 8008418:	f002 fed4 	bl	800b1c4 <_fflush_r>
 800841c:	68a1      	ldr	r1, [r4, #8]
 800841e:	4b09      	ldr	r3, [pc, #36]	@ (8008444 <cleanup_stdio+0x38>)
 8008420:	4299      	cmp	r1, r3
 8008422:	d002      	beq.n	800842a <cleanup_stdio+0x1e>
 8008424:	4620      	mov	r0, r4
 8008426:	f002 fecd 	bl	800b1c4 <_fflush_r>
 800842a:	68e1      	ldr	r1, [r4, #12]
 800842c:	4b06      	ldr	r3, [pc, #24]	@ (8008448 <cleanup_stdio+0x3c>)
 800842e:	4299      	cmp	r1, r3
 8008430:	d004      	beq.n	800843c <cleanup_stdio+0x30>
 8008432:	4620      	mov	r0, r4
 8008434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008438:	f002 bec4 	b.w	800b1c4 <_fflush_r>
 800843c:	bd10      	pop	{r4, pc}
 800843e:	bf00      	nop
 8008440:	2000050c 	.word	0x2000050c
 8008444:	20000574 	.word	0x20000574
 8008448:	200005dc 	.word	0x200005dc

0800844c <global_stdio_init.part.0>:
 800844c:	b510      	push	{r4, lr}
 800844e:	4b0b      	ldr	r3, [pc, #44]	@ (800847c <global_stdio_init.part.0+0x30>)
 8008450:	2104      	movs	r1, #4
 8008452:	4c0b      	ldr	r4, [pc, #44]	@ (8008480 <global_stdio_init.part.0+0x34>)
 8008454:	4a0b      	ldr	r2, [pc, #44]	@ (8008484 <global_stdio_init.part.0+0x38>)
 8008456:	4620      	mov	r0, r4
 8008458:	601a      	str	r2, [r3, #0]
 800845a:	2200      	movs	r2, #0
 800845c:	f7ff ff94 	bl	8008388 <std>
 8008460:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008464:	2201      	movs	r2, #1
 8008466:	2109      	movs	r1, #9
 8008468:	f7ff ff8e 	bl	8008388 <std>
 800846c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008470:	2202      	movs	r2, #2
 8008472:	2112      	movs	r1, #18
 8008474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008478:	f7ff bf86 	b.w	8008388 <std>
 800847c:	20000644 	.word	0x20000644
 8008480:	2000050c 	.word	0x2000050c
 8008484:	080083f5 	.word	0x080083f5

08008488 <__sfp_lock_acquire>:
 8008488:	4801      	ldr	r0, [pc, #4]	@ (8008490 <__sfp_lock_acquire+0x8>)
 800848a:	f000 ba12 	b.w	80088b2 <__retarget_lock_acquire_recursive>
 800848e:	bf00      	nop
 8008490:	2000064d 	.word	0x2000064d

08008494 <__sfp_lock_release>:
 8008494:	4801      	ldr	r0, [pc, #4]	@ (800849c <__sfp_lock_release+0x8>)
 8008496:	f000 ba0d 	b.w	80088b4 <__retarget_lock_release_recursive>
 800849a:	bf00      	nop
 800849c:	2000064d 	.word	0x2000064d

080084a0 <__sinit>:
 80084a0:	b510      	push	{r4, lr}
 80084a2:	4604      	mov	r4, r0
 80084a4:	f7ff fff0 	bl	8008488 <__sfp_lock_acquire>
 80084a8:	6a23      	ldr	r3, [r4, #32]
 80084aa:	b11b      	cbz	r3, 80084b4 <__sinit+0x14>
 80084ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084b0:	f7ff bff0 	b.w	8008494 <__sfp_lock_release>
 80084b4:	4b04      	ldr	r3, [pc, #16]	@ (80084c8 <__sinit+0x28>)
 80084b6:	6223      	str	r3, [r4, #32]
 80084b8:	4b04      	ldr	r3, [pc, #16]	@ (80084cc <__sinit+0x2c>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d1f5      	bne.n	80084ac <__sinit+0xc>
 80084c0:	f7ff ffc4 	bl	800844c <global_stdio_init.part.0>
 80084c4:	e7f2      	b.n	80084ac <__sinit+0xc>
 80084c6:	bf00      	nop
 80084c8:	0800840d 	.word	0x0800840d
 80084cc:	20000644 	.word	0x20000644

080084d0 <_fwalk_sglue>:
 80084d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084d4:	4607      	mov	r7, r0
 80084d6:	4688      	mov	r8, r1
 80084d8:	4614      	mov	r4, r2
 80084da:	2600      	movs	r6, #0
 80084dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084e0:	f1b9 0901 	subs.w	r9, r9, #1
 80084e4:	d505      	bpl.n	80084f2 <_fwalk_sglue+0x22>
 80084e6:	6824      	ldr	r4, [r4, #0]
 80084e8:	2c00      	cmp	r4, #0
 80084ea:	d1f7      	bne.n	80084dc <_fwalk_sglue+0xc>
 80084ec:	4630      	mov	r0, r6
 80084ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084f2:	89ab      	ldrh	r3, [r5, #12]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d907      	bls.n	8008508 <_fwalk_sglue+0x38>
 80084f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084fc:	3301      	adds	r3, #1
 80084fe:	d003      	beq.n	8008508 <_fwalk_sglue+0x38>
 8008500:	4629      	mov	r1, r5
 8008502:	4638      	mov	r0, r7
 8008504:	47c0      	blx	r8
 8008506:	4306      	orrs	r6, r0
 8008508:	3568      	adds	r5, #104	@ 0x68
 800850a:	e7e9      	b.n	80084e0 <_fwalk_sglue+0x10>

0800850c <_puts_r>:
 800850c:	6a03      	ldr	r3, [r0, #32]
 800850e:	b570      	push	{r4, r5, r6, lr}
 8008510:	4605      	mov	r5, r0
 8008512:	460e      	mov	r6, r1
 8008514:	6884      	ldr	r4, [r0, #8]
 8008516:	b90b      	cbnz	r3, 800851c <_puts_r+0x10>
 8008518:	f7ff ffc2 	bl	80084a0 <__sinit>
 800851c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800851e:	07db      	lsls	r3, r3, #31
 8008520:	d405      	bmi.n	800852e <_puts_r+0x22>
 8008522:	89a3      	ldrh	r3, [r4, #12]
 8008524:	0598      	lsls	r0, r3, #22
 8008526:	d402      	bmi.n	800852e <_puts_r+0x22>
 8008528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800852a:	f000 f9c2 	bl	80088b2 <__retarget_lock_acquire_recursive>
 800852e:	89a3      	ldrh	r3, [r4, #12]
 8008530:	0719      	lsls	r1, r3, #28
 8008532:	d502      	bpl.n	800853a <_puts_r+0x2e>
 8008534:	6923      	ldr	r3, [r4, #16]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d135      	bne.n	80085a6 <_puts_r+0x9a>
 800853a:	4621      	mov	r1, r4
 800853c:	4628      	mov	r0, r5
 800853e:	f000 f8e5 	bl	800870c <__swsetup_r>
 8008542:	b380      	cbz	r0, 80085a6 <_puts_r+0x9a>
 8008544:	f04f 35ff 	mov.w	r5, #4294967295
 8008548:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800854a:	07da      	lsls	r2, r3, #31
 800854c:	d405      	bmi.n	800855a <_puts_r+0x4e>
 800854e:	89a3      	ldrh	r3, [r4, #12]
 8008550:	059b      	lsls	r3, r3, #22
 8008552:	d402      	bmi.n	800855a <_puts_r+0x4e>
 8008554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008556:	f000 f9ad 	bl	80088b4 <__retarget_lock_release_recursive>
 800855a:	4628      	mov	r0, r5
 800855c:	bd70      	pop	{r4, r5, r6, pc}
 800855e:	2b00      	cmp	r3, #0
 8008560:	da04      	bge.n	800856c <_puts_r+0x60>
 8008562:	69a2      	ldr	r2, [r4, #24]
 8008564:	429a      	cmp	r2, r3
 8008566:	dc17      	bgt.n	8008598 <_puts_r+0x8c>
 8008568:	290a      	cmp	r1, #10
 800856a:	d015      	beq.n	8008598 <_puts_r+0x8c>
 800856c:	6823      	ldr	r3, [r4, #0]
 800856e:	1c5a      	adds	r2, r3, #1
 8008570:	6022      	str	r2, [r4, #0]
 8008572:	7019      	strb	r1, [r3, #0]
 8008574:	68a3      	ldr	r3, [r4, #8]
 8008576:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800857a:	3b01      	subs	r3, #1
 800857c:	60a3      	str	r3, [r4, #8]
 800857e:	2900      	cmp	r1, #0
 8008580:	d1ed      	bne.n	800855e <_puts_r+0x52>
 8008582:	2b00      	cmp	r3, #0
 8008584:	da11      	bge.n	80085aa <_puts_r+0x9e>
 8008586:	4622      	mov	r2, r4
 8008588:	210a      	movs	r1, #10
 800858a:	4628      	mov	r0, r5
 800858c:	f000 f87f 	bl	800868e <__swbuf_r>
 8008590:	3001      	adds	r0, #1
 8008592:	d0d7      	beq.n	8008544 <_puts_r+0x38>
 8008594:	250a      	movs	r5, #10
 8008596:	e7d7      	b.n	8008548 <_puts_r+0x3c>
 8008598:	4622      	mov	r2, r4
 800859a:	4628      	mov	r0, r5
 800859c:	f000 f877 	bl	800868e <__swbuf_r>
 80085a0:	3001      	adds	r0, #1
 80085a2:	d1e7      	bne.n	8008574 <_puts_r+0x68>
 80085a4:	e7ce      	b.n	8008544 <_puts_r+0x38>
 80085a6:	3e01      	subs	r6, #1
 80085a8:	e7e4      	b.n	8008574 <_puts_r+0x68>
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	1c5a      	adds	r2, r3, #1
 80085ae:	6022      	str	r2, [r4, #0]
 80085b0:	220a      	movs	r2, #10
 80085b2:	701a      	strb	r2, [r3, #0]
 80085b4:	e7ee      	b.n	8008594 <_puts_r+0x88>
	...

080085b8 <puts>:
 80085b8:	4b02      	ldr	r3, [pc, #8]	@ (80085c4 <puts+0xc>)
 80085ba:	4601      	mov	r1, r0
 80085bc:	6818      	ldr	r0, [r3, #0]
 80085be:	f7ff bfa5 	b.w	800850c <_puts_r>
 80085c2:	bf00      	nop
 80085c4:	20000018 	.word	0x20000018

080085c8 <siprintf>:
 80085c8:	b40e      	push	{r1, r2, r3}
 80085ca:	b500      	push	{lr}
 80085cc:	b09c      	sub	sp, #112	@ 0x70
 80085ce:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80085d2:	ab1d      	add	r3, sp, #116	@ 0x74
 80085d4:	9002      	str	r0, [sp, #8]
 80085d6:	9006      	str	r0, [sp, #24]
 80085d8:	9107      	str	r1, [sp, #28]
 80085da:	9104      	str	r1, [sp, #16]
 80085dc:	4808      	ldr	r0, [pc, #32]	@ (8008600 <siprintf+0x38>)
 80085de:	4909      	ldr	r1, [pc, #36]	@ (8008604 <siprintf+0x3c>)
 80085e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80085e4:	9105      	str	r1, [sp, #20]
 80085e6:	a902      	add	r1, sp, #8
 80085e8:	6800      	ldr	r0, [r0, #0]
 80085ea:	9301      	str	r3, [sp, #4]
 80085ec:	f002 fc6a 	bl	800aec4 <_svfiprintf_r>
 80085f0:	9b02      	ldr	r3, [sp, #8]
 80085f2:	2200      	movs	r2, #0
 80085f4:	701a      	strb	r2, [r3, #0]
 80085f6:	b01c      	add	sp, #112	@ 0x70
 80085f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80085fc:	b003      	add	sp, #12
 80085fe:	4770      	bx	lr
 8008600:	20000018 	.word	0x20000018
 8008604:	ffff0208 	.word	0xffff0208

08008608 <__sread>:
 8008608:	b510      	push	{r4, lr}
 800860a:	460c      	mov	r4, r1
 800860c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008610:	f000 f900 	bl	8008814 <_read_r>
 8008614:	2800      	cmp	r0, #0
 8008616:	bfab      	itete	ge
 8008618:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800861a:	89a3      	ldrhlt	r3, [r4, #12]
 800861c:	181b      	addge	r3, r3, r0
 800861e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008622:	bfac      	ite	ge
 8008624:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008626:	81a3      	strhlt	r3, [r4, #12]
 8008628:	bd10      	pop	{r4, pc}

0800862a <__swrite>:
 800862a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800862e:	461f      	mov	r7, r3
 8008630:	898b      	ldrh	r3, [r1, #12]
 8008632:	4605      	mov	r5, r0
 8008634:	460c      	mov	r4, r1
 8008636:	05db      	lsls	r3, r3, #23
 8008638:	4616      	mov	r6, r2
 800863a:	d505      	bpl.n	8008648 <__swrite+0x1e>
 800863c:	2302      	movs	r3, #2
 800863e:	2200      	movs	r2, #0
 8008640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008644:	f000 f8d4 	bl	80087f0 <_lseek_r>
 8008648:	89a3      	ldrh	r3, [r4, #12]
 800864a:	4632      	mov	r2, r6
 800864c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008650:	4628      	mov	r0, r5
 8008652:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008656:	81a3      	strh	r3, [r4, #12]
 8008658:	463b      	mov	r3, r7
 800865a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800865e:	f000 b8eb 	b.w	8008838 <_write_r>

08008662 <__sseek>:
 8008662:	b510      	push	{r4, lr}
 8008664:	460c      	mov	r4, r1
 8008666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800866a:	f000 f8c1 	bl	80087f0 <_lseek_r>
 800866e:	1c43      	adds	r3, r0, #1
 8008670:	89a3      	ldrh	r3, [r4, #12]
 8008672:	bf15      	itete	ne
 8008674:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008676:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800867a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800867e:	81a3      	strheq	r3, [r4, #12]
 8008680:	bf18      	it	ne
 8008682:	81a3      	strhne	r3, [r4, #12]
 8008684:	bd10      	pop	{r4, pc}

08008686 <__sclose>:
 8008686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800868a:	f000 b8a1 	b.w	80087d0 <_close_r>

0800868e <__swbuf_r>:
 800868e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008690:	460e      	mov	r6, r1
 8008692:	4614      	mov	r4, r2
 8008694:	4605      	mov	r5, r0
 8008696:	b118      	cbz	r0, 80086a0 <__swbuf_r+0x12>
 8008698:	6a03      	ldr	r3, [r0, #32]
 800869a:	b90b      	cbnz	r3, 80086a0 <__swbuf_r+0x12>
 800869c:	f7ff ff00 	bl	80084a0 <__sinit>
 80086a0:	69a3      	ldr	r3, [r4, #24]
 80086a2:	60a3      	str	r3, [r4, #8]
 80086a4:	89a3      	ldrh	r3, [r4, #12]
 80086a6:	071a      	lsls	r2, r3, #28
 80086a8:	d501      	bpl.n	80086ae <__swbuf_r+0x20>
 80086aa:	6923      	ldr	r3, [r4, #16]
 80086ac:	b943      	cbnz	r3, 80086c0 <__swbuf_r+0x32>
 80086ae:	4621      	mov	r1, r4
 80086b0:	4628      	mov	r0, r5
 80086b2:	f000 f82b 	bl	800870c <__swsetup_r>
 80086b6:	b118      	cbz	r0, 80086c0 <__swbuf_r+0x32>
 80086b8:	f04f 37ff 	mov.w	r7, #4294967295
 80086bc:	4638      	mov	r0, r7
 80086be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086c0:	6823      	ldr	r3, [r4, #0]
 80086c2:	b2f6      	uxtb	r6, r6
 80086c4:	6922      	ldr	r2, [r4, #16]
 80086c6:	4637      	mov	r7, r6
 80086c8:	1a98      	subs	r0, r3, r2
 80086ca:	6963      	ldr	r3, [r4, #20]
 80086cc:	4283      	cmp	r3, r0
 80086ce:	dc05      	bgt.n	80086dc <__swbuf_r+0x4e>
 80086d0:	4621      	mov	r1, r4
 80086d2:	4628      	mov	r0, r5
 80086d4:	f002 fd76 	bl	800b1c4 <_fflush_r>
 80086d8:	2800      	cmp	r0, #0
 80086da:	d1ed      	bne.n	80086b8 <__swbuf_r+0x2a>
 80086dc:	68a3      	ldr	r3, [r4, #8]
 80086de:	3b01      	subs	r3, #1
 80086e0:	60a3      	str	r3, [r4, #8]
 80086e2:	6823      	ldr	r3, [r4, #0]
 80086e4:	1c5a      	adds	r2, r3, #1
 80086e6:	6022      	str	r2, [r4, #0]
 80086e8:	701e      	strb	r6, [r3, #0]
 80086ea:	1c43      	adds	r3, r0, #1
 80086ec:	6962      	ldr	r2, [r4, #20]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d004      	beq.n	80086fc <__swbuf_r+0x6e>
 80086f2:	89a3      	ldrh	r3, [r4, #12]
 80086f4:	07db      	lsls	r3, r3, #31
 80086f6:	d5e1      	bpl.n	80086bc <__swbuf_r+0x2e>
 80086f8:	2e0a      	cmp	r6, #10
 80086fa:	d1df      	bne.n	80086bc <__swbuf_r+0x2e>
 80086fc:	4621      	mov	r1, r4
 80086fe:	4628      	mov	r0, r5
 8008700:	f002 fd60 	bl	800b1c4 <_fflush_r>
 8008704:	2800      	cmp	r0, #0
 8008706:	d0d9      	beq.n	80086bc <__swbuf_r+0x2e>
 8008708:	e7d6      	b.n	80086b8 <__swbuf_r+0x2a>
	...

0800870c <__swsetup_r>:
 800870c:	b538      	push	{r3, r4, r5, lr}
 800870e:	4b29      	ldr	r3, [pc, #164]	@ (80087b4 <__swsetup_r+0xa8>)
 8008710:	4605      	mov	r5, r0
 8008712:	460c      	mov	r4, r1
 8008714:	6818      	ldr	r0, [r3, #0]
 8008716:	b118      	cbz	r0, 8008720 <__swsetup_r+0x14>
 8008718:	6a03      	ldr	r3, [r0, #32]
 800871a:	b90b      	cbnz	r3, 8008720 <__swsetup_r+0x14>
 800871c:	f7ff fec0 	bl	80084a0 <__sinit>
 8008720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008724:	0719      	lsls	r1, r3, #28
 8008726:	d422      	bmi.n	800876e <__swsetup_r+0x62>
 8008728:	06da      	lsls	r2, r3, #27
 800872a:	d407      	bmi.n	800873c <__swsetup_r+0x30>
 800872c:	2209      	movs	r2, #9
 800872e:	602a      	str	r2, [r5, #0]
 8008730:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008734:	f04f 30ff 	mov.w	r0, #4294967295
 8008738:	81a3      	strh	r3, [r4, #12]
 800873a:	e033      	b.n	80087a4 <__swsetup_r+0x98>
 800873c:	0758      	lsls	r0, r3, #29
 800873e:	d512      	bpl.n	8008766 <__swsetup_r+0x5a>
 8008740:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008742:	b141      	cbz	r1, 8008756 <__swsetup_r+0x4a>
 8008744:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008748:	4299      	cmp	r1, r3
 800874a:	d002      	beq.n	8008752 <__swsetup_r+0x46>
 800874c:	4628      	mov	r0, r5
 800874e:	f000 ff1b 	bl	8009588 <_free_r>
 8008752:	2300      	movs	r3, #0
 8008754:	6363      	str	r3, [r4, #52]	@ 0x34
 8008756:	89a3      	ldrh	r3, [r4, #12]
 8008758:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800875c:	81a3      	strh	r3, [r4, #12]
 800875e:	2300      	movs	r3, #0
 8008760:	6063      	str	r3, [r4, #4]
 8008762:	6923      	ldr	r3, [r4, #16]
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	89a3      	ldrh	r3, [r4, #12]
 8008768:	f043 0308 	orr.w	r3, r3, #8
 800876c:	81a3      	strh	r3, [r4, #12]
 800876e:	6923      	ldr	r3, [r4, #16]
 8008770:	b94b      	cbnz	r3, 8008786 <__swsetup_r+0x7a>
 8008772:	89a3      	ldrh	r3, [r4, #12]
 8008774:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800877c:	d003      	beq.n	8008786 <__swsetup_r+0x7a>
 800877e:	4621      	mov	r1, r4
 8008780:	4628      	mov	r0, r5
 8008782:	f002 fd6c 	bl	800b25e <__smakebuf_r>
 8008786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800878a:	f013 0201 	ands.w	r2, r3, #1
 800878e:	d00a      	beq.n	80087a6 <__swsetup_r+0x9a>
 8008790:	2200      	movs	r2, #0
 8008792:	60a2      	str	r2, [r4, #8]
 8008794:	6962      	ldr	r2, [r4, #20]
 8008796:	4252      	negs	r2, r2
 8008798:	61a2      	str	r2, [r4, #24]
 800879a:	6922      	ldr	r2, [r4, #16]
 800879c:	b942      	cbnz	r2, 80087b0 <__swsetup_r+0xa4>
 800879e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80087a2:	d1c5      	bne.n	8008730 <__swsetup_r+0x24>
 80087a4:	bd38      	pop	{r3, r4, r5, pc}
 80087a6:	0799      	lsls	r1, r3, #30
 80087a8:	bf58      	it	pl
 80087aa:	6962      	ldrpl	r2, [r4, #20]
 80087ac:	60a2      	str	r2, [r4, #8]
 80087ae:	e7f4      	b.n	800879a <__swsetup_r+0x8e>
 80087b0:	2000      	movs	r0, #0
 80087b2:	e7f7      	b.n	80087a4 <__swsetup_r+0x98>
 80087b4:	20000018 	.word	0x20000018

080087b8 <memset>:
 80087b8:	4402      	add	r2, r0
 80087ba:	4603      	mov	r3, r0
 80087bc:	4293      	cmp	r3, r2
 80087be:	d100      	bne.n	80087c2 <memset+0xa>
 80087c0:	4770      	bx	lr
 80087c2:	f803 1b01 	strb.w	r1, [r3], #1
 80087c6:	e7f9      	b.n	80087bc <memset+0x4>

080087c8 <_localeconv_r>:
 80087c8:	4800      	ldr	r0, [pc, #0]	@ (80087cc <_localeconv_r+0x4>)
 80087ca:	4770      	bx	lr
 80087cc:	20000158 	.word	0x20000158

080087d0 <_close_r>:
 80087d0:	b538      	push	{r3, r4, r5, lr}
 80087d2:	2300      	movs	r3, #0
 80087d4:	4d05      	ldr	r5, [pc, #20]	@ (80087ec <_close_r+0x1c>)
 80087d6:	4604      	mov	r4, r0
 80087d8:	4608      	mov	r0, r1
 80087da:	602b      	str	r3, [r5, #0]
 80087dc:	f7f9 f9b7 	bl	8001b4e <_close>
 80087e0:	1c43      	adds	r3, r0, #1
 80087e2:	d102      	bne.n	80087ea <_close_r+0x1a>
 80087e4:	682b      	ldr	r3, [r5, #0]
 80087e6:	b103      	cbz	r3, 80087ea <_close_r+0x1a>
 80087e8:	6023      	str	r3, [r4, #0]
 80087ea:	bd38      	pop	{r3, r4, r5, pc}
 80087ec:	20000648 	.word	0x20000648

080087f0 <_lseek_r>:
 80087f0:	b538      	push	{r3, r4, r5, lr}
 80087f2:	4604      	mov	r4, r0
 80087f4:	4d06      	ldr	r5, [pc, #24]	@ (8008810 <_lseek_r+0x20>)
 80087f6:	4608      	mov	r0, r1
 80087f8:	4611      	mov	r1, r2
 80087fa:	2200      	movs	r2, #0
 80087fc:	602a      	str	r2, [r5, #0]
 80087fe:	461a      	mov	r2, r3
 8008800:	f7f9 f9cc 	bl	8001b9c <_lseek>
 8008804:	1c43      	adds	r3, r0, #1
 8008806:	d102      	bne.n	800880e <_lseek_r+0x1e>
 8008808:	682b      	ldr	r3, [r5, #0]
 800880a:	b103      	cbz	r3, 800880e <_lseek_r+0x1e>
 800880c:	6023      	str	r3, [r4, #0]
 800880e:	bd38      	pop	{r3, r4, r5, pc}
 8008810:	20000648 	.word	0x20000648

08008814 <_read_r>:
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	4604      	mov	r4, r0
 8008818:	4d06      	ldr	r5, [pc, #24]	@ (8008834 <_read_r+0x20>)
 800881a:	4608      	mov	r0, r1
 800881c:	4611      	mov	r1, r2
 800881e:	2200      	movs	r2, #0
 8008820:	602a      	str	r2, [r5, #0]
 8008822:	461a      	mov	r2, r3
 8008824:	f7f9 f95a 	bl	8001adc <_read>
 8008828:	1c43      	adds	r3, r0, #1
 800882a:	d102      	bne.n	8008832 <_read_r+0x1e>
 800882c:	682b      	ldr	r3, [r5, #0]
 800882e:	b103      	cbz	r3, 8008832 <_read_r+0x1e>
 8008830:	6023      	str	r3, [r4, #0]
 8008832:	bd38      	pop	{r3, r4, r5, pc}
 8008834:	20000648 	.word	0x20000648

08008838 <_write_r>:
 8008838:	b538      	push	{r3, r4, r5, lr}
 800883a:	4604      	mov	r4, r0
 800883c:	4d06      	ldr	r5, [pc, #24]	@ (8008858 <_write_r+0x20>)
 800883e:	4608      	mov	r0, r1
 8008840:	4611      	mov	r1, r2
 8008842:	2200      	movs	r2, #0
 8008844:	602a      	str	r2, [r5, #0]
 8008846:	461a      	mov	r2, r3
 8008848:	f7f9 f965 	bl	8001b16 <_write>
 800884c:	1c43      	adds	r3, r0, #1
 800884e:	d102      	bne.n	8008856 <_write_r+0x1e>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	b103      	cbz	r3, 8008856 <_write_r+0x1e>
 8008854:	6023      	str	r3, [r4, #0]
 8008856:	bd38      	pop	{r3, r4, r5, pc}
 8008858:	20000648 	.word	0x20000648

0800885c <__errno>:
 800885c:	4b01      	ldr	r3, [pc, #4]	@ (8008864 <__errno+0x8>)
 800885e:	6818      	ldr	r0, [r3, #0]
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	20000018 	.word	0x20000018

08008868 <__libc_init_array>:
 8008868:	b570      	push	{r4, r5, r6, lr}
 800886a:	4d0d      	ldr	r5, [pc, #52]	@ (80088a0 <__libc_init_array+0x38>)
 800886c:	2600      	movs	r6, #0
 800886e:	4c0d      	ldr	r4, [pc, #52]	@ (80088a4 <__libc_init_array+0x3c>)
 8008870:	1b64      	subs	r4, r4, r5
 8008872:	10a4      	asrs	r4, r4, #2
 8008874:	42a6      	cmp	r6, r4
 8008876:	d109      	bne.n	800888c <__libc_init_array+0x24>
 8008878:	4d0b      	ldr	r5, [pc, #44]	@ (80088a8 <__libc_init_array+0x40>)
 800887a:	2600      	movs	r6, #0
 800887c:	4c0b      	ldr	r4, [pc, #44]	@ (80088ac <__libc_init_array+0x44>)
 800887e:	f003 faf9 	bl	800be74 <_init>
 8008882:	1b64      	subs	r4, r4, r5
 8008884:	10a4      	asrs	r4, r4, #2
 8008886:	42a6      	cmp	r6, r4
 8008888:	d105      	bne.n	8008896 <__libc_init_array+0x2e>
 800888a:	bd70      	pop	{r4, r5, r6, pc}
 800888c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008890:	3601      	adds	r6, #1
 8008892:	4798      	blx	r3
 8008894:	e7ee      	b.n	8008874 <__libc_init_array+0xc>
 8008896:	f855 3b04 	ldr.w	r3, [r5], #4
 800889a:	3601      	adds	r6, #1
 800889c:	4798      	blx	r3
 800889e:	e7f2      	b.n	8008886 <__libc_init_array+0x1e>
 80088a0:	0800c320 	.word	0x0800c320
 80088a4:	0800c320 	.word	0x0800c320
 80088a8:	0800c320 	.word	0x0800c320
 80088ac:	0800c324 	.word	0x0800c324

080088b0 <__retarget_lock_init_recursive>:
 80088b0:	4770      	bx	lr

080088b2 <__retarget_lock_acquire_recursive>:
 80088b2:	4770      	bx	lr

080088b4 <__retarget_lock_release_recursive>:
 80088b4:	4770      	bx	lr

080088b6 <memchr>:
 80088b6:	b2c9      	uxtb	r1, r1
 80088b8:	4603      	mov	r3, r0
 80088ba:	4402      	add	r2, r0
 80088bc:	b510      	push	{r4, lr}
 80088be:	4293      	cmp	r3, r2
 80088c0:	4618      	mov	r0, r3
 80088c2:	d101      	bne.n	80088c8 <memchr+0x12>
 80088c4:	2000      	movs	r0, #0
 80088c6:	e003      	b.n	80088d0 <memchr+0x1a>
 80088c8:	7804      	ldrb	r4, [r0, #0]
 80088ca:	3301      	adds	r3, #1
 80088cc:	428c      	cmp	r4, r1
 80088ce:	d1f6      	bne.n	80088be <memchr+0x8>
 80088d0:	bd10      	pop	{r4, pc}
	...

080088d4 <nanf>:
 80088d4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80088dc <nanf+0x8>
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	7fc00000 	.word	0x7fc00000

080088e0 <quorem>:
 80088e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e4:	6903      	ldr	r3, [r0, #16]
 80088e6:	4607      	mov	r7, r0
 80088e8:	690c      	ldr	r4, [r1, #16]
 80088ea:	42a3      	cmp	r3, r4
 80088ec:	f2c0 8083 	blt.w	80089f6 <quorem+0x116>
 80088f0:	3c01      	subs	r4, #1
 80088f2:	f100 0514 	add.w	r5, r0, #20
 80088f6:	f101 0814 	add.w	r8, r1, #20
 80088fa:	00a3      	lsls	r3, r4, #2
 80088fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008900:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008904:	9300      	str	r3, [sp, #0]
 8008906:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800890a:	9301      	str	r3, [sp, #4]
 800890c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008910:	3301      	adds	r3, #1
 8008912:	429a      	cmp	r2, r3
 8008914:	fbb2 f6f3 	udiv	r6, r2, r3
 8008918:	d331      	bcc.n	800897e <quorem+0x9e>
 800891a:	f04f 0a00 	mov.w	sl, #0
 800891e:	46c4      	mov	ip, r8
 8008920:	46ae      	mov	lr, r5
 8008922:	46d3      	mov	fp, sl
 8008924:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008928:	b298      	uxth	r0, r3
 800892a:	45e1      	cmp	r9, ip
 800892c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8008930:	fb06 a000 	mla	r0, r6, r0, sl
 8008934:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8008938:	b280      	uxth	r0, r0
 800893a:	fb06 2303 	mla	r3, r6, r3, r2
 800893e:	f8de 2000 	ldr.w	r2, [lr]
 8008942:	b292      	uxth	r2, r2
 8008944:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008948:	eba2 0200 	sub.w	r2, r2, r0
 800894c:	b29b      	uxth	r3, r3
 800894e:	f8de 0000 	ldr.w	r0, [lr]
 8008952:	445a      	add	r2, fp
 8008954:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008958:	b292      	uxth	r2, r2
 800895a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800895e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008962:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008966:	f84e 2b04 	str.w	r2, [lr], #4
 800896a:	d2db      	bcs.n	8008924 <quorem+0x44>
 800896c:	9b00      	ldr	r3, [sp, #0]
 800896e:	58eb      	ldr	r3, [r5, r3]
 8008970:	b92b      	cbnz	r3, 800897e <quorem+0x9e>
 8008972:	9b01      	ldr	r3, [sp, #4]
 8008974:	3b04      	subs	r3, #4
 8008976:	429d      	cmp	r5, r3
 8008978:	461a      	mov	r2, r3
 800897a:	d330      	bcc.n	80089de <quorem+0xfe>
 800897c:	613c      	str	r4, [r7, #16]
 800897e:	4638      	mov	r0, r7
 8008980:	f001 f9c8 	bl	8009d14 <__mcmp>
 8008984:	2800      	cmp	r0, #0
 8008986:	db26      	blt.n	80089d6 <quorem+0xf6>
 8008988:	4629      	mov	r1, r5
 800898a:	2000      	movs	r0, #0
 800898c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008990:	f8d1 c000 	ldr.w	ip, [r1]
 8008994:	fa1f fe82 	uxth.w	lr, r2
 8008998:	45c1      	cmp	r9, r8
 800899a:	fa1f f38c 	uxth.w	r3, ip
 800899e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80089a2:	eba3 030e 	sub.w	r3, r3, lr
 80089a6:	4403      	add	r3, r0
 80089a8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80089b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80089ba:	f841 3b04 	str.w	r3, [r1], #4
 80089be:	d2e5      	bcs.n	800898c <quorem+0xac>
 80089c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089c8:	b922      	cbnz	r2, 80089d4 <quorem+0xf4>
 80089ca:	3b04      	subs	r3, #4
 80089cc:	429d      	cmp	r5, r3
 80089ce:	461a      	mov	r2, r3
 80089d0:	d30b      	bcc.n	80089ea <quorem+0x10a>
 80089d2:	613c      	str	r4, [r7, #16]
 80089d4:	3601      	adds	r6, #1
 80089d6:	4630      	mov	r0, r6
 80089d8:	b003      	add	sp, #12
 80089da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089de:	6812      	ldr	r2, [r2, #0]
 80089e0:	3b04      	subs	r3, #4
 80089e2:	2a00      	cmp	r2, #0
 80089e4:	d1ca      	bne.n	800897c <quorem+0x9c>
 80089e6:	3c01      	subs	r4, #1
 80089e8:	e7c5      	b.n	8008976 <quorem+0x96>
 80089ea:	6812      	ldr	r2, [r2, #0]
 80089ec:	3b04      	subs	r3, #4
 80089ee:	2a00      	cmp	r2, #0
 80089f0:	d1ef      	bne.n	80089d2 <quorem+0xf2>
 80089f2:	3c01      	subs	r4, #1
 80089f4:	e7ea      	b.n	80089cc <quorem+0xec>
 80089f6:	2000      	movs	r0, #0
 80089f8:	e7ee      	b.n	80089d8 <quorem+0xf8>
 80089fa:	0000      	movs	r0, r0
 80089fc:	0000      	movs	r0, r0
	...

08008a00 <_dtoa_r>:
 8008a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a04:	69c7      	ldr	r7, [r0, #28]
 8008a06:	b099      	sub	sp, #100	@ 0x64
 8008a08:	4683      	mov	fp, r0
 8008a0a:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008a0c:	9109      	str	r1, [sp, #36]	@ 0x24
 8008a0e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008a12:	ec55 4b10 	vmov	r4, r5, d0
 8008a16:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008a1a:	b97f      	cbnz	r7, 8008a3c <_dtoa_r+0x3c>
 8008a1c:	2010      	movs	r0, #16
 8008a1e:	f000 fdfd 	bl	800961c <malloc>
 8008a22:	4602      	mov	r2, r0
 8008a24:	f8cb 001c 	str.w	r0, [fp, #28]
 8008a28:	b920      	cbnz	r0, 8008a34 <_dtoa_r+0x34>
 8008a2a:	4ba7      	ldr	r3, [pc, #668]	@ (8008cc8 <_dtoa_r+0x2c8>)
 8008a2c:	21ef      	movs	r1, #239	@ 0xef
 8008a2e:	48a7      	ldr	r0, [pc, #668]	@ (8008ccc <_dtoa_r+0x2cc>)
 8008a30:	f002 fcc6 	bl	800b3c0 <__assert_func>
 8008a34:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008a38:	6007      	str	r7, [r0, #0]
 8008a3a:	60c7      	str	r7, [r0, #12]
 8008a3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008a40:	6819      	ldr	r1, [r3, #0]
 8008a42:	b159      	cbz	r1, 8008a5c <_dtoa_r+0x5c>
 8008a44:	685a      	ldr	r2, [r3, #4]
 8008a46:	2301      	movs	r3, #1
 8008a48:	4658      	mov	r0, fp
 8008a4a:	4093      	lsls	r3, r2
 8008a4c:	604a      	str	r2, [r1, #4]
 8008a4e:	608b      	str	r3, [r1, #8]
 8008a50:	f000 feda 	bl	8009808 <_Bfree>
 8008a54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	601a      	str	r2, [r3, #0]
 8008a5c:	1e2b      	subs	r3, r5, #0
 8008a5e:	bfb7      	itett	lt
 8008a60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008a64:	2300      	movge	r3, #0
 8008a66:	2201      	movlt	r2, #1
 8008a68:	9303      	strlt	r3, [sp, #12]
 8008a6a:	bfa8      	it	ge
 8008a6c:	6033      	strge	r3, [r6, #0]
 8008a6e:	9f03      	ldr	r7, [sp, #12]
 8008a70:	4b97      	ldr	r3, [pc, #604]	@ (8008cd0 <_dtoa_r+0x2d0>)
 8008a72:	bfb8      	it	lt
 8008a74:	6032      	strlt	r2, [r6, #0]
 8008a76:	43bb      	bics	r3, r7
 8008a78:	d112      	bne.n	8008aa0 <_dtoa_r+0xa0>
 8008a7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008a7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008a80:	6013      	str	r3, [r2, #0]
 8008a82:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008a86:	4323      	orrs	r3, r4
 8008a88:	f000 854c 	beq.w	8009524 <_dtoa_r+0xb24>
 8008a8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a8e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008ce4 <_dtoa_r+0x2e4>
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	f000 854e 	beq.w	8009534 <_dtoa_r+0xb34>
 8008a98:	f10a 0303 	add.w	r3, sl, #3
 8008a9c:	f000 bd48 	b.w	8009530 <_dtoa_r+0xb30>
 8008aa0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	ec51 0b17 	vmov	r0, r1, d7
 8008aac:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008ab0:	f7f8 f81e 	bl	8000af0 <__aeabi_dcmpeq>
 8008ab4:	4680      	mov	r8, r0
 8008ab6:	b158      	cbz	r0, 8008ad0 <_dtoa_r+0xd0>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008abc:	6013      	str	r3, [r2, #0]
 8008abe:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008ac0:	b113      	cbz	r3, 8008ac8 <_dtoa_r+0xc8>
 8008ac2:	4b84      	ldr	r3, [pc, #528]	@ (8008cd4 <_dtoa_r+0x2d4>)
 8008ac4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008ac6:	6013      	str	r3, [r2, #0]
 8008ac8:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8008ce8 <_dtoa_r+0x2e8>
 8008acc:	f000 bd32 	b.w	8009534 <_dtoa_r+0xb34>
 8008ad0:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008ad4:	aa16      	add	r2, sp, #88	@ 0x58
 8008ad6:	a917      	add	r1, sp, #92	@ 0x5c
 8008ad8:	4658      	mov	r0, fp
 8008ada:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008ade:	f001 fa41 	bl	8009f64 <__d2b>
 8008ae2:	4681      	mov	r9, r0
 8008ae4:	2e00      	cmp	r6, #0
 8008ae6:	d075      	beq.n	8008bd4 <_dtoa_r+0x1d4>
 8008ae8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008aea:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008aee:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008af2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008af6:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008afa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008afe:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008b02:	4619      	mov	r1, r3
 8008b04:	2200      	movs	r2, #0
 8008b06:	4b74      	ldr	r3, [pc, #464]	@ (8008cd8 <_dtoa_r+0x2d8>)
 8008b08:	f7f7 fbd2 	bl	80002b0 <__aeabi_dsub>
 8008b0c:	a368      	add	r3, pc, #416	@ (adr r3, 8008cb0 <_dtoa_r+0x2b0>)
 8008b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b12:	f7f7 fd85 	bl	8000620 <__aeabi_dmul>
 8008b16:	a368      	add	r3, pc, #416	@ (adr r3, 8008cb8 <_dtoa_r+0x2b8>)
 8008b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1c:	f7f7 fbca 	bl	80002b4 <__adddf3>
 8008b20:	4604      	mov	r4, r0
 8008b22:	460d      	mov	r5, r1
 8008b24:	4630      	mov	r0, r6
 8008b26:	f7f7 fd11 	bl	800054c <__aeabi_i2d>
 8008b2a:	a365      	add	r3, pc, #404	@ (adr r3, 8008cc0 <_dtoa_r+0x2c0>)
 8008b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b30:	f7f7 fd76 	bl	8000620 <__aeabi_dmul>
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	4620      	mov	r0, r4
 8008b3a:	4629      	mov	r1, r5
 8008b3c:	f7f7 fbba 	bl	80002b4 <__adddf3>
 8008b40:	4604      	mov	r4, r0
 8008b42:	460d      	mov	r5, r1
 8008b44:	f7f8 f81c 	bl	8000b80 <__aeabi_d2iz>
 8008b48:	2200      	movs	r2, #0
 8008b4a:	4607      	mov	r7, r0
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	4620      	mov	r0, r4
 8008b50:	4629      	mov	r1, r5
 8008b52:	f7f7 ffd7 	bl	8000b04 <__aeabi_dcmplt>
 8008b56:	b140      	cbz	r0, 8008b6a <_dtoa_r+0x16a>
 8008b58:	4638      	mov	r0, r7
 8008b5a:	f7f7 fcf7 	bl	800054c <__aeabi_i2d>
 8008b5e:	4622      	mov	r2, r4
 8008b60:	462b      	mov	r3, r5
 8008b62:	f7f7 ffc5 	bl	8000af0 <__aeabi_dcmpeq>
 8008b66:	b900      	cbnz	r0, 8008b6a <_dtoa_r+0x16a>
 8008b68:	3f01      	subs	r7, #1
 8008b6a:	2f16      	cmp	r7, #22
 8008b6c:	d851      	bhi.n	8008c12 <_dtoa_r+0x212>
 8008b6e:	4b5b      	ldr	r3, [pc, #364]	@ (8008cdc <_dtoa_r+0x2dc>)
 8008b70:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7c:	f7f7 ffc2 	bl	8000b04 <__aeabi_dcmplt>
 8008b80:	2800      	cmp	r0, #0
 8008b82:	d048      	beq.n	8008c16 <_dtoa_r+0x216>
 8008b84:	3f01      	subs	r7, #1
 8008b86:	2300      	movs	r3, #0
 8008b88:	9312      	str	r3, [sp, #72]	@ 0x48
 8008b8a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008b8c:	1b9b      	subs	r3, r3, r6
 8008b8e:	1e5a      	subs	r2, r3, #1
 8008b90:	bf46      	itte	mi
 8008b92:	f1c3 0801 	rsbmi	r8, r3, #1
 8008b96:	2300      	movmi	r3, #0
 8008b98:	f04f 0800 	movpl.w	r8, #0
 8008b9c:	9208      	str	r2, [sp, #32]
 8008b9e:	bf48      	it	mi
 8008ba0:	9308      	strmi	r3, [sp, #32]
 8008ba2:	2f00      	cmp	r7, #0
 8008ba4:	db39      	blt.n	8008c1a <_dtoa_r+0x21a>
 8008ba6:	9b08      	ldr	r3, [sp, #32]
 8008ba8:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008baa:	443b      	add	r3, r7
 8008bac:	9308      	str	r3, [sp, #32]
 8008bae:	2300      	movs	r3, #0
 8008bb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bb4:	2b09      	cmp	r3, #9
 8008bb6:	d864      	bhi.n	8008c82 <_dtoa_r+0x282>
 8008bb8:	2b05      	cmp	r3, #5
 8008bba:	bfc5      	ittet	gt
 8008bbc:	3b04      	subgt	r3, #4
 8008bbe:	2400      	movgt	r4, #0
 8008bc0:	2401      	movle	r4, #1
 8008bc2:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008bc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bc6:	3b02      	subs	r3, #2
 8008bc8:	2b03      	cmp	r3, #3
 8008bca:	d865      	bhi.n	8008c98 <_dtoa_r+0x298>
 8008bcc:	e8df f003 	tbb	[pc, r3]
 8008bd0:	5737392c 	.word	0x5737392c
 8008bd4:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008bd8:	441e      	add	r6, r3
 8008bda:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008bde:	2b20      	cmp	r3, #32
 8008be0:	bfc9      	itett	gt
 8008be2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008be6:	f1c3 0320 	rsble	r3, r3, #32
 8008bea:	409f      	lslgt	r7, r3
 8008bec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008bf0:	bfd8      	it	le
 8008bf2:	fa04 f003 	lslle.w	r0, r4, r3
 8008bf6:	f106 36ff 	add.w	r6, r6, #4294967295
 8008bfa:	bfc4      	itt	gt
 8008bfc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008c00:	ea47 0003 	orrgt.w	r0, r7, r3
 8008c04:	f7f7 fc92 	bl	800052c <__aeabi_ui2d>
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008c0e:	9214      	str	r2, [sp, #80]	@ 0x50
 8008c10:	e777      	b.n	8008b02 <_dtoa_r+0x102>
 8008c12:	2301      	movs	r3, #1
 8008c14:	e7b8      	b.n	8008b88 <_dtoa_r+0x188>
 8008c16:	9012      	str	r0, [sp, #72]	@ 0x48
 8008c18:	e7b7      	b.n	8008b8a <_dtoa_r+0x18a>
 8008c1a:	427b      	negs	r3, r7
 8008c1c:	eba8 0807 	sub.w	r8, r8, r7
 8008c20:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c22:	2300      	movs	r3, #0
 8008c24:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008c26:	e7c4      	b.n	8008bb2 <_dtoa_r+0x1b2>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	dc35      	bgt.n	8008c9e <_dtoa_r+0x29e>
 8008c32:	2301      	movs	r3, #1
 8008c34:	461a      	mov	r2, r3
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	9307      	str	r3, [sp, #28]
 8008c3a:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c3c:	e00b      	b.n	8008c56 <_dtoa_r+0x256>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e7f3      	b.n	8008c2a <_dtoa_r+0x22a>
 8008c42:	2300      	movs	r3, #0
 8008c44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c48:	18fb      	adds	r3, r7, r3
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	9307      	str	r3, [sp, #28]
 8008c52:	bfb8      	it	lt
 8008c54:	2301      	movlt	r3, #1
 8008c56:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	2204      	movs	r2, #4
 8008c5e:	f102 0514 	add.w	r5, r2, #20
 8008c62:	429d      	cmp	r5, r3
 8008c64:	d91f      	bls.n	8008ca6 <_dtoa_r+0x2a6>
 8008c66:	6041      	str	r1, [r0, #4]
 8008c68:	4658      	mov	r0, fp
 8008c6a:	f000 fd8d 	bl	8009788 <_Balloc>
 8008c6e:	4682      	mov	sl, r0
 8008c70:	2800      	cmp	r0, #0
 8008c72:	d13b      	bne.n	8008cec <_dtoa_r+0x2ec>
 8008c74:	4b1a      	ldr	r3, [pc, #104]	@ (8008ce0 <_dtoa_r+0x2e0>)
 8008c76:	4602      	mov	r2, r0
 8008c78:	f240 11af 	movw	r1, #431	@ 0x1af
 8008c7c:	e6d7      	b.n	8008a2e <_dtoa_r+0x2e>
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e7e0      	b.n	8008c44 <_dtoa_r+0x244>
 8008c82:	2401      	movs	r4, #1
 8008c84:	2300      	movs	r3, #0
 8008c86:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008c88:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c8e:	2200      	movs	r2, #0
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	9307      	str	r3, [sp, #28]
 8008c94:	2312      	movs	r3, #18
 8008c96:	e7d0      	b.n	8008c3a <_dtoa_r+0x23a>
 8008c98:	2301      	movs	r3, #1
 8008c9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c9c:	e7f5      	b.n	8008c8a <_dtoa_r+0x28a>
 8008c9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ca0:	9300      	str	r3, [sp, #0]
 8008ca2:	9307      	str	r3, [sp, #28]
 8008ca4:	e7d7      	b.n	8008c56 <_dtoa_r+0x256>
 8008ca6:	3101      	adds	r1, #1
 8008ca8:	0052      	lsls	r2, r2, #1
 8008caa:	e7d8      	b.n	8008c5e <_dtoa_r+0x25e>
 8008cac:	f3af 8000 	nop.w
 8008cb0:	636f4361 	.word	0x636f4361
 8008cb4:	3fd287a7 	.word	0x3fd287a7
 8008cb8:	8b60c8b3 	.word	0x8b60c8b3
 8008cbc:	3fc68a28 	.word	0x3fc68a28
 8008cc0:	509f79fb 	.word	0x509f79fb
 8008cc4:	3fd34413 	.word	0x3fd34413
 8008cc8:	0800bf2e 	.word	0x0800bf2e
 8008ccc:	0800bf45 	.word	0x0800bf45
 8008cd0:	7ff00000 	.word	0x7ff00000
 8008cd4:	0800bef9 	.word	0x0800bef9
 8008cd8:	3ff80000 	.word	0x3ff80000
 8008cdc:	0800c040 	.word	0x0800c040
 8008ce0:	0800bf9d 	.word	0x0800bf9d
 8008ce4:	0800bf2a 	.word	0x0800bf2a
 8008ce8:	0800bef8 	.word	0x0800bef8
 8008cec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008cf0:	6018      	str	r0, [r3, #0]
 8008cf2:	9b07      	ldr	r3, [sp, #28]
 8008cf4:	2b0e      	cmp	r3, #14
 8008cf6:	f200 80a4 	bhi.w	8008e42 <_dtoa_r+0x442>
 8008cfa:	2c00      	cmp	r4, #0
 8008cfc:	f000 80a1 	beq.w	8008e42 <_dtoa_r+0x442>
 8008d00:	2f00      	cmp	r7, #0
 8008d02:	dd33      	ble.n	8008d6c <_dtoa_r+0x36c>
 8008d04:	f007 020f 	and.w	r2, r7, #15
 8008d08:	4bac      	ldr	r3, [pc, #688]	@ (8008fbc <_dtoa_r+0x5bc>)
 8008d0a:	05f8      	lsls	r0, r7, #23
 8008d0c:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008d10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d14:	ed93 7b00 	vldr	d7, [r3]
 8008d18:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008d1c:	d516      	bpl.n	8008d4c <_dtoa_r+0x34c>
 8008d1e:	4ba8      	ldr	r3, [pc, #672]	@ (8008fc0 <_dtoa_r+0x5c0>)
 8008d20:	f004 040f 	and.w	r4, r4, #15
 8008d24:	2603      	movs	r6, #3
 8008d26:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d2a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d2e:	f7f7 fda1 	bl	8000874 <__aeabi_ddiv>
 8008d32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d36:	4da2      	ldr	r5, [pc, #648]	@ (8008fc0 <_dtoa_r+0x5c0>)
 8008d38:	b954      	cbnz	r4, 8008d50 <_dtoa_r+0x350>
 8008d3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d42:	f7f7 fd97 	bl	8000874 <__aeabi_ddiv>
 8008d46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d4a:	e028      	b.n	8008d9e <_dtoa_r+0x39e>
 8008d4c:	2602      	movs	r6, #2
 8008d4e:	e7f2      	b.n	8008d36 <_dtoa_r+0x336>
 8008d50:	07e1      	lsls	r1, r4, #31
 8008d52:	d508      	bpl.n	8008d66 <_dtoa_r+0x366>
 8008d54:	3601      	adds	r6, #1
 8008d56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d5e:	f7f7 fc5f 	bl	8000620 <__aeabi_dmul>
 8008d62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d66:	1064      	asrs	r4, r4, #1
 8008d68:	3508      	adds	r5, #8
 8008d6a:	e7e5      	b.n	8008d38 <_dtoa_r+0x338>
 8008d6c:	f000 80d2 	beq.w	8008f14 <_dtoa_r+0x514>
 8008d70:	427c      	negs	r4, r7
 8008d72:	4b92      	ldr	r3, [pc, #584]	@ (8008fbc <_dtoa_r+0x5bc>)
 8008d74:	4d92      	ldr	r5, [pc, #584]	@ (8008fc0 <_dtoa_r+0x5c0>)
 8008d76:	2602      	movs	r6, #2
 8008d78:	f004 020f 	and.w	r2, r4, #15
 8008d7c:	1124      	asrs	r4, r4, #4
 8008d7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8a:	f7f7 fc49 	bl	8000620 <__aeabi_dmul>
 8008d8e:	2300      	movs	r3, #0
 8008d90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d94:	2c00      	cmp	r4, #0
 8008d96:	f040 80b2 	bne.w	8008efe <_dtoa_r+0x4fe>
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1d3      	bne.n	8008d46 <_dtoa_r+0x346>
 8008d9e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008da0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f000 80b7 	beq.w	8008f18 <_dtoa_r+0x518>
 8008daa:	2200      	movs	r2, #0
 8008dac:	4b85      	ldr	r3, [pc, #532]	@ (8008fc4 <_dtoa_r+0x5c4>)
 8008dae:	4620      	mov	r0, r4
 8008db0:	4629      	mov	r1, r5
 8008db2:	f7f7 fea7 	bl	8000b04 <__aeabi_dcmplt>
 8008db6:	2800      	cmp	r0, #0
 8008db8:	f000 80ae 	beq.w	8008f18 <_dtoa_r+0x518>
 8008dbc:	9b07      	ldr	r3, [sp, #28]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f000 80aa 	beq.w	8008f18 <_dtoa_r+0x518>
 8008dc4:	9b00      	ldr	r3, [sp, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	dd37      	ble.n	8008e3a <_dtoa_r+0x43a>
 8008dca:	1e7b      	subs	r3, r7, #1
 8008dcc:	4620      	mov	r0, r4
 8008dce:	2200      	movs	r2, #0
 8008dd0:	4629      	mov	r1, r5
 8008dd2:	9304      	str	r3, [sp, #16]
 8008dd4:	3601      	adds	r6, #1
 8008dd6:	4b7c      	ldr	r3, [pc, #496]	@ (8008fc8 <_dtoa_r+0x5c8>)
 8008dd8:	f7f7 fc22 	bl	8000620 <__aeabi_dmul>
 8008ddc:	9c00      	ldr	r4, [sp, #0]
 8008dde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008de2:	4630      	mov	r0, r6
 8008de4:	f7f7 fbb2 	bl	800054c <__aeabi_i2d>
 8008de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dec:	f7f7 fc18 	bl	8000620 <__aeabi_dmul>
 8008df0:	2200      	movs	r2, #0
 8008df2:	4b76      	ldr	r3, [pc, #472]	@ (8008fcc <_dtoa_r+0x5cc>)
 8008df4:	f7f7 fa5e 	bl	80002b4 <__adddf3>
 8008df8:	4605      	mov	r5, r0
 8008dfa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008dfe:	2c00      	cmp	r4, #0
 8008e00:	f040 808d 	bne.w	8008f1e <_dtoa_r+0x51e>
 8008e04:	2200      	movs	r2, #0
 8008e06:	4b72      	ldr	r3, [pc, #456]	@ (8008fd0 <_dtoa_r+0x5d0>)
 8008e08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e0c:	f7f7 fa50 	bl	80002b0 <__aeabi_dsub>
 8008e10:	4602      	mov	r2, r0
 8008e12:	460b      	mov	r3, r1
 8008e14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e18:	462a      	mov	r2, r5
 8008e1a:	4633      	mov	r3, r6
 8008e1c:	f7f7 fe90 	bl	8000b40 <__aeabi_dcmpgt>
 8008e20:	2800      	cmp	r0, #0
 8008e22:	f040 828b 	bne.w	800933c <_dtoa_r+0x93c>
 8008e26:	462a      	mov	r2, r5
 8008e28:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008e2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e30:	f7f7 fe68 	bl	8000b04 <__aeabi_dcmplt>
 8008e34:	2800      	cmp	r0, #0
 8008e36:	f040 8128 	bne.w	800908a <_dtoa_r+0x68a>
 8008e3a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008e3e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008e42:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f2c0 815a 	blt.w	80090fe <_dtoa_r+0x6fe>
 8008e4a:	2f0e      	cmp	r7, #14
 8008e4c:	f300 8157 	bgt.w	80090fe <_dtoa_r+0x6fe>
 8008e50:	4b5a      	ldr	r3, [pc, #360]	@ (8008fbc <_dtoa_r+0x5bc>)
 8008e52:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008e56:	ed93 7b00 	vldr	d7, [r3]
 8008e5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	ed8d 7b00 	vstr	d7, [sp]
 8008e62:	da03      	bge.n	8008e6c <_dtoa_r+0x46c>
 8008e64:	9b07      	ldr	r3, [sp, #28]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f340 8101 	ble.w	800906e <_dtoa_r+0x66e>
 8008e6c:	4656      	mov	r6, sl
 8008e6e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008e72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e76:	4620      	mov	r0, r4
 8008e78:	4629      	mov	r1, r5
 8008e7a:	f7f7 fcfb 	bl	8000874 <__aeabi_ddiv>
 8008e7e:	f7f7 fe7f 	bl	8000b80 <__aeabi_d2iz>
 8008e82:	4680      	mov	r8, r0
 8008e84:	f7f7 fb62 	bl	800054c <__aeabi_i2d>
 8008e88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e8c:	f7f7 fbc8 	bl	8000620 <__aeabi_dmul>
 8008e90:	4602      	mov	r2, r0
 8008e92:	4620      	mov	r0, r4
 8008e94:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008e98:	460b      	mov	r3, r1
 8008e9a:	4629      	mov	r1, r5
 8008e9c:	f7f7 fa08 	bl	80002b0 <__aeabi_dsub>
 8008ea0:	9d07      	ldr	r5, [sp, #28]
 8008ea2:	f806 4b01 	strb.w	r4, [r6], #1
 8008ea6:	eba6 040a 	sub.w	r4, r6, sl
 8008eaa:	4602      	mov	r2, r0
 8008eac:	460b      	mov	r3, r1
 8008eae:	42a5      	cmp	r5, r4
 8008eb0:	f040 8117 	bne.w	80090e2 <_dtoa_r+0x6e2>
 8008eb4:	f7f7 f9fe 	bl	80002b4 <__adddf3>
 8008eb8:	4604      	mov	r4, r0
 8008eba:	460d      	mov	r5, r1
 8008ebc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ec0:	f7f7 fe3e 	bl	8000b40 <__aeabi_dcmpgt>
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	f040 80f9 	bne.w	80090bc <_dtoa_r+0x6bc>
 8008eca:	4620      	mov	r0, r4
 8008ecc:	4629      	mov	r1, r5
 8008ece:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ed2:	f7f7 fe0d 	bl	8000af0 <__aeabi_dcmpeq>
 8008ed6:	b118      	cbz	r0, 8008ee0 <_dtoa_r+0x4e0>
 8008ed8:	f018 0f01 	tst.w	r8, #1
 8008edc:	f040 80ee 	bne.w	80090bc <_dtoa_r+0x6bc>
 8008ee0:	4649      	mov	r1, r9
 8008ee2:	4658      	mov	r0, fp
 8008ee4:	f000 fc90 	bl	8009808 <_Bfree>
 8008ee8:	2300      	movs	r3, #0
 8008eea:	3701      	adds	r7, #1
 8008eec:	7033      	strb	r3, [r6, #0]
 8008eee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008ef0:	601f      	str	r7, [r3, #0]
 8008ef2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f000 831d 	beq.w	8009534 <_dtoa_r+0xb34>
 8008efa:	601e      	str	r6, [r3, #0]
 8008efc:	e31a      	b.n	8009534 <_dtoa_r+0xb34>
 8008efe:	07e2      	lsls	r2, r4, #31
 8008f00:	d505      	bpl.n	8008f0e <_dtoa_r+0x50e>
 8008f02:	3601      	adds	r6, #1
 8008f04:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f08:	f7f7 fb8a 	bl	8000620 <__aeabi_dmul>
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	1064      	asrs	r4, r4, #1
 8008f10:	3508      	adds	r5, #8
 8008f12:	e73f      	b.n	8008d94 <_dtoa_r+0x394>
 8008f14:	2602      	movs	r6, #2
 8008f16:	e742      	b.n	8008d9e <_dtoa_r+0x39e>
 8008f18:	9c07      	ldr	r4, [sp, #28]
 8008f1a:	9704      	str	r7, [sp, #16]
 8008f1c:	e761      	b.n	8008de2 <_dtoa_r+0x3e2>
 8008f1e:	4b27      	ldr	r3, [pc, #156]	@ (8008fbc <_dtoa_r+0x5bc>)
 8008f20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f26:	4454      	add	r4, sl
 8008f28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f2c:	2900      	cmp	r1, #0
 8008f2e:	d053      	beq.n	8008fd8 <_dtoa_r+0x5d8>
 8008f30:	2000      	movs	r0, #0
 8008f32:	4928      	ldr	r1, [pc, #160]	@ (8008fd4 <_dtoa_r+0x5d4>)
 8008f34:	f7f7 fc9e 	bl	8000874 <__aeabi_ddiv>
 8008f38:	4633      	mov	r3, r6
 8008f3a:	4656      	mov	r6, sl
 8008f3c:	462a      	mov	r2, r5
 8008f3e:	f7f7 f9b7 	bl	80002b0 <__aeabi_dsub>
 8008f42:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f4a:	f7f7 fe19 	bl	8000b80 <__aeabi_d2iz>
 8008f4e:	4605      	mov	r5, r0
 8008f50:	f7f7 fafc 	bl	800054c <__aeabi_i2d>
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	3530      	adds	r5, #48	@ 0x30
 8008f5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f5e:	f7f7 f9a7 	bl	80002b0 <__aeabi_dsub>
 8008f62:	4602      	mov	r2, r0
 8008f64:	460b      	mov	r3, r1
 8008f66:	f806 5b01 	strb.w	r5, [r6], #1
 8008f6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f72:	f7f7 fdc7 	bl	8000b04 <__aeabi_dcmplt>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d171      	bne.n	800905e <_dtoa_r+0x65e>
 8008f7a:	2000      	movs	r0, #0
 8008f7c:	4911      	ldr	r1, [pc, #68]	@ (8008fc4 <_dtoa_r+0x5c4>)
 8008f7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f82:	f7f7 f995 	bl	80002b0 <__aeabi_dsub>
 8008f86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f8a:	f7f7 fdbb 	bl	8000b04 <__aeabi_dcmplt>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	f040 8095 	bne.w	80090be <_dtoa_r+0x6be>
 8008f94:	42a6      	cmp	r6, r4
 8008f96:	f43f af50 	beq.w	8008e3a <_dtoa_r+0x43a>
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8008fc8 <_dtoa_r+0x5c8>)
 8008f9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008fa2:	f7f7 fb3d 	bl	8000620 <__aeabi_dmul>
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	4b07      	ldr	r3, [pc, #28]	@ (8008fc8 <_dtoa_r+0x5c8>)
 8008faa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008fae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fb2:	f7f7 fb35 	bl	8000620 <__aeabi_dmul>
 8008fb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fba:	e7c4      	b.n	8008f46 <_dtoa_r+0x546>
 8008fbc:	0800c040 	.word	0x0800c040
 8008fc0:	0800c018 	.word	0x0800c018
 8008fc4:	3ff00000 	.word	0x3ff00000
 8008fc8:	40240000 	.word	0x40240000
 8008fcc:	401c0000 	.word	0x401c0000
 8008fd0:	40140000 	.word	0x40140000
 8008fd4:	3fe00000 	.word	0x3fe00000
 8008fd8:	4631      	mov	r1, r6
 8008fda:	4656      	mov	r6, sl
 8008fdc:	4628      	mov	r0, r5
 8008fde:	f7f7 fb1f 	bl	8000620 <__aeabi_dmul>
 8008fe2:	9415      	str	r4, [sp, #84]	@ 0x54
 8008fe4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008fe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fec:	f7f7 fdc8 	bl	8000b80 <__aeabi_d2iz>
 8008ff0:	4605      	mov	r5, r0
 8008ff2:	f7f7 faab 	bl	800054c <__aeabi_i2d>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	3530      	adds	r5, #48	@ 0x30
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009000:	f7f7 f956 	bl	80002b0 <__aeabi_dsub>
 8009004:	f806 5b01 	strb.w	r5, [r6], #1
 8009008:	4602      	mov	r2, r0
 800900a:	460b      	mov	r3, r1
 800900c:	42a6      	cmp	r6, r4
 800900e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009012:	f04f 0200 	mov.w	r2, #0
 8009016:	d124      	bne.n	8009062 <_dtoa_r+0x662>
 8009018:	4bac      	ldr	r3, [pc, #688]	@ (80092cc <_dtoa_r+0x8cc>)
 800901a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800901e:	f7f7 f949 	bl	80002b4 <__adddf3>
 8009022:	4602      	mov	r2, r0
 8009024:	460b      	mov	r3, r1
 8009026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800902a:	f7f7 fd89 	bl	8000b40 <__aeabi_dcmpgt>
 800902e:	2800      	cmp	r0, #0
 8009030:	d145      	bne.n	80090be <_dtoa_r+0x6be>
 8009032:	2000      	movs	r0, #0
 8009034:	49a5      	ldr	r1, [pc, #660]	@ (80092cc <_dtoa_r+0x8cc>)
 8009036:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800903a:	f7f7 f939 	bl	80002b0 <__aeabi_dsub>
 800903e:	4602      	mov	r2, r0
 8009040:	460b      	mov	r3, r1
 8009042:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009046:	f7f7 fd5d 	bl	8000b04 <__aeabi_dcmplt>
 800904a:	2800      	cmp	r0, #0
 800904c:	f43f aef5 	beq.w	8008e3a <_dtoa_r+0x43a>
 8009050:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009052:	1e73      	subs	r3, r6, #1
 8009054:	9315      	str	r3, [sp, #84]	@ 0x54
 8009056:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800905a:	2b30      	cmp	r3, #48	@ 0x30
 800905c:	d0f8      	beq.n	8009050 <_dtoa_r+0x650>
 800905e:	9f04      	ldr	r7, [sp, #16]
 8009060:	e73e      	b.n	8008ee0 <_dtoa_r+0x4e0>
 8009062:	4b9b      	ldr	r3, [pc, #620]	@ (80092d0 <_dtoa_r+0x8d0>)
 8009064:	f7f7 fadc 	bl	8000620 <__aeabi_dmul>
 8009068:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800906c:	e7bc      	b.n	8008fe8 <_dtoa_r+0x5e8>
 800906e:	d10c      	bne.n	800908a <_dtoa_r+0x68a>
 8009070:	2200      	movs	r2, #0
 8009072:	4b98      	ldr	r3, [pc, #608]	@ (80092d4 <_dtoa_r+0x8d4>)
 8009074:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009078:	f7f7 fad2 	bl	8000620 <__aeabi_dmul>
 800907c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009080:	f7f7 fd54 	bl	8000b2c <__aeabi_dcmpge>
 8009084:	2800      	cmp	r0, #0
 8009086:	f000 8157 	beq.w	8009338 <_dtoa_r+0x938>
 800908a:	2400      	movs	r4, #0
 800908c:	4625      	mov	r5, r4
 800908e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009090:	4656      	mov	r6, sl
 8009092:	43db      	mvns	r3, r3
 8009094:	9304      	str	r3, [sp, #16]
 8009096:	2700      	movs	r7, #0
 8009098:	4621      	mov	r1, r4
 800909a:	4658      	mov	r0, fp
 800909c:	f000 fbb4 	bl	8009808 <_Bfree>
 80090a0:	2d00      	cmp	r5, #0
 80090a2:	d0dc      	beq.n	800905e <_dtoa_r+0x65e>
 80090a4:	b12f      	cbz	r7, 80090b2 <_dtoa_r+0x6b2>
 80090a6:	42af      	cmp	r7, r5
 80090a8:	d003      	beq.n	80090b2 <_dtoa_r+0x6b2>
 80090aa:	4639      	mov	r1, r7
 80090ac:	4658      	mov	r0, fp
 80090ae:	f000 fbab 	bl	8009808 <_Bfree>
 80090b2:	4629      	mov	r1, r5
 80090b4:	4658      	mov	r0, fp
 80090b6:	f000 fba7 	bl	8009808 <_Bfree>
 80090ba:	e7d0      	b.n	800905e <_dtoa_r+0x65e>
 80090bc:	9704      	str	r7, [sp, #16]
 80090be:	4633      	mov	r3, r6
 80090c0:	461e      	mov	r6, r3
 80090c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090c6:	2a39      	cmp	r2, #57	@ 0x39
 80090c8:	d107      	bne.n	80090da <_dtoa_r+0x6da>
 80090ca:	459a      	cmp	sl, r3
 80090cc:	d1f8      	bne.n	80090c0 <_dtoa_r+0x6c0>
 80090ce:	9a04      	ldr	r2, [sp, #16]
 80090d0:	3201      	adds	r2, #1
 80090d2:	9204      	str	r2, [sp, #16]
 80090d4:	2230      	movs	r2, #48	@ 0x30
 80090d6:	f88a 2000 	strb.w	r2, [sl]
 80090da:	781a      	ldrb	r2, [r3, #0]
 80090dc:	3201      	adds	r2, #1
 80090de:	701a      	strb	r2, [r3, #0]
 80090e0:	e7bd      	b.n	800905e <_dtoa_r+0x65e>
 80090e2:	2200      	movs	r2, #0
 80090e4:	4b7a      	ldr	r3, [pc, #488]	@ (80092d0 <_dtoa_r+0x8d0>)
 80090e6:	f7f7 fa9b 	bl	8000620 <__aeabi_dmul>
 80090ea:	2200      	movs	r2, #0
 80090ec:	2300      	movs	r3, #0
 80090ee:	4604      	mov	r4, r0
 80090f0:	460d      	mov	r5, r1
 80090f2:	f7f7 fcfd 	bl	8000af0 <__aeabi_dcmpeq>
 80090f6:	2800      	cmp	r0, #0
 80090f8:	f43f aebb 	beq.w	8008e72 <_dtoa_r+0x472>
 80090fc:	e6f0      	b.n	8008ee0 <_dtoa_r+0x4e0>
 80090fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009100:	2a00      	cmp	r2, #0
 8009102:	f000 80db 	beq.w	80092bc <_dtoa_r+0x8bc>
 8009106:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009108:	2a01      	cmp	r2, #1
 800910a:	f300 80bf 	bgt.w	800928c <_dtoa_r+0x88c>
 800910e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009110:	2a00      	cmp	r2, #0
 8009112:	f000 80b7 	beq.w	8009284 <_dtoa_r+0x884>
 8009116:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800911a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800911c:	4646      	mov	r6, r8
 800911e:	9a08      	ldr	r2, [sp, #32]
 8009120:	2101      	movs	r1, #1
 8009122:	4658      	mov	r0, fp
 8009124:	4498      	add	r8, r3
 8009126:	441a      	add	r2, r3
 8009128:	9208      	str	r2, [sp, #32]
 800912a:	f000 fc6d 	bl	8009a08 <__i2b>
 800912e:	4605      	mov	r5, r0
 8009130:	b15e      	cbz	r6, 800914a <_dtoa_r+0x74a>
 8009132:	9b08      	ldr	r3, [sp, #32]
 8009134:	2b00      	cmp	r3, #0
 8009136:	dd08      	ble.n	800914a <_dtoa_r+0x74a>
 8009138:	42b3      	cmp	r3, r6
 800913a:	9a08      	ldr	r2, [sp, #32]
 800913c:	bfa8      	it	ge
 800913e:	4633      	movge	r3, r6
 8009140:	eba8 0803 	sub.w	r8, r8, r3
 8009144:	1af6      	subs	r6, r6, r3
 8009146:	1ad3      	subs	r3, r2, r3
 8009148:	9308      	str	r3, [sp, #32]
 800914a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800914c:	b1f3      	cbz	r3, 800918c <_dtoa_r+0x78c>
 800914e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009150:	2b00      	cmp	r3, #0
 8009152:	f000 80b7 	beq.w	80092c4 <_dtoa_r+0x8c4>
 8009156:	b18c      	cbz	r4, 800917c <_dtoa_r+0x77c>
 8009158:	4629      	mov	r1, r5
 800915a:	4622      	mov	r2, r4
 800915c:	4658      	mov	r0, fp
 800915e:	f000 fd13 	bl	8009b88 <__pow5mult>
 8009162:	464a      	mov	r2, r9
 8009164:	4601      	mov	r1, r0
 8009166:	4605      	mov	r5, r0
 8009168:	4658      	mov	r0, fp
 800916a:	f000 fc63 	bl	8009a34 <__multiply>
 800916e:	4649      	mov	r1, r9
 8009170:	9004      	str	r0, [sp, #16]
 8009172:	4658      	mov	r0, fp
 8009174:	f000 fb48 	bl	8009808 <_Bfree>
 8009178:	9b04      	ldr	r3, [sp, #16]
 800917a:	4699      	mov	r9, r3
 800917c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800917e:	1b1a      	subs	r2, r3, r4
 8009180:	d004      	beq.n	800918c <_dtoa_r+0x78c>
 8009182:	4649      	mov	r1, r9
 8009184:	4658      	mov	r0, fp
 8009186:	f000 fcff 	bl	8009b88 <__pow5mult>
 800918a:	4681      	mov	r9, r0
 800918c:	2101      	movs	r1, #1
 800918e:	4658      	mov	r0, fp
 8009190:	f000 fc3a 	bl	8009a08 <__i2b>
 8009194:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009196:	4604      	mov	r4, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	f000 81cf 	beq.w	800953c <_dtoa_r+0xb3c>
 800919e:	461a      	mov	r2, r3
 80091a0:	4601      	mov	r1, r0
 80091a2:	4658      	mov	r0, fp
 80091a4:	f000 fcf0 	bl	8009b88 <__pow5mult>
 80091a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091aa:	4604      	mov	r4, r0
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	f300 8095 	bgt.w	80092dc <_dtoa_r+0x8dc>
 80091b2:	9b02      	ldr	r3, [sp, #8]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f040 8087 	bne.w	80092c8 <_dtoa_r+0x8c8>
 80091ba:	9b03      	ldr	r3, [sp, #12]
 80091bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f040 8089 	bne.w	80092d8 <_dtoa_r+0x8d8>
 80091c6:	9b03      	ldr	r3, [sp, #12]
 80091c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80091cc:	0d1b      	lsrs	r3, r3, #20
 80091ce:	051b      	lsls	r3, r3, #20
 80091d0:	b12b      	cbz	r3, 80091de <_dtoa_r+0x7de>
 80091d2:	9b08      	ldr	r3, [sp, #32]
 80091d4:	f108 0801 	add.w	r8, r8, #1
 80091d8:	3301      	adds	r3, #1
 80091da:	9308      	str	r3, [sp, #32]
 80091dc:	2301      	movs	r3, #1
 80091de:	930a      	str	r3, [sp, #40]	@ 0x28
 80091e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f000 81b0 	beq.w	8009548 <_dtoa_r+0xb48>
 80091e8:	6923      	ldr	r3, [r4, #16]
 80091ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80091ee:	6918      	ldr	r0, [r3, #16]
 80091f0:	f000 fbbe 	bl	8009970 <__hi0bits>
 80091f4:	f1c0 0020 	rsb	r0, r0, #32
 80091f8:	9b08      	ldr	r3, [sp, #32]
 80091fa:	4418      	add	r0, r3
 80091fc:	f010 001f 	ands.w	r0, r0, #31
 8009200:	d077      	beq.n	80092f2 <_dtoa_r+0x8f2>
 8009202:	f1c0 0320 	rsb	r3, r0, #32
 8009206:	2b04      	cmp	r3, #4
 8009208:	dd6b      	ble.n	80092e2 <_dtoa_r+0x8e2>
 800920a:	f1c0 001c 	rsb	r0, r0, #28
 800920e:	9b08      	ldr	r3, [sp, #32]
 8009210:	4480      	add	r8, r0
 8009212:	4403      	add	r3, r0
 8009214:	4406      	add	r6, r0
 8009216:	9308      	str	r3, [sp, #32]
 8009218:	f1b8 0f00 	cmp.w	r8, #0
 800921c:	dd05      	ble.n	800922a <_dtoa_r+0x82a>
 800921e:	4649      	mov	r1, r9
 8009220:	4642      	mov	r2, r8
 8009222:	4658      	mov	r0, fp
 8009224:	f000 fd0a 	bl	8009c3c <__lshift>
 8009228:	4681      	mov	r9, r0
 800922a:	9b08      	ldr	r3, [sp, #32]
 800922c:	2b00      	cmp	r3, #0
 800922e:	dd05      	ble.n	800923c <_dtoa_r+0x83c>
 8009230:	4621      	mov	r1, r4
 8009232:	461a      	mov	r2, r3
 8009234:	4658      	mov	r0, fp
 8009236:	f000 fd01 	bl	8009c3c <__lshift>
 800923a:	4604      	mov	r4, r0
 800923c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800923e:	2b00      	cmp	r3, #0
 8009240:	d059      	beq.n	80092f6 <_dtoa_r+0x8f6>
 8009242:	4621      	mov	r1, r4
 8009244:	4648      	mov	r0, r9
 8009246:	f000 fd65 	bl	8009d14 <__mcmp>
 800924a:	2800      	cmp	r0, #0
 800924c:	da53      	bge.n	80092f6 <_dtoa_r+0x8f6>
 800924e:	1e7b      	subs	r3, r7, #1
 8009250:	4649      	mov	r1, r9
 8009252:	220a      	movs	r2, #10
 8009254:	4658      	mov	r0, fp
 8009256:	9304      	str	r3, [sp, #16]
 8009258:	2300      	movs	r3, #0
 800925a:	f000 faf7 	bl	800984c <__multadd>
 800925e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009260:	4681      	mov	r9, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	f000 8172 	beq.w	800954c <_dtoa_r+0xb4c>
 8009268:	2300      	movs	r3, #0
 800926a:	4629      	mov	r1, r5
 800926c:	220a      	movs	r2, #10
 800926e:	4658      	mov	r0, fp
 8009270:	f000 faec 	bl	800984c <__multadd>
 8009274:	9b00      	ldr	r3, [sp, #0]
 8009276:	4605      	mov	r5, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	dc67      	bgt.n	800934c <_dtoa_r+0x94c>
 800927c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800927e:	2b02      	cmp	r3, #2
 8009280:	dc41      	bgt.n	8009306 <_dtoa_r+0x906>
 8009282:	e063      	b.n	800934c <_dtoa_r+0x94c>
 8009284:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009286:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800928a:	e746      	b.n	800911a <_dtoa_r+0x71a>
 800928c:	9b07      	ldr	r3, [sp, #28]
 800928e:	1e5c      	subs	r4, r3, #1
 8009290:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009292:	42a3      	cmp	r3, r4
 8009294:	bfb7      	itett	lt
 8009296:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009298:	1b1c      	subge	r4, r3, r4
 800929a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800929c:	1ae3      	sublt	r3, r4, r3
 800929e:	bfbe      	ittt	lt
 80092a0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80092a2:	2400      	movlt	r4, #0
 80092a4:	18d2      	addlt	r2, r2, r3
 80092a6:	9b07      	ldr	r3, [sp, #28]
 80092a8:	bfb8      	it	lt
 80092aa:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	bfb5      	itete	lt
 80092b0:	eba8 0603 	sublt.w	r6, r8, r3
 80092b4:	4646      	movge	r6, r8
 80092b6:	2300      	movlt	r3, #0
 80092b8:	9b07      	ldrge	r3, [sp, #28]
 80092ba:	e730      	b.n	800911e <_dtoa_r+0x71e>
 80092bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80092be:	4646      	mov	r6, r8
 80092c0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80092c2:	e735      	b.n	8009130 <_dtoa_r+0x730>
 80092c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092c6:	e75c      	b.n	8009182 <_dtoa_r+0x782>
 80092c8:	2300      	movs	r3, #0
 80092ca:	e788      	b.n	80091de <_dtoa_r+0x7de>
 80092cc:	3fe00000 	.word	0x3fe00000
 80092d0:	40240000 	.word	0x40240000
 80092d4:	40140000 	.word	0x40140000
 80092d8:	9b02      	ldr	r3, [sp, #8]
 80092da:	e780      	b.n	80091de <_dtoa_r+0x7de>
 80092dc:	2300      	movs	r3, #0
 80092de:	930a      	str	r3, [sp, #40]	@ 0x28
 80092e0:	e782      	b.n	80091e8 <_dtoa_r+0x7e8>
 80092e2:	d099      	beq.n	8009218 <_dtoa_r+0x818>
 80092e4:	331c      	adds	r3, #28
 80092e6:	9a08      	ldr	r2, [sp, #32]
 80092e8:	441a      	add	r2, r3
 80092ea:	4498      	add	r8, r3
 80092ec:	441e      	add	r6, r3
 80092ee:	9208      	str	r2, [sp, #32]
 80092f0:	e792      	b.n	8009218 <_dtoa_r+0x818>
 80092f2:	4603      	mov	r3, r0
 80092f4:	e7f6      	b.n	80092e4 <_dtoa_r+0x8e4>
 80092f6:	9b07      	ldr	r3, [sp, #28]
 80092f8:	9704      	str	r7, [sp, #16]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	dc20      	bgt.n	8009340 <_dtoa_r+0x940>
 80092fe:	9300      	str	r3, [sp, #0]
 8009300:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009302:	2b02      	cmp	r3, #2
 8009304:	dd1e      	ble.n	8009344 <_dtoa_r+0x944>
 8009306:	9b00      	ldr	r3, [sp, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	f47f aec0 	bne.w	800908e <_dtoa_r+0x68e>
 800930e:	4621      	mov	r1, r4
 8009310:	2205      	movs	r2, #5
 8009312:	4658      	mov	r0, fp
 8009314:	f000 fa9a 	bl	800984c <__multadd>
 8009318:	4601      	mov	r1, r0
 800931a:	4604      	mov	r4, r0
 800931c:	4648      	mov	r0, r9
 800931e:	f000 fcf9 	bl	8009d14 <__mcmp>
 8009322:	2800      	cmp	r0, #0
 8009324:	f77f aeb3 	ble.w	800908e <_dtoa_r+0x68e>
 8009328:	2331      	movs	r3, #49	@ 0x31
 800932a:	4656      	mov	r6, sl
 800932c:	f806 3b01 	strb.w	r3, [r6], #1
 8009330:	9b04      	ldr	r3, [sp, #16]
 8009332:	3301      	adds	r3, #1
 8009334:	9304      	str	r3, [sp, #16]
 8009336:	e6ae      	b.n	8009096 <_dtoa_r+0x696>
 8009338:	9c07      	ldr	r4, [sp, #28]
 800933a:	9704      	str	r7, [sp, #16]
 800933c:	4625      	mov	r5, r4
 800933e:	e7f3      	b.n	8009328 <_dtoa_r+0x928>
 8009340:	9b07      	ldr	r3, [sp, #28]
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009346:	2b00      	cmp	r3, #0
 8009348:	f000 8104 	beq.w	8009554 <_dtoa_r+0xb54>
 800934c:	2e00      	cmp	r6, #0
 800934e:	dd05      	ble.n	800935c <_dtoa_r+0x95c>
 8009350:	4629      	mov	r1, r5
 8009352:	4632      	mov	r2, r6
 8009354:	4658      	mov	r0, fp
 8009356:	f000 fc71 	bl	8009c3c <__lshift>
 800935a:	4605      	mov	r5, r0
 800935c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800935e:	2b00      	cmp	r3, #0
 8009360:	d05a      	beq.n	8009418 <_dtoa_r+0xa18>
 8009362:	6869      	ldr	r1, [r5, #4]
 8009364:	4658      	mov	r0, fp
 8009366:	f000 fa0f 	bl	8009788 <_Balloc>
 800936a:	4606      	mov	r6, r0
 800936c:	b928      	cbnz	r0, 800937a <_dtoa_r+0x97a>
 800936e:	4b84      	ldr	r3, [pc, #528]	@ (8009580 <_dtoa_r+0xb80>)
 8009370:	4602      	mov	r2, r0
 8009372:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009376:	f7ff bb5a 	b.w	8008a2e <_dtoa_r+0x2e>
 800937a:	692a      	ldr	r2, [r5, #16]
 800937c:	f105 010c 	add.w	r1, r5, #12
 8009380:	300c      	adds	r0, #12
 8009382:	3202      	adds	r2, #2
 8009384:	0092      	lsls	r2, r2, #2
 8009386:	f002 f805 	bl	800b394 <memcpy>
 800938a:	2201      	movs	r2, #1
 800938c:	4631      	mov	r1, r6
 800938e:	4658      	mov	r0, fp
 8009390:	f000 fc54 	bl	8009c3c <__lshift>
 8009394:	f10a 0301 	add.w	r3, sl, #1
 8009398:	462f      	mov	r7, r5
 800939a:	4605      	mov	r5, r0
 800939c:	9307      	str	r3, [sp, #28]
 800939e:	9b00      	ldr	r3, [sp, #0]
 80093a0:	4453      	add	r3, sl
 80093a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093a4:	9b02      	ldr	r3, [sp, #8]
 80093a6:	f003 0301 	and.w	r3, r3, #1
 80093aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80093ac:	9b07      	ldr	r3, [sp, #28]
 80093ae:	4621      	mov	r1, r4
 80093b0:	4648      	mov	r0, r9
 80093b2:	3b01      	subs	r3, #1
 80093b4:	9300      	str	r3, [sp, #0]
 80093b6:	f7ff fa93 	bl	80088e0 <quorem>
 80093ba:	4639      	mov	r1, r7
 80093bc:	9002      	str	r0, [sp, #8]
 80093be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80093c2:	4648      	mov	r0, r9
 80093c4:	f000 fca6 	bl	8009d14 <__mcmp>
 80093c8:	462a      	mov	r2, r5
 80093ca:	9008      	str	r0, [sp, #32]
 80093cc:	4621      	mov	r1, r4
 80093ce:	4658      	mov	r0, fp
 80093d0:	f000 fcbc 	bl	8009d4c <__mdiff>
 80093d4:	68c2      	ldr	r2, [r0, #12]
 80093d6:	4606      	mov	r6, r0
 80093d8:	bb02      	cbnz	r2, 800941c <_dtoa_r+0xa1c>
 80093da:	4601      	mov	r1, r0
 80093dc:	4648      	mov	r0, r9
 80093de:	f000 fc99 	bl	8009d14 <__mcmp>
 80093e2:	4602      	mov	r2, r0
 80093e4:	4631      	mov	r1, r6
 80093e6:	4658      	mov	r0, fp
 80093e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80093ea:	f000 fa0d 	bl	8009808 <_Bfree>
 80093ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093f2:	9e07      	ldr	r6, [sp, #28]
 80093f4:	ea43 0102 	orr.w	r1, r3, r2
 80093f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093fa:	4319      	orrs	r1, r3
 80093fc:	d110      	bne.n	8009420 <_dtoa_r+0xa20>
 80093fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009402:	d029      	beq.n	8009458 <_dtoa_r+0xa58>
 8009404:	9b08      	ldr	r3, [sp, #32]
 8009406:	2b00      	cmp	r3, #0
 8009408:	dd02      	ble.n	8009410 <_dtoa_r+0xa10>
 800940a:	9b02      	ldr	r3, [sp, #8]
 800940c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009410:	9b00      	ldr	r3, [sp, #0]
 8009412:	f883 8000 	strb.w	r8, [r3]
 8009416:	e63f      	b.n	8009098 <_dtoa_r+0x698>
 8009418:	4628      	mov	r0, r5
 800941a:	e7bb      	b.n	8009394 <_dtoa_r+0x994>
 800941c:	2201      	movs	r2, #1
 800941e:	e7e1      	b.n	80093e4 <_dtoa_r+0x9e4>
 8009420:	9b08      	ldr	r3, [sp, #32]
 8009422:	2b00      	cmp	r3, #0
 8009424:	db04      	blt.n	8009430 <_dtoa_r+0xa30>
 8009426:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009428:	430b      	orrs	r3, r1
 800942a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800942c:	430b      	orrs	r3, r1
 800942e:	d120      	bne.n	8009472 <_dtoa_r+0xa72>
 8009430:	2a00      	cmp	r2, #0
 8009432:	dded      	ble.n	8009410 <_dtoa_r+0xa10>
 8009434:	4649      	mov	r1, r9
 8009436:	2201      	movs	r2, #1
 8009438:	4658      	mov	r0, fp
 800943a:	f000 fbff 	bl	8009c3c <__lshift>
 800943e:	4621      	mov	r1, r4
 8009440:	4681      	mov	r9, r0
 8009442:	f000 fc67 	bl	8009d14 <__mcmp>
 8009446:	2800      	cmp	r0, #0
 8009448:	dc03      	bgt.n	8009452 <_dtoa_r+0xa52>
 800944a:	d1e1      	bne.n	8009410 <_dtoa_r+0xa10>
 800944c:	f018 0f01 	tst.w	r8, #1
 8009450:	d0de      	beq.n	8009410 <_dtoa_r+0xa10>
 8009452:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009456:	d1d8      	bne.n	800940a <_dtoa_r+0xa0a>
 8009458:	2339      	movs	r3, #57	@ 0x39
 800945a:	9a00      	ldr	r2, [sp, #0]
 800945c:	7013      	strb	r3, [r2, #0]
 800945e:	4633      	mov	r3, r6
 8009460:	461e      	mov	r6, r3
 8009462:	3b01      	subs	r3, #1
 8009464:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009468:	2a39      	cmp	r2, #57	@ 0x39
 800946a:	d052      	beq.n	8009512 <_dtoa_r+0xb12>
 800946c:	3201      	adds	r2, #1
 800946e:	701a      	strb	r2, [r3, #0]
 8009470:	e612      	b.n	8009098 <_dtoa_r+0x698>
 8009472:	2a00      	cmp	r2, #0
 8009474:	dd07      	ble.n	8009486 <_dtoa_r+0xa86>
 8009476:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800947a:	d0ed      	beq.n	8009458 <_dtoa_r+0xa58>
 800947c:	f108 0301 	add.w	r3, r8, #1
 8009480:	9a00      	ldr	r2, [sp, #0]
 8009482:	7013      	strb	r3, [r2, #0]
 8009484:	e608      	b.n	8009098 <_dtoa_r+0x698>
 8009486:	9b07      	ldr	r3, [sp, #28]
 8009488:	9a07      	ldr	r2, [sp, #28]
 800948a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800948e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009490:	4293      	cmp	r3, r2
 8009492:	d028      	beq.n	80094e6 <_dtoa_r+0xae6>
 8009494:	4649      	mov	r1, r9
 8009496:	2300      	movs	r3, #0
 8009498:	220a      	movs	r2, #10
 800949a:	4658      	mov	r0, fp
 800949c:	f000 f9d6 	bl	800984c <__multadd>
 80094a0:	42af      	cmp	r7, r5
 80094a2:	4681      	mov	r9, r0
 80094a4:	f04f 0300 	mov.w	r3, #0
 80094a8:	f04f 020a 	mov.w	r2, #10
 80094ac:	4639      	mov	r1, r7
 80094ae:	4658      	mov	r0, fp
 80094b0:	d107      	bne.n	80094c2 <_dtoa_r+0xac2>
 80094b2:	f000 f9cb 	bl	800984c <__multadd>
 80094b6:	4607      	mov	r7, r0
 80094b8:	4605      	mov	r5, r0
 80094ba:	9b07      	ldr	r3, [sp, #28]
 80094bc:	3301      	adds	r3, #1
 80094be:	9307      	str	r3, [sp, #28]
 80094c0:	e774      	b.n	80093ac <_dtoa_r+0x9ac>
 80094c2:	f000 f9c3 	bl	800984c <__multadd>
 80094c6:	4629      	mov	r1, r5
 80094c8:	4607      	mov	r7, r0
 80094ca:	2300      	movs	r3, #0
 80094cc:	220a      	movs	r2, #10
 80094ce:	4658      	mov	r0, fp
 80094d0:	f000 f9bc 	bl	800984c <__multadd>
 80094d4:	4605      	mov	r5, r0
 80094d6:	e7f0      	b.n	80094ba <_dtoa_r+0xaba>
 80094d8:	9b00      	ldr	r3, [sp, #0]
 80094da:	2700      	movs	r7, #0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	bfcc      	ite	gt
 80094e0:	461e      	movgt	r6, r3
 80094e2:	2601      	movle	r6, #1
 80094e4:	4456      	add	r6, sl
 80094e6:	4649      	mov	r1, r9
 80094e8:	2201      	movs	r2, #1
 80094ea:	4658      	mov	r0, fp
 80094ec:	f000 fba6 	bl	8009c3c <__lshift>
 80094f0:	4621      	mov	r1, r4
 80094f2:	4681      	mov	r9, r0
 80094f4:	f000 fc0e 	bl	8009d14 <__mcmp>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	dcb0      	bgt.n	800945e <_dtoa_r+0xa5e>
 80094fc:	d102      	bne.n	8009504 <_dtoa_r+0xb04>
 80094fe:	f018 0f01 	tst.w	r8, #1
 8009502:	d1ac      	bne.n	800945e <_dtoa_r+0xa5e>
 8009504:	4633      	mov	r3, r6
 8009506:	461e      	mov	r6, r3
 8009508:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800950c:	2a30      	cmp	r2, #48	@ 0x30
 800950e:	d0fa      	beq.n	8009506 <_dtoa_r+0xb06>
 8009510:	e5c2      	b.n	8009098 <_dtoa_r+0x698>
 8009512:	459a      	cmp	sl, r3
 8009514:	d1a4      	bne.n	8009460 <_dtoa_r+0xa60>
 8009516:	9b04      	ldr	r3, [sp, #16]
 8009518:	3301      	adds	r3, #1
 800951a:	9304      	str	r3, [sp, #16]
 800951c:	2331      	movs	r3, #49	@ 0x31
 800951e:	f88a 3000 	strb.w	r3, [sl]
 8009522:	e5b9      	b.n	8009098 <_dtoa_r+0x698>
 8009524:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009526:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009584 <_dtoa_r+0xb84>
 800952a:	b11b      	cbz	r3, 8009534 <_dtoa_r+0xb34>
 800952c:	f10a 0308 	add.w	r3, sl, #8
 8009530:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009532:	6013      	str	r3, [r2, #0]
 8009534:	4650      	mov	r0, sl
 8009536:	b019      	add	sp, #100	@ 0x64
 8009538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800953c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800953e:	2b01      	cmp	r3, #1
 8009540:	f77f ae37 	ble.w	80091b2 <_dtoa_r+0x7b2>
 8009544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009546:	930a      	str	r3, [sp, #40]	@ 0x28
 8009548:	2001      	movs	r0, #1
 800954a:	e655      	b.n	80091f8 <_dtoa_r+0x7f8>
 800954c:	9b00      	ldr	r3, [sp, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	f77f aed6 	ble.w	8009300 <_dtoa_r+0x900>
 8009554:	4656      	mov	r6, sl
 8009556:	4621      	mov	r1, r4
 8009558:	4648      	mov	r0, r9
 800955a:	f7ff f9c1 	bl	80088e0 <quorem>
 800955e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009562:	9b00      	ldr	r3, [sp, #0]
 8009564:	f806 8b01 	strb.w	r8, [r6], #1
 8009568:	eba6 020a 	sub.w	r2, r6, sl
 800956c:	4293      	cmp	r3, r2
 800956e:	ddb3      	ble.n	80094d8 <_dtoa_r+0xad8>
 8009570:	4649      	mov	r1, r9
 8009572:	2300      	movs	r3, #0
 8009574:	220a      	movs	r2, #10
 8009576:	4658      	mov	r0, fp
 8009578:	f000 f968 	bl	800984c <__multadd>
 800957c:	4681      	mov	r9, r0
 800957e:	e7ea      	b.n	8009556 <_dtoa_r+0xb56>
 8009580:	0800bf9d 	.word	0x0800bf9d
 8009584:	0800bf21 	.word	0x0800bf21

08009588 <_free_r>:
 8009588:	b538      	push	{r3, r4, r5, lr}
 800958a:	4605      	mov	r5, r0
 800958c:	2900      	cmp	r1, #0
 800958e:	d041      	beq.n	8009614 <_free_r+0x8c>
 8009590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009594:	1f0c      	subs	r4, r1, #4
 8009596:	2b00      	cmp	r3, #0
 8009598:	bfb8      	it	lt
 800959a:	18e4      	addlt	r4, r4, r3
 800959c:	f000 f8e8 	bl	8009770 <__malloc_lock>
 80095a0:	4a1d      	ldr	r2, [pc, #116]	@ (8009618 <_free_r+0x90>)
 80095a2:	6813      	ldr	r3, [r2, #0]
 80095a4:	b933      	cbnz	r3, 80095b4 <_free_r+0x2c>
 80095a6:	6063      	str	r3, [r4, #4]
 80095a8:	6014      	str	r4, [r2, #0]
 80095aa:	4628      	mov	r0, r5
 80095ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095b0:	f000 b8e4 	b.w	800977c <__malloc_unlock>
 80095b4:	42a3      	cmp	r3, r4
 80095b6:	d908      	bls.n	80095ca <_free_r+0x42>
 80095b8:	6820      	ldr	r0, [r4, #0]
 80095ba:	1821      	adds	r1, r4, r0
 80095bc:	428b      	cmp	r3, r1
 80095be:	bf01      	itttt	eq
 80095c0:	6819      	ldreq	r1, [r3, #0]
 80095c2:	685b      	ldreq	r3, [r3, #4]
 80095c4:	1809      	addeq	r1, r1, r0
 80095c6:	6021      	streq	r1, [r4, #0]
 80095c8:	e7ed      	b.n	80095a6 <_free_r+0x1e>
 80095ca:	461a      	mov	r2, r3
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	b10b      	cbz	r3, 80095d4 <_free_r+0x4c>
 80095d0:	42a3      	cmp	r3, r4
 80095d2:	d9fa      	bls.n	80095ca <_free_r+0x42>
 80095d4:	6811      	ldr	r1, [r2, #0]
 80095d6:	1850      	adds	r0, r2, r1
 80095d8:	42a0      	cmp	r0, r4
 80095da:	d10b      	bne.n	80095f4 <_free_r+0x6c>
 80095dc:	6820      	ldr	r0, [r4, #0]
 80095de:	4401      	add	r1, r0
 80095e0:	1850      	adds	r0, r2, r1
 80095e2:	6011      	str	r1, [r2, #0]
 80095e4:	4283      	cmp	r3, r0
 80095e6:	d1e0      	bne.n	80095aa <_free_r+0x22>
 80095e8:	6818      	ldr	r0, [r3, #0]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	4408      	add	r0, r1
 80095ee:	6053      	str	r3, [r2, #4]
 80095f0:	6010      	str	r0, [r2, #0]
 80095f2:	e7da      	b.n	80095aa <_free_r+0x22>
 80095f4:	d902      	bls.n	80095fc <_free_r+0x74>
 80095f6:	230c      	movs	r3, #12
 80095f8:	602b      	str	r3, [r5, #0]
 80095fa:	e7d6      	b.n	80095aa <_free_r+0x22>
 80095fc:	6820      	ldr	r0, [r4, #0]
 80095fe:	1821      	adds	r1, r4, r0
 8009600:	428b      	cmp	r3, r1
 8009602:	bf02      	ittt	eq
 8009604:	6819      	ldreq	r1, [r3, #0]
 8009606:	685b      	ldreq	r3, [r3, #4]
 8009608:	1809      	addeq	r1, r1, r0
 800960a:	6063      	str	r3, [r4, #4]
 800960c:	bf08      	it	eq
 800960e:	6021      	streq	r1, [r4, #0]
 8009610:	6054      	str	r4, [r2, #4]
 8009612:	e7ca      	b.n	80095aa <_free_r+0x22>
 8009614:	bd38      	pop	{r3, r4, r5, pc}
 8009616:	bf00      	nop
 8009618:	20000654 	.word	0x20000654

0800961c <malloc>:
 800961c:	4b02      	ldr	r3, [pc, #8]	@ (8009628 <malloc+0xc>)
 800961e:	4601      	mov	r1, r0
 8009620:	6818      	ldr	r0, [r3, #0]
 8009622:	f000 b825 	b.w	8009670 <_malloc_r>
 8009626:	bf00      	nop
 8009628:	20000018 	.word	0x20000018

0800962c <sbrk_aligned>:
 800962c:	b570      	push	{r4, r5, r6, lr}
 800962e:	4e0f      	ldr	r6, [pc, #60]	@ (800966c <sbrk_aligned+0x40>)
 8009630:	460c      	mov	r4, r1
 8009632:	4605      	mov	r5, r0
 8009634:	6831      	ldr	r1, [r6, #0]
 8009636:	b911      	cbnz	r1, 800963e <sbrk_aligned+0x12>
 8009638:	f001 fe9c 	bl	800b374 <_sbrk_r>
 800963c:	6030      	str	r0, [r6, #0]
 800963e:	4621      	mov	r1, r4
 8009640:	4628      	mov	r0, r5
 8009642:	f001 fe97 	bl	800b374 <_sbrk_r>
 8009646:	1c43      	adds	r3, r0, #1
 8009648:	d103      	bne.n	8009652 <sbrk_aligned+0x26>
 800964a:	f04f 34ff 	mov.w	r4, #4294967295
 800964e:	4620      	mov	r0, r4
 8009650:	bd70      	pop	{r4, r5, r6, pc}
 8009652:	1cc4      	adds	r4, r0, #3
 8009654:	f024 0403 	bic.w	r4, r4, #3
 8009658:	42a0      	cmp	r0, r4
 800965a:	d0f8      	beq.n	800964e <sbrk_aligned+0x22>
 800965c:	1a21      	subs	r1, r4, r0
 800965e:	4628      	mov	r0, r5
 8009660:	f001 fe88 	bl	800b374 <_sbrk_r>
 8009664:	3001      	adds	r0, #1
 8009666:	d1f2      	bne.n	800964e <sbrk_aligned+0x22>
 8009668:	e7ef      	b.n	800964a <sbrk_aligned+0x1e>
 800966a:	bf00      	nop
 800966c:	20000650 	.word	0x20000650

08009670 <_malloc_r>:
 8009670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009674:	1ccd      	adds	r5, r1, #3
 8009676:	4606      	mov	r6, r0
 8009678:	f025 0503 	bic.w	r5, r5, #3
 800967c:	3508      	adds	r5, #8
 800967e:	2d0c      	cmp	r5, #12
 8009680:	bf38      	it	cc
 8009682:	250c      	movcc	r5, #12
 8009684:	2d00      	cmp	r5, #0
 8009686:	db01      	blt.n	800968c <_malloc_r+0x1c>
 8009688:	42a9      	cmp	r1, r5
 800968a:	d904      	bls.n	8009696 <_malloc_r+0x26>
 800968c:	230c      	movs	r3, #12
 800968e:	6033      	str	r3, [r6, #0]
 8009690:	2000      	movs	r0, #0
 8009692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009696:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800976c <_malloc_r+0xfc>
 800969a:	f000 f869 	bl	8009770 <__malloc_lock>
 800969e:	f8d8 3000 	ldr.w	r3, [r8]
 80096a2:	461c      	mov	r4, r3
 80096a4:	bb44      	cbnz	r4, 80096f8 <_malloc_r+0x88>
 80096a6:	4629      	mov	r1, r5
 80096a8:	4630      	mov	r0, r6
 80096aa:	f7ff ffbf 	bl	800962c <sbrk_aligned>
 80096ae:	1c43      	adds	r3, r0, #1
 80096b0:	4604      	mov	r4, r0
 80096b2:	d158      	bne.n	8009766 <_malloc_r+0xf6>
 80096b4:	f8d8 4000 	ldr.w	r4, [r8]
 80096b8:	4627      	mov	r7, r4
 80096ba:	2f00      	cmp	r7, #0
 80096bc:	d143      	bne.n	8009746 <_malloc_r+0xd6>
 80096be:	2c00      	cmp	r4, #0
 80096c0:	d04b      	beq.n	800975a <_malloc_r+0xea>
 80096c2:	6823      	ldr	r3, [r4, #0]
 80096c4:	4639      	mov	r1, r7
 80096c6:	4630      	mov	r0, r6
 80096c8:	eb04 0903 	add.w	r9, r4, r3
 80096cc:	f001 fe52 	bl	800b374 <_sbrk_r>
 80096d0:	4581      	cmp	r9, r0
 80096d2:	d142      	bne.n	800975a <_malloc_r+0xea>
 80096d4:	6821      	ldr	r1, [r4, #0]
 80096d6:	4630      	mov	r0, r6
 80096d8:	1a6d      	subs	r5, r5, r1
 80096da:	4629      	mov	r1, r5
 80096dc:	f7ff ffa6 	bl	800962c <sbrk_aligned>
 80096e0:	3001      	adds	r0, #1
 80096e2:	d03a      	beq.n	800975a <_malloc_r+0xea>
 80096e4:	6823      	ldr	r3, [r4, #0]
 80096e6:	442b      	add	r3, r5
 80096e8:	6023      	str	r3, [r4, #0]
 80096ea:	f8d8 3000 	ldr.w	r3, [r8]
 80096ee:	685a      	ldr	r2, [r3, #4]
 80096f0:	bb62      	cbnz	r2, 800974c <_malloc_r+0xdc>
 80096f2:	f8c8 7000 	str.w	r7, [r8]
 80096f6:	e00f      	b.n	8009718 <_malloc_r+0xa8>
 80096f8:	6822      	ldr	r2, [r4, #0]
 80096fa:	1b52      	subs	r2, r2, r5
 80096fc:	d420      	bmi.n	8009740 <_malloc_r+0xd0>
 80096fe:	2a0b      	cmp	r2, #11
 8009700:	d917      	bls.n	8009732 <_malloc_r+0xc2>
 8009702:	1961      	adds	r1, r4, r5
 8009704:	42a3      	cmp	r3, r4
 8009706:	6025      	str	r5, [r4, #0]
 8009708:	bf18      	it	ne
 800970a:	6059      	strne	r1, [r3, #4]
 800970c:	6863      	ldr	r3, [r4, #4]
 800970e:	bf08      	it	eq
 8009710:	f8c8 1000 	streq.w	r1, [r8]
 8009714:	5162      	str	r2, [r4, r5]
 8009716:	604b      	str	r3, [r1, #4]
 8009718:	4630      	mov	r0, r6
 800971a:	f000 f82f 	bl	800977c <__malloc_unlock>
 800971e:	f104 000b 	add.w	r0, r4, #11
 8009722:	1d23      	adds	r3, r4, #4
 8009724:	f020 0007 	bic.w	r0, r0, #7
 8009728:	1ac2      	subs	r2, r0, r3
 800972a:	bf1c      	itt	ne
 800972c:	1a1b      	subne	r3, r3, r0
 800972e:	50a3      	strne	r3, [r4, r2]
 8009730:	e7af      	b.n	8009692 <_malloc_r+0x22>
 8009732:	6862      	ldr	r2, [r4, #4]
 8009734:	42a3      	cmp	r3, r4
 8009736:	bf0c      	ite	eq
 8009738:	f8c8 2000 	streq.w	r2, [r8]
 800973c:	605a      	strne	r2, [r3, #4]
 800973e:	e7eb      	b.n	8009718 <_malloc_r+0xa8>
 8009740:	4623      	mov	r3, r4
 8009742:	6864      	ldr	r4, [r4, #4]
 8009744:	e7ae      	b.n	80096a4 <_malloc_r+0x34>
 8009746:	463c      	mov	r4, r7
 8009748:	687f      	ldr	r7, [r7, #4]
 800974a:	e7b6      	b.n	80096ba <_malloc_r+0x4a>
 800974c:	461a      	mov	r2, r3
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	42a3      	cmp	r3, r4
 8009752:	d1fb      	bne.n	800974c <_malloc_r+0xdc>
 8009754:	2300      	movs	r3, #0
 8009756:	6053      	str	r3, [r2, #4]
 8009758:	e7de      	b.n	8009718 <_malloc_r+0xa8>
 800975a:	230c      	movs	r3, #12
 800975c:	4630      	mov	r0, r6
 800975e:	6033      	str	r3, [r6, #0]
 8009760:	f000 f80c 	bl	800977c <__malloc_unlock>
 8009764:	e794      	b.n	8009690 <_malloc_r+0x20>
 8009766:	6005      	str	r5, [r0, #0]
 8009768:	e7d6      	b.n	8009718 <_malloc_r+0xa8>
 800976a:	bf00      	nop
 800976c:	20000654 	.word	0x20000654

08009770 <__malloc_lock>:
 8009770:	4801      	ldr	r0, [pc, #4]	@ (8009778 <__malloc_lock+0x8>)
 8009772:	f7ff b89e 	b.w	80088b2 <__retarget_lock_acquire_recursive>
 8009776:	bf00      	nop
 8009778:	2000064c 	.word	0x2000064c

0800977c <__malloc_unlock>:
 800977c:	4801      	ldr	r0, [pc, #4]	@ (8009784 <__malloc_unlock+0x8>)
 800977e:	f7ff b899 	b.w	80088b4 <__retarget_lock_release_recursive>
 8009782:	bf00      	nop
 8009784:	2000064c 	.word	0x2000064c

08009788 <_Balloc>:
 8009788:	b570      	push	{r4, r5, r6, lr}
 800978a:	69c6      	ldr	r6, [r0, #28]
 800978c:	4604      	mov	r4, r0
 800978e:	460d      	mov	r5, r1
 8009790:	b976      	cbnz	r6, 80097b0 <_Balloc+0x28>
 8009792:	2010      	movs	r0, #16
 8009794:	f7ff ff42 	bl	800961c <malloc>
 8009798:	4602      	mov	r2, r0
 800979a:	61e0      	str	r0, [r4, #28]
 800979c:	b920      	cbnz	r0, 80097a8 <_Balloc+0x20>
 800979e:	4b18      	ldr	r3, [pc, #96]	@ (8009800 <_Balloc+0x78>)
 80097a0:	216b      	movs	r1, #107	@ 0x6b
 80097a2:	4818      	ldr	r0, [pc, #96]	@ (8009804 <_Balloc+0x7c>)
 80097a4:	f001 fe0c 	bl	800b3c0 <__assert_func>
 80097a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097ac:	6006      	str	r6, [r0, #0]
 80097ae:	60c6      	str	r6, [r0, #12]
 80097b0:	69e6      	ldr	r6, [r4, #28]
 80097b2:	68f3      	ldr	r3, [r6, #12]
 80097b4:	b183      	cbz	r3, 80097d8 <_Balloc+0x50>
 80097b6:	69e3      	ldr	r3, [r4, #28]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80097be:	b9b8      	cbnz	r0, 80097f0 <_Balloc+0x68>
 80097c0:	2101      	movs	r1, #1
 80097c2:	4620      	mov	r0, r4
 80097c4:	fa01 f605 	lsl.w	r6, r1, r5
 80097c8:	1d72      	adds	r2, r6, #5
 80097ca:	0092      	lsls	r2, r2, #2
 80097cc:	f001 fe16 	bl	800b3fc <_calloc_r>
 80097d0:	b160      	cbz	r0, 80097ec <_Balloc+0x64>
 80097d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80097d6:	e00e      	b.n	80097f6 <_Balloc+0x6e>
 80097d8:	2221      	movs	r2, #33	@ 0x21
 80097da:	2104      	movs	r1, #4
 80097dc:	4620      	mov	r0, r4
 80097de:	f001 fe0d 	bl	800b3fc <_calloc_r>
 80097e2:	69e3      	ldr	r3, [r4, #28]
 80097e4:	60f0      	str	r0, [r6, #12]
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1e4      	bne.n	80097b6 <_Balloc+0x2e>
 80097ec:	2000      	movs	r0, #0
 80097ee:	bd70      	pop	{r4, r5, r6, pc}
 80097f0:	6802      	ldr	r2, [r0, #0]
 80097f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80097f6:	2300      	movs	r3, #0
 80097f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80097fc:	e7f7      	b.n	80097ee <_Balloc+0x66>
 80097fe:	bf00      	nop
 8009800:	0800bf2e 	.word	0x0800bf2e
 8009804:	0800bfae 	.word	0x0800bfae

08009808 <_Bfree>:
 8009808:	b570      	push	{r4, r5, r6, lr}
 800980a:	69c6      	ldr	r6, [r0, #28]
 800980c:	4605      	mov	r5, r0
 800980e:	460c      	mov	r4, r1
 8009810:	b976      	cbnz	r6, 8009830 <_Bfree+0x28>
 8009812:	2010      	movs	r0, #16
 8009814:	f7ff ff02 	bl	800961c <malloc>
 8009818:	4602      	mov	r2, r0
 800981a:	61e8      	str	r0, [r5, #28]
 800981c:	b920      	cbnz	r0, 8009828 <_Bfree+0x20>
 800981e:	4b09      	ldr	r3, [pc, #36]	@ (8009844 <_Bfree+0x3c>)
 8009820:	218f      	movs	r1, #143	@ 0x8f
 8009822:	4809      	ldr	r0, [pc, #36]	@ (8009848 <_Bfree+0x40>)
 8009824:	f001 fdcc 	bl	800b3c0 <__assert_func>
 8009828:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800982c:	6006      	str	r6, [r0, #0]
 800982e:	60c6      	str	r6, [r0, #12]
 8009830:	b13c      	cbz	r4, 8009842 <_Bfree+0x3a>
 8009832:	69eb      	ldr	r3, [r5, #28]
 8009834:	6862      	ldr	r2, [r4, #4]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800983c:	6021      	str	r1, [r4, #0]
 800983e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009842:	bd70      	pop	{r4, r5, r6, pc}
 8009844:	0800bf2e 	.word	0x0800bf2e
 8009848:	0800bfae 	.word	0x0800bfae

0800984c <__multadd>:
 800984c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009850:	f101 0c14 	add.w	ip, r1, #20
 8009854:	4607      	mov	r7, r0
 8009856:	460c      	mov	r4, r1
 8009858:	461e      	mov	r6, r3
 800985a:	690d      	ldr	r5, [r1, #16]
 800985c:	2000      	movs	r0, #0
 800985e:	f8dc 3000 	ldr.w	r3, [ip]
 8009862:	3001      	adds	r0, #1
 8009864:	b299      	uxth	r1, r3
 8009866:	4285      	cmp	r5, r0
 8009868:	fb02 6101 	mla	r1, r2, r1, r6
 800986c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009870:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8009874:	b289      	uxth	r1, r1
 8009876:	fb02 3306 	mla	r3, r2, r6, r3
 800987a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800987e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009882:	f84c 1b04 	str.w	r1, [ip], #4
 8009886:	dcea      	bgt.n	800985e <__multadd+0x12>
 8009888:	b30e      	cbz	r6, 80098ce <__multadd+0x82>
 800988a:	68a3      	ldr	r3, [r4, #8]
 800988c:	42ab      	cmp	r3, r5
 800988e:	dc19      	bgt.n	80098c4 <__multadd+0x78>
 8009890:	6861      	ldr	r1, [r4, #4]
 8009892:	4638      	mov	r0, r7
 8009894:	3101      	adds	r1, #1
 8009896:	f7ff ff77 	bl	8009788 <_Balloc>
 800989a:	4680      	mov	r8, r0
 800989c:	b928      	cbnz	r0, 80098aa <__multadd+0x5e>
 800989e:	4602      	mov	r2, r0
 80098a0:	4b0c      	ldr	r3, [pc, #48]	@ (80098d4 <__multadd+0x88>)
 80098a2:	21ba      	movs	r1, #186	@ 0xba
 80098a4:	480c      	ldr	r0, [pc, #48]	@ (80098d8 <__multadd+0x8c>)
 80098a6:	f001 fd8b 	bl	800b3c0 <__assert_func>
 80098aa:	6922      	ldr	r2, [r4, #16]
 80098ac:	f104 010c 	add.w	r1, r4, #12
 80098b0:	300c      	adds	r0, #12
 80098b2:	3202      	adds	r2, #2
 80098b4:	0092      	lsls	r2, r2, #2
 80098b6:	f001 fd6d 	bl	800b394 <memcpy>
 80098ba:	4621      	mov	r1, r4
 80098bc:	4644      	mov	r4, r8
 80098be:	4638      	mov	r0, r7
 80098c0:	f7ff ffa2 	bl	8009808 <_Bfree>
 80098c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80098c8:	3501      	adds	r5, #1
 80098ca:	615e      	str	r6, [r3, #20]
 80098cc:	6125      	str	r5, [r4, #16]
 80098ce:	4620      	mov	r0, r4
 80098d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098d4:	0800bf9d 	.word	0x0800bf9d
 80098d8:	0800bfae 	.word	0x0800bfae

080098dc <__s2b>:
 80098dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098e0:	4615      	mov	r5, r2
 80098e2:	461f      	mov	r7, r3
 80098e4:	2209      	movs	r2, #9
 80098e6:	3308      	adds	r3, #8
 80098e8:	460c      	mov	r4, r1
 80098ea:	4606      	mov	r6, r0
 80098ec:	2100      	movs	r1, #0
 80098ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80098f2:	2201      	movs	r2, #1
 80098f4:	429a      	cmp	r2, r3
 80098f6:	db09      	blt.n	800990c <__s2b+0x30>
 80098f8:	4630      	mov	r0, r6
 80098fa:	f7ff ff45 	bl	8009788 <_Balloc>
 80098fe:	b940      	cbnz	r0, 8009912 <__s2b+0x36>
 8009900:	4602      	mov	r2, r0
 8009902:	4b19      	ldr	r3, [pc, #100]	@ (8009968 <__s2b+0x8c>)
 8009904:	21d3      	movs	r1, #211	@ 0xd3
 8009906:	4819      	ldr	r0, [pc, #100]	@ (800996c <__s2b+0x90>)
 8009908:	f001 fd5a 	bl	800b3c0 <__assert_func>
 800990c:	0052      	lsls	r2, r2, #1
 800990e:	3101      	adds	r1, #1
 8009910:	e7f0      	b.n	80098f4 <__s2b+0x18>
 8009912:	9b08      	ldr	r3, [sp, #32]
 8009914:	2d09      	cmp	r5, #9
 8009916:	6143      	str	r3, [r0, #20]
 8009918:	f04f 0301 	mov.w	r3, #1
 800991c:	6103      	str	r3, [r0, #16]
 800991e:	dd16      	ble.n	800994e <__s2b+0x72>
 8009920:	f104 0909 	add.w	r9, r4, #9
 8009924:	442c      	add	r4, r5
 8009926:	46c8      	mov	r8, r9
 8009928:	f818 3b01 	ldrb.w	r3, [r8], #1
 800992c:	4601      	mov	r1, r0
 800992e:	220a      	movs	r2, #10
 8009930:	4630      	mov	r0, r6
 8009932:	3b30      	subs	r3, #48	@ 0x30
 8009934:	f7ff ff8a 	bl	800984c <__multadd>
 8009938:	45a0      	cmp	r8, r4
 800993a:	d1f5      	bne.n	8009928 <__s2b+0x4c>
 800993c:	f1a5 0408 	sub.w	r4, r5, #8
 8009940:	444c      	add	r4, r9
 8009942:	1b2d      	subs	r5, r5, r4
 8009944:	1963      	adds	r3, r4, r5
 8009946:	42bb      	cmp	r3, r7
 8009948:	db04      	blt.n	8009954 <__s2b+0x78>
 800994a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800994e:	340a      	adds	r4, #10
 8009950:	2509      	movs	r5, #9
 8009952:	e7f6      	b.n	8009942 <__s2b+0x66>
 8009954:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009958:	4601      	mov	r1, r0
 800995a:	220a      	movs	r2, #10
 800995c:	4630      	mov	r0, r6
 800995e:	3b30      	subs	r3, #48	@ 0x30
 8009960:	f7ff ff74 	bl	800984c <__multadd>
 8009964:	e7ee      	b.n	8009944 <__s2b+0x68>
 8009966:	bf00      	nop
 8009968:	0800bf9d 	.word	0x0800bf9d
 800996c:	0800bfae 	.word	0x0800bfae

08009970 <__hi0bits>:
 8009970:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009974:	4603      	mov	r3, r0
 8009976:	bf36      	itet	cc
 8009978:	0403      	lslcc	r3, r0, #16
 800997a:	2000      	movcs	r0, #0
 800997c:	2010      	movcc	r0, #16
 800997e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009982:	bf3c      	itt	cc
 8009984:	021b      	lslcc	r3, r3, #8
 8009986:	3008      	addcc	r0, #8
 8009988:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800998c:	bf3c      	itt	cc
 800998e:	011b      	lslcc	r3, r3, #4
 8009990:	3004      	addcc	r0, #4
 8009992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009996:	bf3c      	itt	cc
 8009998:	009b      	lslcc	r3, r3, #2
 800999a:	3002      	addcc	r0, #2
 800999c:	2b00      	cmp	r3, #0
 800999e:	db05      	blt.n	80099ac <__hi0bits+0x3c>
 80099a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80099a4:	f100 0001 	add.w	r0, r0, #1
 80099a8:	bf08      	it	eq
 80099aa:	2020      	moveq	r0, #32
 80099ac:	4770      	bx	lr

080099ae <__lo0bits>:
 80099ae:	6803      	ldr	r3, [r0, #0]
 80099b0:	4602      	mov	r2, r0
 80099b2:	f013 0007 	ands.w	r0, r3, #7
 80099b6:	d00b      	beq.n	80099d0 <__lo0bits+0x22>
 80099b8:	07d9      	lsls	r1, r3, #31
 80099ba:	d421      	bmi.n	8009a00 <__lo0bits+0x52>
 80099bc:	0798      	lsls	r0, r3, #30
 80099be:	bf47      	ittee	mi
 80099c0:	085b      	lsrmi	r3, r3, #1
 80099c2:	2001      	movmi	r0, #1
 80099c4:	089b      	lsrpl	r3, r3, #2
 80099c6:	2002      	movpl	r0, #2
 80099c8:	bf4c      	ite	mi
 80099ca:	6013      	strmi	r3, [r2, #0]
 80099cc:	6013      	strpl	r3, [r2, #0]
 80099ce:	4770      	bx	lr
 80099d0:	b299      	uxth	r1, r3
 80099d2:	b909      	cbnz	r1, 80099d8 <__lo0bits+0x2a>
 80099d4:	0c1b      	lsrs	r3, r3, #16
 80099d6:	2010      	movs	r0, #16
 80099d8:	b2d9      	uxtb	r1, r3
 80099da:	b909      	cbnz	r1, 80099e0 <__lo0bits+0x32>
 80099dc:	3008      	adds	r0, #8
 80099de:	0a1b      	lsrs	r3, r3, #8
 80099e0:	0719      	lsls	r1, r3, #28
 80099e2:	bf04      	itt	eq
 80099e4:	091b      	lsreq	r3, r3, #4
 80099e6:	3004      	addeq	r0, #4
 80099e8:	0799      	lsls	r1, r3, #30
 80099ea:	bf04      	itt	eq
 80099ec:	089b      	lsreq	r3, r3, #2
 80099ee:	3002      	addeq	r0, #2
 80099f0:	07d9      	lsls	r1, r3, #31
 80099f2:	d403      	bmi.n	80099fc <__lo0bits+0x4e>
 80099f4:	085b      	lsrs	r3, r3, #1
 80099f6:	f100 0001 	add.w	r0, r0, #1
 80099fa:	d003      	beq.n	8009a04 <__lo0bits+0x56>
 80099fc:	6013      	str	r3, [r2, #0]
 80099fe:	4770      	bx	lr
 8009a00:	2000      	movs	r0, #0
 8009a02:	4770      	bx	lr
 8009a04:	2020      	movs	r0, #32
 8009a06:	4770      	bx	lr

08009a08 <__i2b>:
 8009a08:	b510      	push	{r4, lr}
 8009a0a:	460c      	mov	r4, r1
 8009a0c:	2101      	movs	r1, #1
 8009a0e:	f7ff febb 	bl	8009788 <_Balloc>
 8009a12:	4602      	mov	r2, r0
 8009a14:	b928      	cbnz	r0, 8009a22 <__i2b+0x1a>
 8009a16:	4b05      	ldr	r3, [pc, #20]	@ (8009a2c <__i2b+0x24>)
 8009a18:	f240 1145 	movw	r1, #325	@ 0x145
 8009a1c:	4804      	ldr	r0, [pc, #16]	@ (8009a30 <__i2b+0x28>)
 8009a1e:	f001 fccf 	bl	800b3c0 <__assert_func>
 8009a22:	2301      	movs	r3, #1
 8009a24:	6144      	str	r4, [r0, #20]
 8009a26:	6103      	str	r3, [r0, #16]
 8009a28:	bd10      	pop	{r4, pc}
 8009a2a:	bf00      	nop
 8009a2c:	0800bf9d 	.word	0x0800bf9d
 8009a30:	0800bfae 	.word	0x0800bfae

08009a34 <__multiply>:
 8009a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a38:	4614      	mov	r4, r2
 8009a3a:	690a      	ldr	r2, [r1, #16]
 8009a3c:	460f      	mov	r7, r1
 8009a3e:	b085      	sub	sp, #20
 8009a40:	6923      	ldr	r3, [r4, #16]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	bfa2      	ittt	ge
 8009a46:	4623      	movge	r3, r4
 8009a48:	460c      	movge	r4, r1
 8009a4a:	461f      	movge	r7, r3
 8009a4c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009a50:	68a3      	ldr	r3, [r4, #8]
 8009a52:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009a56:	6861      	ldr	r1, [r4, #4]
 8009a58:	eb0a 0609 	add.w	r6, sl, r9
 8009a5c:	42b3      	cmp	r3, r6
 8009a5e:	bfb8      	it	lt
 8009a60:	3101      	addlt	r1, #1
 8009a62:	f7ff fe91 	bl	8009788 <_Balloc>
 8009a66:	b930      	cbnz	r0, 8009a76 <__multiply+0x42>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	4b45      	ldr	r3, [pc, #276]	@ (8009b80 <__multiply+0x14c>)
 8009a6c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009a70:	4844      	ldr	r0, [pc, #272]	@ (8009b84 <__multiply+0x150>)
 8009a72:	f001 fca5 	bl	800b3c0 <__assert_func>
 8009a76:	f100 0514 	add.w	r5, r0, #20
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a80:	462b      	mov	r3, r5
 8009a82:	4543      	cmp	r3, r8
 8009a84:	d321      	bcc.n	8009aca <__multiply+0x96>
 8009a86:	f107 0114 	add.w	r1, r7, #20
 8009a8a:	f104 0214 	add.w	r2, r4, #20
 8009a8e:	f104 0715 	add.w	r7, r4, #21
 8009a92:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009a96:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009a9a:	9302      	str	r3, [sp, #8]
 8009a9c:	1b13      	subs	r3, r2, r4
 8009a9e:	3b15      	subs	r3, #21
 8009aa0:	f023 0303 	bic.w	r3, r3, #3
 8009aa4:	3304      	adds	r3, #4
 8009aa6:	42ba      	cmp	r2, r7
 8009aa8:	bf38      	it	cc
 8009aaa:	2304      	movcc	r3, #4
 8009aac:	9301      	str	r3, [sp, #4]
 8009aae:	9b02      	ldr	r3, [sp, #8]
 8009ab0:	9103      	str	r1, [sp, #12]
 8009ab2:	428b      	cmp	r3, r1
 8009ab4:	d80c      	bhi.n	8009ad0 <__multiply+0x9c>
 8009ab6:	2e00      	cmp	r6, #0
 8009ab8:	dd03      	ble.n	8009ac2 <__multiply+0x8e>
 8009aba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d05b      	beq.n	8009b7a <__multiply+0x146>
 8009ac2:	6106      	str	r6, [r0, #16]
 8009ac4:	b005      	add	sp, #20
 8009ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aca:	f843 2b04 	str.w	r2, [r3], #4
 8009ace:	e7d8      	b.n	8009a82 <__multiply+0x4e>
 8009ad0:	f8b1 a000 	ldrh.w	sl, [r1]
 8009ad4:	f1ba 0f00 	cmp.w	sl, #0
 8009ad8:	d024      	beq.n	8009b24 <__multiply+0xf0>
 8009ada:	f104 0e14 	add.w	lr, r4, #20
 8009ade:	46a9      	mov	r9, r5
 8009ae0:	f04f 0c00 	mov.w	ip, #0
 8009ae4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009ae8:	f8d9 3000 	ldr.w	r3, [r9]
 8009aec:	fa1f fb87 	uxth.w	fp, r7
 8009af0:	4572      	cmp	r2, lr
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	fb0a 330b 	mla	r3, sl, fp, r3
 8009af8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009afc:	f8d9 7000 	ldr.w	r7, [r9]
 8009b00:	4463      	add	r3, ip
 8009b02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009b06:	fb0a c70b 	mla	r7, sl, fp, ip
 8009b0a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009b14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009b18:	f849 3b04 	str.w	r3, [r9], #4
 8009b1c:	d8e2      	bhi.n	8009ae4 <__multiply+0xb0>
 8009b1e:	9b01      	ldr	r3, [sp, #4]
 8009b20:	f845 c003 	str.w	ip, [r5, r3]
 8009b24:	9b03      	ldr	r3, [sp, #12]
 8009b26:	3104      	adds	r1, #4
 8009b28:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009b2c:	f1b9 0f00 	cmp.w	r9, #0
 8009b30:	d021      	beq.n	8009b76 <__multiply+0x142>
 8009b32:	682b      	ldr	r3, [r5, #0]
 8009b34:	f104 0c14 	add.w	ip, r4, #20
 8009b38:	46ae      	mov	lr, r5
 8009b3a:	f04f 0a00 	mov.w	sl, #0
 8009b3e:	f8bc b000 	ldrh.w	fp, [ip]
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009b48:	fb09 770b 	mla	r7, r9, fp, r7
 8009b4c:	4457      	add	r7, sl
 8009b4e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009b52:	f84e 3b04 	str.w	r3, [lr], #4
 8009b56:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009b5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b5e:	f8be 3000 	ldrh.w	r3, [lr]
 8009b62:	4562      	cmp	r2, ip
 8009b64:	fb09 330a 	mla	r3, r9, sl, r3
 8009b68:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009b6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b70:	d8e5      	bhi.n	8009b3e <__multiply+0x10a>
 8009b72:	9f01      	ldr	r7, [sp, #4]
 8009b74:	51eb      	str	r3, [r5, r7]
 8009b76:	3504      	adds	r5, #4
 8009b78:	e799      	b.n	8009aae <__multiply+0x7a>
 8009b7a:	3e01      	subs	r6, #1
 8009b7c:	e79b      	b.n	8009ab6 <__multiply+0x82>
 8009b7e:	bf00      	nop
 8009b80:	0800bf9d 	.word	0x0800bf9d
 8009b84:	0800bfae 	.word	0x0800bfae

08009b88 <__pow5mult>:
 8009b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b8c:	4615      	mov	r5, r2
 8009b8e:	f012 0203 	ands.w	r2, r2, #3
 8009b92:	4607      	mov	r7, r0
 8009b94:	460e      	mov	r6, r1
 8009b96:	d007      	beq.n	8009ba8 <__pow5mult+0x20>
 8009b98:	3a01      	subs	r2, #1
 8009b9a:	4c25      	ldr	r4, [pc, #148]	@ (8009c30 <__pow5mult+0xa8>)
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ba2:	f7ff fe53 	bl	800984c <__multadd>
 8009ba6:	4606      	mov	r6, r0
 8009ba8:	10ad      	asrs	r5, r5, #2
 8009baa:	d03d      	beq.n	8009c28 <__pow5mult+0xa0>
 8009bac:	69fc      	ldr	r4, [r7, #28]
 8009bae:	b97c      	cbnz	r4, 8009bd0 <__pow5mult+0x48>
 8009bb0:	2010      	movs	r0, #16
 8009bb2:	f7ff fd33 	bl	800961c <malloc>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	61f8      	str	r0, [r7, #28]
 8009bba:	b928      	cbnz	r0, 8009bc8 <__pow5mult+0x40>
 8009bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8009c34 <__pow5mult+0xac>)
 8009bbe:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009bc2:	481d      	ldr	r0, [pc, #116]	@ (8009c38 <__pow5mult+0xb0>)
 8009bc4:	f001 fbfc 	bl	800b3c0 <__assert_func>
 8009bc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009bcc:	6004      	str	r4, [r0, #0]
 8009bce:	60c4      	str	r4, [r0, #12]
 8009bd0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009bd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009bd8:	b94c      	cbnz	r4, 8009bee <__pow5mult+0x66>
 8009bda:	f240 2171 	movw	r1, #625	@ 0x271
 8009bde:	4638      	mov	r0, r7
 8009be0:	f7ff ff12 	bl	8009a08 <__i2b>
 8009be4:	2300      	movs	r3, #0
 8009be6:	4604      	mov	r4, r0
 8009be8:	f8c8 0008 	str.w	r0, [r8, #8]
 8009bec:	6003      	str	r3, [r0, #0]
 8009bee:	f04f 0900 	mov.w	r9, #0
 8009bf2:	07eb      	lsls	r3, r5, #31
 8009bf4:	d50a      	bpl.n	8009c0c <__pow5mult+0x84>
 8009bf6:	4631      	mov	r1, r6
 8009bf8:	4622      	mov	r2, r4
 8009bfa:	4638      	mov	r0, r7
 8009bfc:	f7ff ff1a 	bl	8009a34 <__multiply>
 8009c00:	4680      	mov	r8, r0
 8009c02:	4631      	mov	r1, r6
 8009c04:	4638      	mov	r0, r7
 8009c06:	4646      	mov	r6, r8
 8009c08:	f7ff fdfe 	bl	8009808 <_Bfree>
 8009c0c:	106d      	asrs	r5, r5, #1
 8009c0e:	d00b      	beq.n	8009c28 <__pow5mult+0xa0>
 8009c10:	6820      	ldr	r0, [r4, #0]
 8009c12:	b938      	cbnz	r0, 8009c24 <__pow5mult+0x9c>
 8009c14:	4622      	mov	r2, r4
 8009c16:	4621      	mov	r1, r4
 8009c18:	4638      	mov	r0, r7
 8009c1a:	f7ff ff0b 	bl	8009a34 <__multiply>
 8009c1e:	6020      	str	r0, [r4, #0]
 8009c20:	f8c0 9000 	str.w	r9, [r0]
 8009c24:	4604      	mov	r4, r0
 8009c26:	e7e4      	b.n	8009bf2 <__pow5mult+0x6a>
 8009c28:	4630      	mov	r0, r6
 8009c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c2e:	bf00      	nop
 8009c30:	0800c008 	.word	0x0800c008
 8009c34:	0800bf2e 	.word	0x0800bf2e
 8009c38:	0800bfae 	.word	0x0800bfae

08009c3c <__lshift>:
 8009c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c40:	460c      	mov	r4, r1
 8009c42:	4607      	mov	r7, r0
 8009c44:	4691      	mov	r9, r2
 8009c46:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c4a:	6923      	ldr	r3, [r4, #16]
 8009c4c:	6849      	ldr	r1, [r1, #4]
 8009c4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c52:	68a3      	ldr	r3, [r4, #8]
 8009c54:	f108 0601 	add.w	r6, r8, #1
 8009c58:	42b3      	cmp	r3, r6
 8009c5a:	db0b      	blt.n	8009c74 <__lshift+0x38>
 8009c5c:	4638      	mov	r0, r7
 8009c5e:	f7ff fd93 	bl	8009788 <_Balloc>
 8009c62:	4605      	mov	r5, r0
 8009c64:	b948      	cbnz	r0, 8009c7a <__lshift+0x3e>
 8009c66:	4602      	mov	r2, r0
 8009c68:	4b28      	ldr	r3, [pc, #160]	@ (8009d0c <__lshift+0xd0>)
 8009c6a:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009c6e:	4828      	ldr	r0, [pc, #160]	@ (8009d10 <__lshift+0xd4>)
 8009c70:	f001 fba6 	bl	800b3c0 <__assert_func>
 8009c74:	3101      	adds	r1, #1
 8009c76:	005b      	lsls	r3, r3, #1
 8009c78:	e7ee      	b.n	8009c58 <__lshift+0x1c>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	f100 0114 	add.w	r1, r0, #20
 8009c80:	f100 0210 	add.w	r2, r0, #16
 8009c84:	4618      	mov	r0, r3
 8009c86:	4553      	cmp	r3, sl
 8009c88:	db33      	blt.n	8009cf2 <__lshift+0xb6>
 8009c8a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c8e:	f104 0314 	add.w	r3, r4, #20
 8009c92:	6920      	ldr	r0, [r4, #16]
 8009c94:	f019 091f 	ands.w	r9, r9, #31
 8009c98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ca0:	d02b      	beq.n	8009cfa <__lshift+0xbe>
 8009ca2:	f1c9 0e20 	rsb	lr, r9, #32
 8009ca6:	468a      	mov	sl, r1
 8009ca8:	2200      	movs	r2, #0
 8009caa:	6818      	ldr	r0, [r3, #0]
 8009cac:	fa00 f009 	lsl.w	r0, r0, r9
 8009cb0:	4310      	orrs	r0, r2
 8009cb2:	f84a 0b04 	str.w	r0, [sl], #4
 8009cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cba:	459c      	cmp	ip, r3
 8009cbc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009cc0:	d8f3      	bhi.n	8009caa <__lshift+0x6e>
 8009cc2:	ebac 0304 	sub.w	r3, ip, r4
 8009cc6:	f104 0015 	add.w	r0, r4, #21
 8009cca:	3b15      	subs	r3, #21
 8009ccc:	f023 0303 	bic.w	r3, r3, #3
 8009cd0:	3304      	adds	r3, #4
 8009cd2:	4584      	cmp	ip, r0
 8009cd4:	bf38      	it	cc
 8009cd6:	2304      	movcc	r3, #4
 8009cd8:	50ca      	str	r2, [r1, r3]
 8009cda:	b10a      	cbz	r2, 8009ce0 <__lshift+0xa4>
 8009cdc:	f108 0602 	add.w	r6, r8, #2
 8009ce0:	3e01      	subs	r6, #1
 8009ce2:	4638      	mov	r0, r7
 8009ce4:	4621      	mov	r1, r4
 8009ce6:	612e      	str	r6, [r5, #16]
 8009ce8:	f7ff fd8e 	bl	8009808 <_Bfree>
 8009cec:	4628      	mov	r0, r5
 8009cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	f842 0f04 	str.w	r0, [r2, #4]!
 8009cf8:	e7c5      	b.n	8009c86 <__lshift+0x4a>
 8009cfa:	3904      	subs	r1, #4
 8009cfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d00:	459c      	cmp	ip, r3
 8009d02:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d06:	d8f9      	bhi.n	8009cfc <__lshift+0xc0>
 8009d08:	e7ea      	b.n	8009ce0 <__lshift+0xa4>
 8009d0a:	bf00      	nop
 8009d0c:	0800bf9d 	.word	0x0800bf9d
 8009d10:	0800bfae 	.word	0x0800bfae

08009d14 <__mcmp>:
 8009d14:	4603      	mov	r3, r0
 8009d16:	690a      	ldr	r2, [r1, #16]
 8009d18:	6900      	ldr	r0, [r0, #16]
 8009d1a:	1a80      	subs	r0, r0, r2
 8009d1c:	b530      	push	{r4, r5, lr}
 8009d1e:	d10e      	bne.n	8009d3e <__mcmp+0x2a>
 8009d20:	3314      	adds	r3, #20
 8009d22:	3114      	adds	r1, #20
 8009d24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009d28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009d2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009d30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009d34:	4295      	cmp	r5, r2
 8009d36:	d003      	beq.n	8009d40 <__mcmp+0x2c>
 8009d38:	d205      	bcs.n	8009d46 <__mcmp+0x32>
 8009d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d3e:	bd30      	pop	{r4, r5, pc}
 8009d40:	42a3      	cmp	r3, r4
 8009d42:	d3f3      	bcc.n	8009d2c <__mcmp+0x18>
 8009d44:	e7fb      	b.n	8009d3e <__mcmp+0x2a>
 8009d46:	2001      	movs	r0, #1
 8009d48:	e7f9      	b.n	8009d3e <__mcmp+0x2a>
	...

08009d4c <__mdiff>:
 8009d4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d50:	4689      	mov	r9, r1
 8009d52:	4606      	mov	r6, r0
 8009d54:	4611      	mov	r1, r2
 8009d56:	4614      	mov	r4, r2
 8009d58:	4648      	mov	r0, r9
 8009d5a:	f7ff ffdb 	bl	8009d14 <__mcmp>
 8009d5e:	1e05      	subs	r5, r0, #0
 8009d60:	d112      	bne.n	8009d88 <__mdiff+0x3c>
 8009d62:	4629      	mov	r1, r5
 8009d64:	4630      	mov	r0, r6
 8009d66:	f7ff fd0f 	bl	8009788 <_Balloc>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	b928      	cbnz	r0, 8009d7a <__mdiff+0x2e>
 8009d6e:	4b41      	ldr	r3, [pc, #260]	@ (8009e74 <__mdiff+0x128>)
 8009d70:	f240 2137 	movw	r1, #567	@ 0x237
 8009d74:	4840      	ldr	r0, [pc, #256]	@ (8009e78 <__mdiff+0x12c>)
 8009d76:	f001 fb23 	bl	800b3c0 <__assert_func>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d80:	4610      	mov	r0, r2
 8009d82:	b003      	add	sp, #12
 8009d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d88:	bfbc      	itt	lt
 8009d8a:	464b      	movlt	r3, r9
 8009d8c:	46a1      	movlt	r9, r4
 8009d8e:	4630      	mov	r0, r6
 8009d90:	bfb8      	it	lt
 8009d92:	2501      	movlt	r5, #1
 8009d94:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009d98:	bfb4      	ite	lt
 8009d9a:	461c      	movlt	r4, r3
 8009d9c:	2500      	movge	r5, #0
 8009d9e:	f7ff fcf3 	bl	8009788 <_Balloc>
 8009da2:	4602      	mov	r2, r0
 8009da4:	b918      	cbnz	r0, 8009dae <__mdiff+0x62>
 8009da6:	4b33      	ldr	r3, [pc, #204]	@ (8009e74 <__mdiff+0x128>)
 8009da8:	f240 2145 	movw	r1, #581	@ 0x245
 8009dac:	e7e2      	b.n	8009d74 <__mdiff+0x28>
 8009dae:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009db2:	f104 0e14 	add.w	lr, r4, #20
 8009db6:	6926      	ldr	r6, [r4, #16]
 8009db8:	f100 0b14 	add.w	fp, r0, #20
 8009dbc:	60c5      	str	r5, [r0, #12]
 8009dbe:	f109 0514 	add.w	r5, r9, #20
 8009dc2:	f109 0310 	add.w	r3, r9, #16
 8009dc6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009dca:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009dce:	46d9      	mov	r9, fp
 8009dd0:	f04f 0c00 	mov.w	ip, #0
 8009dd4:	9301      	str	r3, [sp, #4]
 8009dd6:	9b01      	ldr	r3, [sp, #4]
 8009dd8:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009ddc:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009de0:	4576      	cmp	r6, lr
 8009de2:	9301      	str	r3, [sp, #4]
 8009de4:	fa1f f38a 	uxth.w	r3, sl
 8009de8:	4619      	mov	r1, r3
 8009dea:	b283      	uxth	r3, r0
 8009dec:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8009df0:	eba1 0303 	sub.w	r3, r1, r3
 8009df4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009df8:	4463      	add	r3, ip
 8009dfa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e04:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009e08:	f849 3b04 	str.w	r3, [r9], #4
 8009e0c:	d8e3      	bhi.n	8009dd6 <__mdiff+0x8a>
 8009e0e:	1b33      	subs	r3, r6, r4
 8009e10:	3415      	adds	r4, #21
 8009e12:	3b15      	subs	r3, #21
 8009e14:	f023 0303 	bic.w	r3, r3, #3
 8009e18:	3304      	adds	r3, #4
 8009e1a:	42a6      	cmp	r6, r4
 8009e1c:	bf38      	it	cc
 8009e1e:	2304      	movcc	r3, #4
 8009e20:	441d      	add	r5, r3
 8009e22:	445b      	add	r3, fp
 8009e24:	462c      	mov	r4, r5
 8009e26:	461e      	mov	r6, r3
 8009e28:	4544      	cmp	r4, r8
 8009e2a:	d30e      	bcc.n	8009e4a <__mdiff+0xfe>
 8009e2c:	f108 0103 	add.w	r1, r8, #3
 8009e30:	1b49      	subs	r1, r1, r5
 8009e32:	3d03      	subs	r5, #3
 8009e34:	f021 0103 	bic.w	r1, r1, #3
 8009e38:	45a8      	cmp	r8, r5
 8009e3a:	bf38      	it	cc
 8009e3c:	2100      	movcc	r1, #0
 8009e3e:	440b      	add	r3, r1
 8009e40:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e44:	b199      	cbz	r1, 8009e6e <__mdiff+0x122>
 8009e46:	6117      	str	r7, [r2, #16]
 8009e48:	e79a      	b.n	8009d80 <__mdiff+0x34>
 8009e4a:	f854 1b04 	ldr.w	r1, [r4], #4
 8009e4e:	46e6      	mov	lr, ip
 8009e50:	fa1f fc81 	uxth.w	ip, r1
 8009e54:	0c08      	lsrs	r0, r1, #16
 8009e56:	4471      	add	r1, lr
 8009e58:	44f4      	add	ip, lr
 8009e5a:	b289      	uxth	r1, r1
 8009e5c:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009e64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e68:	f846 1b04 	str.w	r1, [r6], #4
 8009e6c:	e7dc      	b.n	8009e28 <__mdiff+0xdc>
 8009e6e:	3f01      	subs	r7, #1
 8009e70:	e7e6      	b.n	8009e40 <__mdiff+0xf4>
 8009e72:	bf00      	nop
 8009e74:	0800bf9d 	.word	0x0800bf9d
 8009e78:	0800bfae 	.word	0x0800bfae

08009e7c <__ulp>:
 8009e7c:	b082      	sub	sp, #8
 8009e7e:	4b11      	ldr	r3, [pc, #68]	@ (8009ec4 <__ulp+0x48>)
 8009e80:	ed8d 0b00 	vstr	d0, [sp]
 8009e84:	9a01      	ldr	r2, [sp, #4]
 8009e86:	4013      	ands	r3, r2
 8009e88:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	dc08      	bgt.n	8009ea2 <__ulp+0x26>
 8009e90:	425b      	negs	r3, r3
 8009e92:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009e96:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009e9a:	da04      	bge.n	8009ea6 <__ulp+0x2a>
 8009e9c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009ea0:	4113      	asrs	r3, r2
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	e008      	b.n	8009eb8 <__ulp+0x3c>
 8009ea6:	f1a2 0314 	sub.w	r3, r2, #20
 8009eaa:	2b1e      	cmp	r3, #30
 8009eac:	bfd6      	itet	le
 8009eae:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009eb2:	2201      	movgt	r2, #1
 8009eb4:	40da      	lsrle	r2, r3
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	4619      	mov	r1, r3
 8009eba:	4610      	mov	r0, r2
 8009ebc:	ec41 0b10 	vmov	d0, r0, r1
 8009ec0:	b002      	add	sp, #8
 8009ec2:	4770      	bx	lr
 8009ec4:	7ff00000 	.word	0x7ff00000

08009ec8 <__b2d>:
 8009ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ecc:	6906      	ldr	r6, [r0, #16]
 8009ece:	f100 0814 	add.w	r8, r0, #20
 8009ed2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009ed6:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009eda:	1f37      	subs	r7, r6, #4
 8009edc:	4610      	mov	r0, r2
 8009ede:	f7ff fd47 	bl	8009970 <__hi0bits>
 8009ee2:	f1c0 0320 	rsb	r3, r0, #32
 8009ee6:	280a      	cmp	r0, #10
 8009ee8:	600b      	str	r3, [r1, #0]
 8009eea:	491d      	ldr	r1, [pc, #116]	@ (8009f60 <__b2d+0x98>)
 8009eec:	dc16      	bgt.n	8009f1c <__b2d+0x54>
 8009eee:	f1c0 0c0b 	rsb	ip, r0, #11
 8009ef2:	45b8      	cmp	r8, r7
 8009ef4:	f100 0015 	add.w	r0, r0, #21
 8009ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8009efc:	fa02 f000 	lsl.w	r0, r2, r0
 8009f00:	ea43 0501 	orr.w	r5, r3, r1
 8009f04:	bf34      	ite	cc
 8009f06:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009f0a:	2300      	movcs	r3, #0
 8009f0c:	fa23 f30c 	lsr.w	r3, r3, ip
 8009f10:	4303      	orrs	r3, r0
 8009f12:	461c      	mov	r4, r3
 8009f14:	ec45 4b10 	vmov	d0, r4, r5
 8009f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f1c:	45b8      	cmp	r8, r7
 8009f1e:	bf3a      	itte	cc
 8009f20:	f1a6 0708 	subcc.w	r7, r6, #8
 8009f24:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009f28:	2300      	movcs	r3, #0
 8009f2a:	380b      	subs	r0, #11
 8009f2c:	d014      	beq.n	8009f58 <__b2d+0x90>
 8009f2e:	f1c0 0120 	rsb	r1, r0, #32
 8009f32:	4082      	lsls	r2, r0
 8009f34:	4547      	cmp	r7, r8
 8009f36:	fa23 f401 	lsr.w	r4, r3, r1
 8009f3a:	fa03 f300 	lsl.w	r3, r3, r0
 8009f3e:	ea42 0204 	orr.w	r2, r2, r4
 8009f42:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009f46:	bf8c      	ite	hi
 8009f48:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009f4c:	2200      	movls	r2, #0
 8009f4e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009f52:	40ca      	lsrs	r2, r1
 8009f54:	4313      	orrs	r3, r2
 8009f56:	e7dc      	b.n	8009f12 <__b2d+0x4a>
 8009f58:	ea42 0501 	orr.w	r5, r2, r1
 8009f5c:	e7d9      	b.n	8009f12 <__b2d+0x4a>
 8009f5e:	bf00      	nop
 8009f60:	3ff00000 	.word	0x3ff00000

08009f64 <__d2b>:
 8009f64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f68:	460f      	mov	r7, r1
 8009f6a:	2101      	movs	r1, #1
 8009f6c:	4616      	mov	r6, r2
 8009f6e:	ec59 8b10 	vmov	r8, r9, d0
 8009f72:	f7ff fc09 	bl	8009788 <_Balloc>
 8009f76:	4604      	mov	r4, r0
 8009f78:	b930      	cbnz	r0, 8009f88 <__d2b+0x24>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	4b23      	ldr	r3, [pc, #140]	@ (800a00c <__d2b+0xa8>)
 8009f7e:	f240 310f 	movw	r1, #783	@ 0x30f
 8009f82:	4823      	ldr	r0, [pc, #140]	@ (800a010 <__d2b+0xac>)
 8009f84:	f001 fa1c 	bl	800b3c0 <__assert_func>
 8009f88:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f90:	b10d      	cbz	r5, 8009f96 <__d2b+0x32>
 8009f92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009f96:	9301      	str	r3, [sp, #4]
 8009f98:	f1b8 0300 	subs.w	r3, r8, #0
 8009f9c:	d023      	beq.n	8009fe6 <__d2b+0x82>
 8009f9e:	4668      	mov	r0, sp
 8009fa0:	9300      	str	r3, [sp, #0]
 8009fa2:	f7ff fd04 	bl	80099ae <__lo0bits>
 8009fa6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009faa:	b1d0      	cbz	r0, 8009fe2 <__d2b+0x7e>
 8009fac:	f1c0 0320 	rsb	r3, r0, #32
 8009fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb4:	40c2      	lsrs	r2, r0
 8009fb6:	430b      	orrs	r3, r1
 8009fb8:	9201      	str	r2, [sp, #4]
 8009fba:	6163      	str	r3, [r4, #20]
 8009fbc:	9b01      	ldr	r3, [sp, #4]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	61a3      	str	r3, [r4, #24]
 8009fc2:	bf0c      	ite	eq
 8009fc4:	2201      	moveq	r2, #1
 8009fc6:	2202      	movne	r2, #2
 8009fc8:	6122      	str	r2, [r4, #16]
 8009fca:	b1a5      	cbz	r5, 8009ff6 <__d2b+0x92>
 8009fcc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009fd0:	4405      	add	r5, r0
 8009fd2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009fd6:	603d      	str	r5, [r7, #0]
 8009fd8:	6030      	str	r0, [r6, #0]
 8009fda:	4620      	mov	r0, r4
 8009fdc:	b003      	add	sp, #12
 8009fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fe2:	6161      	str	r1, [r4, #20]
 8009fe4:	e7ea      	b.n	8009fbc <__d2b+0x58>
 8009fe6:	a801      	add	r0, sp, #4
 8009fe8:	f7ff fce1 	bl	80099ae <__lo0bits>
 8009fec:	9b01      	ldr	r3, [sp, #4]
 8009fee:	3020      	adds	r0, #32
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	6163      	str	r3, [r4, #20]
 8009ff4:	e7e8      	b.n	8009fc8 <__d2b+0x64>
 8009ff6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009ffa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ffe:	6038      	str	r0, [r7, #0]
 800a000:	6918      	ldr	r0, [r3, #16]
 800a002:	f7ff fcb5 	bl	8009970 <__hi0bits>
 800a006:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a00a:	e7e5      	b.n	8009fd8 <__d2b+0x74>
 800a00c:	0800bf9d 	.word	0x0800bf9d
 800a010:	0800bfae 	.word	0x0800bfae

0800a014 <__ratio>:
 800a014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a018:	b085      	sub	sp, #20
 800a01a:	e9cd 1000 	strd	r1, r0, [sp]
 800a01e:	a902      	add	r1, sp, #8
 800a020:	f7ff ff52 	bl	8009ec8 <__b2d>
 800a024:	a903      	add	r1, sp, #12
 800a026:	9800      	ldr	r0, [sp, #0]
 800a028:	ec55 4b10 	vmov	r4, r5, d0
 800a02c:	f7ff ff4c 	bl	8009ec8 <__b2d>
 800a030:	9b01      	ldr	r3, [sp, #4]
 800a032:	462f      	mov	r7, r5
 800a034:	4620      	mov	r0, r4
 800a036:	6919      	ldr	r1, [r3, #16]
 800a038:	9b00      	ldr	r3, [sp, #0]
 800a03a:	691b      	ldr	r3, [r3, #16]
 800a03c:	1ac9      	subs	r1, r1, r3
 800a03e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a042:	ec5b ab10 	vmov	sl, fp, d0
 800a046:	1a9b      	subs	r3, r3, r2
 800a048:	46d9      	mov	r9, fp
 800a04a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a04e:	2b00      	cmp	r3, #0
 800a050:	bfcd      	iteet	gt
 800a052:	462a      	movgt	r2, r5
 800a054:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a058:	465a      	movle	r2, fp
 800a05a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a05e:	bfd8      	it	le
 800a060:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a064:	4652      	mov	r2, sl
 800a066:	4639      	mov	r1, r7
 800a068:	464b      	mov	r3, r9
 800a06a:	f7f6 fc03 	bl	8000874 <__aeabi_ddiv>
 800a06e:	ec41 0b10 	vmov	d0, r0, r1
 800a072:	b005      	add	sp, #20
 800a074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a078 <__copybits>:
 800a078:	3901      	subs	r1, #1
 800a07a:	f102 0314 	add.w	r3, r2, #20
 800a07e:	1149      	asrs	r1, r1, #5
 800a080:	b570      	push	{r4, r5, r6, lr}
 800a082:	3101      	adds	r1, #1
 800a084:	6914      	ldr	r4, [r2, #16]
 800a086:	1f05      	subs	r5, r0, #4
 800a088:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a08c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a090:	42a3      	cmp	r3, r4
 800a092:	d30c      	bcc.n	800a0ae <__copybits+0x36>
 800a094:	1aa3      	subs	r3, r4, r2
 800a096:	3211      	adds	r2, #17
 800a098:	3b11      	subs	r3, #17
 800a09a:	f023 0303 	bic.w	r3, r3, #3
 800a09e:	42a2      	cmp	r2, r4
 800a0a0:	bf88      	it	hi
 800a0a2:	2300      	movhi	r3, #0
 800a0a4:	4418      	add	r0, r3
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	4288      	cmp	r0, r1
 800a0aa:	d305      	bcc.n	800a0b8 <__copybits+0x40>
 800a0ac:	bd70      	pop	{r4, r5, r6, pc}
 800a0ae:	f853 6b04 	ldr.w	r6, [r3], #4
 800a0b2:	f845 6f04 	str.w	r6, [r5, #4]!
 800a0b6:	e7eb      	b.n	800a090 <__copybits+0x18>
 800a0b8:	f840 3b04 	str.w	r3, [r0], #4
 800a0bc:	e7f4      	b.n	800a0a8 <__copybits+0x30>

0800a0be <__any_on>:
 800a0be:	f100 0214 	add.w	r2, r0, #20
 800a0c2:	114b      	asrs	r3, r1, #5
 800a0c4:	6900      	ldr	r0, [r0, #16]
 800a0c6:	4298      	cmp	r0, r3
 800a0c8:	b510      	push	{r4, lr}
 800a0ca:	db11      	blt.n	800a0f0 <__any_on+0x32>
 800a0cc:	dd0a      	ble.n	800a0e4 <__any_on+0x26>
 800a0ce:	f011 011f 	ands.w	r1, r1, #31
 800a0d2:	d007      	beq.n	800a0e4 <__any_on+0x26>
 800a0d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a0d8:	fa24 f001 	lsr.w	r0, r4, r1
 800a0dc:	fa00 f101 	lsl.w	r1, r0, r1
 800a0e0:	428c      	cmp	r4, r1
 800a0e2:	d10b      	bne.n	800a0fc <__any_on+0x3e>
 800a0e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d803      	bhi.n	800a0f4 <__any_on+0x36>
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	bd10      	pop	{r4, pc}
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	e7f7      	b.n	800a0e4 <__any_on+0x26>
 800a0f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a0f8:	2900      	cmp	r1, #0
 800a0fa:	d0f5      	beq.n	800a0e8 <__any_on+0x2a>
 800a0fc:	2001      	movs	r0, #1
 800a0fe:	e7f6      	b.n	800a0ee <__any_on+0x30>

0800a100 <sulp>:
 800a100:	b570      	push	{r4, r5, r6, lr}
 800a102:	4604      	mov	r4, r0
 800a104:	460d      	mov	r5, r1
 800a106:	4616      	mov	r6, r2
 800a108:	ec45 4b10 	vmov	d0, r4, r5
 800a10c:	f7ff feb6 	bl	8009e7c <__ulp>
 800a110:	ec51 0b10 	vmov	r0, r1, d0
 800a114:	b17e      	cbz	r6, 800a136 <sulp+0x36>
 800a116:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a11a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a11e:	2b00      	cmp	r3, #0
 800a120:	dd09      	ble.n	800a136 <sulp+0x36>
 800a122:	051b      	lsls	r3, r3, #20
 800a124:	2400      	movs	r4, #0
 800a126:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a12a:	4622      	mov	r2, r4
 800a12c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a130:	462b      	mov	r3, r5
 800a132:	f7f6 fa75 	bl	8000620 <__aeabi_dmul>
 800a136:	ec41 0b10 	vmov	d0, r0, r1
 800a13a:	bd70      	pop	{r4, r5, r6, pc}
 800a13c:	0000      	movs	r0, r0
	...

0800a140 <_strtod_l>:
 800a140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a144:	b09f      	sub	sp, #124	@ 0x7c
 800a146:	460c      	mov	r4, r1
 800a148:	f04f 0a00 	mov.w	sl, #0
 800a14c:	f04f 0b00 	mov.w	fp, #0
 800a150:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a152:	2200      	movs	r2, #0
 800a154:	9005      	str	r0, [sp, #20]
 800a156:	921a      	str	r2, [sp, #104]	@ 0x68
 800a158:	460a      	mov	r2, r1
 800a15a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a15c:	7811      	ldrb	r1, [r2, #0]
 800a15e:	292b      	cmp	r1, #43	@ 0x2b
 800a160:	d04a      	beq.n	800a1f8 <_strtod_l+0xb8>
 800a162:	d838      	bhi.n	800a1d6 <_strtod_l+0x96>
 800a164:	290d      	cmp	r1, #13
 800a166:	d832      	bhi.n	800a1ce <_strtod_l+0x8e>
 800a168:	2908      	cmp	r1, #8
 800a16a:	d832      	bhi.n	800a1d2 <_strtod_l+0x92>
 800a16c:	2900      	cmp	r1, #0
 800a16e:	d03b      	beq.n	800a1e8 <_strtod_l+0xa8>
 800a170:	2200      	movs	r2, #0
 800a172:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a174:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a176:	782a      	ldrb	r2, [r5, #0]
 800a178:	2a30      	cmp	r2, #48	@ 0x30
 800a17a:	f040 80b3 	bne.w	800a2e4 <_strtod_l+0x1a4>
 800a17e:	786a      	ldrb	r2, [r5, #1]
 800a180:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a184:	2a58      	cmp	r2, #88	@ 0x58
 800a186:	d16e      	bne.n	800a266 <_strtod_l+0x126>
 800a188:	9302      	str	r3, [sp, #8]
 800a18a:	a919      	add	r1, sp, #100	@ 0x64
 800a18c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a18e:	4a90      	ldr	r2, [pc, #576]	@ (800a3d0 <_strtod_l+0x290>)
 800a190:	9301      	str	r3, [sp, #4]
 800a192:	ab1a      	add	r3, sp, #104	@ 0x68
 800a194:	9805      	ldr	r0, [sp, #20]
 800a196:	9300      	str	r3, [sp, #0]
 800a198:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a19a:	f001 f9a9 	bl	800b4f0 <__gethex>
 800a19e:	f010 060f 	ands.w	r6, r0, #15
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	d005      	beq.n	800a1b2 <_strtod_l+0x72>
 800a1a6:	2e06      	cmp	r6, #6
 800a1a8:	d128      	bne.n	800a1fc <_strtod_l+0xbc>
 800a1aa:	3501      	adds	r5, #1
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	9519      	str	r5, [sp, #100]	@ 0x64
 800a1b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	f040 858e 	bne.w	800acd6 <_strtod_l+0xb96>
 800a1ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1bc:	b1cb      	cbz	r3, 800a1f2 <_strtod_l+0xb2>
 800a1be:	4652      	mov	r2, sl
 800a1c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a1c4:	ec43 2b10 	vmov	d0, r2, r3
 800a1c8:	b01f      	add	sp, #124	@ 0x7c
 800a1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ce:	2920      	cmp	r1, #32
 800a1d0:	d1ce      	bne.n	800a170 <_strtod_l+0x30>
 800a1d2:	3201      	adds	r2, #1
 800a1d4:	e7c1      	b.n	800a15a <_strtod_l+0x1a>
 800a1d6:	292d      	cmp	r1, #45	@ 0x2d
 800a1d8:	d1ca      	bne.n	800a170 <_strtod_l+0x30>
 800a1da:	2101      	movs	r1, #1
 800a1dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a1de:	1c51      	adds	r1, r2, #1
 800a1e0:	9119      	str	r1, [sp, #100]	@ 0x64
 800a1e2:	7852      	ldrb	r2, [r2, #1]
 800a1e4:	2a00      	cmp	r2, #0
 800a1e6:	d1c5      	bne.n	800a174 <_strtod_l+0x34>
 800a1e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a1ea:	9419      	str	r4, [sp, #100]	@ 0x64
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	f040 8570 	bne.w	800acd2 <_strtod_l+0xb92>
 800a1f2:	4652      	mov	r2, sl
 800a1f4:	465b      	mov	r3, fp
 800a1f6:	e7e5      	b.n	800a1c4 <_strtod_l+0x84>
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	e7ef      	b.n	800a1dc <_strtod_l+0x9c>
 800a1fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a1fe:	b13a      	cbz	r2, 800a210 <_strtod_l+0xd0>
 800a200:	2135      	movs	r1, #53	@ 0x35
 800a202:	a81c      	add	r0, sp, #112	@ 0x70
 800a204:	f7ff ff38 	bl	800a078 <__copybits>
 800a208:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a20a:	9805      	ldr	r0, [sp, #20]
 800a20c:	f7ff fafc 	bl	8009808 <_Bfree>
 800a210:	3e01      	subs	r6, #1
 800a212:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a214:	2e04      	cmp	r6, #4
 800a216:	d806      	bhi.n	800a226 <_strtod_l+0xe6>
 800a218:	e8df f006 	tbb	[pc, r6]
 800a21c:	201d0314 	.word	0x201d0314
 800a220:	14          	.byte	0x14
 800a221:	00          	.byte	0x00
 800a222:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a226:	05e1      	lsls	r1, r4, #23
 800a228:	bf48      	it	mi
 800a22a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a22e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a232:	0d1b      	lsrs	r3, r3, #20
 800a234:	051b      	lsls	r3, r3, #20
 800a236:	2b00      	cmp	r3, #0
 800a238:	d1bb      	bne.n	800a1b2 <_strtod_l+0x72>
 800a23a:	f7fe fb0f 	bl	800885c <__errno>
 800a23e:	2322      	movs	r3, #34	@ 0x22
 800a240:	6003      	str	r3, [r0, #0]
 800a242:	e7b6      	b.n	800a1b2 <_strtod_l+0x72>
 800a244:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a248:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a24c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a250:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a254:	e7e7      	b.n	800a226 <_strtod_l+0xe6>
 800a256:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a3d8 <_strtod_l+0x298>
 800a25a:	e7e4      	b.n	800a226 <_strtod_l+0xe6>
 800a25c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a260:	f04f 3aff 	mov.w	sl, #4294967295
 800a264:	e7df      	b.n	800a226 <_strtod_l+0xe6>
 800a266:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a268:	1c5a      	adds	r2, r3, #1
 800a26a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a26c:	785b      	ldrb	r3, [r3, #1]
 800a26e:	2b30      	cmp	r3, #48	@ 0x30
 800a270:	d0f9      	beq.n	800a266 <_strtod_l+0x126>
 800a272:	2b00      	cmp	r3, #0
 800a274:	d09d      	beq.n	800a1b2 <_strtod_l+0x72>
 800a276:	2301      	movs	r3, #1
 800a278:	9309      	str	r3, [sp, #36]	@ 0x24
 800a27a:	220a      	movs	r2, #10
 800a27c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a27e:	930c      	str	r3, [sp, #48]	@ 0x30
 800a280:	2300      	movs	r3, #0
 800a282:	461f      	mov	r7, r3
 800a284:	9308      	str	r3, [sp, #32]
 800a286:	930a      	str	r3, [sp, #40]	@ 0x28
 800a288:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a28a:	7805      	ldrb	r5, [r0, #0]
 800a28c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a290:	b2d9      	uxtb	r1, r3
 800a292:	2909      	cmp	r1, #9
 800a294:	d928      	bls.n	800a2e8 <_strtod_l+0x1a8>
 800a296:	2201      	movs	r2, #1
 800a298:	494e      	ldr	r1, [pc, #312]	@ (800a3d4 <_strtod_l+0x294>)
 800a29a:	f001 f836 	bl	800b30a <strncmp>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	d033      	beq.n	800a30a <_strtod_l+0x1ca>
 800a2a2:	2000      	movs	r0, #0
 800a2a4:	462a      	mov	r2, r5
 800a2a6:	463d      	mov	r5, r7
 800a2a8:	4681      	mov	r9, r0
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2a65      	cmp	r2, #101	@ 0x65
 800a2ae:	d001      	beq.n	800a2b4 <_strtod_l+0x174>
 800a2b0:	2a45      	cmp	r2, #69	@ 0x45
 800a2b2:	d114      	bne.n	800a2de <_strtod_l+0x19e>
 800a2b4:	b91d      	cbnz	r5, 800a2be <_strtod_l+0x17e>
 800a2b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2b8:	4302      	orrs	r2, r0
 800a2ba:	d095      	beq.n	800a1e8 <_strtod_l+0xa8>
 800a2bc:	2500      	movs	r5, #0
 800a2be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a2c0:	1c62      	adds	r2, r4, #1
 800a2c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a2c4:	7862      	ldrb	r2, [r4, #1]
 800a2c6:	2a2b      	cmp	r2, #43	@ 0x2b
 800a2c8:	d078      	beq.n	800a3bc <_strtod_l+0x27c>
 800a2ca:	2a2d      	cmp	r2, #45	@ 0x2d
 800a2cc:	d07c      	beq.n	800a3c8 <_strtod_l+0x288>
 800a2ce:	f04f 0c00 	mov.w	ip, #0
 800a2d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a2d6:	2909      	cmp	r1, #9
 800a2d8:	f240 8084 	bls.w	800a3e4 <_strtod_l+0x2a4>
 800a2dc:	9419      	str	r4, [sp, #100]	@ 0x64
 800a2de:	f04f 0800 	mov.w	r8, #0
 800a2e2:	e0a4      	b.n	800a42e <_strtod_l+0x2ee>
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	e7c7      	b.n	800a278 <_strtod_l+0x138>
 800a2e8:	2f08      	cmp	r7, #8
 800a2ea:	f100 0001 	add.w	r0, r0, #1
 800a2ee:	f107 0701 	add.w	r7, r7, #1
 800a2f2:	bfd5      	itete	le
 800a2f4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a2f6:	9908      	ldrgt	r1, [sp, #32]
 800a2f8:	fb02 3301 	mlale	r3, r2, r1, r3
 800a2fc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a300:	bfd4      	ite	le
 800a302:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a304:	9308      	strgt	r3, [sp, #32]
 800a306:	9019      	str	r0, [sp, #100]	@ 0x64
 800a308:	e7be      	b.n	800a288 <_strtod_l+0x148>
 800a30a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a30c:	1c5a      	adds	r2, r3, #1
 800a30e:	9219      	str	r2, [sp, #100]	@ 0x64
 800a310:	785a      	ldrb	r2, [r3, #1]
 800a312:	b37f      	cbz	r7, 800a374 <_strtod_l+0x234>
 800a314:	4681      	mov	r9, r0
 800a316:	463d      	mov	r5, r7
 800a318:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a31c:	2b09      	cmp	r3, #9
 800a31e:	d912      	bls.n	800a346 <_strtod_l+0x206>
 800a320:	2301      	movs	r3, #1
 800a322:	e7c3      	b.n	800a2ac <_strtod_l+0x16c>
 800a324:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a326:	3001      	adds	r0, #1
 800a328:	1c5a      	adds	r2, r3, #1
 800a32a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a32c:	785a      	ldrb	r2, [r3, #1]
 800a32e:	2a30      	cmp	r2, #48	@ 0x30
 800a330:	d0f8      	beq.n	800a324 <_strtod_l+0x1e4>
 800a332:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a336:	2b08      	cmp	r3, #8
 800a338:	f200 84d2 	bhi.w	800ace0 <_strtod_l+0xba0>
 800a33c:	4681      	mov	r9, r0
 800a33e:	2000      	movs	r0, #0
 800a340:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a342:	4605      	mov	r5, r0
 800a344:	930c      	str	r3, [sp, #48]	@ 0x30
 800a346:	3a30      	subs	r2, #48	@ 0x30
 800a348:	f100 0301 	add.w	r3, r0, #1
 800a34c:	d02a      	beq.n	800a3a4 <_strtod_l+0x264>
 800a34e:	4499      	add	r9, r3
 800a350:	eb00 0c05 	add.w	ip, r0, r5
 800a354:	462b      	mov	r3, r5
 800a356:	210a      	movs	r1, #10
 800a358:	4563      	cmp	r3, ip
 800a35a:	d10d      	bne.n	800a378 <_strtod_l+0x238>
 800a35c:	1c69      	adds	r1, r5, #1
 800a35e:	4401      	add	r1, r0
 800a360:	4428      	add	r0, r5
 800a362:	2808      	cmp	r0, #8
 800a364:	dc16      	bgt.n	800a394 <_strtod_l+0x254>
 800a366:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a368:	230a      	movs	r3, #10
 800a36a:	fb03 2300 	mla	r3, r3, r0, r2
 800a36e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a370:	2300      	movs	r3, #0
 800a372:	e018      	b.n	800a3a6 <_strtod_l+0x266>
 800a374:	4638      	mov	r0, r7
 800a376:	e7da      	b.n	800a32e <_strtod_l+0x1ee>
 800a378:	2b08      	cmp	r3, #8
 800a37a:	f103 0301 	add.w	r3, r3, #1
 800a37e:	dc03      	bgt.n	800a388 <_strtod_l+0x248>
 800a380:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a382:	434e      	muls	r6, r1
 800a384:	960a      	str	r6, [sp, #40]	@ 0x28
 800a386:	e7e7      	b.n	800a358 <_strtod_l+0x218>
 800a388:	2b10      	cmp	r3, #16
 800a38a:	bfde      	ittt	le
 800a38c:	9e08      	ldrle	r6, [sp, #32]
 800a38e:	434e      	mulle	r6, r1
 800a390:	9608      	strle	r6, [sp, #32]
 800a392:	e7e1      	b.n	800a358 <_strtod_l+0x218>
 800a394:	280f      	cmp	r0, #15
 800a396:	dceb      	bgt.n	800a370 <_strtod_l+0x230>
 800a398:	9808      	ldr	r0, [sp, #32]
 800a39a:	230a      	movs	r3, #10
 800a39c:	fb03 2300 	mla	r3, r3, r0, r2
 800a3a0:	9308      	str	r3, [sp, #32]
 800a3a2:	e7e5      	b.n	800a370 <_strtod_l+0x230>
 800a3a4:	4629      	mov	r1, r5
 800a3a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a3a8:	460d      	mov	r5, r1
 800a3aa:	1c50      	adds	r0, r2, #1
 800a3ac:	9019      	str	r0, [sp, #100]	@ 0x64
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	7852      	ldrb	r2, [r2, #1]
 800a3b2:	e7b1      	b.n	800a318 <_strtod_l+0x1d8>
 800a3b4:	f04f 0900 	mov.w	r9, #0
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e77c      	b.n	800a2b6 <_strtod_l+0x176>
 800a3bc:	f04f 0c00 	mov.w	ip, #0
 800a3c0:	1ca2      	adds	r2, r4, #2
 800a3c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a3c4:	78a2      	ldrb	r2, [r4, #2]
 800a3c6:	e784      	b.n	800a2d2 <_strtod_l+0x192>
 800a3c8:	f04f 0c01 	mov.w	ip, #1
 800a3cc:	e7f8      	b.n	800a3c0 <_strtod_l+0x280>
 800a3ce:	bf00      	nop
 800a3d0:	0800c120 	.word	0x0800c120
 800a3d4:	0800c108 	.word	0x0800c108
 800a3d8:	7ff00000 	.word	0x7ff00000
 800a3dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a3de:	1c51      	adds	r1, r2, #1
 800a3e0:	9119      	str	r1, [sp, #100]	@ 0x64
 800a3e2:	7852      	ldrb	r2, [r2, #1]
 800a3e4:	2a30      	cmp	r2, #48	@ 0x30
 800a3e6:	d0f9      	beq.n	800a3dc <_strtod_l+0x29c>
 800a3e8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a3ec:	2908      	cmp	r1, #8
 800a3ee:	f63f af76 	bhi.w	800a2de <_strtod_l+0x19e>
 800a3f2:	3a30      	subs	r2, #48	@ 0x30
 800a3f4:	f04f 080a 	mov.w	r8, #10
 800a3f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a3fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a3fc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a3fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a400:	1c56      	adds	r6, r2, #1
 800a402:	9619      	str	r6, [sp, #100]	@ 0x64
 800a404:	7852      	ldrb	r2, [r2, #1]
 800a406:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a40a:	f1be 0f09 	cmp.w	lr, #9
 800a40e:	d939      	bls.n	800a484 <_strtod_l+0x344>
 800a410:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a412:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a416:	1a76      	subs	r6, r6, r1
 800a418:	2e08      	cmp	r6, #8
 800a41a:	dc03      	bgt.n	800a424 <_strtod_l+0x2e4>
 800a41c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a41e:	4588      	cmp	r8, r1
 800a420:	bfa8      	it	ge
 800a422:	4688      	movge	r8, r1
 800a424:	f1bc 0f00 	cmp.w	ip, #0
 800a428:	d001      	beq.n	800a42e <_strtod_l+0x2ee>
 800a42a:	f1c8 0800 	rsb	r8, r8, #0
 800a42e:	2d00      	cmp	r5, #0
 800a430:	d14e      	bne.n	800a4d0 <_strtod_l+0x390>
 800a432:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a434:	4308      	orrs	r0, r1
 800a436:	f47f aebc 	bne.w	800a1b2 <_strtod_l+0x72>
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	f47f aed4 	bne.w	800a1e8 <_strtod_l+0xa8>
 800a440:	2a69      	cmp	r2, #105	@ 0x69
 800a442:	d028      	beq.n	800a496 <_strtod_l+0x356>
 800a444:	dc25      	bgt.n	800a492 <_strtod_l+0x352>
 800a446:	2a49      	cmp	r2, #73	@ 0x49
 800a448:	d025      	beq.n	800a496 <_strtod_l+0x356>
 800a44a:	2a4e      	cmp	r2, #78	@ 0x4e
 800a44c:	f47f aecc 	bne.w	800a1e8 <_strtod_l+0xa8>
 800a450:	499b      	ldr	r1, [pc, #620]	@ (800a6c0 <_strtod_l+0x580>)
 800a452:	a819      	add	r0, sp, #100	@ 0x64
 800a454:	f001 fa6c 	bl	800b930 <__match>
 800a458:	2800      	cmp	r0, #0
 800a45a:	f43f aec5 	beq.w	800a1e8 <_strtod_l+0xa8>
 800a45e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	2b28      	cmp	r3, #40	@ 0x28
 800a464:	d12e      	bne.n	800a4c4 <_strtod_l+0x384>
 800a466:	aa1c      	add	r2, sp, #112	@ 0x70
 800a468:	4996      	ldr	r1, [pc, #600]	@ (800a6c4 <_strtod_l+0x584>)
 800a46a:	a819      	add	r0, sp, #100	@ 0x64
 800a46c:	f001 fa74 	bl	800b958 <__hexnan>
 800a470:	2805      	cmp	r0, #5
 800a472:	d127      	bne.n	800a4c4 <_strtod_l+0x384>
 800a474:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a476:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a47a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a47e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a482:	e696      	b.n	800a1b2 <_strtod_l+0x72>
 800a484:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a486:	fb08 2101 	mla	r1, r8, r1, r2
 800a48a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a48e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a490:	e7b5      	b.n	800a3fe <_strtod_l+0x2be>
 800a492:	2a6e      	cmp	r2, #110	@ 0x6e
 800a494:	e7da      	b.n	800a44c <_strtod_l+0x30c>
 800a496:	498c      	ldr	r1, [pc, #560]	@ (800a6c8 <_strtod_l+0x588>)
 800a498:	a819      	add	r0, sp, #100	@ 0x64
 800a49a:	f001 fa49 	bl	800b930 <__match>
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	f43f aea2 	beq.w	800a1e8 <_strtod_l+0xa8>
 800a4a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4a6:	a819      	add	r0, sp, #100	@ 0x64
 800a4a8:	4988      	ldr	r1, [pc, #544]	@ (800a6cc <_strtod_l+0x58c>)
 800a4aa:	3b01      	subs	r3, #1
 800a4ac:	9319      	str	r3, [sp, #100]	@ 0x64
 800a4ae:	f001 fa3f 	bl	800b930 <__match>
 800a4b2:	b910      	cbnz	r0, 800a4ba <_strtod_l+0x37a>
 800a4b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	9319      	str	r3, [sp, #100]	@ 0x64
 800a4ba:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a6dc <_strtod_l+0x59c>
 800a4be:	f04f 0a00 	mov.w	sl, #0
 800a4c2:	e676      	b.n	800a1b2 <_strtod_l+0x72>
 800a4c4:	4882      	ldr	r0, [pc, #520]	@ (800a6d0 <_strtod_l+0x590>)
 800a4c6:	f000 ff73 	bl	800b3b0 <nan>
 800a4ca:	ec5b ab10 	vmov	sl, fp, d0
 800a4ce:	e670      	b.n	800a1b2 <_strtod_l+0x72>
 800a4d0:	eba8 0309 	sub.w	r3, r8, r9
 800a4d4:	2f00      	cmp	r7, #0
 800a4d6:	bf08      	it	eq
 800a4d8:	462f      	moveq	r7, r5
 800a4da:	2d10      	cmp	r5, #16
 800a4dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a4de:	462c      	mov	r4, r5
 800a4e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4e2:	bfa8      	it	ge
 800a4e4:	2410      	movge	r4, #16
 800a4e6:	f7f6 f821 	bl	800052c <__aeabi_ui2d>
 800a4ea:	2d09      	cmp	r5, #9
 800a4ec:	4682      	mov	sl, r0
 800a4ee:	468b      	mov	fp, r1
 800a4f0:	dc13      	bgt.n	800a51a <_strtod_l+0x3da>
 800a4f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f43f ae5c 	beq.w	800a1b2 <_strtod_l+0x72>
 800a4fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4fc:	dd78      	ble.n	800a5f0 <_strtod_l+0x4b0>
 800a4fe:	2b16      	cmp	r3, #22
 800a500:	dc5f      	bgt.n	800a5c2 <_strtod_l+0x482>
 800a502:	4974      	ldr	r1, [pc, #464]	@ (800a6d4 <_strtod_l+0x594>)
 800a504:	4652      	mov	r2, sl
 800a506:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a50a:	465b      	mov	r3, fp
 800a50c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a510:	f7f6 f886 	bl	8000620 <__aeabi_dmul>
 800a514:	4682      	mov	sl, r0
 800a516:	468b      	mov	fp, r1
 800a518:	e64b      	b.n	800a1b2 <_strtod_l+0x72>
 800a51a:	4b6e      	ldr	r3, [pc, #440]	@ (800a6d4 <_strtod_l+0x594>)
 800a51c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a520:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a524:	f7f6 f87c 	bl	8000620 <__aeabi_dmul>
 800a528:	4682      	mov	sl, r0
 800a52a:	468b      	mov	fp, r1
 800a52c:	9808      	ldr	r0, [sp, #32]
 800a52e:	f7f5 fffd 	bl	800052c <__aeabi_ui2d>
 800a532:	4602      	mov	r2, r0
 800a534:	460b      	mov	r3, r1
 800a536:	4650      	mov	r0, sl
 800a538:	4659      	mov	r1, fp
 800a53a:	f7f5 febb 	bl	80002b4 <__adddf3>
 800a53e:	2d0f      	cmp	r5, #15
 800a540:	4682      	mov	sl, r0
 800a542:	468b      	mov	fp, r1
 800a544:	ddd5      	ble.n	800a4f2 <_strtod_l+0x3b2>
 800a546:	1b2c      	subs	r4, r5, r4
 800a548:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a54a:	441c      	add	r4, r3
 800a54c:	2c00      	cmp	r4, #0
 800a54e:	f340 8096 	ble.w	800a67e <_strtod_l+0x53e>
 800a552:	f014 030f 	ands.w	r3, r4, #15
 800a556:	d00a      	beq.n	800a56e <_strtod_l+0x42e>
 800a558:	495e      	ldr	r1, [pc, #376]	@ (800a6d4 <_strtod_l+0x594>)
 800a55a:	4652      	mov	r2, sl
 800a55c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a560:	465b      	mov	r3, fp
 800a562:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a566:	f7f6 f85b 	bl	8000620 <__aeabi_dmul>
 800a56a:	4682      	mov	sl, r0
 800a56c:	468b      	mov	fp, r1
 800a56e:	f034 040f 	bics.w	r4, r4, #15
 800a572:	d073      	beq.n	800a65c <_strtod_l+0x51c>
 800a574:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a578:	dd48      	ble.n	800a60c <_strtod_l+0x4cc>
 800a57a:	2400      	movs	r4, #0
 800a57c:	46a0      	mov	r8, r4
 800a57e:	46a1      	mov	r9, r4
 800a580:	940a      	str	r4, [sp, #40]	@ 0x28
 800a582:	2322      	movs	r3, #34	@ 0x22
 800a584:	9a05      	ldr	r2, [sp, #20]
 800a586:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a6dc <_strtod_l+0x59c>
 800a58a:	f04f 0a00 	mov.w	sl, #0
 800a58e:	6013      	str	r3, [r2, #0]
 800a590:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a592:	2b00      	cmp	r3, #0
 800a594:	f43f ae0d 	beq.w	800a1b2 <_strtod_l+0x72>
 800a598:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a59a:	9805      	ldr	r0, [sp, #20]
 800a59c:	f7ff f934 	bl	8009808 <_Bfree>
 800a5a0:	4649      	mov	r1, r9
 800a5a2:	9805      	ldr	r0, [sp, #20]
 800a5a4:	f7ff f930 	bl	8009808 <_Bfree>
 800a5a8:	4641      	mov	r1, r8
 800a5aa:	9805      	ldr	r0, [sp, #20]
 800a5ac:	f7ff f92c 	bl	8009808 <_Bfree>
 800a5b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a5b2:	9805      	ldr	r0, [sp, #20]
 800a5b4:	f7ff f928 	bl	8009808 <_Bfree>
 800a5b8:	4621      	mov	r1, r4
 800a5ba:	9805      	ldr	r0, [sp, #20]
 800a5bc:	f7ff f924 	bl	8009808 <_Bfree>
 800a5c0:	e5f7      	b.n	800a1b2 <_strtod_l+0x72>
 800a5c2:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a5c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	dbbc      	blt.n	800a546 <_strtod_l+0x406>
 800a5cc:	f1c5 050f 	rsb	r5, r5, #15
 800a5d0:	4c40      	ldr	r4, [pc, #256]	@ (800a6d4 <_strtod_l+0x594>)
 800a5d2:	4652      	mov	r2, sl
 800a5d4:	465b      	mov	r3, fp
 800a5d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a5da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5de:	f7f6 f81f 	bl	8000620 <__aeabi_dmul>
 800a5e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5e4:	1b5d      	subs	r5, r3, r5
 800a5e6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a5ea:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a5ee:	e78f      	b.n	800a510 <_strtod_l+0x3d0>
 800a5f0:	3316      	adds	r3, #22
 800a5f2:	dba8      	blt.n	800a546 <_strtod_l+0x406>
 800a5f4:	eba9 0808 	sub.w	r8, r9, r8
 800a5f8:	4b36      	ldr	r3, [pc, #216]	@ (800a6d4 <_strtod_l+0x594>)
 800a5fa:	4650      	mov	r0, sl
 800a5fc:	4659      	mov	r1, fp
 800a5fe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a602:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a606:	f7f6 f935 	bl	8000874 <__aeabi_ddiv>
 800a60a:	e783      	b.n	800a514 <_strtod_l+0x3d4>
 800a60c:	4b32      	ldr	r3, [pc, #200]	@ (800a6d8 <_strtod_l+0x598>)
 800a60e:	1124      	asrs	r4, r4, #4
 800a610:	4650      	mov	r0, sl
 800a612:	4659      	mov	r1, fp
 800a614:	9308      	str	r3, [sp, #32]
 800a616:	2300      	movs	r3, #0
 800a618:	461e      	mov	r6, r3
 800a61a:	2c01      	cmp	r4, #1
 800a61c:	dc21      	bgt.n	800a662 <_strtod_l+0x522>
 800a61e:	b10b      	cbz	r3, 800a624 <_strtod_l+0x4e4>
 800a620:	4682      	mov	sl, r0
 800a622:	468b      	mov	fp, r1
 800a624:	492c      	ldr	r1, [pc, #176]	@ (800a6d8 <_strtod_l+0x598>)
 800a626:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a62a:	4652      	mov	r2, sl
 800a62c:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a630:	465b      	mov	r3, fp
 800a632:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a636:	f7f5 fff3 	bl	8000620 <__aeabi_dmul>
 800a63a:	4b28      	ldr	r3, [pc, #160]	@ (800a6dc <_strtod_l+0x59c>)
 800a63c:	460a      	mov	r2, r1
 800a63e:	4682      	mov	sl, r0
 800a640:	400b      	ands	r3, r1
 800a642:	4927      	ldr	r1, [pc, #156]	@ (800a6e0 <_strtod_l+0x5a0>)
 800a644:	428b      	cmp	r3, r1
 800a646:	d898      	bhi.n	800a57a <_strtod_l+0x43a>
 800a648:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a64c:	428b      	cmp	r3, r1
 800a64e:	bf86      	itte	hi
 800a650:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a6e4 <_strtod_l+0x5a4>
 800a654:	f04f 3aff 	movhi.w	sl, #4294967295
 800a658:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a65c:	2300      	movs	r3, #0
 800a65e:	9308      	str	r3, [sp, #32]
 800a660:	e07a      	b.n	800a758 <_strtod_l+0x618>
 800a662:	07e2      	lsls	r2, r4, #31
 800a664:	d505      	bpl.n	800a672 <_strtod_l+0x532>
 800a666:	9b08      	ldr	r3, [sp, #32]
 800a668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66c:	f7f5 ffd8 	bl	8000620 <__aeabi_dmul>
 800a670:	2301      	movs	r3, #1
 800a672:	9a08      	ldr	r2, [sp, #32]
 800a674:	3601      	adds	r6, #1
 800a676:	1064      	asrs	r4, r4, #1
 800a678:	3208      	adds	r2, #8
 800a67a:	9208      	str	r2, [sp, #32]
 800a67c:	e7cd      	b.n	800a61a <_strtod_l+0x4da>
 800a67e:	d0ed      	beq.n	800a65c <_strtod_l+0x51c>
 800a680:	4264      	negs	r4, r4
 800a682:	f014 020f 	ands.w	r2, r4, #15
 800a686:	d00a      	beq.n	800a69e <_strtod_l+0x55e>
 800a688:	4b12      	ldr	r3, [pc, #72]	@ (800a6d4 <_strtod_l+0x594>)
 800a68a:	4650      	mov	r0, sl
 800a68c:	4659      	mov	r1, fp
 800a68e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a696:	f7f6 f8ed 	bl	8000874 <__aeabi_ddiv>
 800a69a:	4682      	mov	sl, r0
 800a69c:	468b      	mov	fp, r1
 800a69e:	1124      	asrs	r4, r4, #4
 800a6a0:	d0dc      	beq.n	800a65c <_strtod_l+0x51c>
 800a6a2:	2c1f      	cmp	r4, #31
 800a6a4:	dd20      	ble.n	800a6e8 <_strtod_l+0x5a8>
 800a6a6:	2400      	movs	r4, #0
 800a6a8:	46a0      	mov	r8, r4
 800a6aa:	46a1      	mov	r9, r4
 800a6ac:	940a      	str	r4, [sp, #40]	@ 0x28
 800a6ae:	2322      	movs	r3, #34	@ 0x22
 800a6b0:	9a05      	ldr	r2, [sp, #20]
 800a6b2:	f04f 0a00 	mov.w	sl, #0
 800a6b6:	f04f 0b00 	mov.w	fp, #0
 800a6ba:	6013      	str	r3, [r2, #0]
 800a6bc:	e768      	b.n	800a590 <_strtod_l+0x450>
 800a6be:	bf00      	nop
 800a6c0:	0800bef5 	.word	0x0800bef5
 800a6c4:	0800c10c 	.word	0x0800c10c
 800a6c8:	0800beed 	.word	0x0800beed
 800a6cc:	0800bf24 	.word	0x0800bf24
 800a6d0:	0800c2b5 	.word	0x0800c2b5
 800a6d4:	0800c040 	.word	0x0800c040
 800a6d8:	0800c018 	.word	0x0800c018
 800a6dc:	7ff00000 	.word	0x7ff00000
 800a6e0:	7ca00000 	.word	0x7ca00000
 800a6e4:	7fefffff 	.word	0x7fefffff
 800a6e8:	f014 0310 	ands.w	r3, r4, #16
 800a6ec:	4650      	mov	r0, sl
 800a6ee:	4659      	mov	r1, fp
 800a6f0:	4ea9      	ldr	r6, [pc, #676]	@ (800a998 <_strtod_l+0x858>)
 800a6f2:	bf18      	it	ne
 800a6f4:	236a      	movne	r3, #106	@ 0x6a
 800a6f6:	9308      	str	r3, [sp, #32]
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	07e2      	lsls	r2, r4, #31
 800a6fc:	d504      	bpl.n	800a708 <_strtod_l+0x5c8>
 800a6fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a702:	f7f5 ff8d 	bl	8000620 <__aeabi_dmul>
 800a706:	2301      	movs	r3, #1
 800a708:	1064      	asrs	r4, r4, #1
 800a70a:	f106 0608 	add.w	r6, r6, #8
 800a70e:	d1f4      	bne.n	800a6fa <_strtod_l+0x5ba>
 800a710:	b10b      	cbz	r3, 800a716 <_strtod_l+0x5d6>
 800a712:	4682      	mov	sl, r0
 800a714:	468b      	mov	fp, r1
 800a716:	9b08      	ldr	r3, [sp, #32]
 800a718:	b1b3      	cbz	r3, 800a748 <_strtod_l+0x608>
 800a71a:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a71e:	4659      	mov	r1, fp
 800a720:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a724:	2b00      	cmp	r3, #0
 800a726:	dd0f      	ble.n	800a748 <_strtod_l+0x608>
 800a728:	2b1f      	cmp	r3, #31
 800a72a:	dd55      	ble.n	800a7d8 <_strtod_l+0x698>
 800a72c:	2b34      	cmp	r3, #52	@ 0x34
 800a72e:	f04f 0a00 	mov.w	sl, #0
 800a732:	bfdb      	ittet	le
 800a734:	f04f 33ff 	movle.w	r3, #4294967295
 800a738:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a73c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a740:	4093      	lslle	r3, r2
 800a742:	bfd8      	it	le
 800a744:	ea03 0b01 	andle.w	fp, r3, r1
 800a748:	2200      	movs	r2, #0
 800a74a:	2300      	movs	r3, #0
 800a74c:	4650      	mov	r0, sl
 800a74e:	4659      	mov	r1, fp
 800a750:	f7f6 f9ce 	bl	8000af0 <__aeabi_dcmpeq>
 800a754:	2800      	cmp	r0, #0
 800a756:	d1a6      	bne.n	800a6a6 <_strtod_l+0x566>
 800a758:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a75a:	463a      	mov	r2, r7
 800a75c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a75e:	9300      	str	r3, [sp, #0]
 800a760:	462b      	mov	r3, r5
 800a762:	9805      	ldr	r0, [sp, #20]
 800a764:	f7ff f8ba 	bl	80098dc <__s2b>
 800a768:	900a      	str	r0, [sp, #40]	@ 0x28
 800a76a:	2800      	cmp	r0, #0
 800a76c:	f43f af05 	beq.w	800a57a <_strtod_l+0x43a>
 800a770:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a772:	eba9 0308 	sub.w	r3, r9, r8
 800a776:	2400      	movs	r4, #0
 800a778:	2a00      	cmp	r2, #0
 800a77a:	46a0      	mov	r8, r4
 800a77c:	bfa8      	it	ge
 800a77e:	2300      	movge	r3, #0
 800a780:	9312      	str	r3, [sp, #72]	@ 0x48
 800a782:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a786:	9316      	str	r3, [sp, #88]	@ 0x58
 800a788:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a78a:	9805      	ldr	r0, [sp, #20]
 800a78c:	6859      	ldr	r1, [r3, #4]
 800a78e:	f7fe fffb 	bl	8009788 <_Balloc>
 800a792:	4681      	mov	r9, r0
 800a794:	2800      	cmp	r0, #0
 800a796:	f43f aef4 	beq.w	800a582 <_strtod_l+0x442>
 800a79a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a79c:	300c      	adds	r0, #12
 800a79e:	691a      	ldr	r2, [r3, #16]
 800a7a0:	f103 010c 	add.w	r1, r3, #12
 800a7a4:	3202      	adds	r2, #2
 800a7a6:	0092      	lsls	r2, r2, #2
 800a7a8:	f000 fdf4 	bl	800b394 <memcpy>
 800a7ac:	aa1c      	add	r2, sp, #112	@ 0x70
 800a7ae:	a91b      	add	r1, sp, #108	@ 0x6c
 800a7b0:	9805      	ldr	r0, [sp, #20]
 800a7b2:	ec4b ab10 	vmov	d0, sl, fp
 800a7b6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a7ba:	f7ff fbd3 	bl	8009f64 <__d2b>
 800a7be:	901a      	str	r0, [sp, #104]	@ 0x68
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	f43f aede 	beq.w	800a582 <_strtod_l+0x442>
 800a7c6:	2101      	movs	r1, #1
 800a7c8:	9805      	ldr	r0, [sp, #20]
 800a7ca:	f7ff f91d 	bl	8009a08 <__i2b>
 800a7ce:	4680      	mov	r8, r0
 800a7d0:	b948      	cbnz	r0, 800a7e6 <_strtod_l+0x6a6>
 800a7d2:	f04f 0800 	mov.w	r8, #0
 800a7d6:	e6d4      	b.n	800a582 <_strtod_l+0x442>
 800a7d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a7e0:	ea03 0a0a 	and.w	sl, r3, sl
 800a7e4:	e7b0      	b.n	800a748 <_strtod_l+0x608>
 800a7e6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a7e8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a7ea:	2d00      	cmp	r5, #0
 800a7ec:	bfa9      	itett	ge
 800a7ee:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a7f0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a7f2:	18ef      	addge	r7, r5, r3
 800a7f4:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a7f6:	bfb8      	it	lt
 800a7f8:	1b5e      	sublt	r6, r3, r5
 800a7fa:	9b08      	ldr	r3, [sp, #32]
 800a7fc:	bfb8      	it	lt
 800a7fe:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a800:	1aed      	subs	r5, r5, r3
 800a802:	4b66      	ldr	r3, [pc, #408]	@ (800a99c <_strtod_l+0x85c>)
 800a804:	4415      	add	r5, r2
 800a806:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a80a:	3d01      	subs	r5, #1
 800a80c:	429d      	cmp	r5, r3
 800a80e:	da4f      	bge.n	800a8b0 <_strtod_l+0x770>
 800a810:	1b5b      	subs	r3, r3, r5
 800a812:	2101      	movs	r1, #1
 800a814:	2b1f      	cmp	r3, #31
 800a816:	eba2 0203 	sub.w	r2, r2, r3
 800a81a:	dc3d      	bgt.n	800a898 <_strtod_l+0x758>
 800a81c:	fa01 f303 	lsl.w	r3, r1, r3
 800a820:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a822:	2300      	movs	r3, #0
 800a824:	9310      	str	r3, [sp, #64]	@ 0x40
 800a826:	18bd      	adds	r5, r7, r2
 800a828:	9b08      	ldr	r3, [sp, #32]
 800a82a:	4416      	add	r6, r2
 800a82c:	42af      	cmp	r7, r5
 800a82e:	441e      	add	r6, r3
 800a830:	463b      	mov	r3, r7
 800a832:	bfa8      	it	ge
 800a834:	462b      	movge	r3, r5
 800a836:	42b3      	cmp	r3, r6
 800a838:	bfa8      	it	ge
 800a83a:	4633      	movge	r3, r6
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	bfc2      	ittt	gt
 800a840:	1aed      	subgt	r5, r5, r3
 800a842:	1af6      	subgt	r6, r6, r3
 800a844:	1aff      	subgt	r7, r7, r3
 800a846:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a848:	2b00      	cmp	r3, #0
 800a84a:	dd16      	ble.n	800a87a <_strtod_l+0x73a>
 800a84c:	4641      	mov	r1, r8
 800a84e:	461a      	mov	r2, r3
 800a850:	9805      	ldr	r0, [sp, #20]
 800a852:	f7ff f999 	bl	8009b88 <__pow5mult>
 800a856:	4680      	mov	r8, r0
 800a858:	2800      	cmp	r0, #0
 800a85a:	d0ba      	beq.n	800a7d2 <_strtod_l+0x692>
 800a85c:	4601      	mov	r1, r0
 800a85e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a860:	9805      	ldr	r0, [sp, #20]
 800a862:	f7ff f8e7 	bl	8009a34 <__multiply>
 800a866:	900e      	str	r0, [sp, #56]	@ 0x38
 800a868:	2800      	cmp	r0, #0
 800a86a:	f43f ae8a 	beq.w	800a582 <_strtod_l+0x442>
 800a86e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a870:	9805      	ldr	r0, [sp, #20]
 800a872:	f7fe ffc9 	bl	8009808 <_Bfree>
 800a876:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a878:	931a      	str	r3, [sp, #104]	@ 0x68
 800a87a:	2d00      	cmp	r5, #0
 800a87c:	dc1d      	bgt.n	800a8ba <_strtod_l+0x77a>
 800a87e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a880:	2b00      	cmp	r3, #0
 800a882:	dd23      	ble.n	800a8cc <_strtod_l+0x78c>
 800a884:	4649      	mov	r1, r9
 800a886:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a888:	9805      	ldr	r0, [sp, #20]
 800a88a:	f7ff f97d 	bl	8009b88 <__pow5mult>
 800a88e:	4681      	mov	r9, r0
 800a890:	b9e0      	cbnz	r0, 800a8cc <_strtod_l+0x78c>
 800a892:	f04f 0900 	mov.w	r9, #0
 800a896:	e674      	b.n	800a582 <_strtod_l+0x442>
 800a898:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a89c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a89e:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a8a2:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a8a6:	35e2      	adds	r5, #226	@ 0xe2
 800a8a8:	fa01 f305 	lsl.w	r3, r1, r5
 800a8ac:	9310      	str	r3, [sp, #64]	@ 0x40
 800a8ae:	e7ba      	b.n	800a826 <_strtod_l+0x6e6>
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	9310      	str	r3, [sp, #64]	@ 0x40
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a8b8:	e7b5      	b.n	800a826 <_strtod_l+0x6e6>
 800a8ba:	462a      	mov	r2, r5
 800a8bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a8be:	9805      	ldr	r0, [sp, #20]
 800a8c0:	f7ff f9bc 	bl	8009c3c <__lshift>
 800a8c4:	901a      	str	r0, [sp, #104]	@ 0x68
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	d1d9      	bne.n	800a87e <_strtod_l+0x73e>
 800a8ca:	e65a      	b.n	800a582 <_strtod_l+0x442>
 800a8cc:	2e00      	cmp	r6, #0
 800a8ce:	dd07      	ble.n	800a8e0 <_strtod_l+0x7a0>
 800a8d0:	4649      	mov	r1, r9
 800a8d2:	4632      	mov	r2, r6
 800a8d4:	9805      	ldr	r0, [sp, #20]
 800a8d6:	f7ff f9b1 	bl	8009c3c <__lshift>
 800a8da:	4681      	mov	r9, r0
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	d0d8      	beq.n	800a892 <_strtod_l+0x752>
 800a8e0:	2f00      	cmp	r7, #0
 800a8e2:	dd08      	ble.n	800a8f6 <_strtod_l+0x7b6>
 800a8e4:	4641      	mov	r1, r8
 800a8e6:	463a      	mov	r2, r7
 800a8e8:	9805      	ldr	r0, [sp, #20]
 800a8ea:	f7ff f9a7 	bl	8009c3c <__lshift>
 800a8ee:	4680      	mov	r8, r0
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	f43f ae46 	beq.w	800a582 <_strtod_l+0x442>
 800a8f6:	464a      	mov	r2, r9
 800a8f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a8fa:	9805      	ldr	r0, [sp, #20]
 800a8fc:	f7ff fa26 	bl	8009d4c <__mdiff>
 800a900:	4604      	mov	r4, r0
 800a902:	2800      	cmp	r0, #0
 800a904:	f43f ae3d 	beq.w	800a582 <_strtod_l+0x442>
 800a908:	68c3      	ldr	r3, [r0, #12]
 800a90a:	4641      	mov	r1, r8
 800a90c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a90e:	2300      	movs	r3, #0
 800a910:	60c3      	str	r3, [r0, #12]
 800a912:	f7ff f9ff 	bl	8009d14 <__mcmp>
 800a916:	2800      	cmp	r0, #0
 800a918:	da46      	bge.n	800a9a8 <_strtod_l+0x868>
 800a91a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a91c:	ea53 030a 	orrs.w	r3, r3, sl
 800a920:	d16c      	bne.n	800a9fc <_strtod_l+0x8bc>
 800a922:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a926:	2b00      	cmp	r3, #0
 800a928:	d168      	bne.n	800a9fc <_strtod_l+0x8bc>
 800a92a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a92e:	0d1b      	lsrs	r3, r3, #20
 800a930:	051b      	lsls	r3, r3, #20
 800a932:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a936:	d961      	bls.n	800a9fc <_strtod_l+0x8bc>
 800a938:	6963      	ldr	r3, [r4, #20]
 800a93a:	b913      	cbnz	r3, 800a942 <_strtod_l+0x802>
 800a93c:	6923      	ldr	r3, [r4, #16]
 800a93e:	2b01      	cmp	r3, #1
 800a940:	dd5c      	ble.n	800a9fc <_strtod_l+0x8bc>
 800a942:	4621      	mov	r1, r4
 800a944:	2201      	movs	r2, #1
 800a946:	9805      	ldr	r0, [sp, #20]
 800a948:	f7ff f978 	bl	8009c3c <__lshift>
 800a94c:	4641      	mov	r1, r8
 800a94e:	4604      	mov	r4, r0
 800a950:	f7ff f9e0 	bl	8009d14 <__mcmp>
 800a954:	2800      	cmp	r0, #0
 800a956:	dd51      	ble.n	800a9fc <_strtod_l+0x8bc>
 800a958:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a95c:	9a08      	ldr	r2, [sp, #32]
 800a95e:	0d1b      	lsrs	r3, r3, #20
 800a960:	051b      	lsls	r3, r3, #20
 800a962:	2a00      	cmp	r2, #0
 800a964:	d06b      	beq.n	800aa3e <_strtod_l+0x8fe>
 800a966:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a96a:	d868      	bhi.n	800aa3e <_strtod_l+0x8fe>
 800a96c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a970:	f67f ae9d 	bls.w	800a6ae <_strtod_l+0x56e>
 800a974:	4b0a      	ldr	r3, [pc, #40]	@ (800a9a0 <_strtod_l+0x860>)
 800a976:	4650      	mov	r0, sl
 800a978:	4659      	mov	r1, fp
 800a97a:	2200      	movs	r2, #0
 800a97c:	f7f5 fe50 	bl	8000620 <__aeabi_dmul>
 800a980:	4b08      	ldr	r3, [pc, #32]	@ (800a9a4 <_strtod_l+0x864>)
 800a982:	4682      	mov	sl, r0
 800a984:	468b      	mov	fp, r1
 800a986:	400b      	ands	r3, r1
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f47f ae05 	bne.w	800a598 <_strtod_l+0x458>
 800a98e:	2322      	movs	r3, #34	@ 0x22
 800a990:	9a05      	ldr	r2, [sp, #20]
 800a992:	6013      	str	r3, [r2, #0]
 800a994:	e600      	b.n	800a598 <_strtod_l+0x458>
 800a996:	bf00      	nop
 800a998:	0800c138 	.word	0x0800c138
 800a99c:	fffffc02 	.word	0xfffffc02
 800a9a0:	39500000 	.word	0x39500000
 800a9a4:	7ff00000 	.word	0x7ff00000
 800a9a8:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a9ac:	d165      	bne.n	800aa7a <_strtod_l+0x93a>
 800a9ae:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a9b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a9b4:	b35a      	cbz	r2, 800aa0e <_strtod_l+0x8ce>
 800a9b6:	4a9e      	ldr	r2, [pc, #632]	@ (800ac30 <_strtod_l+0xaf0>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d12b      	bne.n	800aa14 <_strtod_l+0x8d4>
 800a9bc:	9b08      	ldr	r3, [sp, #32]
 800a9be:	4651      	mov	r1, sl
 800a9c0:	b303      	cbz	r3, 800aa04 <_strtod_l+0x8c4>
 800a9c2:	465a      	mov	r2, fp
 800a9c4:	4b9b      	ldr	r3, [pc, #620]	@ (800ac34 <_strtod_l+0xaf4>)
 800a9c6:	4013      	ands	r3, r2
 800a9c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a9cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a9d0:	d81b      	bhi.n	800aa0a <_strtod_l+0x8ca>
 800a9d2:	0d1b      	lsrs	r3, r3, #20
 800a9d4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a9d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a9dc:	4299      	cmp	r1, r3
 800a9de:	d119      	bne.n	800aa14 <_strtod_l+0x8d4>
 800a9e0:	4b95      	ldr	r3, [pc, #596]	@ (800ac38 <_strtod_l+0xaf8>)
 800a9e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d102      	bne.n	800a9ee <_strtod_l+0x8ae>
 800a9e8:	3101      	adds	r1, #1
 800a9ea:	f43f adca 	beq.w	800a582 <_strtod_l+0x442>
 800a9ee:	4b91      	ldr	r3, [pc, #580]	@ (800ac34 <_strtod_l+0xaf4>)
 800a9f0:	f04f 0a00 	mov.w	sl, #0
 800a9f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9f6:	401a      	ands	r2, r3
 800a9f8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a9fc:	9b08      	ldr	r3, [sp, #32]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d1b8      	bne.n	800a974 <_strtod_l+0x834>
 800aa02:	e5c9      	b.n	800a598 <_strtod_l+0x458>
 800aa04:	f04f 33ff 	mov.w	r3, #4294967295
 800aa08:	e7e8      	b.n	800a9dc <_strtod_l+0x89c>
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	e7e6      	b.n	800a9dc <_strtod_l+0x89c>
 800aa0e:	ea53 030a 	orrs.w	r3, r3, sl
 800aa12:	d0a1      	beq.n	800a958 <_strtod_l+0x818>
 800aa14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aa16:	b1db      	cbz	r3, 800aa50 <_strtod_l+0x910>
 800aa18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa1a:	4213      	tst	r3, r2
 800aa1c:	d0ee      	beq.n	800a9fc <_strtod_l+0x8bc>
 800aa1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa20:	4650      	mov	r0, sl
 800aa22:	9a08      	ldr	r2, [sp, #32]
 800aa24:	4659      	mov	r1, fp
 800aa26:	b1bb      	cbz	r3, 800aa58 <_strtod_l+0x918>
 800aa28:	f7ff fb6a 	bl	800a100 <sulp>
 800aa2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa30:	ec53 2b10 	vmov	r2, r3, d0
 800aa34:	f7f5 fc3e 	bl	80002b4 <__adddf3>
 800aa38:	4682      	mov	sl, r0
 800aa3a:	468b      	mov	fp, r1
 800aa3c:	e7de      	b.n	800a9fc <_strtod_l+0x8bc>
 800aa3e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800aa42:	f04f 3aff 	mov.w	sl, #4294967295
 800aa46:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800aa4a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800aa4e:	e7d5      	b.n	800a9fc <_strtod_l+0x8bc>
 800aa50:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aa52:	ea13 0f0a 	tst.w	r3, sl
 800aa56:	e7e1      	b.n	800aa1c <_strtod_l+0x8dc>
 800aa58:	f7ff fb52 	bl	800a100 <sulp>
 800aa5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa60:	ec53 2b10 	vmov	r2, r3, d0
 800aa64:	f7f5 fc24 	bl	80002b0 <__aeabi_dsub>
 800aa68:	2200      	movs	r2, #0
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	4682      	mov	sl, r0
 800aa6e:	468b      	mov	fp, r1
 800aa70:	f7f6 f83e 	bl	8000af0 <__aeabi_dcmpeq>
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d0c1      	beq.n	800a9fc <_strtod_l+0x8bc>
 800aa78:	e619      	b.n	800a6ae <_strtod_l+0x56e>
 800aa7a:	4641      	mov	r1, r8
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	f7ff fac9 	bl	800a014 <__ratio>
 800aa82:	2200      	movs	r2, #0
 800aa84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aa88:	ec57 6b10 	vmov	r6, r7, d0
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	4639      	mov	r1, r7
 800aa90:	f7f6 f842 	bl	8000b18 <__aeabi_dcmple>
 800aa94:	2800      	cmp	r0, #0
 800aa96:	d06f      	beq.n	800ab78 <_strtod_l+0xa38>
 800aa98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d17a      	bne.n	800ab94 <_strtod_l+0xa54>
 800aa9e:	f1ba 0f00 	cmp.w	sl, #0
 800aaa2:	d158      	bne.n	800ab56 <_strtod_l+0xa16>
 800aaa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aaa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d15a      	bne.n	800ab64 <_strtod_l+0xa24>
 800aaae:	2200      	movs	r2, #0
 800aab0:	4b62      	ldr	r3, [pc, #392]	@ (800ac3c <_strtod_l+0xafc>)
 800aab2:	4630      	mov	r0, r6
 800aab4:	4639      	mov	r1, r7
 800aab6:	f7f6 f825 	bl	8000b04 <__aeabi_dcmplt>
 800aaba:	2800      	cmp	r0, #0
 800aabc:	d159      	bne.n	800ab72 <_strtod_l+0xa32>
 800aabe:	4630      	mov	r0, r6
 800aac0:	4639      	mov	r1, r7
 800aac2:	2200      	movs	r2, #0
 800aac4:	4b5e      	ldr	r3, [pc, #376]	@ (800ac40 <_strtod_l+0xb00>)
 800aac6:	f7f5 fdab 	bl	8000620 <__aeabi_dmul>
 800aaca:	4606      	mov	r6, r0
 800aacc:	460f      	mov	r7, r1
 800aace:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800aad2:	9606      	str	r6, [sp, #24]
 800aad4:	9307      	str	r3, [sp, #28]
 800aad6:	4d57      	ldr	r5, [pc, #348]	@ (800ac34 <_strtod_l+0xaf4>)
 800aad8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aadc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aae0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aae2:	401d      	ands	r5, r3
 800aae4:	4b57      	ldr	r3, [pc, #348]	@ (800ac44 <_strtod_l+0xb04>)
 800aae6:	429d      	cmp	r5, r3
 800aae8:	f040 80b0 	bne.w	800ac4c <_strtod_l+0xb0c>
 800aaec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aaee:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800aaf2:	ec4b ab10 	vmov	d0, sl, fp
 800aaf6:	f7ff f9c1 	bl	8009e7c <__ulp>
 800aafa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aafe:	ec51 0b10 	vmov	r0, r1, d0
 800ab02:	f7f5 fd8d 	bl	8000620 <__aeabi_dmul>
 800ab06:	4652      	mov	r2, sl
 800ab08:	465b      	mov	r3, fp
 800ab0a:	f7f5 fbd3 	bl	80002b4 <__adddf3>
 800ab0e:	460b      	mov	r3, r1
 800ab10:	4948      	ldr	r1, [pc, #288]	@ (800ac34 <_strtod_l+0xaf4>)
 800ab12:	4682      	mov	sl, r0
 800ab14:	4a4c      	ldr	r2, [pc, #304]	@ (800ac48 <_strtod_l+0xb08>)
 800ab16:	4019      	ands	r1, r3
 800ab18:	4291      	cmp	r1, r2
 800ab1a:	d942      	bls.n	800aba2 <_strtod_l+0xa62>
 800ab1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab1e:	4b46      	ldr	r3, [pc, #280]	@ (800ac38 <_strtod_l+0xaf8>)
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d103      	bne.n	800ab2c <_strtod_l+0x9ec>
 800ab24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab26:	3301      	adds	r3, #1
 800ab28:	f43f ad2b 	beq.w	800a582 <_strtod_l+0x442>
 800ab2c:	f8df b108 	ldr.w	fp, [pc, #264]	@ 800ac38 <_strtod_l+0xaf8>
 800ab30:	f04f 3aff 	mov.w	sl, #4294967295
 800ab34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab36:	9805      	ldr	r0, [sp, #20]
 800ab38:	f7fe fe66 	bl	8009808 <_Bfree>
 800ab3c:	4649      	mov	r1, r9
 800ab3e:	9805      	ldr	r0, [sp, #20]
 800ab40:	f7fe fe62 	bl	8009808 <_Bfree>
 800ab44:	4641      	mov	r1, r8
 800ab46:	9805      	ldr	r0, [sp, #20]
 800ab48:	f7fe fe5e 	bl	8009808 <_Bfree>
 800ab4c:	4621      	mov	r1, r4
 800ab4e:	9805      	ldr	r0, [sp, #20]
 800ab50:	f7fe fe5a 	bl	8009808 <_Bfree>
 800ab54:	e618      	b.n	800a788 <_strtod_l+0x648>
 800ab56:	f1ba 0f01 	cmp.w	sl, #1
 800ab5a:	d103      	bne.n	800ab64 <_strtod_l+0xa24>
 800ab5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	f43f ada5 	beq.w	800a6ae <_strtod_l+0x56e>
 800ab64:	2600      	movs	r6, #0
 800ab66:	4f35      	ldr	r7, [pc, #212]	@ (800ac3c <_strtod_l+0xafc>)
 800ab68:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 800ac10 <_strtod_l+0xad0>
 800ab6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ab70:	e7b1      	b.n	800aad6 <_strtod_l+0x996>
 800ab72:	2600      	movs	r6, #0
 800ab74:	4f32      	ldr	r7, [pc, #200]	@ (800ac40 <_strtod_l+0xb00>)
 800ab76:	e7aa      	b.n	800aace <_strtod_l+0x98e>
 800ab78:	4b31      	ldr	r3, [pc, #196]	@ (800ac40 <_strtod_l+0xb00>)
 800ab7a:	4630      	mov	r0, r6
 800ab7c:	4639      	mov	r1, r7
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f7f5 fd4e 	bl	8000620 <__aeabi_dmul>
 800ab84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab86:	4606      	mov	r6, r0
 800ab88:	460f      	mov	r7, r1
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d09f      	beq.n	800aace <_strtod_l+0x98e>
 800ab8e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ab92:	e7a0      	b.n	800aad6 <_strtod_l+0x996>
 800ab94:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800ac18 <_strtod_l+0xad8>
 800ab98:	ec57 6b17 	vmov	r6, r7, d7
 800ab9c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aba0:	e799      	b.n	800aad6 <_strtod_l+0x996>
 800aba2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800aba6:	9b08      	ldr	r3, [sp, #32]
 800aba8:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800abac:	2b00      	cmp	r3, #0
 800abae:	d1c1      	bne.n	800ab34 <_strtod_l+0x9f4>
 800abb0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800abb4:	0d1b      	lsrs	r3, r3, #20
 800abb6:	051b      	lsls	r3, r3, #20
 800abb8:	429d      	cmp	r5, r3
 800abba:	d1bb      	bne.n	800ab34 <_strtod_l+0x9f4>
 800abbc:	4630      	mov	r0, r6
 800abbe:	4639      	mov	r1, r7
 800abc0:	f7f6 f88e 	bl	8000ce0 <__aeabi_d2lz>
 800abc4:	f7f5 fcfe 	bl	80005c4 <__aeabi_l2d>
 800abc8:	4602      	mov	r2, r0
 800abca:	460b      	mov	r3, r1
 800abcc:	4630      	mov	r0, r6
 800abce:	4639      	mov	r1, r7
 800abd0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800abd4:	f7f5 fb6c 	bl	80002b0 <__aeabi_dsub>
 800abd8:	460b      	mov	r3, r1
 800abda:	4602      	mov	r2, r0
 800abdc:	ea46 060a 	orr.w	r6, r6, sl
 800abe0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800abe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abe6:	431e      	orrs	r6, r3
 800abe8:	d06d      	beq.n	800acc6 <_strtod_l+0xb86>
 800abea:	a30d      	add	r3, pc, #52	@ (adr r3, 800ac20 <_strtod_l+0xae0>)
 800abec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf0:	f7f5 ff88 	bl	8000b04 <__aeabi_dcmplt>
 800abf4:	2800      	cmp	r0, #0
 800abf6:	f47f accf 	bne.w	800a598 <_strtod_l+0x458>
 800abfa:	a30b      	add	r3, pc, #44	@ (adr r3, 800ac28 <_strtod_l+0xae8>)
 800abfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac04:	f7f5 ff9c 	bl	8000b40 <__aeabi_dcmpgt>
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	d093      	beq.n	800ab34 <_strtod_l+0x9f4>
 800ac0c:	e4c4      	b.n	800a598 <_strtod_l+0x458>
 800ac0e:	bf00      	nop
 800ac10:	00000000 	.word	0x00000000
 800ac14:	bff00000 	.word	0xbff00000
 800ac18:	00000000 	.word	0x00000000
 800ac1c:	3ff00000 	.word	0x3ff00000
 800ac20:	94a03595 	.word	0x94a03595
 800ac24:	3fdfffff 	.word	0x3fdfffff
 800ac28:	35afe535 	.word	0x35afe535
 800ac2c:	3fe00000 	.word	0x3fe00000
 800ac30:	000fffff 	.word	0x000fffff
 800ac34:	7ff00000 	.word	0x7ff00000
 800ac38:	7fefffff 	.word	0x7fefffff
 800ac3c:	3ff00000 	.word	0x3ff00000
 800ac40:	3fe00000 	.word	0x3fe00000
 800ac44:	7fe00000 	.word	0x7fe00000
 800ac48:	7c9fffff 	.word	0x7c9fffff
 800ac4c:	9b08      	ldr	r3, [sp, #32]
 800ac4e:	b323      	cbz	r3, 800ac9a <_strtod_l+0xb5a>
 800ac50:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ac54:	d821      	bhi.n	800ac9a <_strtod_l+0xb5a>
 800ac56:	4630      	mov	r0, r6
 800ac58:	4639      	mov	r1, r7
 800ac5a:	a327      	add	r3, pc, #156	@ (adr r3, 800acf8 <_strtod_l+0xbb8>)
 800ac5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac60:	f7f5 ff5a 	bl	8000b18 <__aeabi_dcmple>
 800ac64:	b1a0      	cbz	r0, 800ac90 <_strtod_l+0xb50>
 800ac66:	4639      	mov	r1, r7
 800ac68:	4630      	mov	r0, r6
 800ac6a:	f7f5 ffb1 	bl	8000bd0 <__aeabi_d2uiz>
 800ac6e:	2801      	cmp	r0, #1
 800ac70:	bf38      	it	cc
 800ac72:	2001      	movcc	r0, #1
 800ac74:	f7f5 fc5a 	bl	800052c <__aeabi_ui2d>
 800ac78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac7a:	4606      	mov	r6, r0
 800ac7c:	460f      	mov	r7, r1
 800ac7e:	b9fb      	cbnz	r3, 800acc0 <_strtod_l+0xb80>
 800ac80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ac84:	9014      	str	r0, [sp, #80]	@ 0x50
 800ac86:	9315      	str	r3, [sp, #84]	@ 0x54
 800ac88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ac8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ac90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ac92:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ac96:	1b5b      	subs	r3, r3, r5
 800ac98:	9311      	str	r3, [sp, #68]	@ 0x44
 800ac9a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ac9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aca2:	f7ff f8eb 	bl	8009e7c <__ulp>
 800aca6:	4650      	mov	r0, sl
 800aca8:	4659      	mov	r1, fp
 800acaa:	ec53 2b10 	vmov	r2, r3, d0
 800acae:	f7f5 fcb7 	bl	8000620 <__aeabi_dmul>
 800acb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800acb6:	f7f5 fafd 	bl	80002b4 <__adddf3>
 800acba:	4682      	mov	sl, r0
 800acbc:	468b      	mov	fp, r1
 800acbe:	e772      	b.n	800aba6 <_strtod_l+0xa66>
 800acc0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800acc4:	e7e0      	b.n	800ac88 <_strtod_l+0xb48>
 800acc6:	a30e      	add	r3, pc, #56	@ (adr r3, 800ad00 <_strtod_l+0xbc0>)
 800acc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800accc:	f7f5 ff1a 	bl	8000b04 <__aeabi_dcmplt>
 800acd0:	e79a      	b.n	800ac08 <_strtod_l+0xac8>
 800acd2:	2300      	movs	r3, #0
 800acd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800acd6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acd8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800acda:	6013      	str	r3, [r2, #0]
 800acdc:	f7ff ba6d 	b.w	800a1ba <_strtod_l+0x7a>
 800ace0:	2a65      	cmp	r2, #101	@ 0x65
 800ace2:	f43f ab67 	beq.w	800a3b4 <_strtod_l+0x274>
 800ace6:	2a45      	cmp	r2, #69	@ 0x45
 800ace8:	f43f ab64 	beq.w	800a3b4 <_strtod_l+0x274>
 800acec:	2301      	movs	r3, #1
 800acee:	f7ff bba0 	b.w	800a432 <_strtod_l+0x2f2>
 800acf2:	bf00      	nop
 800acf4:	f3af 8000 	nop.w
 800acf8:	ffc00000 	.word	0xffc00000
 800acfc:	41dfffff 	.word	0x41dfffff
 800ad00:	94a03595 	.word	0x94a03595
 800ad04:	3fcfffff 	.word	0x3fcfffff

0800ad08 <_strtod_r>:
 800ad08:	4b01      	ldr	r3, [pc, #4]	@ (800ad10 <_strtod_r+0x8>)
 800ad0a:	f7ff ba19 	b.w	800a140 <_strtod_l>
 800ad0e:	bf00      	nop
 800ad10:	20000068 	.word	0x20000068

0800ad14 <_strtol_l.constprop.0>:
 800ad14:	2b24      	cmp	r3, #36	@ 0x24
 800ad16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad1a:	4686      	mov	lr, r0
 800ad1c:	4690      	mov	r8, r2
 800ad1e:	d801      	bhi.n	800ad24 <_strtol_l.constprop.0+0x10>
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d106      	bne.n	800ad32 <_strtol_l.constprop.0+0x1e>
 800ad24:	f7fd fd9a 	bl	800885c <__errno>
 800ad28:	2316      	movs	r3, #22
 800ad2a:	6003      	str	r3, [r0, #0]
 800ad2c:	2000      	movs	r0, #0
 800ad2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad32:	460d      	mov	r5, r1
 800ad34:	4833      	ldr	r0, [pc, #204]	@ (800ae04 <_strtol_l.constprop.0+0xf0>)
 800ad36:	462a      	mov	r2, r5
 800ad38:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad3c:	5d06      	ldrb	r6, [r0, r4]
 800ad3e:	f016 0608 	ands.w	r6, r6, #8
 800ad42:	d1f8      	bne.n	800ad36 <_strtol_l.constprop.0+0x22>
 800ad44:	2c2d      	cmp	r4, #45	@ 0x2d
 800ad46:	d12d      	bne.n	800ada4 <_strtol_l.constprop.0+0x90>
 800ad48:	782c      	ldrb	r4, [r5, #0]
 800ad4a:	2601      	movs	r6, #1
 800ad4c:	1c95      	adds	r5, r2, #2
 800ad4e:	f033 0210 	bics.w	r2, r3, #16
 800ad52:	d109      	bne.n	800ad68 <_strtol_l.constprop.0+0x54>
 800ad54:	2c30      	cmp	r4, #48	@ 0x30
 800ad56:	d12a      	bne.n	800adae <_strtol_l.constprop.0+0x9a>
 800ad58:	782a      	ldrb	r2, [r5, #0]
 800ad5a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ad5e:	2a58      	cmp	r2, #88	@ 0x58
 800ad60:	d125      	bne.n	800adae <_strtol_l.constprop.0+0x9a>
 800ad62:	786c      	ldrb	r4, [r5, #1]
 800ad64:	2310      	movs	r3, #16
 800ad66:	3502      	adds	r5, #2
 800ad68:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ad72:	4610      	mov	r0, r2
 800ad74:	fbbc f9f3 	udiv	r9, ip, r3
 800ad78:	fb03 ca19 	mls	sl, r3, r9, ip
 800ad7c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ad80:	2f09      	cmp	r7, #9
 800ad82:	d81b      	bhi.n	800adbc <_strtol_l.constprop.0+0xa8>
 800ad84:	463c      	mov	r4, r7
 800ad86:	42a3      	cmp	r3, r4
 800ad88:	dd27      	ble.n	800adda <_strtol_l.constprop.0+0xc6>
 800ad8a:	1c57      	adds	r7, r2, #1
 800ad8c:	d007      	beq.n	800ad9e <_strtol_l.constprop.0+0x8a>
 800ad8e:	4581      	cmp	r9, r0
 800ad90:	d320      	bcc.n	800add4 <_strtol_l.constprop.0+0xc0>
 800ad92:	d101      	bne.n	800ad98 <_strtol_l.constprop.0+0x84>
 800ad94:	45a2      	cmp	sl, r4
 800ad96:	db1d      	blt.n	800add4 <_strtol_l.constprop.0+0xc0>
 800ad98:	fb00 4003 	mla	r0, r0, r3, r4
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ada2:	e7eb      	b.n	800ad7c <_strtol_l.constprop.0+0x68>
 800ada4:	2c2b      	cmp	r4, #43	@ 0x2b
 800ada6:	bf04      	itt	eq
 800ada8:	782c      	ldrbeq	r4, [r5, #0]
 800adaa:	1c95      	addeq	r5, r2, #2
 800adac:	e7cf      	b.n	800ad4e <_strtol_l.constprop.0+0x3a>
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d1da      	bne.n	800ad68 <_strtol_l.constprop.0+0x54>
 800adb2:	2c30      	cmp	r4, #48	@ 0x30
 800adb4:	bf0c      	ite	eq
 800adb6:	2308      	moveq	r3, #8
 800adb8:	230a      	movne	r3, #10
 800adba:	e7d5      	b.n	800ad68 <_strtol_l.constprop.0+0x54>
 800adbc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800adc0:	2f19      	cmp	r7, #25
 800adc2:	d801      	bhi.n	800adc8 <_strtol_l.constprop.0+0xb4>
 800adc4:	3c37      	subs	r4, #55	@ 0x37
 800adc6:	e7de      	b.n	800ad86 <_strtol_l.constprop.0+0x72>
 800adc8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800adcc:	2f19      	cmp	r7, #25
 800adce:	d804      	bhi.n	800adda <_strtol_l.constprop.0+0xc6>
 800add0:	3c57      	subs	r4, #87	@ 0x57
 800add2:	e7d8      	b.n	800ad86 <_strtol_l.constprop.0+0x72>
 800add4:	f04f 32ff 	mov.w	r2, #4294967295
 800add8:	e7e1      	b.n	800ad9e <_strtol_l.constprop.0+0x8a>
 800adda:	1c53      	adds	r3, r2, #1
 800addc:	d108      	bne.n	800adf0 <_strtol_l.constprop.0+0xdc>
 800adde:	2322      	movs	r3, #34	@ 0x22
 800ade0:	4660      	mov	r0, ip
 800ade2:	f8ce 3000 	str.w	r3, [lr]
 800ade6:	f1b8 0f00 	cmp.w	r8, #0
 800adea:	d0a0      	beq.n	800ad2e <_strtol_l.constprop.0+0x1a>
 800adec:	1e69      	subs	r1, r5, #1
 800adee:	e006      	b.n	800adfe <_strtol_l.constprop.0+0xea>
 800adf0:	b106      	cbz	r6, 800adf4 <_strtol_l.constprop.0+0xe0>
 800adf2:	4240      	negs	r0, r0
 800adf4:	f1b8 0f00 	cmp.w	r8, #0
 800adf8:	d099      	beq.n	800ad2e <_strtol_l.constprop.0+0x1a>
 800adfa:	2a00      	cmp	r2, #0
 800adfc:	d1f6      	bne.n	800adec <_strtol_l.constprop.0+0xd8>
 800adfe:	f8c8 1000 	str.w	r1, [r8]
 800ae02:	e794      	b.n	800ad2e <_strtol_l.constprop.0+0x1a>
 800ae04:	0800c161 	.word	0x0800c161

0800ae08 <_strtol_r>:
 800ae08:	f7ff bf84 	b.w	800ad14 <_strtol_l.constprop.0>

0800ae0c <__ssputs_r>:
 800ae0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae10:	461f      	mov	r7, r3
 800ae12:	688e      	ldr	r6, [r1, #8]
 800ae14:	4682      	mov	sl, r0
 800ae16:	460c      	mov	r4, r1
 800ae18:	42be      	cmp	r6, r7
 800ae1a:	4690      	mov	r8, r2
 800ae1c:	680b      	ldr	r3, [r1, #0]
 800ae1e:	d82d      	bhi.n	800ae7c <__ssputs_r+0x70>
 800ae20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ae28:	d026      	beq.n	800ae78 <__ssputs_r+0x6c>
 800ae2a:	6965      	ldr	r5, [r4, #20]
 800ae2c:	6909      	ldr	r1, [r1, #16]
 800ae2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae32:	eba3 0901 	sub.w	r9, r3, r1
 800ae36:	1c7b      	adds	r3, r7, #1
 800ae38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae3c:	444b      	add	r3, r9
 800ae3e:	106d      	asrs	r5, r5, #1
 800ae40:	429d      	cmp	r5, r3
 800ae42:	bf38      	it	cc
 800ae44:	461d      	movcc	r5, r3
 800ae46:	0553      	lsls	r3, r2, #21
 800ae48:	d527      	bpl.n	800ae9a <__ssputs_r+0x8e>
 800ae4a:	4629      	mov	r1, r5
 800ae4c:	f7fe fc10 	bl	8009670 <_malloc_r>
 800ae50:	4606      	mov	r6, r0
 800ae52:	b360      	cbz	r0, 800aeae <__ssputs_r+0xa2>
 800ae54:	464a      	mov	r2, r9
 800ae56:	6921      	ldr	r1, [r4, #16]
 800ae58:	f000 fa9c 	bl	800b394 <memcpy>
 800ae5c:	89a3      	ldrh	r3, [r4, #12]
 800ae5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ae62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae66:	81a3      	strh	r3, [r4, #12]
 800ae68:	6126      	str	r6, [r4, #16]
 800ae6a:	444e      	add	r6, r9
 800ae6c:	6165      	str	r5, [r4, #20]
 800ae6e:	eba5 0509 	sub.w	r5, r5, r9
 800ae72:	6026      	str	r6, [r4, #0]
 800ae74:	463e      	mov	r6, r7
 800ae76:	60a5      	str	r5, [r4, #8]
 800ae78:	42be      	cmp	r6, r7
 800ae7a:	d900      	bls.n	800ae7e <__ssputs_r+0x72>
 800ae7c:	463e      	mov	r6, r7
 800ae7e:	4632      	mov	r2, r6
 800ae80:	4641      	mov	r1, r8
 800ae82:	6820      	ldr	r0, [r4, #0]
 800ae84:	f000 fa27 	bl	800b2d6 <memmove>
 800ae88:	68a3      	ldr	r3, [r4, #8]
 800ae8a:	2000      	movs	r0, #0
 800ae8c:	1b9b      	subs	r3, r3, r6
 800ae8e:	60a3      	str	r3, [r4, #8]
 800ae90:	6823      	ldr	r3, [r4, #0]
 800ae92:	4433      	add	r3, r6
 800ae94:	6023      	str	r3, [r4, #0]
 800ae96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae9a:	462a      	mov	r2, r5
 800ae9c:	f000 fe09 	bl	800bab2 <_realloc_r>
 800aea0:	4606      	mov	r6, r0
 800aea2:	2800      	cmp	r0, #0
 800aea4:	d1e0      	bne.n	800ae68 <__ssputs_r+0x5c>
 800aea6:	6921      	ldr	r1, [r4, #16]
 800aea8:	4650      	mov	r0, sl
 800aeaa:	f7fe fb6d 	bl	8009588 <_free_r>
 800aeae:	230c      	movs	r3, #12
 800aeb0:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb4:	f8ca 3000 	str.w	r3, [sl]
 800aeb8:	89a3      	ldrh	r3, [r4, #12]
 800aeba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aebe:	81a3      	strh	r3, [r4, #12]
 800aec0:	e7e9      	b.n	800ae96 <__ssputs_r+0x8a>
	...

0800aec4 <_svfiprintf_r>:
 800aec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec8:	4698      	mov	r8, r3
 800aeca:	898b      	ldrh	r3, [r1, #12]
 800aecc:	b09d      	sub	sp, #116	@ 0x74
 800aece:	4607      	mov	r7, r0
 800aed0:	061b      	lsls	r3, r3, #24
 800aed2:	460d      	mov	r5, r1
 800aed4:	4614      	mov	r4, r2
 800aed6:	d510      	bpl.n	800aefa <_svfiprintf_r+0x36>
 800aed8:	690b      	ldr	r3, [r1, #16]
 800aeda:	b973      	cbnz	r3, 800aefa <_svfiprintf_r+0x36>
 800aedc:	2140      	movs	r1, #64	@ 0x40
 800aede:	f7fe fbc7 	bl	8009670 <_malloc_r>
 800aee2:	6028      	str	r0, [r5, #0]
 800aee4:	6128      	str	r0, [r5, #16]
 800aee6:	b930      	cbnz	r0, 800aef6 <_svfiprintf_r+0x32>
 800aee8:	230c      	movs	r3, #12
 800aeea:	603b      	str	r3, [r7, #0]
 800aeec:	f04f 30ff 	mov.w	r0, #4294967295
 800aef0:	b01d      	add	sp, #116	@ 0x74
 800aef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef6:	2340      	movs	r3, #64	@ 0x40
 800aef8:	616b      	str	r3, [r5, #20]
 800aefa:	2300      	movs	r3, #0
 800aefc:	f8cd 800c 	str.w	r8, [sp, #12]
 800af00:	f04f 0901 	mov.w	r9, #1
 800af04:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800b0a8 <_svfiprintf_r+0x1e4>
 800af08:	9309      	str	r3, [sp, #36]	@ 0x24
 800af0a:	2320      	movs	r3, #32
 800af0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af10:	2330      	movs	r3, #48	@ 0x30
 800af12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af16:	4623      	mov	r3, r4
 800af18:	469a      	mov	sl, r3
 800af1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af1e:	b10a      	cbz	r2, 800af24 <_svfiprintf_r+0x60>
 800af20:	2a25      	cmp	r2, #37	@ 0x25
 800af22:	d1f9      	bne.n	800af18 <_svfiprintf_r+0x54>
 800af24:	ebba 0b04 	subs.w	fp, sl, r4
 800af28:	d00b      	beq.n	800af42 <_svfiprintf_r+0x7e>
 800af2a:	465b      	mov	r3, fp
 800af2c:	4622      	mov	r2, r4
 800af2e:	4629      	mov	r1, r5
 800af30:	4638      	mov	r0, r7
 800af32:	f7ff ff6b 	bl	800ae0c <__ssputs_r>
 800af36:	3001      	adds	r0, #1
 800af38:	f000 80a7 	beq.w	800b08a <_svfiprintf_r+0x1c6>
 800af3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af3e:	445a      	add	r2, fp
 800af40:	9209      	str	r2, [sp, #36]	@ 0x24
 800af42:	f89a 3000 	ldrb.w	r3, [sl]
 800af46:	2b00      	cmp	r3, #0
 800af48:	f000 809f 	beq.w	800b08a <_svfiprintf_r+0x1c6>
 800af4c:	2300      	movs	r3, #0
 800af4e:	f04f 32ff 	mov.w	r2, #4294967295
 800af52:	f10a 0a01 	add.w	sl, sl, #1
 800af56:	9304      	str	r3, [sp, #16]
 800af58:	9307      	str	r3, [sp, #28]
 800af5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af5e:	931a      	str	r3, [sp, #104]	@ 0x68
 800af60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af64:	4654      	mov	r4, sl
 800af66:	2205      	movs	r2, #5
 800af68:	484f      	ldr	r0, [pc, #316]	@ (800b0a8 <_svfiprintf_r+0x1e4>)
 800af6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af6e:	f7fd fca2 	bl	80088b6 <memchr>
 800af72:	9a04      	ldr	r2, [sp, #16]
 800af74:	b9d8      	cbnz	r0, 800afae <_svfiprintf_r+0xea>
 800af76:	06d0      	lsls	r0, r2, #27
 800af78:	bf44      	itt	mi
 800af7a:	2320      	movmi	r3, #32
 800af7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af80:	0711      	lsls	r1, r2, #28
 800af82:	bf44      	itt	mi
 800af84:	232b      	movmi	r3, #43	@ 0x2b
 800af86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af8a:	f89a 3000 	ldrb.w	r3, [sl]
 800af8e:	2b2a      	cmp	r3, #42	@ 0x2a
 800af90:	d015      	beq.n	800afbe <_svfiprintf_r+0xfa>
 800af92:	9a07      	ldr	r2, [sp, #28]
 800af94:	4654      	mov	r4, sl
 800af96:	2000      	movs	r0, #0
 800af98:	f04f 0c0a 	mov.w	ip, #10
 800af9c:	4621      	mov	r1, r4
 800af9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afa2:	3b30      	subs	r3, #48	@ 0x30
 800afa4:	2b09      	cmp	r3, #9
 800afa6:	d94b      	bls.n	800b040 <_svfiprintf_r+0x17c>
 800afa8:	b1b0      	cbz	r0, 800afd8 <_svfiprintf_r+0x114>
 800afaa:	9207      	str	r2, [sp, #28]
 800afac:	e014      	b.n	800afd8 <_svfiprintf_r+0x114>
 800afae:	eba0 0308 	sub.w	r3, r0, r8
 800afb2:	46a2      	mov	sl, r4
 800afb4:	fa09 f303 	lsl.w	r3, r9, r3
 800afb8:	4313      	orrs	r3, r2
 800afba:	9304      	str	r3, [sp, #16]
 800afbc:	e7d2      	b.n	800af64 <_svfiprintf_r+0xa0>
 800afbe:	9b03      	ldr	r3, [sp, #12]
 800afc0:	1d19      	adds	r1, r3, #4
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	9103      	str	r1, [sp, #12]
 800afc8:	bfbb      	ittet	lt
 800afca:	425b      	neglt	r3, r3
 800afcc:	f042 0202 	orrlt.w	r2, r2, #2
 800afd0:	9307      	strge	r3, [sp, #28]
 800afd2:	9307      	strlt	r3, [sp, #28]
 800afd4:	bfb8      	it	lt
 800afd6:	9204      	strlt	r2, [sp, #16]
 800afd8:	7823      	ldrb	r3, [r4, #0]
 800afda:	2b2e      	cmp	r3, #46	@ 0x2e
 800afdc:	d10a      	bne.n	800aff4 <_svfiprintf_r+0x130>
 800afde:	7863      	ldrb	r3, [r4, #1]
 800afe0:	2b2a      	cmp	r3, #42	@ 0x2a
 800afe2:	d132      	bne.n	800b04a <_svfiprintf_r+0x186>
 800afe4:	9b03      	ldr	r3, [sp, #12]
 800afe6:	3402      	adds	r4, #2
 800afe8:	1d1a      	adds	r2, r3, #4
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aff0:	9203      	str	r2, [sp, #12]
 800aff2:	9305      	str	r3, [sp, #20]
 800aff4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b0b8 <_svfiprintf_r+0x1f4>
 800aff8:	2203      	movs	r2, #3
 800affa:	7821      	ldrb	r1, [r4, #0]
 800affc:	4650      	mov	r0, sl
 800affe:	f7fd fc5a 	bl	80088b6 <memchr>
 800b002:	b138      	cbz	r0, 800b014 <_svfiprintf_r+0x150>
 800b004:	eba0 000a 	sub.w	r0, r0, sl
 800b008:	2240      	movs	r2, #64	@ 0x40
 800b00a:	9b04      	ldr	r3, [sp, #16]
 800b00c:	3401      	adds	r4, #1
 800b00e:	4082      	lsls	r2, r0
 800b010:	4313      	orrs	r3, r2
 800b012:	9304      	str	r3, [sp, #16]
 800b014:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b018:	2206      	movs	r2, #6
 800b01a:	4824      	ldr	r0, [pc, #144]	@ (800b0ac <_svfiprintf_r+0x1e8>)
 800b01c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b020:	f7fd fc49 	bl	80088b6 <memchr>
 800b024:	2800      	cmp	r0, #0
 800b026:	d036      	beq.n	800b096 <_svfiprintf_r+0x1d2>
 800b028:	4b21      	ldr	r3, [pc, #132]	@ (800b0b0 <_svfiprintf_r+0x1ec>)
 800b02a:	bb1b      	cbnz	r3, 800b074 <_svfiprintf_r+0x1b0>
 800b02c:	9b03      	ldr	r3, [sp, #12]
 800b02e:	3307      	adds	r3, #7
 800b030:	f023 0307 	bic.w	r3, r3, #7
 800b034:	3308      	adds	r3, #8
 800b036:	9303      	str	r3, [sp, #12]
 800b038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b03a:	4433      	add	r3, r6
 800b03c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b03e:	e76a      	b.n	800af16 <_svfiprintf_r+0x52>
 800b040:	fb0c 3202 	mla	r2, ip, r2, r3
 800b044:	460c      	mov	r4, r1
 800b046:	2001      	movs	r0, #1
 800b048:	e7a8      	b.n	800af9c <_svfiprintf_r+0xd8>
 800b04a:	2300      	movs	r3, #0
 800b04c:	3401      	adds	r4, #1
 800b04e:	f04f 0c0a 	mov.w	ip, #10
 800b052:	4619      	mov	r1, r3
 800b054:	9305      	str	r3, [sp, #20]
 800b056:	4620      	mov	r0, r4
 800b058:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b05c:	3a30      	subs	r2, #48	@ 0x30
 800b05e:	2a09      	cmp	r2, #9
 800b060:	d903      	bls.n	800b06a <_svfiprintf_r+0x1a6>
 800b062:	2b00      	cmp	r3, #0
 800b064:	d0c6      	beq.n	800aff4 <_svfiprintf_r+0x130>
 800b066:	9105      	str	r1, [sp, #20]
 800b068:	e7c4      	b.n	800aff4 <_svfiprintf_r+0x130>
 800b06a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b06e:	4604      	mov	r4, r0
 800b070:	2301      	movs	r3, #1
 800b072:	e7f0      	b.n	800b056 <_svfiprintf_r+0x192>
 800b074:	ab03      	add	r3, sp, #12
 800b076:	462a      	mov	r2, r5
 800b078:	a904      	add	r1, sp, #16
 800b07a:	4638      	mov	r0, r7
 800b07c:	9300      	str	r3, [sp, #0]
 800b07e:	4b0d      	ldr	r3, [pc, #52]	@ (800b0b4 <_svfiprintf_r+0x1f0>)
 800b080:	f7fc fbb4 	bl	80077ec <_printf_float>
 800b084:	1c42      	adds	r2, r0, #1
 800b086:	4606      	mov	r6, r0
 800b088:	d1d6      	bne.n	800b038 <_svfiprintf_r+0x174>
 800b08a:	89ab      	ldrh	r3, [r5, #12]
 800b08c:	065b      	lsls	r3, r3, #25
 800b08e:	f53f af2d 	bmi.w	800aeec <_svfiprintf_r+0x28>
 800b092:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b094:	e72c      	b.n	800aef0 <_svfiprintf_r+0x2c>
 800b096:	ab03      	add	r3, sp, #12
 800b098:	462a      	mov	r2, r5
 800b09a:	a904      	add	r1, sp, #16
 800b09c:	4638      	mov	r0, r7
 800b09e:	9300      	str	r3, [sp, #0]
 800b0a0:	4b04      	ldr	r3, [pc, #16]	@ (800b0b4 <_svfiprintf_r+0x1f0>)
 800b0a2:	f7fc fe3f 	bl	8007d24 <_printf_i>
 800b0a6:	e7ed      	b.n	800b084 <_svfiprintf_r+0x1c0>
 800b0a8:	0800c261 	.word	0x0800c261
 800b0ac:	0800c26b 	.word	0x0800c26b
 800b0b0:	080077ed 	.word	0x080077ed
 800b0b4:	0800ae0d 	.word	0x0800ae0d
 800b0b8:	0800c267 	.word	0x0800c267

0800b0bc <__sflush_r>:
 800b0bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0c4:	0716      	lsls	r6, r2, #28
 800b0c6:	4605      	mov	r5, r0
 800b0c8:	460c      	mov	r4, r1
 800b0ca:	d454      	bmi.n	800b176 <__sflush_r+0xba>
 800b0cc:	684b      	ldr	r3, [r1, #4]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	dc02      	bgt.n	800b0d8 <__sflush_r+0x1c>
 800b0d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	dd48      	ble.n	800b16a <__sflush_r+0xae>
 800b0d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b0da:	2e00      	cmp	r6, #0
 800b0dc:	d045      	beq.n	800b16a <__sflush_r+0xae>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b0e4:	682f      	ldr	r7, [r5, #0]
 800b0e6:	6a21      	ldr	r1, [r4, #32]
 800b0e8:	602b      	str	r3, [r5, #0]
 800b0ea:	d030      	beq.n	800b14e <__sflush_r+0x92>
 800b0ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b0ee:	89a3      	ldrh	r3, [r4, #12]
 800b0f0:	0759      	lsls	r1, r3, #29
 800b0f2:	d505      	bpl.n	800b100 <__sflush_r+0x44>
 800b0f4:	6863      	ldr	r3, [r4, #4]
 800b0f6:	1ad2      	subs	r2, r2, r3
 800b0f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b0fa:	b10b      	cbz	r3, 800b100 <__sflush_r+0x44>
 800b0fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b0fe:	1ad2      	subs	r2, r2, r3
 800b100:	2300      	movs	r3, #0
 800b102:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b104:	6a21      	ldr	r1, [r4, #32]
 800b106:	4628      	mov	r0, r5
 800b108:	47b0      	blx	r6
 800b10a:	1c43      	adds	r3, r0, #1
 800b10c:	89a3      	ldrh	r3, [r4, #12]
 800b10e:	d106      	bne.n	800b11e <__sflush_r+0x62>
 800b110:	6829      	ldr	r1, [r5, #0]
 800b112:	291d      	cmp	r1, #29
 800b114:	d82b      	bhi.n	800b16e <__sflush_r+0xb2>
 800b116:	4a2a      	ldr	r2, [pc, #168]	@ (800b1c0 <__sflush_r+0x104>)
 800b118:	410a      	asrs	r2, r1
 800b11a:	07d6      	lsls	r6, r2, #31
 800b11c:	d427      	bmi.n	800b16e <__sflush_r+0xb2>
 800b11e:	2200      	movs	r2, #0
 800b120:	04d9      	lsls	r1, r3, #19
 800b122:	6062      	str	r2, [r4, #4]
 800b124:	6922      	ldr	r2, [r4, #16]
 800b126:	6022      	str	r2, [r4, #0]
 800b128:	d504      	bpl.n	800b134 <__sflush_r+0x78>
 800b12a:	1c42      	adds	r2, r0, #1
 800b12c:	d101      	bne.n	800b132 <__sflush_r+0x76>
 800b12e:	682b      	ldr	r3, [r5, #0]
 800b130:	b903      	cbnz	r3, 800b134 <__sflush_r+0x78>
 800b132:	6560      	str	r0, [r4, #84]	@ 0x54
 800b134:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b136:	602f      	str	r7, [r5, #0]
 800b138:	b1b9      	cbz	r1, 800b16a <__sflush_r+0xae>
 800b13a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b13e:	4299      	cmp	r1, r3
 800b140:	d002      	beq.n	800b148 <__sflush_r+0x8c>
 800b142:	4628      	mov	r0, r5
 800b144:	f7fe fa20 	bl	8009588 <_free_r>
 800b148:	2300      	movs	r3, #0
 800b14a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b14c:	e00d      	b.n	800b16a <__sflush_r+0xae>
 800b14e:	2301      	movs	r3, #1
 800b150:	4628      	mov	r0, r5
 800b152:	47b0      	blx	r6
 800b154:	4602      	mov	r2, r0
 800b156:	1c50      	adds	r0, r2, #1
 800b158:	d1c9      	bne.n	800b0ee <__sflush_r+0x32>
 800b15a:	682b      	ldr	r3, [r5, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d0c6      	beq.n	800b0ee <__sflush_r+0x32>
 800b160:	2b1d      	cmp	r3, #29
 800b162:	d001      	beq.n	800b168 <__sflush_r+0xac>
 800b164:	2b16      	cmp	r3, #22
 800b166:	d11d      	bne.n	800b1a4 <__sflush_r+0xe8>
 800b168:	602f      	str	r7, [r5, #0]
 800b16a:	2000      	movs	r0, #0
 800b16c:	e021      	b.n	800b1b2 <__sflush_r+0xf6>
 800b16e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b172:	b21b      	sxth	r3, r3
 800b174:	e01a      	b.n	800b1ac <__sflush_r+0xf0>
 800b176:	690f      	ldr	r7, [r1, #16]
 800b178:	2f00      	cmp	r7, #0
 800b17a:	d0f6      	beq.n	800b16a <__sflush_r+0xae>
 800b17c:	0793      	lsls	r3, r2, #30
 800b17e:	680e      	ldr	r6, [r1, #0]
 800b180:	600f      	str	r7, [r1, #0]
 800b182:	bf0c      	ite	eq
 800b184:	694b      	ldreq	r3, [r1, #20]
 800b186:	2300      	movne	r3, #0
 800b188:	eba6 0807 	sub.w	r8, r6, r7
 800b18c:	608b      	str	r3, [r1, #8]
 800b18e:	f1b8 0f00 	cmp.w	r8, #0
 800b192:	ddea      	ble.n	800b16a <__sflush_r+0xae>
 800b194:	4643      	mov	r3, r8
 800b196:	463a      	mov	r2, r7
 800b198:	6a21      	ldr	r1, [r4, #32]
 800b19a:	4628      	mov	r0, r5
 800b19c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b19e:	47b0      	blx	r6
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	dc08      	bgt.n	800b1b6 <__sflush_r+0xfa>
 800b1a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b1b0:	81a3      	strh	r3, [r4, #12]
 800b1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1b6:	4407      	add	r7, r0
 800b1b8:	eba8 0800 	sub.w	r8, r8, r0
 800b1bc:	e7e7      	b.n	800b18e <__sflush_r+0xd2>
 800b1be:	bf00      	nop
 800b1c0:	dfbffffe 	.word	0xdfbffffe

0800b1c4 <_fflush_r>:
 800b1c4:	b538      	push	{r3, r4, r5, lr}
 800b1c6:	690b      	ldr	r3, [r1, #16]
 800b1c8:	4605      	mov	r5, r0
 800b1ca:	460c      	mov	r4, r1
 800b1cc:	b913      	cbnz	r3, 800b1d4 <_fflush_r+0x10>
 800b1ce:	2500      	movs	r5, #0
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	bd38      	pop	{r3, r4, r5, pc}
 800b1d4:	b118      	cbz	r0, 800b1de <_fflush_r+0x1a>
 800b1d6:	6a03      	ldr	r3, [r0, #32]
 800b1d8:	b90b      	cbnz	r3, 800b1de <_fflush_r+0x1a>
 800b1da:	f7fd f961 	bl	80084a0 <__sinit>
 800b1de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d0f3      	beq.n	800b1ce <_fflush_r+0xa>
 800b1e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b1e8:	07d0      	lsls	r0, r2, #31
 800b1ea:	d404      	bmi.n	800b1f6 <_fflush_r+0x32>
 800b1ec:	0599      	lsls	r1, r3, #22
 800b1ee:	d402      	bmi.n	800b1f6 <_fflush_r+0x32>
 800b1f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1f2:	f7fd fb5e 	bl	80088b2 <__retarget_lock_acquire_recursive>
 800b1f6:	4628      	mov	r0, r5
 800b1f8:	4621      	mov	r1, r4
 800b1fa:	f7ff ff5f 	bl	800b0bc <__sflush_r>
 800b1fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b200:	4605      	mov	r5, r0
 800b202:	07da      	lsls	r2, r3, #31
 800b204:	d4e4      	bmi.n	800b1d0 <_fflush_r+0xc>
 800b206:	89a3      	ldrh	r3, [r4, #12]
 800b208:	059b      	lsls	r3, r3, #22
 800b20a:	d4e1      	bmi.n	800b1d0 <_fflush_r+0xc>
 800b20c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b20e:	f7fd fb51 	bl	80088b4 <__retarget_lock_release_recursive>
 800b212:	e7dd      	b.n	800b1d0 <_fflush_r+0xc>

0800b214 <__swhatbuf_r>:
 800b214:	b570      	push	{r4, r5, r6, lr}
 800b216:	460c      	mov	r4, r1
 800b218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b21c:	b096      	sub	sp, #88	@ 0x58
 800b21e:	4615      	mov	r5, r2
 800b220:	2900      	cmp	r1, #0
 800b222:	461e      	mov	r6, r3
 800b224:	da0c      	bge.n	800b240 <__swhatbuf_r+0x2c>
 800b226:	89a3      	ldrh	r3, [r4, #12]
 800b228:	2100      	movs	r1, #0
 800b22a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b22e:	bf14      	ite	ne
 800b230:	2340      	movne	r3, #64	@ 0x40
 800b232:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b236:	2000      	movs	r0, #0
 800b238:	6031      	str	r1, [r6, #0]
 800b23a:	602b      	str	r3, [r5, #0]
 800b23c:	b016      	add	sp, #88	@ 0x58
 800b23e:	bd70      	pop	{r4, r5, r6, pc}
 800b240:	466a      	mov	r2, sp
 800b242:	f000 f875 	bl	800b330 <_fstat_r>
 800b246:	2800      	cmp	r0, #0
 800b248:	dbed      	blt.n	800b226 <__swhatbuf_r+0x12>
 800b24a:	9901      	ldr	r1, [sp, #4]
 800b24c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b250:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b254:	4259      	negs	r1, r3
 800b256:	4159      	adcs	r1, r3
 800b258:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b25c:	e7eb      	b.n	800b236 <__swhatbuf_r+0x22>

0800b25e <__smakebuf_r>:
 800b25e:	898b      	ldrh	r3, [r1, #12]
 800b260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b262:	079d      	lsls	r5, r3, #30
 800b264:	4606      	mov	r6, r0
 800b266:	460c      	mov	r4, r1
 800b268:	d507      	bpl.n	800b27a <__smakebuf_r+0x1c>
 800b26a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b26e:	6023      	str	r3, [r4, #0]
 800b270:	6123      	str	r3, [r4, #16]
 800b272:	2301      	movs	r3, #1
 800b274:	6163      	str	r3, [r4, #20]
 800b276:	b003      	add	sp, #12
 800b278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b27a:	ab01      	add	r3, sp, #4
 800b27c:	466a      	mov	r2, sp
 800b27e:	f7ff ffc9 	bl	800b214 <__swhatbuf_r>
 800b282:	9f00      	ldr	r7, [sp, #0]
 800b284:	4605      	mov	r5, r0
 800b286:	4630      	mov	r0, r6
 800b288:	4639      	mov	r1, r7
 800b28a:	f7fe f9f1 	bl	8009670 <_malloc_r>
 800b28e:	b948      	cbnz	r0, 800b2a4 <__smakebuf_r+0x46>
 800b290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b294:	059a      	lsls	r2, r3, #22
 800b296:	d4ee      	bmi.n	800b276 <__smakebuf_r+0x18>
 800b298:	f023 0303 	bic.w	r3, r3, #3
 800b29c:	f043 0302 	orr.w	r3, r3, #2
 800b2a0:	81a3      	strh	r3, [r4, #12]
 800b2a2:	e7e2      	b.n	800b26a <__smakebuf_r+0xc>
 800b2a4:	89a3      	ldrh	r3, [r4, #12]
 800b2a6:	6020      	str	r0, [r4, #0]
 800b2a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2ac:	81a3      	strh	r3, [r4, #12]
 800b2ae:	9b01      	ldr	r3, [sp, #4]
 800b2b0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b2b4:	b15b      	cbz	r3, 800b2ce <__smakebuf_r+0x70>
 800b2b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2ba:	4630      	mov	r0, r6
 800b2bc:	f000 f84a 	bl	800b354 <_isatty_r>
 800b2c0:	b128      	cbz	r0, 800b2ce <__smakebuf_r+0x70>
 800b2c2:	89a3      	ldrh	r3, [r4, #12]
 800b2c4:	f023 0303 	bic.w	r3, r3, #3
 800b2c8:	f043 0301 	orr.w	r3, r3, #1
 800b2cc:	81a3      	strh	r3, [r4, #12]
 800b2ce:	89a3      	ldrh	r3, [r4, #12]
 800b2d0:	431d      	orrs	r5, r3
 800b2d2:	81a5      	strh	r5, [r4, #12]
 800b2d4:	e7cf      	b.n	800b276 <__smakebuf_r+0x18>

0800b2d6 <memmove>:
 800b2d6:	4288      	cmp	r0, r1
 800b2d8:	b510      	push	{r4, lr}
 800b2da:	eb01 0402 	add.w	r4, r1, r2
 800b2de:	d902      	bls.n	800b2e6 <memmove+0x10>
 800b2e0:	4284      	cmp	r4, r0
 800b2e2:	4623      	mov	r3, r4
 800b2e4:	d807      	bhi.n	800b2f6 <memmove+0x20>
 800b2e6:	1e43      	subs	r3, r0, #1
 800b2e8:	42a1      	cmp	r1, r4
 800b2ea:	d008      	beq.n	800b2fe <memmove+0x28>
 800b2ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2f4:	e7f8      	b.n	800b2e8 <memmove+0x12>
 800b2f6:	4402      	add	r2, r0
 800b2f8:	4601      	mov	r1, r0
 800b2fa:	428a      	cmp	r2, r1
 800b2fc:	d100      	bne.n	800b300 <memmove+0x2a>
 800b2fe:	bd10      	pop	{r4, pc}
 800b300:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b304:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b308:	e7f7      	b.n	800b2fa <memmove+0x24>

0800b30a <strncmp>:
 800b30a:	b510      	push	{r4, lr}
 800b30c:	b16a      	cbz	r2, 800b32a <strncmp+0x20>
 800b30e:	3901      	subs	r1, #1
 800b310:	1884      	adds	r4, r0, r2
 800b312:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b316:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d103      	bne.n	800b326 <strncmp+0x1c>
 800b31e:	42a0      	cmp	r0, r4
 800b320:	d001      	beq.n	800b326 <strncmp+0x1c>
 800b322:	2a00      	cmp	r2, #0
 800b324:	d1f5      	bne.n	800b312 <strncmp+0x8>
 800b326:	1ad0      	subs	r0, r2, r3
 800b328:	bd10      	pop	{r4, pc}
 800b32a:	4610      	mov	r0, r2
 800b32c:	e7fc      	b.n	800b328 <strncmp+0x1e>
	...

0800b330 <_fstat_r>:
 800b330:	b538      	push	{r3, r4, r5, lr}
 800b332:	2300      	movs	r3, #0
 800b334:	4d06      	ldr	r5, [pc, #24]	@ (800b350 <_fstat_r+0x20>)
 800b336:	4604      	mov	r4, r0
 800b338:	4608      	mov	r0, r1
 800b33a:	4611      	mov	r1, r2
 800b33c:	602b      	str	r3, [r5, #0]
 800b33e:	f7f6 fc12 	bl	8001b66 <_fstat>
 800b342:	1c43      	adds	r3, r0, #1
 800b344:	d102      	bne.n	800b34c <_fstat_r+0x1c>
 800b346:	682b      	ldr	r3, [r5, #0]
 800b348:	b103      	cbz	r3, 800b34c <_fstat_r+0x1c>
 800b34a:	6023      	str	r3, [r4, #0]
 800b34c:	bd38      	pop	{r3, r4, r5, pc}
 800b34e:	bf00      	nop
 800b350:	20000648 	.word	0x20000648

0800b354 <_isatty_r>:
 800b354:	b538      	push	{r3, r4, r5, lr}
 800b356:	2300      	movs	r3, #0
 800b358:	4d05      	ldr	r5, [pc, #20]	@ (800b370 <_isatty_r+0x1c>)
 800b35a:	4604      	mov	r4, r0
 800b35c:	4608      	mov	r0, r1
 800b35e:	602b      	str	r3, [r5, #0]
 800b360:	f7f6 fc11 	bl	8001b86 <_isatty>
 800b364:	1c43      	adds	r3, r0, #1
 800b366:	d102      	bne.n	800b36e <_isatty_r+0x1a>
 800b368:	682b      	ldr	r3, [r5, #0]
 800b36a:	b103      	cbz	r3, 800b36e <_isatty_r+0x1a>
 800b36c:	6023      	str	r3, [r4, #0]
 800b36e:	bd38      	pop	{r3, r4, r5, pc}
 800b370:	20000648 	.word	0x20000648

0800b374 <_sbrk_r>:
 800b374:	b538      	push	{r3, r4, r5, lr}
 800b376:	2300      	movs	r3, #0
 800b378:	4d05      	ldr	r5, [pc, #20]	@ (800b390 <_sbrk_r+0x1c>)
 800b37a:	4604      	mov	r4, r0
 800b37c:	4608      	mov	r0, r1
 800b37e:	602b      	str	r3, [r5, #0]
 800b380:	f7f6 fc1a 	bl	8001bb8 <_sbrk>
 800b384:	1c43      	adds	r3, r0, #1
 800b386:	d102      	bne.n	800b38e <_sbrk_r+0x1a>
 800b388:	682b      	ldr	r3, [r5, #0]
 800b38a:	b103      	cbz	r3, 800b38e <_sbrk_r+0x1a>
 800b38c:	6023      	str	r3, [r4, #0]
 800b38e:	bd38      	pop	{r3, r4, r5, pc}
 800b390:	20000648 	.word	0x20000648

0800b394 <memcpy>:
 800b394:	440a      	add	r2, r1
 800b396:	1e43      	subs	r3, r0, #1
 800b398:	4291      	cmp	r1, r2
 800b39a:	d100      	bne.n	800b39e <memcpy+0xa>
 800b39c:	4770      	bx	lr
 800b39e:	b510      	push	{r4, lr}
 800b3a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3a4:	4291      	cmp	r1, r2
 800b3a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3aa:	d1f9      	bne.n	800b3a0 <memcpy+0xc>
 800b3ac:	bd10      	pop	{r4, pc}
	...

0800b3b0 <nan>:
 800b3b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b3b8 <nan+0x8>
 800b3b4:	4770      	bx	lr
 800b3b6:	bf00      	nop
 800b3b8:	00000000 	.word	0x00000000
 800b3bc:	7ff80000 	.word	0x7ff80000

0800b3c0 <__assert_func>:
 800b3c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3c2:	4614      	mov	r4, r2
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	4b09      	ldr	r3, [pc, #36]	@ (800b3ec <__assert_func+0x2c>)
 800b3c8:	4605      	mov	r5, r0
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	68d8      	ldr	r0, [r3, #12]
 800b3ce:	b954      	cbnz	r4, 800b3e6 <__assert_func+0x26>
 800b3d0:	4b07      	ldr	r3, [pc, #28]	@ (800b3f0 <__assert_func+0x30>)
 800b3d2:	461c      	mov	r4, r3
 800b3d4:	9100      	str	r1, [sp, #0]
 800b3d6:	4907      	ldr	r1, [pc, #28]	@ (800b3f4 <__assert_func+0x34>)
 800b3d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b3dc:	462b      	mov	r3, r5
 800b3de:	f000 fba3 	bl	800bb28 <fiprintf>
 800b3e2:	f000 fbb3 	bl	800bb4c <abort>
 800b3e6:	4b04      	ldr	r3, [pc, #16]	@ (800b3f8 <__assert_func+0x38>)
 800b3e8:	e7f4      	b.n	800b3d4 <__assert_func+0x14>
 800b3ea:	bf00      	nop
 800b3ec:	20000018 	.word	0x20000018
 800b3f0:	0800c2b5 	.word	0x0800c2b5
 800b3f4:	0800c287 	.word	0x0800c287
 800b3f8:	0800c27a 	.word	0x0800c27a

0800b3fc <_calloc_r>:
 800b3fc:	b570      	push	{r4, r5, r6, lr}
 800b3fe:	fba1 5402 	umull	r5, r4, r1, r2
 800b402:	b93c      	cbnz	r4, 800b414 <_calloc_r+0x18>
 800b404:	4629      	mov	r1, r5
 800b406:	f7fe f933 	bl	8009670 <_malloc_r>
 800b40a:	4606      	mov	r6, r0
 800b40c:	b928      	cbnz	r0, 800b41a <_calloc_r+0x1e>
 800b40e:	2600      	movs	r6, #0
 800b410:	4630      	mov	r0, r6
 800b412:	bd70      	pop	{r4, r5, r6, pc}
 800b414:	220c      	movs	r2, #12
 800b416:	6002      	str	r2, [r0, #0]
 800b418:	e7f9      	b.n	800b40e <_calloc_r+0x12>
 800b41a:	462a      	mov	r2, r5
 800b41c:	4621      	mov	r1, r4
 800b41e:	f7fd f9cb 	bl	80087b8 <memset>
 800b422:	e7f5      	b.n	800b410 <_calloc_r+0x14>

0800b424 <rshift>:
 800b424:	6903      	ldr	r3, [r0, #16]
 800b426:	114a      	asrs	r2, r1, #5
 800b428:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b42c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b430:	f100 0414 	add.w	r4, r0, #20
 800b434:	dd45      	ble.n	800b4c2 <rshift+0x9e>
 800b436:	f011 011f 	ands.w	r1, r1, #31
 800b43a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b43e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b442:	d10c      	bne.n	800b45e <rshift+0x3a>
 800b444:	f100 0710 	add.w	r7, r0, #16
 800b448:	4629      	mov	r1, r5
 800b44a:	42b1      	cmp	r1, r6
 800b44c:	d334      	bcc.n	800b4b8 <rshift+0x94>
 800b44e:	1a9b      	subs	r3, r3, r2
 800b450:	1eea      	subs	r2, r5, #3
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	4296      	cmp	r6, r2
 800b456:	bf38      	it	cc
 800b458:	2300      	movcc	r3, #0
 800b45a:	4423      	add	r3, r4
 800b45c:	e015      	b.n	800b48a <rshift+0x66>
 800b45e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b462:	f1c1 0820 	rsb	r8, r1, #32
 800b466:	f105 0e04 	add.w	lr, r5, #4
 800b46a:	46a1      	mov	r9, r4
 800b46c:	40cf      	lsrs	r7, r1
 800b46e:	4576      	cmp	r6, lr
 800b470:	46f4      	mov	ip, lr
 800b472:	d815      	bhi.n	800b4a0 <rshift+0x7c>
 800b474:	1a9a      	subs	r2, r3, r2
 800b476:	3501      	adds	r5, #1
 800b478:	0092      	lsls	r2, r2, #2
 800b47a:	3a04      	subs	r2, #4
 800b47c:	42ae      	cmp	r6, r5
 800b47e:	bf38      	it	cc
 800b480:	2200      	movcc	r2, #0
 800b482:	18a3      	adds	r3, r4, r2
 800b484:	50a7      	str	r7, [r4, r2]
 800b486:	b107      	cbz	r7, 800b48a <rshift+0x66>
 800b488:	3304      	adds	r3, #4
 800b48a:	1b1a      	subs	r2, r3, r4
 800b48c:	42a3      	cmp	r3, r4
 800b48e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b492:	bf08      	it	eq
 800b494:	2300      	moveq	r3, #0
 800b496:	6102      	str	r2, [r0, #16]
 800b498:	bf08      	it	eq
 800b49a:	6143      	streq	r3, [r0, #20]
 800b49c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4a0:	f8dc c000 	ldr.w	ip, [ip]
 800b4a4:	fa0c fc08 	lsl.w	ip, ip, r8
 800b4a8:	ea4c 0707 	orr.w	r7, ip, r7
 800b4ac:	f849 7b04 	str.w	r7, [r9], #4
 800b4b0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b4b4:	40cf      	lsrs	r7, r1
 800b4b6:	e7da      	b.n	800b46e <rshift+0x4a>
 800b4b8:	f851 cb04 	ldr.w	ip, [r1], #4
 800b4bc:	f847 cf04 	str.w	ip, [r7, #4]!
 800b4c0:	e7c3      	b.n	800b44a <rshift+0x26>
 800b4c2:	4623      	mov	r3, r4
 800b4c4:	e7e1      	b.n	800b48a <rshift+0x66>

0800b4c6 <__hexdig_fun>:
 800b4c6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b4ca:	2b09      	cmp	r3, #9
 800b4cc:	d802      	bhi.n	800b4d4 <__hexdig_fun+0xe>
 800b4ce:	3820      	subs	r0, #32
 800b4d0:	b2c0      	uxtb	r0, r0
 800b4d2:	4770      	bx	lr
 800b4d4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b4d8:	2b05      	cmp	r3, #5
 800b4da:	d801      	bhi.n	800b4e0 <__hexdig_fun+0x1a>
 800b4dc:	3847      	subs	r0, #71	@ 0x47
 800b4de:	e7f7      	b.n	800b4d0 <__hexdig_fun+0xa>
 800b4e0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b4e4:	2b05      	cmp	r3, #5
 800b4e6:	d801      	bhi.n	800b4ec <__hexdig_fun+0x26>
 800b4e8:	3827      	subs	r0, #39	@ 0x27
 800b4ea:	e7f1      	b.n	800b4d0 <__hexdig_fun+0xa>
 800b4ec:	2000      	movs	r0, #0
 800b4ee:	4770      	bx	lr

0800b4f0 <__gethex>:
 800b4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4f4:	b085      	sub	sp, #20
 800b4f6:	468a      	mov	sl, r1
 800b4f8:	4690      	mov	r8, r2
 800b4fa:	9302      	str	r3, [sp, #8]
 800b4fc:	680b      	ldr	r3, [r1, #0]
 800b4fe:	9001      	str	r0, [sp, #4]
 800b500:	1c9c      	adds	r4, r3, #2
 800b502:	46a1      	mov	r9, r4
 800b504:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b508:	2830      	cmp	r0, #48	@ 0x30
 800b50a:	d0fa      	beq.n	800b502 <__gethex+0x12>
 800b50c:	eba9 0303 	sub.w	r3, r9, r3
 800b510:	f1a3 0b02 	sub.w	fp, r3, #2
 800b514:	f7ff ffd7 	bl	800b4c6 <__hexdig_fun>
 800b518:	4605      	mov	r5, r0
 800b51a:	2800      	cmp	r0, #0
 800b51c:	d166      	bne.n	800b5ec <__gethex+0xfc>
 800b51e:	2201      	movs	r2, #1
 800b520:	499e      	ldr	r1, [pc, #632]	@ (800b79c <__gethex+0x2ac>)
 800b522:	4648      	mov	r0, r9
 800b524:	f7ff fef1 	bl	800b30a <strncmp>
 800b528:	4607      	mov	r7, r0
 800b52a:	2800      	cmp	r0, #0
 800b52c:	d165      	bne.n	800b5fa <__gethex+0x10a>
 800b52e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b532:	4626      	mov	r6, r4
 800b534:	f7ff ffc7 	bl	800b4c6 <__hexdig_fun>
 800b538:	2800      	cmp	r0, #0
 800b53a:	d060      	beq.n	800b5fe <__gethex+0x10e>
 800b53c:	4623      	mov	r3, r4
 800b53e:	7818      	ldrb	r0, [r3, #0]
 800b540:	4699      	mov	r9, r3
 800b542:	3301      	adds	r3, #1
 800b544:	2830      	cmp	r0, #48	@ 0x30
 800b546:	d0fa      	beq.n	800b53e <__gethex+0x4e>
 800b548:	f7ff ffbd 	bl	800b4c6 <__hexdig_fun>
 800b54c:	fab0 f580 	clz	r5, r0
 800b550:	f04f 0b01 	mov.w	fp, #1
 800b554:	096d      	lsrs	r5, r5, #5
 800b556:	464a      	mov	r2, r9
 800b558:	4616      	mov	r6, r2
 800b55a:	3201      	adds	r2, #1
 800b55c:	7830      	ldrb	r0, [r6, #0]
 800b55e:	f7ff ffb2 	bl	800b4c6 <__hexdig_fun>
 800b562:	2800      	cmp	r0, #0
 800b564:	d1f8      	bne.n	800b558 <__gethex+0x68>
 800b566:	2201      	movs	r2, #1
 800b568:	498c      	ldr	r1, [pc, #560]	@ (800b79c <__gethex+0x2ac>)
 800b56a:	4630      	mov	r0, r6
 800b56c:	f7ff fecd 	bl	800b30a <strncmp>
 800b570:	2800      	cmp	r0, #0
 800b572:	d13e      	bne.n	800b5f2 <__gethex+0x102>
 800b574:	b944      	cbnz	r4, 800b588 <__gethex+0x98>
 800b576:	1c74      	adds	r4, r6, #1
 800b578:	4622      	mov	r2, r4
 800b57a:	4616      	mov	r6, r2
 800b57c:	3201      	adds	r2, #1
 800b57e:	7830      	ldrb	r0, [r6, #0]
 800b580:	f7ff ffa1 	bl	800b4c6 <__hexdig_fun>
 800b584:	2800      	cmp	r0, #0
 800b586:	d1f8      	bne.n	800b57a <__gethex+0x8a>
 800b588:	1ba4      	subs	r4, r4, r6
 800b58a:	00a7      	lsls	r7, r4, #2
 800b58c:	7833      	ldrb	r3, [r6, #0]
 800b58e:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b592:	2b50      	cmp	r3, #80	@ 0x50
 800b594:	d13d      	bne.n	800b612 <__gethex+0x122>
 800b596:	7873      	ldrb	r3, [r6, #1]
 800b598:	2b2b      	cmp	r3, #43	@ 0x2b
 800b59a:	d032      	beq.n	800b602 <__gethex+0x112>
 800b59c:	2b2d      	cmp	r3, #45	@ 0x2d
 800b59e:	d033      	beq.n	800b608 <__gethex+0x118>
 800b5a0:	1c71      	adds	r1, r6, #1
 800b5a2:	2400      	movs	r4, #0
 800b5a4:	7808      	ldrb	r0, [r1, #0]
 800b5a6:	f7ff ff8e 	bl	800b4c6 <__hexdig_fun>
 800b5aa:	1e43      	subs	r3, r0, #1
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	2b18      	cmp	r3, #24
 800b5b0:	d82f      	bhi.n	800b612 <__gethex+0x122>
 800b5b2:	f1a0 0210 	sub.w	r2, r0, #16
 800b5b6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b5ba:	f7ff ff84 	bl	800b4c6 <__hexdig_fun>
 800b5be:	f100 3cff 	add.w	ip, r0, #4294967295
 800b5c2:	230a      	movs	r3, #10
 800b5c4:	fa5f fc8c 	uxtb.w	ip, ip
 800b5c8:	f1bc 0f18 	cmp.w	ip, #24
 800b5cc:	d91e      	bls.n	800b60c <__gethex+0x11c>
 800b5ce:	b104      	cbz	r4, 800b5d2 <__gethex+0xe2>
 800b5d0:	4252      	negs	r2, r2
 800b5d2:	4417      	add	r7, r2
 800b5d4:	f8ca 1000 	str.w	r1, [sl]
 800b5d8:	b1ed      	cbz	r5, 800b616 <__gethex+0x126>
 800b5da:	f1bb 0f00 	cmp.w	fp, #0
 800b5de:	bf0c      	ite	eq
 800b5e0:	2506      	moveq	r5, #6
 800b5e2:	2500      	movne	r5, #0
 800b5e4:	4628      	mov	r0, r5
 800b5e6:	b005      	add	sp, #20
 800b5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ec:	2500      	movs	r5, #0
 800b5ee:	462c      	mov	r4, r5
 800b5f0:	e7b1      	b.n	800b556 <__gethex+0x66>
 800b5f2:	2c00      	cmp	r4, #0
 800b5f4:	d1c8      	bne.n	800b588 <__gethex+0x98>
 800b5f6:	4627      	mov	r7, r4
 800b5f8:	e7c8      	b.n	800b58c <__gethex+0x9c>
 800b5fa:	464e      	mov	r6, r9
 800b5fc:	462f      	mov	r7, r5
 800b5fe:	2501      	movs	r5, #1
 800b600:	e7c4      	b.n	800b58c <__gethex+0x9c>
 800b602:	2400      	movs	r4, #0
 800b604:	1cb1      	adds	r1, r6, #2
 800b606:	e7cd      	b.n	800b5a4 <__gethex+0xb4>
 800b608:	2401      	movs	r4, #1
 800b60a:	e7fb      	b.n	800b604 <__gethex+0x114>
 800b60c:	fb03 0002 	mla	r0, r3, r2, r0
 800b610:	e7cf      	b.n	800b5b2 <__gethex+0xc2>
 800b612:	4631      	mov	r1, r6
 800b614:	e7de      	b.n	800b5d4 <__gethex+0xe4>
 800b616:	eba6 0309 	sub.w	r3, r6, r9
 800b61a:	4629      	mov	r1, r5
 800b61c:	3b01      	subs	r3, #1
 800b61e:	2b07      	cmp	r3, #7
 800b620:	dc0a      	bgt.n	800b638 <__gethex+0x148>
 800b622:	9801      	ldr	r0, [sp, #4]
 800b624:	f7fe f8b0 	bl	8009788 <_Balloc>
 800b628:	4604      	mov	r4, r0
 800b62a:	b940      	cbnz	r0, 800b63e <__gethex+0x14e>
 800b62c:	4b5c      	ldr	r3, [pc, #368]	@ (800b7a0 <__gethex+0x2b0>)
 800b62e:	4602      	mov	r2, r0
 800b630:	21e4      	movs	r1, #228	@ 0xe4
 800b632:	485c      	ldr	r0, [pc, #368]	@ (800b7a4 <__gethex+0x2b4>)
 800b634:	f7ff fec4 	bl	800b3c0 <__assert_func>
 800b638:	3101      	adds	r1, #1
 800b63a:	105b      	asrs	r3, r3, #1
 800b63c:	e7ef      	b.n	800b61e <__gethex+0x12e>
 800b63e:	f100 0a14 	add.w	sl, r0, #20
 800b642:	2300      	movs	r3, #0
 800b644:	4655      	mov	r5, sl
 800b646:	469b      	mov	fp, r3
 800b648:	45b1      	cmp	r9, r6
 800b64a:	d337      	bcc.n	800b6bc <__gethex+0x1cc>
 800b64c:	f845 bb04 	str.w	fp, [r5], #4
 800b650:	eba5 050a 	sub.w	r5, r5, sl
 800b654:	4658      	mov	r0, fp
 800b656:	10ad      	asrs	r5, r5, #2
 800b658:	6125      	str	r5, [r4, #16]
 800b65a:	016d      	lsls	r5, r5, #5
 800b65c:	f7fe f988 	bl	8009970 <__hi0bits>
 800b660:	f8d8 6000 	ldr.w	r6, [r8]
 800b664:	1a2d      	subs	r5, r5, r0
 800b666:	42b5      	cmp	r5, r6
 800b668:	dd54      	ble.n	800b714 <__gethex+0x224>
 800b66a:	1bad      	subs	r5, r5, r6
 800b66c:	4620      	mov	r0, r4
 800b66e:	4629      	mov	r1, r5
 800b670:	f7fe fd25 	bl	800a0be <__any_on>
 800b674:	4681      	mov	r9, r0
 800b676:	b178      	cbz	r0, 800b698 <__gethex+0x1a8>
 800b678:	1e6b      	subs	r3, r5, #1
 800b67a:	f04f 0901 	mov.w	r9, #1
 800b67e:	1159      	asrs	r1, r3, #5
 800b680:	f003 021f 	and.w	r2, r3, #31
 800b684:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b688:	fa09 f202 	lsl.w	r2, r9, r2
 800b68c:	420a      	tst	r2, r1
 800b68e:	d003      	beq.n	800b698 <__gethex+0x1a8>
 800b690:	454b      	cmp	r3, r9
 800b692:	dc36      	bgt.n	800b702 <__gethex+0x212>
 800b694:	f04f 0902 	mov.w	r9, #2
 800b698:	442f      	add	r7, r5
 800b69a:	4629      	mov	r1, r5
 800b69c:	4620      	mov	r0, r4
 800b69e:	f7ff fec1 	bl	800b424 <rshift>
 800b6a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b6a6:	42bb      	cmp	r3, r7
 800b6a8:	da42      	bge.n	800b730 <__gethex+0x240>
 800b6aa:	4621      	mov	r1, r4
 800b6ac:	9801      	ldr	r0, [sp, #4]
 800b6ae:	f7fe f8ab 	bl	8009808 <_Bfree>
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6b6:	25a3      	movs	r5, #163	@ 0xa3
 800b6b8:	6013      	str	r3, [r2, #0]
 800b6ba:	e793      	b.n	800b5e4 <__gethex+0xf4>
 800b6bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b6c0:	2a2e      	cmp	r2, #46	@ 0x2e
 800b6c2:	d012      	beq.n	800b6ea <__gethex+0x1fa>
 800b6c4:	2b20      	cmp	r3, #32
 800b6c6:	d104      	bne.n	800b6d2 <__gethex+0x1e2>
 800b6c8:	f845 bb04 	str.w	fp, [r5], #4
 800b6cc:	f04f 0b00 	mov.w	fp, #0
 800b6d0:	465b      	mov	r3, fp
 800b6d2:	7830      	ldrb	r0, [r6, #0]
 800b6d4:	9303      	str	r3, [sp, #12]
 800b6d6:	f7ff fef6 	bl	800b4c6 <__hexdig_fun>
 800b6da:	9b03      	ldr	r3, [sp, #12]
 800b6dc:	f000 000f 	and.w	r0, r0, #15
 800b6e0:	4098      	lsls	r0, r3
 800b6e2:	3304      	adds	r3, #4
 800b6e4:	ea4b 0b00 	orr.w	fp, fp, r0
 800b6e8:	e7ae      	b.n	800b648 <__gethex+0x158>
 800b6ea:	45b1      	cmp	r9, r6
 800b6ec:	d8ea      	bhi.n	800b6c4 <__gethex+0x1d4>
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	492a      	ldr	r1, [pc, #168]	@ (800b79c <__gethex+0x2ac>)
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	9303      	str	r3, [sp, #12]
 800b6f6:	f7ff fe08 	bl	800b30a <strncmp>
 800b6fa:	9b03      	ldr	r3, [sp, #12]
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	d1e1      	bne.n	800b6c4 <__gethex+0x1d4>
 800b700:	e7a2      	b.n	800b648 <__gethex+0x158>
 800b702:	1ea9      	subs	r1, r5, #2
 800b704:	4620      	mov	r0, r4
 800b706:	f7fe fcda 	bl	800a0be <__any_on>
 800b70a:	2800      	cmp	r0, #0
 800b70c:	d0c2      	beq.n	800b694 <__gethex+0x1a4>
 800b70e:	f04f 0903 	mov.w	r9, #3
 800b712:	e7c1      	b.n	800b698 <__gethex+0x1a8>
 800b714:	da09      	bge.n	800b72a <__gethex+0x23a>
 800b716:	1b75      	subs	r5, r6, r5
 800b718:	4621      	mov	r1, r4
 800b71a:	9801      	ldr	r0, [sp, #4]
 800b71c:	462a      	mov	r2, r5
 800b71e:	1b7f      	subs	r7, r7, r5
 800b720:	f7fe fa8c 	bl	8009c3c <__lshift>
 800b724:	4604      	mov	r4, r0
 800b726:	f100 0a14 	add.w	sl, r0, #20
 800b72a:	f04f 0900 	mov.w	r9, #0
 800b72e:	e7b8      	b.n	800b6a2 <__gethex+0x1b2>
 800b730:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b734:	42bd      	cmp	r5, r7
 800b736:	dd6f      	ble.n	800b818 <__gethex+0x328>
 800b738:	1bed      	subs	r5, r5, r7
 800b73a:	42ae      	cmp	r6, r5
 800b73c:	dc34      	bgt.n	800b7a8 <__gethex+0x2b8>
 800b73e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b742:	2b02      	cmp	r3, #2
 800b744:	d022      	beq.n	800b78c <__gethex+0x29c>
 800b746:	2b03      	cmp	r3, #3
 800b748:	d024      	beq.n	800b794 <__gethex+0x2a4>
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d115      	bne.n	800b77a <__gethex+0x28a>
 800b74e:	42ae      	cmp	r6, r5
 800b750:	d113      	bne.n	800b77a <__gethex+0x28a>
 800b752:	2e01      	cmp	r6, #1
 800b754:	d10b      	bne.n	800b76e <__gethex+0x27e>
 800b756:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b75a:	2562      	movs	r5, #98	@ 0x62
 800b75c:	9a02      	ldr	r2, [sp, #8]
 800b75e:	6013      	str	r3, [r2, #0]
 800b760:	2301      	movs	r3, #1
 800b762:	6123      	str	r3, [r4, #16]
 800b764:	f8ca 3000 	str.w	r3, [sl]
 800b768:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b76a:	601c      	str	r4, [r3, #0]
 800b76c:	e73a      	b.n	800b5e4 <__gethex+0xf4>
 800b76e:	1e71      	subs	r1, r6, #1
 800b770:	4620      	mov	r0, r4
 800b772:	f7fe fca4 	bl	800a0be <__any_on>
 800b776:	2800      	cmp	r0, #0
 800b778:	d1ed      	bne.n	800b756 <__gethex+0x266>
 800b77a:	4621      	mov	r1, r4
 800b77c:	9801      	ldr	r0, [sp, #4]
 800b77e:	f7fe f843 	bl	8009808 <_Bfree>
 800b782:	2300      	movs	r3, #0
 800b784:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b786:	2550      	movs	r5, #80	@ 0x50
 800b788:	6013      	str	r3, [r2, #0]
 800b78a:	e72b      	b.n	800b5e4 <__gethex+0xf4>
 800b78c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d1f3      	bne.n	800b77a <__gethex+0x28a>
 800b792:	e7e0      	b.n	800b756 <__gethex+0x266>
 800b794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b796:	2b00      	cmp	r3, #0
 800b798:	d1dd      	bne.n	800b756 <__gethex+0x266>
 800b79a:	e7ee      	b.n	800b77a <__gethex+0x28a>
 800b79c:	0800c108 	.word	0x0800c108
 800b7a0:	0800bf9d 	.word	0x0800bf9d
 800b7a4:	0800c2b6 	.word	0x0800c2b6
 800b7a8:	1e6f      	subs	r7, r5, #1
 800b7aa:	f1b9 0f00 	cmp.w	r9, #0
 800b7ae:	d130      	bne.n	800b812 <__gethex+0x322>
 800b7b0:	b127      	cbz	r7, 800b7bc <__gethex+0x2cc>
 800b7b2:	4639      	mov	r1, r7
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	f7fe fc82 	bl	800a0be <__any_on>
 800b7ba:	4681      	mov	r9, r0
 800b7bc:	117a      	asrs	r2, r7, #5
 800b7be:	2301      	movs	r3, #1
 800b7c0:	f007 071f 	and.w	r7, r7, #31
 800b7c4:	4629      	mov	r1, r5
 800b7c6:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	40bb      	lsls	r3, r7
 800b7ce:	1b76      	subs	r6, r6, r5
 800b7d0:	2502      	movs	r5, #2
 800b7d2:	4213      	tst	r3, r2
 800b7d4:	bf18      	it	ne
 800b7d6:	f049 0902 	orrne.w	r9, r9, #2
 800b7da:	f7ff fe23 	bl	800b424 <rshift>
 800b7de:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b7e2:	f1b9 0f00 	cmp.w	r9, #0
 800b7e6:	d047      	beq.n	800b878 <__gethex+0x388>
 800b7e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b7ec:	2b02      	cmp	r3, #2
 800b7ee:	d015      	beq.n	800b81c <__gethex+0x32c>
 800b7f0:	2b03      	cmp	r3, #3
 800b7f2:	d017      	beq.n	800b824 <__gethex+0x334>
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d109      	bne.n	800b80c <__gethex+0x31c>
 800b7f8:	f019 0f02 	tst.w	r9, #2
 800b7fc:	d006      	beq.n	800b80c <__gethex+0x31c>
 800b7fe:	f8da 3000 	ldr.w	r3, [sl]
 800b802:	ea49 0903 	orr.w	r9, r9, r3
 800b806:	f019 0f01 	tst.w	r9, #1
 800b80a:	d10e      	bne.n	800b82a <__gethex+0x33a>
 800b80c:	f045 0510 	orr.w	r5, r5, #16
 800b810:	e032      	b.n	800b878 <__gethex+0x388>
 800b812:	f04f 0901 	mov.w	r9, #1
 800b816:	e7d1      	b.n	800b7bc <__gethex+0x2cc>
 800b818:	2501      	movs	r5, #1
 800b81a:	e7e2      	b.n	800b7e2 <__gethex+0x2f2>
 800b81c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b81e:	f1c3 0301 	rsb	r3, r3, #1
 800b822:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b826:	2b00      	cmp	r3, #0
 800b828:	d0f0      	beq.n	800b80c <__gethex+0x31c>
 800b82a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b82e:	f104 0314 	add.w	r3, r4, #20
 800b832:	f04f 0c00 	mov.w	ip, #0
 800b836:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b83a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b83e:	4618      	mov	r0, r3
 800b840:	f853 2b04 	ldr.w	r2, [r3], #4
 800b844:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b848:	d01b      	beq.n	800b882 <__gethex+0x392>
 800b84a:	3201      	adds	r2, #1
 800b84c:	6002      	str	r2, [r0, #0]
 800b84e:	2d02      	cmp	r5, #2
 800b850:	f104 0314 	add.w	r3, r4, #20
 800b854:	d13c      	bne.n	800b8d0 <__gethex+0x3e0>
 800b856:	f8d8 2000 	ldr.w	r2, [r8]
 800b85a:	3a01      	subs	r2, #1
 800b85c:	42b2      	cmp	r2, r6
 800b85e:	d109      	bne.n	800b874 <__gethex+0x384>
 800b860:	1171      	asrs	r1, r6, #5
 800b862:	2201      	movs	r2, #1
 800b864:	f006 061f 	and.w	r6, r6, #31
 800b868:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b86c:	fa02 f606 	lsl.w	r6, r2, r6
 800b870:	421e      	tst	r6, r3
 800b872:	d13a      	bne.n	800b8ea <__gethex+0x3fa>
 800b874:	f045 0520 	orr.w	r5, r5, #32
 800b878:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b87a:	601c      	str	r4, [r3, #0]
 800b87c:	9b02      	ldr	r3, [sp, #8]
 800b87e:	601f      	str	r7, [r3, #0]
 800b880:	e6b0      	b.n	800b5e4 <__gethex+0xf4>
 800b882:	4299      	cmp	r1, r3
 800b884:	f843 cc04 	str.w	ip, [r3, #-4]
 800b888:	d8d9      	bhi.n	800b83e <__gethex+0x34e>
 800b88a:	68a3      	ldr	r3, [r4, #8]
 800b88c:	459b      	cmp	fp, r3
 800b88e:	db17      	blt.n	800b8c0 <__gethex+0x3d0>
 800b890:	6861      	ldr	r1, [r4, #4]
 800b892:	9801      	ldr	r0, [sp, #4]
 800b894:	3101      	adds	r1, #1
 800b896:	f7fd ff77 	bl	8009788 <_Balloc>
 800b89a:	4681      	mov	r9, r0
 800b89c:	b918      	cbnz	r0, 800b8a6 <__gethex+0x3b6>
 800b89e:	4b1a      	ldr	r3, [pc, #104]	@ (800b908 <__gethex+0x418>)
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	2184      	movs	r1, #132	@ 0x84
 800b8a4:	e6c5      	b.n	800b632 <__gethex+0x142>
 800b8a6:	6922      	ldr	r2, [r4, #16]
 800b8a8:	f104 010c 	add.w	r1, r4, #12
 800b8ac:	300c      	adds	r0, #12
 800b8ae:	3202      	adds	r2, #2
 800b8b0:	0092      	lsls	r2, r2, #2
 800b8b2:	f7ff fd6f 	bl	800b394 <memcpy>
 800b8b6:	4621      	mov	r1, r4
 800b8b8:	464c      	mov	r4, r9
 800b8ba:	9801      	ldr	r0, [sp, #4]
 800b8bc:	f7fd ffa4 	bl	8009808 <_Bfree>
 800b8c0:	6923      	ldr	r3, [r4, #16]
 800b8c2:	1c5a      	adds	r2, r3, #1
 800b8c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b8c8:	6122      	str	r2, [r4, #16]
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	615a      	str	r2, [r3, #20]
 800b8ce:	e7be      	b.n	800b84e <__gethex+0x35e>
 800b8d0:	6922      	ldr	r2, [r4, #16]
 800b8d2:	455a      	cmp	r2, fp
 800b8d4:	dd0b      	ble.n	800b8ee <__gethex+0x3fe>
 800b8d6:	2101      	movs	r1, #1
 800b8d8:	4620      	mov	r0, r4
 800b8da:	f7ff fda3 	bl	800b424 <rshift>
 800b8de:	3701      	adds	r7, #1
 800b8e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b8e4:	42bb      	cmp	r3, r7
 800b8e6:	f6ff aee0 	blt.w	800b6aa <__gethex+0x1ba>
 800b8ea:	2501      	movs	r5, #1
 800b8ec:	e7c2      	b.n	800b874 <__gethex+0x384>
 800b8ee:	f016 061f 	ands.w	r6, r6, #31
 800b8f2:	d0fa      	beq.n	800b8ea <__gethex+0x3fa>
 800b8f4:	4453      	add	r3, sl
 800b8f6:	f1c6 0620 	rsb	r6, r6, #32
 800b8fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b8fe:	f7fe f837 	bl	8009970 <__hi0bits>
 800b902:	42b0      	cmp	r0, r6
 800b904:	dbe7      	blt.n	800b8d6 <__gethex+0x3e6>
 800b906:	e7f0      	b.n	800b8ea <__gethex+0x3fa>
 800b908:	0800bf9d 	.word	0x0800bf9d

0800b90c <L_shift>:
 800b90c:	f1c2 0208 	rsb	r2, r2, #8
 800b910:	0092      	lsls	r2, r2, #2
 800b912:	b570      	push	{r4, r5, r6, lr}
 800b914:	f1c2 0620 	rsb	r6, r2, #32
 800b918:	6843      	ldr	r3, [r0, #4]
 800b91a:	6804      	ldr	r4, [r0, #0]
 800b91c:	fa03 f506 	lsl.w	r5, r3, r6
 800b920:	40d3      	lsrs	r3, r2
 800b922:	432c      	orrs	r4, r5
 800b924:	6004      	str	r4, [r0, #0]
 800b926:	f840 3f04 	str.w	r3, [r0, #4]!
 800b92a:	4288      	cmp	r0, r1
 800b92c:	d3f4      	bcc.n	800b918 <L_shift+0xc>
 800b92e:	bd70      	pop	{r4, r5, r6, pc}

0800b930 <__match>:
 800b930:	6803      	ldr	r3, [r0, #0]
 800b932:	3301      	adds	r3, #1
 800b934:	b530      	push	{r4, r5, lr}
 800b936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b93a:	b914      	cbnz	r4, 800b942 <__match+0x12>
 800b93c:	6003      	str	r3, [r0, #0]
 800b93e:	2001      	movs	r0, #1
 800b940:	bd30      	pop	{r4, r5, pc}
 800b942:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b946:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b94a:	2d19      	cmp	r5, #25
 800b94c:	bf98      	it	ls
 800b94e:	3220      	addls	r2, #32
 800b950:	42a2      	cmp	r2, r4
 800b952:	d0f0      	beq.n	800b936 <__match+0x6>
 800b954:	2000      	movs	r0, #0
 800b956:	e7f3      	b.n	800b940 <__match+0x10>

0800b958 <__hexnan>:
 800b958:	680b      	ldr	r3, [r1, #0]
 800b95a:	6801      	ldr	r1, [r0, #0]
 800b95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b960:	115e      	asrs	r6, r3, #5
 800b962:	f013 031f 	ands.w	r3, r3, #31
 800b966:	f04f 0500 	mov.w	r5, #0
 800b96a:	b087      	sub	sp, #28
 800b96c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b970:	4682      	mov	sl, r0
 800b972:	4690      	mov	r8, r2
 800b974:	46ab      	mov	fp, r5
 800b976:	bf18      	it	ne
 800b978:	3604      	addne	r6, #4
 800b97a:	9301      	str	r3, [sp, #4]
 800b97c:	9502      	str	r5, [sp, #8]
 800b97e:	1f37      	subs	r7, r6, #4
 800b980:	f846 5c04 	str.w	r5, [r6, #-4]
 800b984:	46b9      	mov	r9, r7
 800b986:	463c      	mov	r4, r7
 800b988:	1c4b      	adds	r3, r1, #1
 800b98a:	784a      	ldrb	r2, [r1, #1]
 800b98c:	9303      	str	r3, [sp, #12]
 800b98e:	b342      	cbz	r2, 800b9e2 <__hexnan+0x8a>
 800b990:	4610      	mov	r0, r2
 800b992:	9105      	str	r1, [sp, #20]
 800b994:	9204      	str	r2, [sp, #16]
 800b996:	f7ff fd96 	bl	800b4c6 <__hexdig_fun>
 800b99a:	2800      	cmp	r0, #0
 800b99c:	d151      	bne.n	800ba42 <__hexnan+0xea>
 800b99e:	9a04      	ldr	r2, [sp, #16]
 800b9a0:	9905      	ldr	r1, [sp, #20]
 800b9a2:	2a20      	cmp	r2, #32
 800b9a4:	d818      	bhi.n	800b9d8 <__hexnan+0x80>
 800b9a6:	9b02      	ldr	r3, [sp, #8]
 800b9a8:	459b      	cmp	fp, r3
 800b9aa:	dd13      	ble.n	800b9d4 <__hexnan+0x7c>
 800b9ac:	454c      	cmp	r4, r9
 800b9ae:	d206      	bcs.n	800b9be <__hexnan+0x66>
 800b9b0:	2d07      	cmp	r5, #7
 800b9b2:	dc04      	bgt.n	800b9be <__hexnan+0x66>
 800b9b4:	462a      	mov	r2, r5
 800b9b6:	4649      	mov	r1, r9
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f7ff ffa7 	bl	800b90c <L_shift>
 800b9be:	4544      	cmp	r4, r8
 800b9c0:	d951      	bls.n	800ba66 <__hexnan+0x10e>
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	f1a4 0904 	sub.w	r9, r4, #4
 800b9c8:	f8cd b008 	str.w	fp, [sp, #8]
 800b9cc:	f844 3c04 	str.w	r3, [r4, #-4]
 800b9d0:	461d      	mov	r5, r3
 800b9d2:	464c      	mov	r4, r9
 800b9d4:	9903      	ldr	r1, [sp, #12]
 800b9d6:	e7d7      	b.n	800b988 <__hexnan+0x30>
 800b9d8:	2a29      	cmp	r2, #41	@ 0x29
 800b9da:	d156      	bne.n	800ba8a <__hexnan+0x132>
 800b9dc:	3102      	adds	r1, #2
 800b9de:	f8ca 1000 	str.w	r1, [sl]
 800b9e2:	f1bb 0f00 	cmp.w	fp, #0
 800b9e6:	d050      	beq.n	800ba8a <__hexnan+0x132>
 800b9e8:	454c      	cmp	r4, r9
 800b9ea:	d206      	bcs.n	800b9fa <__hexnan+0xa2>
 800b9ec:	2d07      	cmp	r5, #7
 800b9ee:	dc04      	bgt.n	800b9fa <__hexnan+0xa2>
 800b9f0:	462a      	mov	r2, r5
 800b9f2:	4649      	mov	r1, r9
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	f7ff ff89 	bl	800b90c <L_shift>
 800b9fa:	4544      	cmp	r4, r8
 800b9fc:	d935      	bls.n	800ba6a <__hexnan+0x112>
 800b9fe:	f1a8 0204 	sub.w	r2, r8, #4
 800ba02:	4623      	mov	r3, r4
 800ba04:	f853 1b04 	ldr.w	r1, [r3], #4
 800ba08:	429f      	cmp	r7, r3
 800ba0a:	f842 1f04 	str.w	r1, [r2, #4]!
 800ba0e:	d2f9      	bcs.n	800ba04 <__hexnan+0xac>
 800ba10:	1b3b      	subs	r3, r7, r4
 800ba12:	3e03      	subs	r6, #3
 800ba14:	3401      	adds	r4, #1
 800ba16:	2200      	movs	r2, #0
 800ba18:	f023 0303 	bic.w	r3, r3, #3
 800ba1c:	3304      	adds	r3, #4
 800ba1e:	42b4      	cmp	r4, r6
 800ba20:	bf88      	it	hi
 800ba22:	2304      	movhi	r3, #4
 800ba24:	4443      	add	r3, r8
 800ba26:	f843 2b04 	str.w	r2, [r3], #4
 800ba2a:	429f      	cmp	r7, r3
 800ba2c:	d2fb      	bcs.n	800ba26 <__hexnan+0xce>
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	b91b      	cbnz	r3, 800ba3a <__hexnan+0xe2>
 800ba32:	4547      	cmp	r7, r8
 800ba34:	d127      	bne.n	800ba86 <__hexnan+0x12e>
 800ba36:	2301      	movs	r3, #1
 800ba38:	603b      	str	r3, [r7, #0]
 800ba3a:	2005      	movs	r0, #5
 800ba3c:	b007      	add	sp, #28
 800ba3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba42:	3501      	adds	r5, #1
 800ba44:	f10b 0b01 	add.w	fp, fp, #1
 800ba48:	2d08      	cmp	r5, #8
 800ba4a:	dd05      	ble.n	800ba58 <__hexnan+0x100>
 800ba4c:	4544      	cmp	r4, r8
 800ba4e:	d9c1      	bls.n	800b9d4 <__hexnan+0x7c>
 800ba50:	2300      	movs	r3, #0
 800ba52:	3c04      	subs	r4, #4
 800ba54:	2501      	movs	r5, #1
 800ba56:	6023      	str	r3, [r4, #0]
 800ba58:	6822      	ldr	r2, [r4, #0]
 800ba5a:	f000 000f 	and.w	r0, r0, #15
 800ba5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ba62:	6020      	str	r0, [r4, #0]
 800ba64:	e7b6      	b.n	800b9d4 <__hexnan+0x7c>
 800ba66:	2508      	movs	r5, #8
 800ba68:	e7b4      	b.n	800b9d4 <__hexnan+0x7c>
 800ba6a:	9b01      	ldr	r3, [sp, #4]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d0de      	beq.n	800ba2e <__hexnan+0xd6>
 800ba70:	f1c3 0320 	rsb	r3, r3, #32
 800ba74:	f04f 32ff 	mov.w	r2, #4294967295
 800ba78:	40da      	lsrs	r2, r3
 800ba7a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ba7e:	4013      	ands	r3, r2
 800ba80:	f846 3c04 	str.w	r3, [r6, #-4]
 800ba84:	e7d3      	b.n	800ba2e <__hexnan+0xd6>
 800ba86:	3f04      	subs	r7, #4
 800ba88:	e7d1      	b.n	800ba2e <__hexnan+0xd6>
 800ba8a:	2004      	movs	r0, #4
 800ba8c:	e7d6      	b.n	800ba3c <__hexnan+0xe4>

0800ba8e <__ascii_mbtowc>:
 800ba8e:	b082      	sub	sp, #8
 800ba90:	b901      	cbnz	r1, 800ba94 <__ascii_mbtowc+0x6>
 800ba92:	a901      	add	r1, sp, #4
 800ba94:	b142      	cbz	r2, 800baa8 <__ascii_mbtowc+0x1a>
 800ba96:	b14b      	cbz	r3, 800baac <__ascii_mbtowc+0x1e>
 800ba98:	7813      	ldrb	r3, [r2, #0]
 800ba9a:	600b      	str	r3, [r1, #0]
 800ba9c:	7812      	ldrb	r2, [r2, #0]
 800ba9e:	1e10      	subs	r0, r2, #0
 800baa0:	bf18      	it	ne
 800baa2:	2001      	movne	r0, #1
 800baa4:	b002      	add	sp, #8
 800baa6:	4770      	bx	lr
 800baa8:	4610      	mov	r0, r2
 800baaa:	e7fb      	b.n	800baa4 <__ascii_mbtowc+0x16>
 800baac:	f06f 0001 	mvn.w	r0, #1
 800bab0:	e7f8      	b.n	800baa4 <__ascii_mbtowc+0x16>

0800bab2 <_realloc_r>:
 800bab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bab6:	4680      	mov	r8, r0
 800bab8:	4615      	mov	r5, r2
 800baba:	460c      	mov	r4, r1
 800babc:	b921      	cbnz	r1, 800bac8 <_realloc_r+0x16>
 800babe:	4611      	mov	r1, r2
 800bac0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bac4:	f7fd bdd4 	b.w	8009670 <_malloc_r>
 800bac8:	b92a      	cbnz	r2, 800bad6 <_realloc_r+0x24>
 800baca:	f7fd fd5d 	bl	8009588 <_free_r>
 800bace:	2400      	movs	r4, #0
 800bad0:	4620      	mov	r0, r4
 800bad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bad6:	f000 f840 	bl	800bb5a <_malloc_usable_size_r>
 800bada:	4285      	cmp	r5, r0
 800badc:	4606      	mov	r6, r0
 800bade:	d802      	bhi.n	800bae6 <_realloc_r+0x34>
 800bae0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bae4:	d8f4      	bhi.n	800bad0 <_realloc_r+0x1e>
 800bae6:	4629      	mov	r1, r5
 800bae8:	4640      	mov	r0, r8
 800baea:	f7fd fdc1 	bl	8009670 <_malloc_r>
 800baee:	4607      	mov	r7, r0
 800baf0:	2800      	cmp	r0, #0
 800baf2:	d0ec      	beq.n	800bace <_realloc_r+0x1c>
 800baf4:	42b5      	cmp	r5, r6
 800baf6:	462a      	mov	r2, r5
 800baf8:	4621      	mov	r1, r4
 800bafa:	bf28      	it	cs
 800bafc:	4632      	movcs	r2, r6
 800bafe:	f7ff fc49 	bl	800b394 <memcpy>
 800bb02:	4621      	mov	r1, r4
 800bb04:	4640      	mov	r0, r8
 800bb06:	463c      	mov	r4, r7
 800bb08:	f7fd fd3e 	bl	8009588 <_free_r>
 800bb0c:	e7e0      	b.n	800bad0 <_realloc_r+0x1e>

0800bb0e <__ascii_wctomb>:
 800bb0e:	4603      	mov	r3, r0
 800bb10:	4608      	mov	r0, r1
 800bb12:	b141      	cbz	r1, 800bb26 <__ascii_wctomb+0x18>
 800bb14:	2aff      	cmp	r2, #255	@ 0xff
 800bb16:	d904      	bls.n	800bb22 <__ascii_wctomb+0x14>
 800bb18:	228a      	movs	r2, #138	@ 0x8a
 800bb1a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb1e:	601a      	str	r2, [r3, #0]
 800bb20:	4770      	bx	lr
 800bb22:	2001      	movs	r0, #1
 800bb24:	700a      	strb	r2, [r1, #0]
 800bb26:	4770      	bx	lr

0800bb28 <fiprintf>:
 800bb28:	b40e      	push	{r1, r2, r3}
 800bb2a:	b503      	push	{r0, r1, lr}
 800bb2c:	ab03      	add	r3, sp, #12
 800bb2e:	4601      	mov	r1, r0
 800bb30:	4805      	ldr	r0, [pc, #20]	@ (800bb48 <fiprintf+0x20>)
 800bb32:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb36:	6800      	ldr	r0, [r0, #0]
 800bb38:	9301      	str	r3, [sp, #4]
 800bb3a:	f000 f83f 	bl	800bbbc <_vfiprintf_r>
 800bb3e:	b002      	add	sp, #8
 800bb40:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb44:	b003      	add	sp, #12
 800bb46:	4770      	bx	lr
 800bb48:	20000018 	.word	0x20000018

0800bb4c <abort>:
 800bb4c:	2006      	movs	r0, #6
 800bb4e:	b508      	push	{r3, lr}
 800bb50:	f000 f974 	bl	800be3c <raise>
 800bb54:	2001      	movs	r0, #1
 800bb56:	f7f5 ffb6 	bl	8001ac6 <_exit>

0800bb5a <_malloc_usable_size_r>:
 800bb5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb5e:	1f18      	subs	r0, r3, #4
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	bfbc      	itt	lt
 800bb64:	580b      	ldrlt	r3, [r1, r0]
 800bb66:	18c0      	addlt	r0, r0, r3
 800bb68:	4770      	bx	lr

0800bb6a <__sfputc_r>:
 800bb6a:	6893      	ldr	r3, [r2, #8]
 800bb6c:	3b01      	subs	r3, #1
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	6093      	str	r3, [r2, #8]
 800bb72:	b410      	push	{r4}
 800bb74:	da08      	bge.n	800bb88 <__sfputc_r+0x1e>
 800bb76:	6994      	ldr	r4, [r2, #24]
 800bb78:	42a3      	cmp	r3, r4
 800bb7a:	db01      	blt.n	800bb80 <__sfputc_r+0x16>
 800bb7c:	290a      	cmp	r1, #10
 800bb7e:	d103      	bne.n	800bb88 <__sfputc_r+0x1e>
 800bb80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb84:	f7fc bd83 	b.w	800868e <__swbuf_r>
 800bb88:	6813      	ldr	r3, [r2, #0]
 800bb8a:	1c58      	adds	r0, r3, #1
 800bb8c:	6010      	str	r0, [r2, #0]
 800bb8e:	4608      	mov	r0, r1
 800bb90:	7019      	strb	r1, [r3, #0]
 800bb92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <__sfputs_r>:
 800bb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb9a:	4606      	mov	r6, r0
 800bb9c:	460f      	mov	r7, r1
 800bb9e:	4614      	mov	r4, r2
 800bba0:	18d5      	adds	r5, r2, r3
 800bba2:	42ac      	cmp	r4, r5
 800bba4:	d101      	bne.n	800bbaa <__sfputs_r+0x12>
 800bba6:	2000      	movs	r0, #0
 800bba8:	e007      	b.n	800bbba <__sfputs_r+0x22>
 800bbaa:	463a      	mov	r2, r7
 800bbac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	f7ff ffda 	bl	800bb6a <__sfputc_r>
 800bbb6:	1c43      	adds	r3, r0, #1
 800bbb8:	d1f3      	bne.n	800bba2 <__sfputs_r+0xa>
 800bbba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bbbc <_vfiprintf_r>:
 800bbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc0:	460d      	mov	r5, r1
 800bbc2:	b09d      	sub	sp, #116	@ 0x74
 800bbc4:	4614      	mov	r4, r2
 800bbc6:	4698      	mov	r8, r3
 800bbc8:	4606      	mov	r6, r0
 800bbca:	b118      	cbz	r0, 800bbd4 <_vfiprintf_r+0x18>
 800bbcc:	6a03      	ldr	r3, [r0, #32]
 800bbce:	b90b      	cbnz	r3, 800bbd4 <_vfiprintf_r+0x18>
 800bbd0:	f7fc fc66 	bl	80084a0 <__sinit>
 800bbd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbd6:	07d9      	lsls	r1, r3, #31
 800bbd8:	d405      	bmi.n	800bbe6 <_vfiprintf_r+0x2a>
 800bbda:	89ab      	ldrh	r3, [r5, #12]
 800bbdc:	059a      	lsls	r2, r3, #22
 800bbde:	d402      	bmi.n	800bbe6 <_vfiprintf_r+0x2a>
 800bbe0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbe2:	f7fc fe66 	bl	80088b2 <__retarget_lock_acquire_recursive>
 800bbe6:	89ab      	ldrh	r3, [r5, #12]
 800bbe8:	071b      	lsls	r3, r3, #28
 800bbea:	d501      	bpl.n	800bbf0 <_vfiprintf_r+0x34>
 800bbec:	692b      	ldr	r3, [r5, #16]
 800bbee:	b99b      	cbnz	r3, 800bc18 <_vfiprintf_r+0x5c>
 800bbf0:	4629      	mov	r1, r5
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	f7fc fd8a 	bl	800870c <__swsetup_r>
 800bbf8:	b170      	cbz	r0, 800bc18 <_vfiprintf_r+0x5c>
 800bbfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbfc:	07dc      	lsls	r4, r3, #31
 800bbfe:	d504      	bpl.n	800bc0a <_vfiprintf_r+0x4e>
 800bc00:	f04f 30ff 	mov.w	r0, #4294967295
 800bc04:	b01d      	add	sp, #116	@ 0x74
 800bc06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc0a:	89ab      	ldrh	r3, [r5, #12]
 800bc0c:	0598      	lsls	r0, r3, #22
 800bc0e:	d4f7      	bmi.n	800bc00 <_vfiprintf_r+0x44>
 800bc10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc12:	f7fc fe4f 	bl	80088b4 <__retarget_lock_release_recursive>
 800bc16:	e7f3      	b.n	800bc00 <_vfiprintf_r+0x44>
 800bc18:	2300      	movs	r3, #0
 800bc1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc1e:	f04f 0901 	mov.w	r9, #1
 800bc22:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800bdd8 <_vfiprintf_r+0x21c>
 800bc26:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc28:	2320      	movs	r3, #32
 800bc2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc2e:	2330      	movs	r3, #48	@ 0x30
 800bc30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc34:	4623      	mov	r3, r4
 800bc36:	469a      	mov	sl, r3
 800bc38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc3c:	b10a      	cbz	r2, 800bc42 <_vfiprintf_r+0x86>
 800bc3e:	2a25      	cmp	r2, #37	@ 0x25
 800bc40:	d1f9      	bne.n	800bc36 <_vfiprintf_r+0x7a>
 800bc42:	ebba 0b04 	subs.w	fp, sl, r4
 800bc46:	d00b      	beq.n	800bc60 <_vfiprintf_r+0xa4>
 800bc48:	465b      	mov	r3, fp
 800bc4a:	4622      	mov	r2, r4
 800bc4c:	4629      	mov	r1, r5
 800bc4e:	4630      	mov	r0, r6
 800bc50:	f7ff ffa2 	bl	800bb98 <__sfputs_r>
 800bc54:	3001      	adds	r0, #1
 800bc56:	f000 80a7 	beq.w	800bda8 <_vfiprintf_r+0x1ec>
 800bc5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc5c:	445a      	add	r2, fp
 800bc5e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc60:	f89a 3000 	ldrb.w	r3, [sl]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	f000 809f 	beq.w	800bda8 <_vfiprintf_r+0x1ec>
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc70:	f10a 0a01 	add.w	sl, sl, #1
 800bc74:	9304      	str	r3, [sp, #16]
 800bc76:	9307      	str	r3, [sp, #28]
 800bc78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc7c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc82:	4654      	mov	r4, sl
 800bc84:	2205      	movs	r2, #5
 800bc86:	4854      	ldr	r0, [pc, #336]	@ (800bdd8 <_vfiprintf_r+0x21c>)
 800bc88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc8c:	f7fc fe13 	bl	80088b6 <memchr>
 800bc90:	9a04      	ldr	r2, [sp, #16]
 800bc92:	b9d8      	cbnz	r0, 800bccc <_vfiprintf_r+0x110>
 800bc94:	06d1      	lsls	r1, r2, #27
 800bc96:	bf44      	itt	mi
 800bc98:	2320      	movmi	r3, #32
 800bc9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc9e:	0713      	lsls	r3, r2, #28
 800bca0:	bf44      	itt	mi
 800bca2:	232b      	movmi	r3, #43	@ 0x2b
 800bca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bca8:	f89a 3000 	ldrb.w	r3, [sl]
 800bcac:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcae:	d015      	beq.n	800bcdc <_vfiprintf_r+0x120>
 800bcb0:	9a07      	ldr	r2, [sp, #28]
 800bcb2:	4654      	mov	r4, sl
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	f04f 0c0a 	mov.w	ip, #10
 800bcba:	4621      	mov	r1, r4
 800bcbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcc0:	3b30      	subs	r3, #48	@ 0x30
 800bcc2:	2b09      	cmp	r3, #9
 800bcc4:	d94b      	bls.n	800bd5e <_vfiprintf_r+0x1a2>
 800bcc6:	b1b0      	cbz	r0, 800bcf6 <_vfiprintf_r+0x13a>
 800bcc8:	9207      	str	r2, [sp, #28]
 800bcca:	e014      	b.n	800bcf6 <_vfiprintf_r+0x13a>
 800bccc:	eba0 0308 	sub.w	r3, r0, r8
 800bcd0:	46a2      	mov	sl, r4
 800bcd2:	fa09 f303 	lsl.w	r3, r9, r3
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	9304      	str	r3, [sp, #16]
 800bcda:	e7d2      	b.n	800bc82 <_vfiprintf_r+0xc6>
 800bcdc:	9b03      	ldr	r3, [sp, #12]
 800bcde:	1d19      	adds	r1, r3, #4
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	9103      	str	r1, [sp, #12]
 800bce6:	bfbb      	ittet	lt
 800bce8:	425b      	neglt	r3, r3
 800bcea:	f042 0202 	orrlt.w	r2, r2, #2
 800bcee:	9307      	strge	r3, [sp, #28]
 800bcf0:	9307      	strlt	r3, [sp, #28]
 800bcf2:	bfb8      	it	lt
 800bcf4:	9204      	strlt	r2, [sp, #16]
 800bcf6:	7823      	ldrb	r3, [r4, #0]
 800bcf8:	2b2e      	cmp	r3, #46	@ 0x2e
 800bcfa:	d10a      	bne.n	800bd12 <_vfiprintf_r+0x156>
 800bcfc:	7863      	ldrb	r3, [r4, #1]
 800bcfe:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd00:	d132      	bne.n	800bd68 <_vfiprintf_r+0x1ac>
 800bd02:	9b03      	ldr	r3, [sp, #12]
 800bd04:	3402      	adds	r4, #2
 800bd06:	1d1a      	adds	r2, r3, #4
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd0e:	9203      	str	r2, [sp, #12]
 800bd10:	9305      	str	r3, [sp, #20]
 800bd12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bde8 <_vfiprintf_r+0x22c>
 800bd16:	2203      	movs	r2, #3
 800bd18:	7821      	ldrb	r1, [r4, #0]
 800bd1a:	4650      	mov	r0, sl
 800bd1c:	f7fc fdcb 	bl	80088b6 <memchr>
 800bd20:	b138      	cbz	r0, 800bd32 <_vfiprintf_r+0x176>
 800bd22:	eba0 000a 	sub.w	r0, r0, sl
 800bd26:	2240      	movs	r2, #64	@ 0x40
 800bd28:	9b04      	ldr	r3, [sp, #16]
 800bd2a:	3401      	adds	r4, #1
 800bd2c:	4082      	lsls	r2, r0
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	9304      	str	r3, [sp, #16]
 800bd32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd36:	2206      	movs	r2, #6
 800bd38:	4828      	ldr	r0, [pc, #160]	@ (800bddc <_vfiprintf_r+0x220>)
 800bd3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd3e:	f7fc fdba 	bl	80088b6 <memchr>
 800bd42:	2800      	cmp	r0, #0
 800bd44:	d03f      	beq.n	800bdc6 <_vfiprintf_r+0x20a>
 800bd46:	4b26      	ldr	r3, [pc, #152]	@ (800bde0 <_vfiprintf_r+0x224>)
 800bd48:	bb1b      	cbnz	r3, 800bd92 <_vfiprintf_r+0x1d6>
 800bd4a:	9b03      	ldr	r3, [sp, #12]
 800bd4c:	3307      	adds	r3, #7
 800bd4e:	f023 0307 	bic.w	r3, r3, #7
 800bd52:	3308      	adds	r3, #8
 800bd54:	9303      	str	r3, [sp, #12]
 800bd56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd58:	443b      	add	r3, r7
 800bd5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd5c:	e76a      	b.n	800bc34 <_vfiprintf_r+0x78>
 800bd5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd62:	460c      	mov	r4, r1
 800bd64:	2001      	movs	r0, #1
 800bd66:	e7a8      	b.n	800bcba <_vfiprintf_r+0xfe>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	3401      	adds	r4, #1
 800bd6c:	f04f 0c0a 	mov.w	ip, #10
 800bd70:	4619      	mov	r1, r3
 800bd72:	9305      	str	r3, [sp, #20]
 800bd74:	4620      	mov	r0, r4
 800bd76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd7a:	3a30      	subs	r2, #48	@ 0x30
 800bd7c:	2a09      	cmp	r2, #9
 800bd7e:	d903      	bls.n	800bd88 <_vfiprintf_r+0x1cc>
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d0c6      	beq.n	800bd12 <_vfiprintf_r+0x156>
 800bd84:	9105      	str	r1, [sp, #20]
 800bd86:	e7c4      	b.n	800bd12 <_vfiprintf_r+0x156>
 800bd88:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd8c:	4604      	mov	r4, r0
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e7f0      	b.n	800bd74 <_vfiprintf_r+0x1b8>
 800bd92:	ab03      	add	r3, sp, #12
 800bd94:	462a      	mov	r2, r5
 800bd96:	a904      	add	r1, sp, #16
 800bd98:	4630      	mov	r0, r6
 800bd9a:	9300      	str	r3, [sp, #0]
 800bd9c:	4b11      	ldr	r3, [pc, #68]	@ (800bde4 <_vfiprintf_r+0x228>)
 800bd9e:	f7fb fd25 	bl	80077ec <_printf_float>
 800bda2:	4607      	mov	r7, r0
 800bda4:	1c78      	adds	r0, r7, #1
 800bda6:	d1d6      	bne.n	800bd56 <_vfiprintf_r+0x19a>
 800bda8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdaa:	07d9      	lsls	r1, r3, #31
 800bdac:	d405      	bmi.n	800bdba <_vfiprintf_r+0x1fe>
 800bdae:	89ab      	ldrh	r3, [r5, #12]
 800bdb0:	059a      	lsls	r2, r3, #22
 800bdb2:	d402      	bmi.n	800bdba <_vfiprintf_r+0x1fe>
 800bdb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bdb6:	f7fc fd7d 	bl	80088b4 <__retarget_lock_release_recursive>
 800bdba:	89ab      	ldrh	r3, [r5, #12]
 800bdbc:	065b      	lsls	r3, r3, #25
 800bdbe:	f53f af1f 	bmi.w	800bc00 <_vfiprintf_r+0x44>
 800bdc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bdc4:	e71e      	b.n	800bc04 <_vfiprintf_r+0x48>
 800bdc6:	ab03      	add	r3, sp, #12
 800bdc8:	462a      	mov	r2, r5
 800bdca:	a904      	add	r1, sp, #16
 800bdcc:	4630      	mov	r0, r6
 800bdce:	9300      	str	r3, [sp, #0]
 800bdd0:	4b04      	ldr	r3, [pc, #16]	@ (800bde4 <_vfiprintf_r+0x228>)
 800bdd2:	f7fb ffa7 	bl	8007d24 <_printf_i>
 800bdd6:	e7e4      	b.n	800bda2 <_vfiprintf_r+0x1e6>
 800bdd8:	0800c261 	.word	0x0800c261
 800bddc:	0800c26b 	.word	0x0800c26b
 800bde0:	080077ed 	.word	0x080077ed
 800bde4:	0800bb99 	.word	0x0800bb99
 800bde8:	0800c267 	.word	0x0800c267

0800bdec <_raise_r>:
 800bdec:	291f      	cmp	r1, #31
 800bdee:	b538      	push	{r3, r4, r5, lr}
 800bdf0:	4605      	mov	r5, r0
 800bdf2:	460c      	mov	r4, r1
 800bdf4:	d904      	bls.n	800be00 <_raise_r+0x14>
 800bdf6:	2316      	movs	r3, #22
 800bdf8:	6003      	str	r3, [r0, #0]
 800bdfa:	f04f 30ff 	mov.w	r0, #4294967295
 800bdfe:	bd38      	pop	{r3, r4, r5, pc}
 800be00:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800be02:	b112      	cbz	r2, 800be0a <_raise_r+0x1e>
 800be04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be08:	b94b      	cbnz	r3, 800be1e <_raise_r+0x32>
 800be0a:	4628      	mov	r0, r5
 800be0c:	f000 f830 	bl	800be70 <_getpid_r>
 800be10:	4622      	mov	r2, r4
 800be12:	4601      	mov	r1, r0
 800be14:	4628      	mov	r0, r5
 800be16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be1a:	f000 b817 	b.w	800be4c <_kill_r>
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d00a      	beq.n	800be38 <_raise_r+0x4c>
 800be22:	1c59      	adds	r1, r3, #1
 800be24:	d103      	bne.n	800be2e <_raise_r+0x42>
 800be26:	2316      	movs	r3, #22
 800be28:	6003      	str	r3, [r0, #0]
 800be2a:	2001      	movs	r0, #1
 800be2c:	e7e7      	b.n	800bdfe <_raise_r+0x12>
 800be2e:	2100      	movs	r1, #0
 800be30:	4620      	mov	r0, r4
 800be32:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800be36:	4798      	blx	r3
 800be38:	2000      	movs	r0, #0
 800be3a:	e7e0      	b.n	800bdfe <_raise_r+0x12>

0800be3c <raise>:
 800be3c:	4b02      	ldr	r3, [pc, #8]	@ (800be48 <raise+0xc>)
 800be3e:	4601      	mov	r1, r0
 800be40:	6818      	ldr	r0, [r3, #0]
 800be42:	f7ff bfd3 	b.w	800bdec <_raise_r>
 800be46:	bf00      	nop
 800be48:	20000018 	.word	0x20000018

0800be4c <_kill_r>:
 800be4c:	b538      	push	{r3, r4, r5, lr}
 800be4e:	2300      	movs	r3, #0
 800be50:	4d06      	ldr	r5, [pc, #24]	@ (800be6c <_kill_r+0x20>)
 800be52:	4604      	mov	r4, r0
 800be54:	4608      	mov	r0, r1
 800be56:	4611      	mov	r1, r2
 800be58:	602b      	str	r3, [r5, #0]
 800be5a:	f7f5 fe24 	bl	8001aa6 <_kill>
 800be5e:	1c43      	adds	r3, r0, #1
 800be60:	d102      	bne.n	800be68 <_kill_r+0x1c>
 800be62:	682b      	ldr	r3, [r5, #0]
 800be64:	b103      	cbz	r3, 800be68 <_kill_r+0x1c>
 800be66:	6023      	str	r3, [r4, #0]
 800be68:	bd38      	pop	{r3, r4, r5, pc}
 800be6a:	bf00      	nop
 800be6c:	20000648 	.word	0x20000648

0800be70 <_getpid_r>:
 800be70:	f7f5 be11 	b.w	8001a96 <_getpid>

0800be74 <_init>:
 800be74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be76:	bf00      	nop
 800be78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be7a:	bc08      	pop	{r3}
 800be7c:	469e      	mov	lr, r3
 800be7e:	4770      	bx	lr

0800be80 <_fini>:
 800be80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be82:	bf00      	nop
 800be84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be86:	bc08      	pop	{r3}
 800be88:	469e      	mov	lr, r3
 800be8a:	4770      	bx	lr
